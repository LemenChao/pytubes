/* Generated by Cython 0.27.3 */

/* BEGIN: Cython Metadata
{
    "distutils": {
        "depends": [
            "../src/iter.hpp",
            "../src/iters/filemap.hpp",
            "../src/util/pyobj.hpp",
            "/Users/stephenstagg/Dropbox/src/tubes/cpp2/src/iters/chain.hpp",
            "/Users/stephenstagg/Dropbox/src/tubes/cpp2/src/iters/compare.hpp",
            "/Users/stephenstagg/Dropbox/src/tubes/cpp2/src/iters/convert.hpp",
            "/Users/stephenstagg/Dropbox/src/tubes/cpp2/src/iters/count.hpp",
            "/Users/stephenstagg/Dropbox/src/tubes/cpp2/src/iters/each.hpp",
            "/Users/stephenstagg/Dropbox/src/tubes/cpp2/src/iters/filemap.hpp",
            "/Users/stephenstagg/Dropbox/src/tubes/cpp2/src/iters/fileread.hpp",
            "/Users/stephenstagg/Dropbox/src/tubes/cpp2/src/iters/first.hpp",
            "/Users/stephenstagg/Dropbox/src/tubes/cpp2/src/iters/get.hpp",
            "/Users/stephenstagg/Dropbox/src/tubes/cpp2/src/iters/gunzip.hpp",
            "/Users/stephenstagg/Dropbox/src/tubes/cpp2/src/iters/json.hpp",
            "/Users/stephenstagg/Dropbox/src/tubes/cpp2/src/iters/multi.hpp",
            "/Users/stephenstagg/Dropbox/src/tubes/cpp2/src/iters/skip.hpp",
            "/Users/stephenstagg/Dropbox/src/tubes/cpp2/src/iters/skip_unless.hpp",
            "/Users/stephenstagg/Dropbox/src/tubes/cpp2/src/iters/split.hpp",
            "/Users/stephenstagg/Dropbox/src/tubes/cpp2/src/iters/topy.hpp",
            "/Users/stephenstagg/Dropbox/src/tubes/cpp2/src/iters/zip.hpp"
        ],
        "extra_compile_args": [
            "-std=c++1z",
            "-g",
            "-O3"
        ],
        "extra_link_args": [
            "-std=c++1z",
            "-g"
        ],
        "include_dirs": [
            ".",
            "../vendor"
        ],
        "language": "c++",
        "name": "tubes",
        "sources": [
            "tubes.pyx"
        ]
    },
    "module_name": "tubes"
}
END: Cython Metadata */

#define PY_SSIZE_T_CLEAN
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02060000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03030000)
    #error Cython requires Python 2.6+ or Python 3.3+.
#else
#define CYTHON_ABI "0_27_3"
#define CYTHON_FUTURE_DIVISION 1
#include <stddef.h>
#ifndef offsetof
  #define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#define __PYX_COMMA ,
#ifndef HAVE_LONG_LONG
  #if PY_VERSION_HEX >= 0x02070000
    #define HAVE_LONG_LONG
  #endif
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
  #define CYTHON_COMPILING_IN_PYPY 1
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #if PY_VERSION_HEX < 0x03050000
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #undef CYTHON_AVOID_BORROWED_REFS
  #define CYTHON_AVOID_BORROWED_REFS 1
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
#elif defined(PYSTON_VERSION)
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 1
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #undef CYTHON_USE_ASYNC_SLOTS
  #define CYTHON_USE_ASYNC_SLOTS 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
#else
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 1
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYTYPE_LOOKUP
    #define CYTHON_USE_PYTYPE_LOOKUP 0
  #elif !defined(CYTHON_USE_PYTYPE_LOOKUP)
    #define CYTHON_USE_PYTYPE_LOOKUP 1
  #endif
  #if PY_MAJOR_VERSION < 3
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYLONG_INTERNALS
    #define CYTHON_USE_PYLONG_INTERNALS 0
  #elif !defined(CYTHON_USE_PYLONG_INTERNALS)
    #define CYTHON_USE_PYLONG_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_PYLIST_INTERNALS
    #define CYTHON_USE_PYLIST_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #if PY_VERSION_HEX < 0x030300F0
    #undef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 0
  #elif !defined(CYTHON_USE_UNICODE_WRITER)
    #define CYTHON_USE_UNICODE_WRITER 1
  #endif
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #ifndef CYTHON_FAST_THREAD_STATE
    #define CYTHON_FAST_THREAD_STATE 1
  #endif
  #ifndef CYTHON_FAST_PYCALL
    #define CYTHON_FAST_PYCALL 1
  #endif
  #ifndef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT (0 && PY_VERSION_HEX >= 0x03050000)
  #endif
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE (PY_VERSION_HEX >= 0x030400a1)
  #endif
#endif
#if !defined(CYTHON_FAST_PYCCALL)
#define CYTHON_FAST_PYCCALL  (CYTHON_FAST_PYCALL && PY_VERSION_HEX >= 0x030600B1)
#endif
#if CYTHON_USE_PYLONG_INTERNALS
  #include "longintrepr.h"
  #undef SHIFT
  #undef BASE
  #undef MASK
#endif
#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x02070600 && !defined(Py_OptimizeFlag)
  #define Py_OptimizeFlag 0
#endif
#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyClass_Type
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyType_Type
#endif
#ifndef Py_TPFLAGS_CHECKTYPES
  #define Py_TPFLAGS_CHECKTYPES 0
#endif
#ifndef Py_TPFLAGS_HAVE_INDEX
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#ifndef Py_TPFLAGS_HAVE_NEWBUFFER
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#ifndef Py_TPFLAGS_HAVE_FINALIZE
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#if PY_VERSION_HEX < 0x030700A0 || !defined(METH_FASTCALL)
  #ifndef METH_FASTCALL
     #define METH_FASTCALL 0x80
  #endif
  typedef PyObject *(*__Pyx_PyCFunctionFast) (PyObject *self, PyObject **args, Py_ssize_t nargs);
  typedef PyObject *(*__Pyx_PyCFunctionFastWithKeywords) (PyObject *self, PyObject **args,
                                                          Py_ssize_t nargs, PyObject *kwnames);
#else
  #define __Pyx_PyCFunctionFast _PyCFunctionFast
  #define __Pyx_PyCFunctionFastWithKeywords _PyCFunctionFastWithKeywords
#endif
#if CYTHON_FAST_PYCCALL
#define __Pyx_PyFastCFunction_Check(func)\
    ((PyCFunction_Check(func) && (METH_FASTCALL == (PyCFunction_GET_FLAGS(func) & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS)))))
#else
#define __Pyx_PyFastCFunction_Check(func) 0
#endif
#if !CYTHON_FAST_THREAD_STATE || PY_VERSION_HEX < 0x02070000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#elif PY_VERSION_HEX >= 0x03060000
  #define __Pyx_PyThreadState_Current _PyThreadState_UncheckedGet()
#elif PY_VERSION_HEX >= 0x03000000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#else
  #define __Pyx_PyThreadState_Current _PyThreadState_Current
#endif
#if CYTHON_COMPILING_IN_CPYTHON || defined(_PyDict_NewPresized)
#define __Pyx_PyDict_NewPresized(n)  ((n <= 8) ? PyDict_New() : _PyDict_NewPresized(n))
#else
#define __Pyx_PyDict_NewPresized(n)  PyDict_New()
#endif
#if PY_MAJOR_VERSION >= 3 || CYTHON_FUTURE_DIVISION
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif
#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\
                                              0 : _PyUnicode_Ready((PyObject *)(op)))
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   PyUnicode_MAX_CHAR_VALUE(u)
  #define __Pyx_PyUnicode_KIND(u)         PyUnicode_KIND(u)
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  PyUnicode_WRITE(k, d, i, ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : PyUnicode_GET_SIZE(u)))
#else
  #define CYTHON_PEP393_ENABLED 0
  #define PyUnicode_1BYTE_KIND  1
  #define PyUnicode_2BYTE_KIND  2
  #define PyUnicode_4BYTE_KIND  4
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((sizeof(Py_UNICODE) == 2) ? 65535 : 1114111)
  #define __Pyx_PyUnicode_KIND(u)         (sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  (((void)(k)), ((Py_UNICODE*)d)[i] = ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_SIZE(u))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyUnicode_Contains)
  #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyByteArray_Check)
  #define PyByteArray_Check(obj)  PyObject_TypeCheck(obj, &PyByteArray_Type)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Format)
  #define PyObject_Format(obj, fmt)  PyObject_CallMethod(obj, "__format__", "O", fmt)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Malloc)
  #define PyObject_Malloc(s)   PyMem_Malloc(s)
  #define PyObject_Free(p)     PyMem_Free(p)
  #define PyObject_Realloc(p)  PyMem_Realloc(p)
#endif
#if CYTHON_COMPILING_IN_PYSTON
  #define __Pyx_PyCode_HasFreeVars(co)  PyCode_HasFreeVars(co)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno) PyFrame_SetLineNumber(frame, lineno)
#else
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)  (frame)->f_lineno = (lineno)
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None)) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None)) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION < 3 && !defined(PyObject_ASCII)
  #define PyObject_ASCII(o)            PyObject_Repr(o)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif
#define __Pyx_PyException_Check(obj) __Pyx_TypeCheck(obj, PyExc_Exception)
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   PyInt_AsLong
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   PyInt_AsSsize_t
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyMethod_New(func, self, klass) ((self) ? PyMethod_New(func, self) : PyInstanceMethod_New(func))
#else
  #define __Pyx_PyMethod_New(func, self, klass) PyMethod_New(func, self, klass)
#endif
#ifndef __has_attribute
  #define __has_attribute(x) 0
#endif
#ifndef __has_cpp_attribute
  #define __has_cpp_attribute(x) 0
#endif
#if CYTHON_USE_ASYNC_SLOTS
  #if PY_VERSION_HEX >= 0x030500B1
    #define __Pyx_PyAsyncMethodsStruct PyAsyncMethods
    #define __Pyx_PyType_AsAsync(obj) (Py_TYPE(obj)->tp_as_async)
  #else
    #define __Pyx_PyType_AsAsync(obj) ((__Pyx_PyAsyncMethodsStruct*) (Py_TYPE(obj)->tp_reserved))
  #endif
#else
  #define __Pyx_PyType_AsAsync(obj) NULL
#endif
#ifndef __Pyx_PyAsyncMethodsStruct
    typedef struct {
        unaryfunc am_await;
        unaryfunc am_aiter;
        unaryfunc am_anext;
    } __Pyx_PyAsyncMethodsStruct;
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_MAYBE_UNUSED_VAR
#  if defined(__cplusplus)
     template<class T> void CYTHON_MAYBE_UNUSED_VAR( const T& ) { }
#  else
#    define CYTHON_MAYBE_UNUSED_VAR(x) (void)(x)
#  endif
#endif
#ifndef CYTHON_NCP_UNUSED
# if CYTHON_COMPILING_IN_CPYTHON
#  define CYTHON_NCP_UNUSED
# else
#  define CYTHON_NCP_UNUSED CYTHON_UNUSED
# endif
#endif
#define __Pyx_void_to_None(void_result) ((void)(void_result), Py_INCREF(Py_None), Py_None)
#ifdef _MSC_VER
    #ifndef _MSC_STDINT_H_
        #if _MSC_VER < 1300
           typedef unsigned char     uint8_t;
           typedef unsigned int      uint32_t;
        #else
           typedef unsigned __int8   uint8_t;
           typedef unsigned __int32  uint32_t;
        #endif
    #endif
#else
   #include <stdint.h>
#endif
#ifndef CYTHON_FALLTHROUGH
  #if defined(__cplusplus) && __cplusplus >= 201103L
    #if __has_cpp_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH [[fallthrough]]
    #elif __has_cpp_attribute(clang::fallthrough)
      #define CYTHON_FALLTHROUGH [[clang::fallthrough]]
    #elif __has_cpp_attribute(gnu::fallthrough)
      #define CYTHON_FALLTHROUGH [[gnu::fallthrough]]
    #endif
  #endif
  #ifndef CYTHON_FALLTHROUGH
    #if __has_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH __attribute__((fallthrough))
    #else
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
  #if defined(__clang__ ) && defined(__apple_build_version__)
    #if __apple_build_version__ < 7000000
      #undef  CYTHON_FALLTHROUGH
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
#endif

#ifndef __cplusplus
  #error "Cython files generated with the C++ option must be compiled with a C++ compiler."
#endif
#ifndef CYTHON_INLINE
  #if defined(__clang__)
    #define CYTHON_INLINE __inline__ __attribute__ ((__unused__))
  #else
    #define CYTHON_INLINE inline
  #endif
#endif
template<typename T>
void __Pyx_call_destructor(T& x) {
    x.~T();
}
template<typename T>
class __Pyx_FakeReference {
  public:
    __Pyx_FakeReference() : ptr(NULL) { }
    __Pyx_FakeReference(const T& ref) : ptr(const_cast<T*>(&ref)) { }
    T *operator->() { return ptr; }
    T *operator&() { return ptr; }
    operator T&() { return *ptr; }
    template<typename U> bool operator ==(U other) { return *ptr == other; }
    template<typename U> bool operator !=(U other) { return *ptr != other; }
  private:
    T *ptr;
};

#if defined(WIN32) || defined(MS_WINDOWS)
  #define _USE_MATH_DEFINES
#endif
#include <math.h>
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif
#if defined(__CYGWIN__) && defined(_LDBL_EQ_DBL)
#define __Pyx_truncl trunc
#else
#define __Pyx_truncl truncl
#endif


#define __PYX_ERR(f_index, lineno, Ln_error) \
{ \
  __pyx_filename = __pyx_f[f_index]; __pyx_lineno = lineno; __pyx_clineno = __LINE__; goto Ln_error; \
}

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#define __PYX_HAVE__tubes
#define __PYX_HAVE_API__tubes
#include "../src/iters/filemap.hpp"
#include <vector>
#include "ios"
#include "new"
#include "stdexcept"
#include "typeinfo"
#include <string.h>
#include <stdio.h>
#include "../src/iter.hpp"
#include "../src/util/pyobj.hpp"
#include <stdint.h>
#include <string>
#include "/Users/stephenstagg/Dropbox/src/tubes/cpp2/src/iters/get.hpp"
#include "/Users/stephenstagg/Dropbox/src/tubes/cpp2/src/iters/compare.hpp"
#include "/Users/stephenstagg/Dropbox/src/tubes/cpp2/src/iters/split.hpp"
#include "/Users/stephenstagg/Dropbox/src/tubes/cpp2/src/iters/convert.hpp"
#include "/Users/stephenstagg/Dropbox/src/tubes/cpp2/src/iters/each.hpp"
#include "/Users/stephenstagg/Dropbox/src/tubes/cpp2/src/iters/zip.hpp"
#include "/Users/stephenstagg/Dropbox/src/tubes/cpp2/src/iters/multi.hpp"
#include "/Users/stephenstagg/Dropbox/src/tubes/cpp2/src/iters/json.hpp"
#include "/Users/stephenstagg/Dropbox/src/tubes/cpp2/src/iters/topy.hpp"
#include "/Users/stephenstagg/Dropbox/src/tubes/cpp2/src/iters/skip_unless.hpp"
#include "/Users/stephenstagg/Dropbox/src/tubes/cpp2/src/iters/fileread.hpp"
#include "/Users/stephenstagg/Dropbox/src/tubes/cpp2/src/iters/chain.hpp"
#include "/Users/stephenstagg/Dropbox/src/tubes/cpp2/src/iters/skip.hpp"
#include "/Users/stephenstagg/Dropbox/src/tubes/cpp2/src/iters/filemap.hpp"
#include "/Users/stephenstagg/Dropbox/src/tubes/cpp2/src/iters/gunzip.hpp"
#include "/Users/stephenstagg/Dropbox/src/tubes/cpp2/src/iters/count.hpp"
#include "/Users/stephenstagg/Dropbox/src/tubes/cpp2/src/iters/first.hpp"
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#if defined(PYREX_WITHOUT_ASSERTIONS) && !defined(CYTHON_WITHOUT_ASSERTIONS)
#define CYTHON_WITHOUT_ASSERTIONS
#endif

typedef struct {PyObject **p; const char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT 0
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_uchar_cast(c) ((unsigned char)c)
#define __Pyx_long_cast(x) ((long)x)
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (\
    (sizeof(type) < sizeof(Py_ssize_t))  ||\
    (sizeof(type) > sizeof(Py_ssize_t) &&\
          likely(v < (type)PY_SSIZE_T_MAX ||\
                 v == (type)PY_SSIZE_T_MAX)  &&\
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||\
                                v == (type)PY_SSIZE_T_MIN)))  ||\
    (sizeof(type) == sizeof(Py_ssize_t) &&\
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||\
                               v == (type)PY_SSIZE_T_MAX)))  )
#if defined (__cplusplus) && __cplusplus >= 201103L
    #include <cstdlib>
    #define __Pyx_sst_abs(value) std::abs(value)
#elif SIZEOF_INT >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) abs(value)
#elif SIZEOF_LONG >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) labs(value)
#elif defined (_MSC_VER)
    #define __Pyx_sst_abs(value) ((Py_ssize_t)_abs64(value))
#elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define __Pyx_sst_abs(value) llabs(value)
#elif defined (__GNUC__)
    #define __Pyx_sst_abs(value) __builtin_llabs(value)
#else
    #define __Pyx_sst_abs(value) ((value<0) ? -value : value)
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
#define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyBytes_AsWritableString(s)     ((char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableSString(s)    ((signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableUString(s)    ((unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsString(s)     ((const char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsSString(s)    ((const signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsUString(s)    ((const unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyObject_AsWritableString(s)    ((char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableSString(s)    ((signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableUString(s)    ((unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsSString(s)    ((const signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((const unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u) {
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_NewRef(obj) (Py_INCREF(obj), obj)
#define __Pyx_Owned_Py_None(b) __Pyx_NewRef(Py_None)
#define __Pyx_PyBool_FromLong(b) ((b) ? __Pyx_NewRef(Py_True) : __Pyx_NewRef(Py_False))
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x);
#define __Pyx_PySequence_Tuple(obj)\
    (likely(PyTuple_CheckExact(obj)) ? __Pyx_NewRef(obj) : PySequence_Tuple(obj))
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
#if CYTHON_ASSUME_SAFE_MACROS
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyNumber_Int(x) (PyLong_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Long(x))
#else
#define __Pyx_PyNumber_Int(x) (PyInt_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Int(x))
#endif
#define __Pyx_PyNumber_Float(x) (PyFloat_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Float(x))
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c));
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */
static CYTHON_INLINE void __Pyx_pretend_to_initialize(void* ptr) { (void)ptr; }

static PyObject *__pyx_m = NULL;
static PyObject *__pyx_d;
static PyObject *__pyx_b;
static PyObject *__pyx_cython_runtime;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static PyObject *__pyx_empty_unicode;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;


static const char *__pyx_f[] = {
  "tubes.pyx",
  "stringsource",
  "pyiter.pxi",
  "iter_defs.pxi",
  "iter.pxi",
  "chunk.pxi",
  "type.pxd",
};

/*--- Type declarations ---*/
struct __pyx_obj_5tubes_IterWrapper;
struct __pyx_obj_5tubes_DType;
struct __pyx_obj_5tubes_TubeIter;
struct __pyx_obj_5tubes_TubeSingleIter;
struct __pyx_obj_5tubes_TubeMultiIter;
struct __pyx_obj_5tubes_Chains;
struct __pyx_obj_5tubes_Tube;
struct __pyx_obj_5tubes_Each;
struct __pyx_obj_5tubes_Zip;
struct __pyx_obj_5tubes_SlotGet;
struct __pyx_obj_5tubes_NameLookup;
struct __pyx_obj_5tubes_Multi;
struct __pyx_obj_5tubes_JsonParse;
struct __pyx_obj_5tubes_ToPy;
struct __pyx_obj_5tubes_SkipUnless;
struct __pyx_obj_5tubes_ReadFile;
struct __pyx_obj_5tubes_ChainTubes;
struct __pyx_obj_5tubes_Skip;
struct __pyx_obj_5tubes_FileMap;
struct __pyx_obj_5tubes_Gunzip;
struct __pyx_obj_5tubes_Count;
struct __pyx_obj_5tubes_Compare;
struct __pyx_obj_5tubes_First;
struct __pyx_obj_5tubes_Split;
struct __pyx_obj_5tubes_Convert;
struct __pyx_obj_5tubes_Chunk;
struct __pyx_obj_5tubes___pyx_scope_struct____next__;
struct __pyx_obj_5tubes___pyx_scope_struct_1_genexpr;
struct __pyx_obj_5tubes___pyx_scope_struct_2_ordered;
struct __pyx_obj_5tubes___pyx_scope_struct_3___pyx_lambda_funcdef_lambda1;
struct __pyx_obj_5tubes___pyx_scope_struct_4_genexpr;
struct __pyx_obj_5tubes___pyx_scope_struct_5___get__;
struct __pyx_obj_5tubes___pyx_scope_struct_6_genexpr;
struct __pyx_obj_5tubes___pyx_scope_struct_7___get__;
struct __pyx_obj_5tubes___pyx_scope_struct_8_genexpr;
struct __pyx_obj_5tubes___pyx_scope_struct_9___get__;
struct __pyx_obj_5tubes___pyx_scope_struct_10_genexpr;
struct __pyx_opt_args_5tubes_6Chains_make_chains_iters;
struct __pyx_opt_args_5tubes_4Tube__repr;

/* "pyiter.pxi":90
 *             seen.update(chain)
 * 
 *     cdef make_chains_iters(self, modifiers=None):             # <<<<<<<<<<<<<<
 *         cdef Tube tube
 *         self.verify()
 */
struct __pyx_opt_args_5tubes_6Chains_make_chains_iters {
  int __pyx_n;
  PyObject *modifiers;
};

/* "tubes.pyx":96
 *         return TubeMultiIter(made_iters[self], list(made_iters.values()), made_chains[None, self], len(self.dtype))
 * 
 *     cdef _repr(self, stop=None):             # <<<<<<<<<<<<<<
 *         cdef Tube tube_input
 *         if stop is None:
 */
struct __pyx_opt_args_5tubes_4Tube__repr {
  int __pyx_n;
  PyObject *stop;
};

/* "iter.pxi":39
 * 
 * 
 * cdef class IterWrapper:             # <<<<<<<<<<<<<<
 *     cdef AnyIter iter
 * 
 */
struct __pyx_obj_5tubes_IterWrapper {
  PyObject_HEAD
  ss::iter::AnyIter iter;
};


/* "tubes.pyx":23
 * 
 * 
 * cdef class DType:             # <<<<<<<<<<<<<<
 *     cdef scalar_type.ScalarType type
 *     cdef readonly str name
 */
struct __pyx_obj_5tubes_DType {
  PyObject_HEAD
  ss::iter::ScalarType type;
  PyObject *name;
};


/* "pyiter.pxi":13
 * 
 * 
 * cdef class TubeIter:             # <<<<<<<<<<<<<<
 *     cdef ToPyIter *output
 *     cdef list iters # reference kept here to enusure the iters live long enough
 */
struct __pyx_obj_5tubes_TubeIter {
  PyObject_HEAD
  ss::iter::ToPyIter *output;
  PyObject *iters;
  struct ss::iter::Chain chain;
};


/* "pyiter.pxi":24
 * 
 * 
 * cdef class TubeSingleIter(TubeIter):             # <<<<<<<<<<<<<<
 * 
 *     def __next__(self):
 */
struct __pyx_obj_5tubes_TubeSingleIter {
  struct __pyx_obj_5tubes_TubeIter __pyx_base;
};


/* "pyiter.pxi":33
 * 
 * 
 * cdef class TubeMultiIter(TubeIter):             # <<<<<<<<<<<<<<
 *     cdef size_t num_slots
 * 
 */
struct __pyx_obj_5tubes_TubeMultiIter {
  struct __pyx_obj_5tubes_TubeIter __pyx_base;
  size_t num_slots;
};


/* "pyiter.pxi":45
 * 
 * 
 * cdef class Chains:             # <<<<<<<<<<<<<<
 *     cdef public Tube output
 *     cdef public dict chains
 */
struct __pyx_obj_5tubes_Chains {
  PyObject_HEAD
  struct __pyx_vtabstruct_5tubes_Chains *__pyx_vtab;
  struct __pyx_obj_5tubes_Tube *output;
  PyObject *chains;
  PyObject *ordering;
  PyObject *inputs;
};


/* "tubes.pyx":63
 * include "pyiter.pxi"
 * 
 * cdef class Tube:             # <<<<<<<<<<<<<<
 * 
 *     """
 */
struct __pyx_obj_5tubes_Tube {
  PyObject_HEAD
  struct __pyx_vtabstruct_5tubes_Tube *__pyx_vtab;
  PyObject *_name_lookup;
  int _name_lookup_inited;
};


/* "iter_defs.pxi":155
 * 
 * @cython.final
 * cdef class Each(Tube):  # AUTO GENERATED FROM tools/defn2.tmpl             # <<<<<<<<<<<<<<
 * 
 *     """
 */
struct __pyx_obj_5tubes_Each {
  struct __pyx_obj_5tubes_Tube __pyx_base;
  PyObject *_iter;
};


/* "iter_defs.pxi":220
 * 
 * @cython.final
 * cdef class Zip(Tube):  # AUTO GENERATED FROM tools/defn2.tmpl             # <<<<<<<<<<<<<<
 * 
 *     cdef public list inputs
 */
struct __pyx_obj_5tubes_Zip {
  struct __pyx_obj_5tubes_Tube __pyx_base;
  PyObject *inputs;
};


/* "iter_defs.pxi":272
 * 
 * @cython.final
 * cdef class SlotGet(Tube):  # AUTO GENERATED FROM tools/defn2.tmpl             # <<<<<<<<<<<<<<
 * 
 *     cdef public Tube parent
 */
struct __pyx_obj_5tubes_SlotGet {
  struct __pyx_obj_5tubes_Tube __pyx_base;
  struct __pyx_obj_5tubes_Tube *parent;
  size_t index;
  PyObject *default_val;
};


/* "iter_defs.pxi":324
 * 
 * @cython.final
 * cdef class NameLookup(Tube):  # AUTO GENERATED FROM tools/defn2.tmpl             # <<<<<<<<<<<<<<
 * 
 *     cdef public Tube parent
 */
struct __pyx_obj_5tubes_NameLookup {
  struct __pyx_obj_5tubes_Tube __pyx_base;
  struct __pyx_obj_5tubes_Tube *parent;
  PyObject *items;
  PyObject *_name_lookups;
};


/* "iter_defs.pxi":392
 * 
 * @cython.final
 * cdef class Multi(Tube):  # AUTO GENERATED FROM tools/defn2.tmpl             # <<<<<<<<<<<<<<
 * 
 *     cdef public Tube parent
 */
struct __pyx_obj_5tubes_Multi {
  struct __pyx_obj_5tubes_Tube __pyx_base;
  struct __pyx_obj_5tubes_Tube *parent;
  PyObject *inputs;
};


/* "iter_defs.pxi":449
 * 
 * @cython.final
 * cdef class JsonParse(Tube):  # AUTO GENERATED FROM tools/defn2.tmpl             # <<<<<<<<<<<<<<
 * 
 *     cdef public Tube parent
 */
struct __pyx_obj_5tubes_JsonParse {
  struct __pyx_obj_5tubes_Tube __pyx_base;
  struct __pyx_obj_5tubes_Tube *parent;
};


/* "iter_defs.pxi":496
 * 
 * @cython.final
 * cdef class ToPy(Tube):  # AUTO GENERATED FROM tools/defn2.tmpl             # <<<<<<<<<<<<<<
 * 
 *     cdef public Tube parent
 */
struct __pyx_obj_5tubes_ToPy {
  struct __pyx_obj_5tubes_Tube __pyx_base;
  struct __pyx_obj_5tubes_Tube *parent;
};


/* "iter_defs.pxi":540
 * 
 * @cython.final
 * cdef class SkipUnless(Tube):  # AUTO GENERATED FROM tools/defn2.tmpl             # <<<<<<<<<<<<<<
 * 
 *     cdef public Tube parent
 */
struct __pyx_obj_5tubes_SkipUnless {
  struct __pyx_obj_5tubes_Tube __pyx_base;
  struct __pyx_obj_5tubes_Tube *parent;
  struct __pyx_obj_5tubes_Tube *conditional;
};


/* "iter_defs.pxi":589
 * 
 * @cython.final
 * cdef class ReadFile(Tube):  # AUTO GENERATED FROM tools/defn2.tmpl             # <<<<<<<<<<<<<<
 * 
 *     cdef public Tube parent
 */
struct __pyx_obj_5tubes_ReadFile {
  struct __pyx_obj_5tubes_Tube __pyx_base;
  struct __pyx_obj_5tubes_Tube *parent;
};


/* "iter_defs.pxi":636
 * 
 * @cython.final
 * cdef class ChainTubes(Tube):  # AUTO GENERATED FROM tools/defn2.tmpl             # <<<<<<<<<<<<<<
 * 
 *     cdef public list parents
 */
struct __pyx_obj_5tubes_ChainTubes {
  struct __pyx_obj_5tubes_Tube __pyx_base;
  PyObject *parents;
};


/* "iter_defs.pxi":703
 * 
 * @cython.final
 * cdef class Skip(Tube):  # AUTO GENERATED FROM tools/defn2.tmpl             # <<<<<<<<<<<<<<
 * 
 *     cdef public Tube parent
 */
struct __pyx_obj_5tubes_Skip {
  struct __pyx_obj_5tubes_Tube __pyx_base;
  struct __pyx_obj_5tubes_Tube *parent;
  size_t num;
};


/* "iter_defs.pxi":749
 * 
 * @cython.final
 * cdef class FileMap(Tube):  # AUTO GENERATED FROM tools/defn2.tmpl             # <<<<<<<<<<<<<<
 * 
 *     cdef public Tube parent
 */
struct __pyx_obj_5tubes_FileMap {
  struct __pyx_obj_5tubes_Tube __pyx_base;
  struct __pyx_obj_5tubes_Tube *parent;
};


/* "iter_defs.pxi":796
 * 
 * @cython.final
 * cdef class Gunzip(Tube):  # AUTO GENERATED FROM tools/defn2.tmpl             # <<<<<<<<<<<<<<
 * 
 *     cdef public Tube parent
 */
struct __pyx_obj_5tubes_Gunzip {
  struct __pyx_obj_5tubes_Tube __pyx_base;
  struct __pyx_obj_5tubes_Tube *parent;
  int stream;
};


/* "iter_defs.pxi":842
 * 
 * @cython.final
 * cdef class Count(Tube):  # AUTO GENERATED FROM tools/defn2.tmpl             # <<<<<<<<<<<<<<
 * 
 *     """
 */
struct __pyx_obj_5tubes_Count {
  struct __pyx_obj_5tubes_Tube __pyx_base;
  size_t _start;
};


/* "iter_defs.pxi":898
 * 
 * @cython.final
 * cdef class Compare(Tube):  # AUTO GENERATED FROM tools/defn2.tmpl             # <<<<<<<<<<<<<<
 * 
 *     cdef public Tube parent
 */
struct __pyx_obj_5tubes_Compare {
  struct __pyx_obj_5tubes_Tube __pyx_base;
  struct __pyx_obj_5tubes_Tube *parent;
  int op;
  PyObject *value;
};


/* "iter_defs.pxi":948
 * 
 * @cython.final
 * cdef class First(Tube):  # AUTO GENERATED FROM tools/defn2.tmpl             # <<<<<<<<<<<<<<
 * 
 *     cdef public Tube parent
 */
struct __pyx_obj_5tubes_First {
  struct __pyx_obj_5tubes_Tube __pyx_base;
  struct __pyx_obj_5tubes_Tube *parent;
  size_t num;
};


/* "iter_defs.pxi":994
 * 
 * @cython.final
 * cdef class Split(Tube):  # AUTO GENERATED FROM tools/defn2.tmpl             # <<<<<<<<<<<<<<
 * 
 *     cdef public Tube parent
 */
struct __pyx_obj_5tubes_Split {
  struct __pyx_obj_5tubes_Tube __pyx_base;
  struct __pyx_obj_5tubes_Tube *parent;
  PyObject *sep;
};


/* "iter_defs.pxi":1045
 * 
 * @cython.final
 * cdef class Convert(Tube):  # AUTO GENERATED FROM tools/defn2.tmpl             # <<<<<<<<<<<<<<
 * 
 *     cdef public Tube parent
 */
struct __pyx_obj_5tubes_Convert {
  struct __pyx_obj_5tubes_Tube __pyx_base;
  struct __pyx_obj_5tubes_Tube *parent;
  PyObject *to_types;
  PyObject *codec;
};


/* "chunk.pxi":12
 * 
 * @cython.final
 * cdef class Chunk(Tube):             # <<<<<<<<<<<<<<
 *     cdef public Tube parent
 *     cdef size_t chunk_size
 */
struct __pyx_obj_5tubes_Chunk {
  struct __pyx_obj_5tubes_Tube __pyx_base;
  struct __pyx_obj_5tubes_Tube *parent;
  size_t chunk_size;
};


/* "pyiter.pxi":39
 *         self.num_slots, = a
 * 
 *     def __next__(self):             # <<<<<<<<<<<<<<
 *         do_next(self.chain)
 *         cdef ToPyIter *out = self.output
 */
struct __pyx_obj_5tubes___pyx_scope_struct____next__ {
  PyObject_HEAD
  ss::iter::ToPyIter *__pyx_v_out;
  struct __pyx_obj_5tubes_TubeMultiIter *__pyx_v_self;
};


/* "pyiter.pxi":42
 *         do_next(self.chain)
 *         cdef ToPyIter *out = self.output
 *         return tuple(<object>out.get(i).acquire().give() for i in range(self.num_slots))             # <<<<<<<<<<<<<<
 * 
 * 
 */
struct __pyx_obj_5tubes___pyx_scope_struct_1_genexpr {
  PyObject_HEAD
  struct __pyx_obj_5tubes___pyx_scope_struct____next__ *__pyx_outer_scope;
  size_t __pyx_v_i;
  size_t __pyx_t_0;
  size_t __pyx_t_1;
};


/* "pyiter.pxi":76
 *             self.inputs.add(tube)
 * 
 *     def ordered(self):             # <<<<<<<<<<<<<<
 *         chain_order = lambda i: max(self.ordering[t] for t in i[1])
 *         ordered_chains = sorted(self.chains.items(), key=chain_order, reverse=True)
 */
struct __pyx_obj_5tubes___pyx_scope_struct_2_ordered {
  PyObject_HEAD
  PyObject *__pyx_v_chain_order;
  PyObject *__pyx_v_key;
  PyObject *__pyx_v_ordered_chains;
  PyObject *__pyx_v_ordered_tubes;
  struct __pyx_obj_5tubes_Chains *__pyx_v_self;
  PyObject *__pyx_v_tubes;
  PyObject *__pyx_t_0;
  Py_ssize_t __pyx_t_1;
  PyObject *(*__pyx_t_2)(PyObject *);
};


/* "pyiter.pxi":77
 * 
 *     def ordered(self):
 *         chain_order = lambda i: max(self.ordering[t] for t in i[1])             # <<<<<<<<<<<<<<
 *         ordered_chains = sorted(self.chains.items(), key=chain_order, reverse=True)
 *         for key, tubes in ordered_chains:
 */
struct __pyx_obj_5tubes___pyx_scope_struct_3___pyx_lambda_funcdef_lambda1 {
  PyObject_HEAD
  struct __pyx_obj_5tubes___pyx_scope_struct_2_ordered *__pyx_outer_scope;
  PyObject *__pyx_v_i;
};

struct __pyx_obj_5tubes___pyx_scope_struct_4_genexpr {
  PyObject_HEAD
  struct __pyx_obj_5tubes___pyx_scope_struct_3___pyx_lambda_funcdef_lambda1 *__pyx_outer_scope;
  PyObject *__pyx_v_t;
  PyObject *__pyx_t_0;
  Py_ssize_t __pyx_t_1;
  PyObject *(*__pyx_t_2)(PyObject *);
};


/* "iter_defs.pxi":243
 * 
 *     @property
 *     def dtype(self):             # <<<<<<<<<<<<<<
 *         return tuple(dty for t in self.inputs for dty in t.dtype)
 * 
 */
struct __pyx_obj_5tubes___pyx_scope_struct_5___get__ {
  PyObject_HEAD
  struct __pyx_obj_5tubes_Zip *__pyx_v_self;
};


/* "iter_defs.pxi":244
 *     @property
 *     def dtype(self):
 *         return tuple(dty for t in self.inputs for dty in t.dtype)             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
struct __pyx_obj_5tubes___pyx_scope_struct_6_genexpr {
  PyObject_HEAD
  struct __pyx_obj_5tubes___pyx_scope_struct_5___get__ *__pyx_outer_scope;
  PyObject *__pyx_v_dty;
  PyObject *__pyx_v_t;
  PyObject *__pyx_t_0;
  Py_ssize_t __pyx_t_1;
  PyObject *__pyx_t_2;
  Py_ssize_t __pyx_t_3;
  PyObject *(*__pyx_t_4)(PyObject *);
};


/* "iter_defs.pxi":418
 * 
 *     @property
 *     def dtype(self):             # <<<<<<<<<<<<<<
 *         return tuple(d for t in self._inputs[1:] for d in t.dtype)
 * 
 */
struct __pyx_obj_5tubes___pyx_scope_struct_7___get__ {
  PyObject_HEAD
  struct __pyx_obj_5tubes_Multi *__pyx_v_self;
};


/* "iter_defs.pxi":419
 *     @property
 *     def dtype(self):
 *         return tuple(d for t in self._inputs[1:] for d in t.dtype)             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
struct __pyx_obj_5tubes___pyx_scope_struct_8_genexpr {
  PyObject_HEAD
  struct __pyx_obj_5tubes___pyx_scope_struct_7___get__ *__pyx_outer_scope;
  PyObject *__pyx_v_d;
  PyObject *__pyx_v_t;
  PyObject *__pyx_t_0;
  Py_ssize_t __pyx_t_1;
  PyObject *(*__pyx_t_2)(PyObject *);
  PyObject *__pyx_t_3;
  Py_ssize_t __pyx_t_4;
  PyObject *(*__pyx_t_5)(PyObject *);
};


/* "iter_defs.pxi":671
 * 
 *     @property
 *     def _chains(self):             # <<<<<<<<<<<<<<
 *         return tuple((p, ) for p in self.parents)
 * 
 */
struct __pyx_obj_5tubes___pyx_scope_struct_9___get__ {
  PyObject_HEAD
  struct __pyx_obj_5tubes_ChainTubes *__pyx_v_self;
};


/* "iter_defs.pxi":672
 *     @property
 *     def _chains(self):
 *         return tuple((p, ) for p in self.parents)             # <<<<<<<<<<<<<<
 * 
 * 
 */
struct __pyx_obj_5tubes___pyx_scope_struct_10_genexpr {
  PyObject_HEAD
  struct __pyx_obj_5tubes___pyx_scope_struct_9___get__ *__pyx_outer_scope;
  PyObject *__pyx_v_p;
  PyObject *__pyx_t_0;
  Py_ssize_t __pyx_t_1;
};



/* "pyiter.pxi":45
 * 
 * 
 * cdef class Chains:             # <<<<<<<<<<<<<<
 *     cdef public Tube output
 *     cdef public dict chains
 */

struct __pyx_vtabstruct_5tubes_Chains {
  PyObject *(*make_chains_iters)(struct __pyx_obj_5tubes_Chains *, struct __pyx_opt_args_5tubes_6Chains_make_chains_iters *__pyx_optional_args);
};
static struct __pyx_vtabstruct_5tubes_Chains *__pyx_vtabptr_5tubes_Chains;


/* "tubes.pyx":63
 * include "pyiter.pxi"
 * 
 * cdef class Tube:             # <<<<<<<<<<<<<<
 * 
 *     """
 */

struct __pyx_vtabstruct_5tubes_Tube {
  struct __pyx_obj_5tubes_IterWrapper *(*_make_iter)(struct __pyx_obj_5tubes_Tube *, PyObject *);
  PyObject *(*_describe_self)(struct __pyx_obj_5tubes_Tube *, int __pyx_skip_dispatch);
  PyObject *(*_repr)(struct __pyx_obj_5tubes_Tube *, struct __pyx_opt_args_5tubes_4Tube__repr *__pyx_optional_args);
  PyObject *(*_set_name_lookup)(struct __pyx_obj_5tubes_Tube *, struct __pyx_obj_5tubes_NameLookup *);
  struct __pyx_obj_5tubes_NameLookup *(*name_lookup)(struct __pyx_obj_5tubes_Tube *);
};
static struct __pyx_vtabstruct_5tubes_Tube *__pyx_vtabptr_5tubes_Tube;


/* "iter_defs.pxi":155
 * 
 * @cython.final
 * cdef class Each(Tube):  # AUTO GENERATED FROM tools/defn2.tmpl             # <<<<<<<<<<<<<<
 * 
 *     """
 */

struct __pyx_vtabstruct_5tubes_Each {
  struct __pyx_vtabstruct_5tubes_Tube __pyx_base;
  ss::PyObj (*_ob_to_iter)(struct __pyx_obj_5tubes_Each *);
};
static struct __pyx_vtabstruct_5tubes_Each *__pyx_vtabptr_5tubes_Each;
static ss::PyObj __pyx_f_5tubes_4Each__ob_to_iter(struct __pyx_obj_5tubes_Each *);


/* "iter_defs.pxi":220
 * 
 * @cython.final
 * cdef class Zip(Tube):  # AUTO GENERATED FROM tools/defn2.tmpl             # <<<<<<<<<<<<<<
 * 
 *     cdef public list inputs
 */

struct __pyx_vtabstruct_5tubes_Zip {
  struct __pyx_vtabstruct_5tubes_Tube __pyx_base;
  std::vector<ss::iter::AnyIter>  (*_make_iters)(struct __pyx_obj_5tubes_Zip *, PyObject *);
};
static struct __pyx_vtabstruct_5tubes_Zip *__pyx_vtabptr_5tubes_Zip;
static std::vector<ss::iter::AnyIter>  __pyx_f_5tubes_3Zip__make_iters(struct __pyx_obj_5tubes_Zip *, PyObject *);


/* "iter_defs.pxi":272
 * 
 * @cython.final
 * cdef class SlotGet(Tube):  # AUTO GENERATED FROM tools/defn2.tmpl             # <<<<<<<<<<<<<<
 * 
 *     cdef public Tube parent
 */

struct __pyx_vtabstruct_5tubes_SlotGet {
  struct __pyx_vtabstruct_5tubes_Tube __pyx_base;
};
static struct __pyx_vtabstruct_5tubes_SlotGet *__pyx_vtabptr_5tubes_SlotGet;


/* "iter_defs.pxi":324
 * 
 * @cython.final
 * cdef class NameLookup(Tube):  # AUTO GENERATED FROM tools/defn2.tmpl             # <<<<<<<<<<<<<<
 * 
 *     cdef public Tube parent
 */

struct __pyx_vtabstruct_5tubes_NameLookup {
  struct __pyx_vtabstruct_5tubes_Tube __pyx_base;
  PyObject *(*lookup_name)(struct __pyx_obj_5tubes_NameLookup *, PyObject *, PyObject *);
  PyObject *(*get_slot_shared)(struct __pyx_obj_5tubes_NameLookup *, size_t, PyObject *);
};
static struct __pyx_vtabstruct_5tubes_NameLookup *__pyx_vtabptr_5tubes_NameLookup;
static PyObject *__pyx_f_5tubes_10NameLookup_lookup_name(struct __pyx_obj_5tubes_NameLookup *, PyObject *, PyObject *);
static PyObject *__pyx_f_5tubes_10NameLookup_get_slot_shared(struct __pyx_obj_5tubes_NameLookup *, size_t, PyObject *);


/* "iter_defs.pxi":392
 * 
 * @cython.final
 * cdef class Multi(Tube):  # AUTO GENERATED FROM tools/defn2.tmpl             # <<<<<<<<<<<<<<
 * 
 *     cdef public Tube parent
 */

struct __pyx_vtabstruct_5tubes_Multi {
  struct __pyx_vtabstruct_5tubes_Tube __pyx_base;
  std::vector<ss::iter::AnyIter>  (*_make_iters)(struct __pyx_obj_5tubes_Multi *, PyObject *);
};
static struct __pyx_vtabstruct_5tubes_Multi *__pyx_vtabptr_5tubes_Multi;
static std::vector<ss::iter::AnyIter>  __pyx_f_5tubes_5Multi__make_iters(struct __pyx_obj_5tubes_Multi *, PyObject *);


/* "iter_defs.pxi":449
 * 
 * @cython.final
 * cdef class JsonParse(Tube):  # AUTO GENERATED FROM tools/defn2.tmpl             # <<<<<<<<<<<<<<
 * 
 *     cdef public Tube parent
 */

struct __pyx_vtabstruct_5tubes_JsonParse {
  struct __pyx_vtabstruct_5tubes_Tube __pyx_base;
};
static struct __pyx_vtabstruct_5tubes_JsonParse *__pyx_vtabptr_5tubes_JsonParse;


/* "iter_defs.pxi":496
 * 
 * @cython.final
 * cdef class ToPy(Tube):  # AUTO GENERATED FROM tools/defn2.tmpl             # <<<<<<<<<<<<<<
 * 
 *     cdef public Tube parent
 */

struct __pyx_vtabstruct_5tubes_ToPy {
  struct __pyx_vtabstruct_5tubes_Tube __pyx_base;
};
static struct __pyx_vtabstruct_5tubes_ToPy *__pyx_vtabptr_5tubes_ToPy;


/* "iter_defs.pxi":540
 * 
 * @cython.final
 * cdef class SkipUnless(Tube):  # AUTO GENERATED FROM tools/defn2.tmpl             # <<<<<<<<<<<<<<
 * 
 *     cdef public Tube parent
 */

struct __pyx_vtabstruct_5tubes_SkipUnless {
  struct __pyx_vtabstruct_5tubes_Tube __pyx_base;
};
static struct __pyx_vtabstruct_5tubes_SkipUnless *__pyx_vtabptr_5tubes_SkipUnless;


/* "iter_defs.pxi":589
 * 
 * @cython.final
 * cdef class ReadFile(Tube):  # AUTO GENERATED FROM tools/defn2.tmpl             # <<<<<<<<<<<<<<
 * 
 *     cdef public Tube parent
 */

struct __pyx_vtabstruct_5tubes_ReadFile {
  struct __pyx_vtabstruct_5tubes_Tube __pyx_base;
};
static struct __pyx_vtabstruct_5tubes_ReadFile *__pyx_vtabptr_5tubes_ReadFile;


/* "iter_defs.pxi":636
 * 
 * @cython.final
 * cdef class ChainTubes(Tube):  # AUTO GENERATED FROM tools/defn2.tmpl             # <<<<<<<<<<<<<<
 * 
 *     cdef public list parents
 */

struct __pyx_vtabstruct_5tubes_ChainTubes {
  struct __pyx_vtabstruct_5tubes_Tube __pyx_base;
  std::vector<ss::iter::AnyIter>  (*_make_iters)(struct __pyx_obj_5tubes_ChainTubes *, PyObject *);
  std::vector<struct ss::iter::Chain>  (*_make_chains)(struct __pyx_obj_5tubes_ChainTubes *, PyObject *);
};
static struct __pyx_vtabstruct_5tubes_ChainTubes *__pyx_vtabptr_5tubes_ChainTubes;
static std::vector<ss::iter::AnyIter>  __pyx_f_5tubes_10ChainTubes__make_iters(struct __pyx_obj_5tubes_ChainTubes *, PyObject *);
static std::vector<struct ss::iter::Chain>  __pyx_f_5tubes_10ChainTubes__make_chains(struct __pyx_obj_5tubes_ChainTubes *, PyObject *);


/* "iter_defs.pxi":703
 * 
 * @cython.final
 * cdef class Skip(Tube):  # AUTO GENERATED FROM tools/defn2.tmpl             # <<<<<<<<<<<<<<
 * 
 *     cdef public Tube parent
 */

struct __pyx_vtabstruct_5tubes_Skip {
  struct __pyx_vtabstruct_5tubes_Tube __pyx_base;
};
static struct __pyx_vtabstruct_5tubes_Skip *__pyx_vtabptr_5tubes_Skip;


/* "iter_defs.pxi":749
 * 
 * @cython.final
 * cdef class FileMap(Tube):  # AUTO GENERATED FROM tools/defn2.tmpl             # <<<<<<<<<<<<<<
 * 
 *     cdef public Tube parent
 */

struct __pyx_vtabstruct_5tubes_FileMap {
  struct __pyx_vtabstruct_5tubes_Tube __pyx_base;
};
static struct __pyx_vtabstruct_5tubes_FileMap *__pyx_vtabptr_5tubes_FileMap;


/* "iter_defs.pxi":796
 * 
 * @cython.final
 * cdef class Gunzip(Tube):  # AUTO GENERATED FROM tools/defn2.tmpl             # <<<<<<<<<<<<<<
 * 
 *     cdef public Tube parent
 */

struct __pyx_vtabstruct_5tubes_Gunzip {
  struct __pyx_vtabstruct_5tubes_Tube __pyx_base;
};
static struct __pyx_vtabstruct_5tubes_Gunzip *__pyx_vtabptr_5tubes_Gunzip;


/* "iter_defs.pxi":842
 * 
 * @cython.final
 * cdef class Count(Tube):  # AUTO GENERATED FROM tools/defn2.tmpl             # <<<<<<<<<<<<<<
 * 
 *     """
 */

struct __pyx_vtabstruct_5tubes_Count {
  struct __pyx_vtabstruct_5tubes_Tube __pyx_base;
};
static struct __pyx_vtabstruct_5tubes_Count *__pyx_vtabptr_5tubes_Count;


/* "iter_defs.pxi":898
 * 
 * @cython.final
 * cdef class Compare(Tube):  # AUTO GENERATED FROM tools/defn2.tmpl             # <<<<<<<<<<<<<<
 * 
 *     cdef public Tube parent
 */

struct __pyx_vtabstruct_5tubes_Compare {
  struct __pyx_vtabstruct_5tubes_Tube __pyx_base;
};
static struct __pyx_vtabstruct_5tubes_Compare *__pyx_vtabptr_5tubes_Compare;


/* "iter_defs.pxi":948
 * 
 * @cython.final
 * cdef class First(Tube):  # AUTO GENERATED FROM tools/defn2.tmpl             # <<<<<<<<<<<<<<
 * 
 *     cdef public Tube parent
 */

struct __pyx_vtabstruct_5tubes_First {
  struct __pyx_vtabstruct_5tubes_Tube __pyx_base;
};
static struct __pyx_vtabstruct_5tubes_First *__pyx_vtabptr_5tubes_First;


/* "iter_defs.pxi":994
 * 
 * @cython.final
 * cdef class Split(Tube):  # AUTO GENERATED FROM tools/defn2.tmpl             # <<<<<<<<<<<<<<
 * 
 *     cdef public Tube parent
 */

struct __pyx_vtabstruct_5tubes_Split {
  struct __pyx_vtabstruct_5tubes_Tube __pyx_base;
};
static struct __pyx_vtabstruct_5tubes_Split *__pyx_vtabptr_5tubes_Split;


/* "iter_defs.pxi":1045
 * 
 * @cython.final
 * cdef class Convert(Tube):  # AUTO GENERATED FROM tools/defn2.tmpl             # <<<<<<<<<<<<<<
 * 
 *     cdef public Tube parent
 */

struct __pyx_vtabstruct_5tubes_Convert {
  struct __pyx_vtabstruct_5tubes_Tube __pyx_base;
  std::vector<ss::iter::ScalarType>  (*dtype_vec)(struct __pyx_obj_5tubes_Convert *);
};
static struct __pyx_vtabstruct_5tubes_Convert *__pyx_vtabptr_5tubes_Convert;
static std::vector<ss::iter::ScalarType>  __pyx_f_5tubes_7Convert_dtype_vec(struct __pyx_obj_5tubes_Convert *);


/* "chunk.pxi":12
 * 
 * @cython.final
 * cdef class Chunk(Tube):             # <<<<<<<<<<<<<<
 *     cdef public Tube parent
 *     cdef size_t chunk_size
 */

struct __pyx_vtabstruct_5tubes_Chunk {
  struct __pyx_vtabstruct_5tubes_Tube __pyx_base;
  std::vector<ss::iter::AnyIter>  (*_make_iters)(struct __pyx_obj_5tubes_Chunk *, PyObject *);
};
static struct __pyx_vtabstruct_5tubes_Chunk *__pyx_vtabptr_5tubes_Chunk;
static std::vector<ss::iter::AnyIter>  __pyx_f_5tubes_5Chunk__make_iters(struct __pyx_obj_5tubes_Chunk *, PyObject *);

/* --- Runtime support code (head) --- */
/* Refnanny.proto */
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          if (acquire_gil) {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
              PyGILState_Release(__pyx_gilstate_save);\
          } else {\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
#endif
  #define __Pyx_RefNannyFinishContext()\
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_XDECREF(tmp);\
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_DECREF(tmp);\
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

/* PyObjectGetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

/* GetBuiltinName.proto */
static PyObject *__Pyx_GetBuiltinName(PyObject *name);

/* PyObjectCall.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

/* PyThreadStateGet.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyThreadState_declare  PyThreadState *__pyx_tstate;
#define __Pyx_PyThreadState_assign  __pyx_tstate = __Pyx_PyThreadState_Current;
#define __Pyx_PyErr_Occurred()  __pyx_tstate->curexc_type
#else
#define __Pyx_PyThreadState_declare
#define __Pyx_PyThreadState_assign
#define __Pyx_PyErr_Occurred()  PyErr_Occurred()
#endif

/* PyErrFetchRestore.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_Clear() __Pyx_ErrRestore(NULL, NULL, NULL)
#define __Pyx_ErrRestoreWithState(type, value, tb)  __Pyx_ErrRestoreInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)    __Pyx_ErrFetchInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  __Pyx_ErrRestoreInState(__pyx_tstate, type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)    __Pyx_ErrFetchInState(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_PyErr_SetNone(exc) (Py_INCREF(exc), __Pyx_ErrRestore((exc), NULL, NULL))
#else
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#endif
#else
#define __Pyx_PyErr_Clear() PyErr_Clear()
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#define __Pyx_ErrRestoreWithState(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestoreInState(tstate, type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchInState(tstate, type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)  PyErr_Fetch(type, value, tb)
#endif

/* RaiseException.proto */
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause);

/* PyObjectFormatSimple.proto */
#if CYTHON_COMPILING_IN_PYPY
    #define __Pyx_PyObject_FormatSimple(s, f) (\
        likely(PyUnicode_CheckExact(s)) ? (Py_INCREF(s), s) :\
        PyObject_Format(s, f))
#elif PY_MAJOR_VERSION < 3
    #define __Pyx_PyObject_FormatSimple(s, f) (\
        likely(PyUnicode_CheckExact(s)) ? (Py_INCREF(s), s) :\
        likely(PyString_CheckExact(s)) ? PyUnicode_FromEncodedObject(s, NULL, "strict") :\
        PyObject_Format(s, f))
#elif CYTHON_USE_TYPE_SLOTS
    #define __Pyx_PyObject_FormatSimple(s, f) (\
        likely(PyUnicode_CheckExact(s)) ? (Py_INCREF(s), s) :\
        likely(PyLong_CheckExact(s)) ? PyLong_Type.tp_str(s) :\
        likely(PyFloat_CheckExact(s)) ? PyFloat_Type.tp_str(s) :\
        PyObject_Format(s, f))
#else
    #define __Pyx_PyObject_FormatSimple(s, f) (\
        likely(PyUnicode_CheckExact(s)) ? (Py_INCREF(s), s) :\
        PyObject_Format(s, f))
#endif

/* IncludeStringH.proto */
#include <string.h>

/* JoinPyUnicode.proto */
static PyObject* __Pyx_PyUnicode_Join(PyObject* value_tuple, Py_ssize_t value_count, Py_ssize_t result_ulength,
                                      Py_UCS4 max_char);

/* ExtTypeTest.proto */
static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type);

/* WriteUnraisableException.proto */
static void __Pyx_WriteUnraisable(const char *name, int clineno,
                                  int lineno, const char *filename,
                                  int full_traceback, int nogil);

/* RaiseArgTupleInvalid.proto */
static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found);

/* RaiseDoubleKeywords.proto */
static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name);

/* ParseKeywords.proto */
static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[],\
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args,\
    const char* function_name);

/* ArgTypeTest.proto */
#define __Pyx_ArgTypeTest(obj, type, none_allowed, name, exact)\
    ((likely((Py_TYPE(obj) == type) | (none_allowed && (obj == Py_None)))) ? 1 :\
        __Pyx__ArgTypeTest(obj, type, name, exact))
static int __Pyx__ArgTypeTest(PyObject *obj, PyTypeObject *type, const char *name, int exact);

/* RaiseTooManyValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected);

/* RaiseNeedMoreValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index);

/* None.proto */
static CYTHON_INLINE void __Pyx_RaiseClosureNameError(const char *varname);

/* PyFunctionFastCall.proto */
#if CYTHON_FAST_PYCALL
#define __Pyx_PyFunction_FastCall(func, args, nargs)\
    __Pyx_PyFunction_FastCallDict((func), (args), (nargs), NULL)
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, int nargs, PyObject *kwargs);
#else
#define __Pyx_PyFunction_FastCallDict(func, args, nargs, kwargs) _PyFunction_FastCallDict(func, args, nargs, kwargs)
#endif
#endif

/* PyCFunctionFastCall.proto */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject *__Pyx_PyCFunction_FastCall(PyObject *func, PyObject **args, Py_ssize_t nargs);
#else
#define __Pyx_PyCFunction_FastCall(func, args, nargs)  (assert(0), NULL)
#endif

/* PyObjectCallMethod2.proto */
static PyObject* __Pyx_PyObject_CallMethod2(PyObject* obj, PyObject* method_name, PyObject* arg1, PyObject* arg2);

/* dict_setdefault.proto */
static CYTHON_INLINE PyObject *__Pyx_PyDict_SetDefault(PyObject *d, PyObject *key, PyObject *default_value, int is_safe_type);

/* DictGetItem.proto */
#if PY_MAJOR_VERSION >= 3 && !CYTHON_COMPILING_IN_PYPY
static PyObject *__Pyx_PyDict_GetItem(PyObject *d, PyObject* key) {
    PyObject *value;
    value = PyDict_GetItemWithError(d, key);
    if (unlikely(!value)) {
        if (!PyErr_Occurred()) {
            PyObject* args = PyTuple_Pack(1, key);
            if (likely(args))
                PyErr_SetObject(PyExc_KeyError, args);
            Py_XDECREF(args);
        }
        return NULL;
    }
    Py_INCREF(value);
    return value;
}
#else
    #define __Pyx_PyDict_GetItem(d, key) PyObject_GetItem(d, key)
#endif

/* PyObjectCallMethO.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg);
#endif

/* PyObjectCallOneArg.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg);

/* dict_getitem_default.proto */
static PyObject* __Pyx_PyDict_GetItemDefault(PyObject* d, PyObject* key, PyObject* default_value);

/* PyIntBinop.proto */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_AddObjC(PyObject *op1, PyObject *op2, long intval, int inplace);
#else
#define __Pyx_PyInt_AddObjC(op1, op2, intval, inplace)\
    (inplace ? PyNumber_InPlaceAdd(op1, op2) : PyNumber_Add(op1, op2))
#endif

/* PySequenceContains.proto */
static CYTHON_INLINE int __Pyx_PySequence_ContainsTF(PyObject* item, PyObject* seq, int eq) {
    int result = PySequence_Contains(seq, item);
    return unlikely(result < 0) ? result : (result == (eq == Py_EQ));
}

/* GetItemInt.proto */
#define __Pyx_GetItemInt(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Fast(o, (Py_ssize_t)i, is_list, wraparound, boundscheck) :\
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL) :\
               __Pyx_GetItemInt_Generic(o, to_py_func(i))))
#define __Pyx_GetItemInt_List(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_List_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
#define __Pyx_GetItemInt_Tuple(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Tuple_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "tuple index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i,
                                                     int is_list, int wraparound, int boundscheck);

/* FetchCommonType.proto */
static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type);

/* CythonFunction.proto */
#define __Pyx_CyFunction_USED 1
#include <structmember.h>
#define __Pyx_CYFUNCTION_STATICMETHOD  0x01
#define __Pyx_CYFUNCTION_CLASSMETHOD   0x02
#define __Pyx_CYFUNCTION_CCLASS        0x04
#define __Pyx_CyFunction_GetClosure(f)\
    (((__pyx_CyFunctionObject *) (f))->func_closure)
#define __Pyx_CyFunction_GetClassObj(f)\
    (((__pyx_CyFunctionObject *) (f))->func_classobj)
#define __Pyx_CyFunction_Defaults(type, f)\
    ((type *)(((__pyx_CyFunctionObject *) (f))->defaults))
#define __Pyx_CyFunction_SetDefaultsGetter(f, g)\
    ((__pyx_CyFunctionObject *) (f))->defaults_getter = (g)
typedef struct {
    PyCFunctionObject func;
#if PY_VERSION_HEX < 0x030500A0
    PyObject *func_weakreflist;
#endif
    PyObject *func_dict;
    PyObject *func_name;
    PyObject *func_qualname;
    PyObject *func_doc;
    PyObject *func_globals;
    PyObject *func_code;
    PyObject *func_closure;
    PyObject *func_classobj;
    void *defaults;
    int defaults_pyobjects;
    int flags;
    PyObject *defaults_tuple;
    PyObject *defaults_kwdict;
    PyObject *(*defaults_getter)(PyObject *);
    PyObject *func_annotations;
} __pyx_CyFunctionObject;
static PyTypeObject *__pyx_CyFunctionType = 0;
#define __Pyx_CyFunction_NewEx(ml, flags, qualname, self, module, globals, code)\
    __Pyx_CyFunction_New(__pyx_CyFunctionType, ml, flags, qualname, self, module, globals, code)
static PyObject *__Pyx_CyFunction_New(PyTypeObject *, PyMethodDef *ml,
                                      int flags, PyObject* qualname,
                                      PyObject *self,
                                      PyObject *module, PyObject *globals,
                                      PyObject* code);
static CYTHON_INLINE void *__Pyx_CyFunction_InitDefaults(PyObject *m,
                                                         size_t size,
                                                         int pyobjects);
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsTuple(PyObject *m,
                                                            PyObject *tuple);
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsKwDict(PyObject *m,
                                                             PyObject *dict);
static CYTHON_INLINE void __Pyx_CyFunction_SetAnnotationsDict(PyObject *m,
                                                              PyObject *dict);
static int __pyx_CyFunction_init(void);

/* py_dict_items.proto */
static CYTHON_INLINE PyObject* __Pyx_PyDict_Items(PyObject* d);

/* UnpackUnboundCMethod.proto */
typedef struct {
    PyObject *type;
    PyObject **method_name;
    PyCFunction func;
    PyObject *method;
    int flag;
} __Pyx_CachedCFunction;

/* CallUnboundCMethod0.proto */
static PyObject* __Pyx__CallUnboundCMethod0(__Pyx_CachedCFunction* cfunc, PyObject* self);
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_CallUnboundCMethod0(cfunc, self)\
    ((likely((cfunc)->func)) ?\
        (likely((cfunc)->flag == METH_NOARGS) ?  (*((cfunc)->func))(self, NULL) :\
         (likely((cfunc)->flag == (METH_VARARGS | METH_KEYWORDS)) ?  ((*(PyCFunctionWithKeywords)(cfunc)->func)(self, __pyx_empty_tuple, NULL)) :\
             ((cfunc)->flag == METH_VARARGS ?  (*((cfunc)->func))(self, __pyx_empty_tuple) :\
              (PY_VERSION_HEX >= 0x030600B1 && (cfunc)->flag == METH_FASTCALL ?\
                (PY_VERSION_HEX >= 0x030700A0 ?\
                    (*(__Pyx_PyCFunctionFast)(cfunc)->func)(self, &PyTuple_GET_ITEM(__pyx_empty_tuple, 0), 0) :\
                    (*(__Pyx_PyCFunctionFastWithKeywords)(cfunc)->func)(self, &PyTuple_GET_ITEM(__pyx_empty_tuple, 0), 0, NULL)) :\
              (PY_VERSION_HEX >= 0x030700A0 && (cfunc)->flag == (METH_FASTCALL | METH_KEYWORDS) ?\
                    (*(__Pyx_PyCFunctionFastWithKeywords)(cfunc)->func)(self, &PyTuple_GET_ITEM(__pyx_empty_tuple, 0), 0, NULL) :\
                    __Pyx__CallUnboundCMethod0(cfunc, self)))))) :\
        __Pyx__CallUnboundCMethod0(cfunc, self))
#else
#define __Pyx_CallUnboundCMethod0(cfunc, self)  __Pyx__CallUnboundCMethod0(cfunc, self)
#endif

/* IterFinish.proto */
static CYTHON_INLINE int __Pyx_IterFinish(void);

/* UnpackItemEndCheck.proto */
static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected);

/* PyObjectCallNoArg.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func);
#else
#define __Pyx_PyObject_CallNoArg(func) __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL)
#endif

/* PyObjectCallMethod0.proto */
static PyObject* __Pyx_PyObject_CallMethod0(PyObject* obj, PyObject* method_name);

/* RaiseNoneIterError.proto */
static CYTHON_INLINE void __Pyx_RaiseNoneNotIterableError(void);

/* UnpackTupleError.proto */
static void __Pyx_UnpackTupleError(PyObject *, Py_ssize_t index);

/* UnpackTuple2.proto */
#define __Pyx_unpack_tuple2(tuple, value1, value2, is_tuple, has_known_size, decref_tuple)\
    (likely(is_tuple || PyTuple_Check(tuple)) ?\
        (likely(has_known_size || PyTuple_GET_SIZE(tuple) == 2) ?\
            __Pyx_unpack_tuple2_exact(tuple, value1, value2, decref_tuple) :\
            (__Pyx_UnpackTupleError(tuple, 2), -1)) :\
        __Pyx_unpack_tuple2_generic(tuple, value1, value2, has_known_size, decref_tuple))
static CYTHON_INLINE int __Pyx_unpack_tuple2_exact(
    PyObject* tuple, PyObject** value1, PyObject** value2, int decref_tuple);
static int __Pyx_unpack_tuple2_generic(
    PyObject* tuple, PyObject** value1, PyObject** value2, int has_known_size, int decref_tuple);

/* dict_iter.proto */
static CYTHON_INLINE PyObject* __Pyx_dict_iterator(PyObject* dict, int is_dict, PyObject* method_name,
                                                   Py_ssize_t* p_orig_length, int* p_is_dict);
static CYTHON_INLINE int __Pyx_dict_iter_next(PyObject* dict_or_iter, Py_ssize_t orig_length, Py_ssize_t* ppos,
                                              PyObject** pkey, PyObject** pvalue, PyObject** pitem, int is_dict);

/* ListAppend.proto */
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static CYTHON_INLINE int __Pyx_PyList_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len) & likely(len > (L->allocated >> 1))) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        Py_SIZE(list) = len+1;
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_PyList_Append(L,x) PyList_Append(L,x)
#endif

/* GetModuleGlobalName.proto */
static CYTHON_INLINE PyObject *__Pyx_GetModuleGlobalName(PyObject *name);

/* KeywordStringCheck.proto */
static int __Pyx_CheckKeywordStrings(PyObject *kwdict, const char* function_name, int kw_allowed);

/* ListExtend.proto */
static CYTHON_INLINE int __Pyx_PyList_Extend(PyObject* L, PyObject* v) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject* none = _PyList_Extend((PyListObject*)L, v);
    if (unlikely(!none))
        return -1;
    Py_DECREF(none);
    return 0;
#else
    return PyList_SetSlice(L, PY_SSIZE_T_MAX, PY_SSIZE_T_MAX, v);
#endif
}

/* PyErrExceptionMatches.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_ExceptionMatches(err) __Pyx_PyErr_ExceptionMatchesInState(__pyx_tstate, err)
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err);
#else
#define __Pyx_PyErr_ExceptionMatches(err)  PyErr_ExceptionMatches(err)
#endif

/* GetAttr.proto */
static CYTHON_INLINE PyObject *__Pyx_GetAttr(PyObject *, PyObject *);

/* GetAttr3.proto */
static CYTHON_INLINE PyObject *__Pyx_GetAttr3(PyObject *, PyObject *, PyObject *);

/* BuildPyUnicode.proto */
static PyObject* __Pyx_PyUnicode_BuildFromAscii(Py_ssize_t ulength, char* chars, int clength,
                                                int prepend_sign, char padding_char);

/* CIntToPyUnicode.proto */
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_From_Py_ssize_t(Py_ssize_t value, Py_ssize_t width, char padding_char, char format_char);

/* SliceObject.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetSlice(
        PyObject* obj, Py_ssize_t cstart, Py_ssize_t cstop,
        PyObject** py_start, PyObject** py_stop, PyObject** py_slice,
        int has_cstart, int has_cstop, int wraparound);

/* HasAttr.proto */
static CYTHON_INLINE int __Pyx_HasAttr(PyObject *, PyObject *);

/* ListCompAppend.proto */
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static CYTHON_INLINE int __Pyx_ListComp_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len)) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        Py_SIZE(list) = len+1;
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_ListComp_Append(L,x) PyList_Append(L,x)
#endif

/* CIntToPyUnicode.proto */
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_From_size_t(size_t value, Py_ssize_t width, char padding_char, char format_char);

/* SaveResetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ExceptionSave(type, value, tb)  __Pyx__ExceptionSave(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#define __Pyx_ExceptionReset(type, value, tb)  __Pyx__ExceptionReset(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
#else
#define __Pyx_ExceptionSave(type, value, tb)   PyErr_GetExcInfo(type, value, tb)
#define __Pyx_ExceptionReset(type, value, tb)  PyErr_SetExcInfo(type, value, tb)
#endif

/* GetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_GetException(type, value, tb)  __Pyx__GetException(__pyx_tstate, type, value, tb)
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb);
#endif

/* PyDictContains.proto */
static CYTHON_INLINE int __Pyx_PyDict_ContainsTF(PyObject* item, PyObject* dict, int eq) {
    int result = PyDict_Contains(dict, item);
    return unlikely(result < 0) ? result : (result == (eq == Py_EQ));
}

/* SliceTupleAndList.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyList_GetSlice(PyObject* src, Py_ssize_t start, Py_ssize_t stop);
static CYTHON_INLINE PyObject* __Pyx_PyTuple_GetSlice(PyObject* src, Py_ssize_t start, Py_ssize_t stop);
#else
#define __Pyx_PyList_GetSlice(seq, start, stop)   PySequence_GetSlice(seq, start, stop)
#define __Pyx_PyTuple_GetSlice(seq, start, stop)  PySequence_GetSlice(seq, start, stop)
#endif

/* Import.proto */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level);

/* ImportFrom.proto */
static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name);

/* SetupReduce.proto */
static int __Pyx_setup_reduce(PyObject* type_obj);

/* SetVTable.proto */
static int __Pyx_SetVtable(PyObject *dict, void *vtable);

/* CLineInTraceback.proto */
#ifdef CYTHON_CLINE_IN_TRACEBACK
#define __Pyx_CLineForTraceback(tstate, c_line)  (((CYTHON_CLINE_IN_TRACEBACK)) ? c_line : 0)
#else
static int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line);
#endif

/* CodeObjectCache.proto */
typedef struct {
    PyCodeObject* code_object;
    int code_line;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);

/* AddTraceback.proto */
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

/* None.proto */
#include <new>

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

/* CppExceptionConversion.proto */
#ifndef __Pyx_CppExn2PyErr
#include <new>
#include <typeinfo>
#include <stdexcept>
#include <ios>
static void __Pyx_CppExn2PyErr() {
  try {
    if (PyErr_Occurred())
      ; // let the latest Python exn pass through and ignore the current one
    else
      throw;
  } catch (const std::bad_alloc& exn) {
    PyErr_SetString(PyExc_MemoryError, exn.what());
  } catch (const std::bad_cast& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::bad_typeid& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::domain_error& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::invalid_argument& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::ios_base::failure& exn) {
    PyErr_SetString(PyExc_IOError, exn.what());
  } catch (const std::out_of_range& exn) {
    PyErr_SetString(PyExc_IndexError, exn.what());
  } catch (const std::overflow_error& exn) {
    PyErr_SetString(PyExc_OverflowError, exn.what());
  } catch (const std::range_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::underflow_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::exception& exn) {
    PyErr_SetString(PyExc_RuntimeError, exn.what());
  }
  catch (...)
  {
    PyErr_SetString(PyExc_RuntimeError, "Unknown exception");
  }
}
#endif

/* CIntFromPy.proto */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE size_t __Pyx_PyInt_As_size_t(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

/* FastTypeChecks.proto */
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_TypeCheck(obj, type) __Pyx_IsSubtype(Py_TYPE(obj), (PyTypeObject *)type)
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject *type);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *type1, PyObject *type2);
#else
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#define __Pyx_PyErr_GivenExceptionMatches(err, type) PyErr_GivenExceptionMatches(err, type)
#define __Pyx_PyErr_GivenExceptionMatches2(err, type1, type2) (PyErr_GivenExceptionMatches(err, type1) || PyErr_GivenExceptionMatches(err, type2))
#endif

/* SwapException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ExceptionSwap(type, value, tb)  __Pyx__ExceptionSwap(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionSwap(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
static CYTHON_INLINE void __Pyx_ExceptionSwap(PyObject **type, PyObject **value, PyObject **tb);
#endif

/* PyObjectCallMethod1.proto */
static PyObject* __Pyx_PyObject_CallMethod1(PyObject* obj, PyObject* method_name, PyObject* arg);
static PyObject* __Pyx__PyObject_CallMethod1(PyObject* method, PyObject* arg);

/* CoroutineBase.proto */
typedef PyObject *(*__pyx_coroutine_body_t)(PyObject *, PyThreadState *, PyObject *);
typedef struct {
    PyObject_HEAD
    __pyx_coroutine_body_t body;
    PyObject *closure;
    PyObject *exc_type;
    PyObject *exc_value;
    PyObject *exc_traceback;
    PyObject *gi_weakreflist;
    PyObject *classobj;
    PyObject *yieldfrom;
    PyObject *gi_name;
    PyObject *gi_qualname;
    PyObject *gi_modulename;
    int resume_label;
    char is_running;
} __pyx_CoroutineObject;
static __pyx_CoroutineObject *__Pyx__Coroutine_New(
    PyTypeObject *type, __pyx_coroutine_body_t body, PyObject *closure,
    PyObject *name, PyObject *qualname, PyObject *module_name);
static __pyx_CoroutineObject *__Pyx__Coroutine_NewInit(
            __pyx_CoroutineObject *gen, __pyx_coroutine_body_t body, PyObject *closure,
            PyObject *name, PyObject *qualname, PyObject *module_name);
static int __Pyx_Coroutine_clear(PyObject *self);
static PyObject *__Pyx_Coroutine_Send(PyObject *self, PyObject *value);
static PyObject *__Pyx_Coroutine_Close(PyObject *self);
static PyObject *__Pyx_Coroutine_Throw(PyObject *gen, PyObject *args);
#define __Pyx_Coroutine_SwapException(self) {\
    __Pyx_ExceptionSwap(&(self)->exc_type, &(self)->exc_value, &(self)->exc_traceback);\
    __Pyx_Coroutine_ResetFrameBackpointer(self);\
    }
#define __Pyx_Coroutine_ResetAndClearException(self) {\
    __Pyx_ExceptionReset((self)->exc_type, (self)->exc_value, (self)->exc_traceback);\
    (self)->exc_type = (self)->exc_value = (self)->exc_traceback = NULL;\
    }
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyGen_FetchStopIterationValue(pvalue)\
    __Pyx_PyGen__FetchStopIterationValue(__pyx_tstate, pvalue)
#else
#define __Pyx_PyGen_FetchStopIterationValue(pvalue)\
    __Pyx_PyGen__FetchStopIterationValue(__Pyx_PyThreadState_Current, pvalue)
#endif
static int __Pyx_PyGen__FetchStopIterationValue(PyThreadState *tstate, PyObject **pvalue);
static CYTHON_INLINE void __Pyx_Coroutine_ResetFrameBackpointer(__pyx_CoroutineObject *self);

/* PatchModuleWithCoroutine.proto */
static PyObject* __Pyx_Coroutine_patch_module(PyObject* module, const char* py_code);

/* PatchGeneratorABC.proto */
static int __Pyx_patch_abc(void);

/* Generator.proto */
#define __Pyx_Generator_USED
static PyTypeObject *__pyx_GeneratorType = 0;
#define __Pyx_Generator_CheckExact(obj) (Py_TYPE(obj) == __pyx_GeneratorType)
#define __Pyx_Generator_New(body, closure, name, qualname, module_name)\
    __Pyx__Coroutine_New(__pyx_GeneratorType, body, closure, name, qualname, module_name)
static PyObject *__Pyx_Generator_Next(PyObject *self);
static int __pyx_Generator_init(void);

/* CheckBinaryVersion.proto */
static int __Pyx_check_binary_version(void);

/* PyIdentifierFromString.proto */
#if !defined(__Pyx_PyIdentifier_FromString)
#if PY_MAJOR_VERSION < 3
  #define __Pyx_PyIdentifier_FromString(s) PyString_FromString(s)
#else
  #define __Pyx_PyIdentifier_FromString(s) PyUnicode_FromString(s)
#endif
#endif

/* ModuleImport.proto */
static PyObject *__Pyx_ImportModule(const char *name);

/* TypeImport.proto */
static PyTypeObject *__Pyx_ImportType(const char *module_name, const char *class_name, size_t size, int strict);

/* InitStrings.proto */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);

static PyObject *__pyx_f_5tubes_6Chains_make_chains_iters(struct __pyx_obj_5tubes_Chains *__pyx_v_self, struct __pyx_opt_args_5tubes_6Chains_make_chains_iters *__pyx_optional_args); /* proto*/
static struct __pyx_obj_5tubes_IterWrapper *__pyx_f_5tubes_4Tube__make_iter(CYTHON_UNUSED struct __pyx_obj_5tubes_Tube *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_args); /* proto*/
static PyObject *__pyx_f_5tubes_4Tube__describe_self(CYTHON_UNUSED struct __pyx_obj_5tubes_Tube *__pyx_v_self, int __pyx_skip_dispatch); /* proto*/
static PyObject *__pyx_f_5tubes_4Tube__repr(struct __pyx_obj_5tubes_Tube *__pyx_v_self, struct __pyx_opt_args_5tubes_4Tube__repr *__pyx_optional_args); /* proto*/
static PyObject *__pyx_f_5tubes_4Tube__set_name_lookup(struct __pyx_obj_5tubes_Tube *__pyx_v_self, struct __pyx_obj_5tubes_NameLookup *__pyx_v_lookup); /* proto*/
static struct __pyx_obj_5tubes_NameLookup *__pyx_f_5tubes_4Tube_name_lookup(struct __pyx_obj_5tubes_Tube *__pyx_v_self); /* proto*/
static struct __pyx_obj_5tubes_IterWrapper *__pyx_f_5tubes_4Each__make_iter(struct __pyx_obj_5tubes_Each *__pyx_v_self, PyObject *__pyx_v_args); /* proto*/
static ss::PyObj __pyx_f_5tubes_4Each__ob_to_iter(struct __pyx_obj_5tubes_Each *__pyx_v_self); /* proto*/
static PyObject *__pyx_f_5tubes_4Each__describe_self(struct __pyx_obj_5tubes_Each *__pyx_v_self, CYTHON_UNUSED int __pyx_skip_dispatch); /* proto*/
static struct __pyx_obj_5tubes_IterWrapper *__pyx_f_5tubes_3Zip__make_iter(struct __pyx_obj_5tubes_Zip *__pyx_v_self, PyObject *__pyx_v_args); /* proto*/
static std::vector<ss::iter::AnyIter>  __pyx_f_5tubes_3Zip__make_iters(CYTHON_UNUSED struct __pyx_obj_5tubes_Zip *__pyx_v_self, PyObject *__pyx_v_args); /* proto*/
static PyObject *__pyx_f_5tubes_3Zip__describe_self(struct __pyx_obj_5tubes_Zip *__pyx_v_self, CYTHON_UNUSED int __pyx_skip_dispatch); /* proto*/
static struct __pyx_obj_5tubes_IterWrapper *__pyx_f_5tubes_7SlotGet__make_iter(struct __pyx_obj_5tubes_SlotGet *__pyx_v_self, PyObject *__pyx_v_args); /* proto*/
static PyObject *__pyx_f_5tubes_7SlotGet__describe_self(struct __pyx_obj_5tubes_SlotGet *__pyx_v_self, CYTHON_UNUSED int __pyx_skip_dispatch); /* proto*/
static struct __pyx_obj_5tubes_IterWrapper *__pyx_f_5tubes_10NameLookup__make_iter(struct __pyx_obj_5tubes_NameLookup *__pyx_v_self, PyObject *__pyx_v_args); /* proto*/
static PyObject *__pyx_f_5tubes_10NameLookup__describe_self(struct __pyx_obj_5tubes_NameLookup *__pyx_v_self, CYTHON_UNUSED int __pyx_skip_dispatch); /* proto*/
static PyObject *__pyx_f_5tubes_10NameLookup_lookup_name(struct __pyx_obj_5tubes_NameLookup *__pyx_v_self, PyObject *__pyx_v_name, PyObject *__pyx_v_default); /* proto*/
static PyObject *__pyx_f_5tubes_10NameLookup_get_slot_shared(struct __pyx_obj_5tubes_NameLookup *__pyx_v_self, size_t __pyx_v_index, PyObject *__pyx_v_default); /* proto*/
static struct __pyx_obj_5tubes_IterWrapper *__pyx_f_5tubes_5Multi__make_iter(struct __pyx_obj_5tubes_Multi *__pyx_v_self, PyObject *__pyx_v_args); /* proto*/
static std::vector<ss::iter::AnyIter>  __pyx_f_5tubes_5Multi__make_iters(CYTHON_UNUSED struct __pyx_obj_5tubes_Multi *__pyx_v_self, PyObject *__pyx_v_args); /* proto*/
static PyObject *__pyx_f_5tubes_5Multi__describe_self(struct __pyx_obj_5tubes_Multi *__pyx_v_self, CYTHON_UNUSED int __pyx_skip_dispatch); /* proto*/
static struct __pyx_obj_5tubes_IterWrapper *__pyx_f_5tubes_9JsonParse__make_iter(struct __pyx_obj_5tubes_JsonParse *__pyx_v_self, PyObject *__pyx_v_args); /* proto*/
static PyObject *__pyx_f_5tubes_9JsonParse__describe_self(CYTHON_UNUSED struct __pyx_obj_5tubes_JsonParse *__pyx_v_self, CYTHON_UNUSED int __pyx_skip_dispatch); /* proto*/
static struct __pyx_obj_5tubes_IterWrapper *__pyx_f_5tubes_4ToPy__make_iter(struct __pyx_obj_5tubes_ToPy *__pyx_v_self, PyObject *__pyx_v_args); /* proto*/
static PyObject *__pyx_f_5tubes_4ToPy__describe_self(CYTHON_UNUSED struct __pyx_obj_5tubes_ToPy *__pyx_v_self, CYTHON_UNUSED int __pyx_skip_dispatch); /* proto*/
static struct __pyx_obj_5tubes_IterWrapper *__pyx_f_5tubes_10SkipUnless__make_iter(struct __pyx_obj_5tubes_SkipUnless *__pyx_v_self, PyObject *__pyx_v_args); /* proto*/
static PyObject *__pyx_f_5tubes_10SkipUnless__describe_self(struct __pyx_obj_5tubes_SkipUnless *__pyx_v_self, CYTHON_UNUSED int __pyx_skip_dispatch); /* proto*/
static struct __pyx_obj_5tubes_IterWrapper *__pyx_f_5tubes_8ReadFile__make_iter(struct __pyx_obj_5tubes_ReadFile *__pyx_v_self, PyObject *__pyx_v_args); /* proto*/
static PyObject *__pyx_f_5tubes_8ReadFile__describe_self(CYTHON_UNUSED struct __pyx_obj_5tubes_ReadFile *__pyx_v_self, CYTHON_UNUSED int __pyx_skip_dispatch); /* proto*/
static struct __pyx_obj_5tubes_IterWrapper *__pyx_f_5tubes_10ChainTubes__make_iter(struct __pyx_obj_5tubes_ChainTubes *__pyx_v_self, PyObject *__pyx_v_args); /* proto*/
static PyObject *__pyx_f_5tubes_10ChainTubes__describe_self(struct __pyx_obj_5tubes_ChainTubes *__pyx_v_self, CYTHON_UNUSED int __pyx_skip_dispatch); /* proto*/
static std::vector<ss::iter::AnyIter>  __pyx_f_5tubes_10ChainTubes__make_iters(CYTHON_UNUSED struct __pyx_obj_5tubes_ChainTubes *__pyx_v_self, PyObject *__pyx_v_args); /* proto*/
static std::vector<struct ss::iter::Chain>  __pyx_f_5tubes_10ChainTubes__make_chains(CYTHON_UNUSED struct __pyx_obj_5tubes_ChainTubes *__pyx_v_self, PyObject *__pyx_v_args); /* proto*/
static struct __pyx_obj_5tubes_IterWrapper *__pyx_f_5tubes_4Skip__make_iter(struct __pyx_obj_5tubes_Skip *__pyx_v_self, PyObject *__pyx_v_args); /* proto*/
static PyObject *__pyx_f_5tubes_4Skip__describe_self(struct __pyx_obj_5tubes_Skip *__pyx_v_self, CYTHON_UNUSED int __pyx_skip_dispatch); /* proto*/
static struct __pyx_obj_5tubes_IterWrapper *__pyx_f_5tubes_7FileMap__make_iter(struct __pyx_obj_5tubes_FileMap *__pyx_v_self, PyObject *__pyx_v_args); /* proto*/
static PyObject *__pyx_f_5tubes_7FileMap__describe_self(CYTHON_UNUSED struct __pyx_obj_5tubes_FileMap *__pyx_v_self, CYTHON_UNUSED int __pyx_skip_dispatch); /* proto*/
static struct __pyx_obj_5tubes_IterWrapper *__pyx_f_5tubes_6Gunzip__make_iter(struct __pyx_obj_5tubes_Gunzip *__pyx_v_self, PyObject *__pyx_v_args); /* proto*/
static PyObject *__pyx_f_5tubes_6Gunzip__describe_self(struct __pyx_obj_5tubes_Gunzip *__pyx_v_self, CYTHON_UNUSED int __pyx_skip_dispatch); /* proto*/
static struct __pyx_obj_5tubes_IterWrapper *__pyx_f_5tubes_5Count__make_iter(struct __pyx_obj_5tubes_Count *__pyx_v_self, PyObject *__pyx_v_args); /* proto*/
static PyObject *__pyx_f_5tubes_5Count__describe_self(struct __pyx_obj_5tubes_Count *__pyx_v_self, CYTHON_UNUSED int __pyx_skip_dispatch); /* proto*/
static struct __pyx_obj_5tubes_IterWrapper *__pyx_f_5tubes_7Compare__make_iter(struct __pyx_obj_5tubes_Compare *__pyx_v_self, PyObject *__pyx_v_args); /* proto*/
static PyObject *__pyx_f_5tubes_7Compare__describe_self(struct __pyx_obj_5tubes_Compare *__pyx_v_self, CYTHON_UNUSED int __pyx_skip_dispatch); /* proto*/
static struct __pyx_obj_5tubes_IterWrapper *__pyx_f_5tubes_5First__make_iter(struct __pyx_obj_5tubes_First *__pyx_v_self, PyObject *__pyx_v_args); /* proto*/
static PyObject *__pyx_f_5tubes_5First__describe_self(struct __pyx_obj_5tubes_First *__pyx_v_self, CYTHON_UNUSED int __pyx_skip_dispatch); /* proto*/
static struct __pyx_obj_5tubes_IterWrapper *__pyx_f_5tubes_5Split__make_iter(struct __pyx_obj_5tubes_Split *__pyx_v_self, PyObject *__pyx_v_args); /* proto*/
static PyObject *__pyx_f_5tubes_5Split__describe_self(struct __pyx_obj_5tubes_Split *__pyx_v_self, CYTHON_UNUSED int __pyx_skip_dispatch); /* proto*/
static struct __pyx_obj_5tubes_IterWrapper *__pyx_f_5tubes_7Convert__make_iter(struct __pyx_obj_5tubes_Convert *__pyx_v_self, PyObject *__pyx_v_args); /* proto*/
static PyObject *__pyx_f_5tubes_7Convert__describe_self(struct __pyx_obj_5tubes_Convert *__pyx_v_self, CYTHON_UNUSED int __pyx_skip_dispatch); /* proto*/
static std::vector<ss::iter::ScalarType>  __pyx_f_5tubes_7Convert_dtype_vec(struct __pyx_obj_5tubes_Convert *__pyx_v_self); /* proto*/
static struct __pyx_obj_5tubes_IterWrapper *__pyx_f_5tubes_5Chunk__make_iter(struct __pyx_obj_5tubes_Chunk *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_args); /* proto*/
static std::vector<ss::iter::AnyIter>  __pyx_f_5tubes_5Chunk__make_iters(CYTHON_UNUSED struct __pyx_obj_5tubes_Chunk *__pyx_v_self, PyObject *__pyx_v_args); /* proto*/
static PyObject *__pyx_f_5tubes_5Chunk__describe_self(struct __pyx_obj_5tubes_Chunk *__pyx_v_self, CYTHON_UNUSED int __pyx_skip_dispatch); /* proto*/

/* Module declarations from 'cython' */

/* Module declarations from 'scalar_type' */

/* Module declarations from 'libcpp.vector' */

/* Module declarations from 'libc.string' */

/* Module declarations from 'libc.stdio' */

/* Module declarations from '__builtin__' */

/* Module declarations from 'cpython.type' */
static PyTypeObject *__pyx_ptype_7cpython_4type_type = 0;

/* Module declarations from 'cpython' */

/* Module declarations from 'cpython.object' */

/* Module declarations from 'cpython.ref' */

/* Module declarations from 'libc.stdint' */

/* Module declarations from 'libcpp.string' */

/* Module declarations from 'libcpp' */

/* Module declarations from 'tubes' */
static PyTypeObject *__pyx_ptype_5tubes_IterWrapper = 0;
static PyTypeObject *__pyx_ptype_5tubes_DType = 0;
static PyTypeObject *__pyx_ptype_5tubes_TubeIter = 0;
static PyTypeObject *__pyx_ptype_5tubes_TubeSingleIter = 0;
static PyTypeObject *__pyx_ptype_5tubes_TubeMultiIter = 0;
static PyTypeObject *__pyx_ptype_5tubes_Chains = 0;
static PyTypeObject *__pyx_ptype_5tubes_Tube = 0;
static PyTypeObject *__pyx_ptype_5tubes_Each = 0;
static PyTypeObject *__pyx_ptype_5tubes_Zip = 0;
static PyTypeObject *__pyx_ptype_5tubes_SlotGet = 0;
static PyTypeObject *__pyx_ptype_5tubes_NameLookup = 0;
static PyTypeObject *__pyx_ptype_5tubes_Multi = 0;
static PyTypeObject *__pyx_ptype_5tubes_JsonParse = 0;
static PyTypeObject *__pyx_ptype_5tubes_ToPy = 0;
static PyTypeObject *__pyx_ptype_5tubes_SkipUnless = 0;
static PyTypeObject *__pyx_ptype_5tubes_ReadFile = 0;
static PyTypeObject *__pyx_ptype_5tubes_ChainTubes = 0;
static PyTypeObject *__pyx_ptype_5tubes_Skip = 0;
static PyTypeObject *__pyx_ptype_5tubes_FileMap = 0;
static PyTypeObject *__pyx_ptype_5tubes_Gunzip = 0;
static PyTypeObject *__pyx_ptype_5tubes_Count = 0;
static PyTypeObject *__pyx_ptype_5tubes_Compare = 0;
static PyTypeObject *__pyx_ptype_5tubes_First = 0;
static PyTypeObject *__pyx_ptype_5tubes_Split = 0;
static PyTypeObject *__pyx_ptype_5tubes_Convert = 0;
static PyTypeObject *__pyx_ptype_5tubes_Chunk = 0;
static PyTypeObject *__pyx_ptype_5tubes___pyx_scope_struct____next__ = 0;
static PyTypeObject *__pyx_ptype_5tubes___pyx_scope_struct_1_genexpr = 0;
static PyTypeObject *__pyx_ptype_5tubes___pyx_scope_struct_2_ordered = 0;
static PyTypeObject *__pyx_ptype_5tubes___pyx_scope_struct_3___pyx_lambda_funcdef_lambda1 = 0;
static PyTypeObject *__pyx_ptype_5tubes___pyx_scope_struct_4_genexpr = 0;
static PyTypeObject *__pyx_ptype_5tubes___pyx_scope_struct_5___get__ = 0;
static PyTypeObject *__pyx_ptype_5tubes___pyx_scope_struct_6_genexpr = 0;
static PyTypeObject *__pyx_ptype_5tubes___pyx_scope_struct_7___get__ = 0;
static PyTypeObject *__pyx_ptype_5tubes___pyx_scope_struct_8_genexpr = 0;
static PyTypeObject *__pyx_ptype_5tubes___pyx_scope_struct_9___get__ = 0;
static PyTypeObject *__pyx_ptype_5tubes___pyx_scope_struct_10_genexpr = 0;
static PyObject *__pyx_v_5tubes_UNDEFINED = 0;
__PYX_EXTERN_C DL_EXPORT(PyObject) *UNDEFINED_OBJ;
static CYTHON_INLINE PyObject *__pyx_f_5tubes_wrap(ss::iter::AnyIter); /*proto*/
static PyObject *__pyx_f_5tubes__make_dtype(ss::iter::ScalarType, PyObject *); /*proto*/
static struct ss::iter::Chain __pyx_f_5tubes_iters_to_c_chain(PyObject *); /*proto*/
static PyObject *__pyx_f_5tubes___pyx_unpickle_Tube__set_state(struct __pyx_obj_5tubes_Tube *, PyObject *); /*proto*/
static std::string __pyx_convert_string_from_py_std__in_string(PyObject *); /*proto*/
static std::vector<std::string>  __pyx_convert_vector_from_py_std_3a__3a_string(PyObject *); /*proto*/
#define __Pyx_MODULE_NAME "tubes"
extern int __pyx_module_is_main_tubes;
int __pyx_module_is_main_tubes = 0;

/* Implementation of 'tubes' */
static PyObject *__pyx_builtin_object;
static PyObject *__pyx_builtin_TypeError;
static PyObject *__pyx_builtin_range;
static PyObject *__pyx_builtin_sorted;
static PyObject *__pyx_builtin_max;
static PyObject *__pyx_builtin_ValueError;
static PyObject *__pyx_builtin_NotImplementedError;
static PyObject *__pyx_builtin_IndexError;
static PyObject *__pyx_builtin_zip;
static const char __pyx_k__3[] = "]";
static const char __pyx_k_fs[] = "fs";
static const char __pyx_k_it[] = "it";
static const char __pyx_k_op[] = "op";
static const char __pyx_k_to[] = "to";
static const char __pyx_k_Zip[] = "Zip(";
static const char __pyx_k__19[] = ".";
static const char __pyx_k__20[] = "\n";
static const char __pyx_k__25[] = "...";
static const char __pyx_k__27[] = ")";
static const char __pyx_k__32[] = ", ";
static const char __pyx_k__36[] = "";
static const char __pyx_k_add[] = "add";
static const char __pyx_k_doc[] = "__doc__";
static const char __pyx_k_get[] = "get";
static const char __pyx_k_key[] = "key";
static const char __pyx_k_max[] = "max";
static const char __pyx_k_new[] = "__new__";
static const char __pyx_k_num[] = "num";
static const char __pyx_k_sep[] = "sep";
static const char __pyx_k_str[] = "str";
static const char __pyx_k_zip[] = "zip";
static const char __pyx_k_Bool[] = "Bool";
static const char __pyx_k_Each[] = "Each(";
static const char __pyx_k_Json[] = "Json";
static const char __pyx_k_Null[] = "Null";
static const char __pyx_k_Skip[] = "Skip(";
static const char __pyx_k_ToPy[] = "ToPy()";
static const char __pyx_k_Utf8[] = "Utf8";
static const char __pyx_k_args[] = "args";
static const char __pyx_k_dict[] = "__dict__";
static const char __pyx_k_each[] = "each";
static const char __pyx_k_iter[] = "_iter";
static const char __pyx_k_main[] = "__main__";
static const char __pyx_k_name[] = "__name__";
static const char __pyx_k_next[] = "__next__";
static const char __pyx_k_rank[] = "rank";
static const char __pyx_k_send[] = "send";
static const char __pyx_k_test[] = "__test__";
static const char __pyx_k_tube[] = "tube";
static const char __pyx_k_Chunk[] = "Chunk(";
static const char __pyx_k_Count[] = "Count(";
static const char __pyx_k_DType[] = "DType[";
static const char __pyx_k_First[] = "First(";
static const char __pyx_k_Float[] = "Float";
static const char __pyx_k_Int64[] = "Int64";
static const char __pyx_k_Multi[] = "Multi(";
static const char __pyx_k_Split[] = "Split(";
static const char __pyx_k_ascii[] = "ascii";
static const char __pyx_k_bytes[] = "bytes";
static const char __pyx_k_chunk[] = "chunk";
static const char __pyx_k_close[] = "close";
static const char __pyx_k_codec[] = "codec";
static const char __pyx_k_dtype[] = "dtype";
static const char __pyx_k_float[] = "float";
static const char __pyx_k_index[] = "index";
static const char __pyx_k_items[] = "items";
static const char __pyx_k_iters[] = "iters";
static const char __pyx_k_range[] = "range";
static const char __pyx_k_slots[] = " slots";
static const char __pyx_k_start[] = "start";
static const char __pyx_k_throw[] = "throw";
static const char __pyx_k_to_py[] = "to_py";
static const char __pyx_k_tubes[] = "tubes";
static const char __pyx_k_utf_8[] = "utf-8";
static const char __pyx_k_value[] = "value";
static const char __pyx_k_Gunzip[] = "Gunzip(";
static const char __pyx_k_Object[] = "Object";
static const char __pyx_k_chains[] = "_chains";
static const char __pyx_k_encode[] = "encode";
static const char __pyx_k_import[] = "__import__";
static const char __pyx_k_inputs[] = "_inputs";
static const char __pyx_k_object[] = "object";
static const char __pyx_k_output[] = "output";
static const char __pyx_k_parent[] = "parent";
static const char __pyx_k_pickle[] = "pickle";
static const char __pyx_k_reduce[] = "__reduce__";
static const char __pyx_k_sorted[] = "sorted";
static const char __pyx_k_stream[] = "stream";
static const char __pyx_k_update[] = "update";
static const char __pyx_k_values[] = "values";
static const char __pyx_k_verify[] = "verify";
static const char __pyx_k_Compare[] = "Compare(";
static const char __pyx_k_Convert[] = "Convert(";
static const char __pyx_k_FileMap[] = "FileMap()";
static const char __pyx_k_SlotGet[] = "SlotGet(";
static const char __pyx_k_default[] = "default";
static const char __pyx_k_genexpr[] = "genexpr";
static const char __pyx_k_ordered[] = "ordered";
static const char __pyx_k_parents[] = "parents";
static const char __pyx_k_partial[] = "partial";
static const char __pyx_k_py_iter[] = "py_iter";
static const char __pyx_k_reverse[] = "reverse";
static const char __pyx_k_start_2[] = "_start";
static const char __pyx_k_wrapped[] = "wrapped";
static const char __pyx_k_Expected[] = "Expected ";
static const char __pyx_k_JsonUtf8[] = "JsonUtf8";
static const char __pyx_k_ReadFile[] = "ReadFile()";
static const char __pyx_k_getstate[] = "__getstate__";
static const char __pyx_k_inputs_2[] = "inputs";
static const char __pyx_k_pyx_type[] = "__pyx_type";
static const char __pyx_k_setstate[] = "__setstate__";
static const char __pyx_k_to_types[] = "to_types";
static const char __pyx_k_ByteSlice[] = "ByteSlice";
static const char __pyx_k_DTYPE_MAP[] = "DTYPE_MAP";
static const char __pyx_k_JsonParse[] = "JsonParse()";
static const char __pyx_k_TypeError[] = "TypeError";
static const char __pyx_k_chunk_pxi[] = "chunk.pxi";
static const char __pyx_k_functools[] = "functools";
static const char __pyx_k_make_iter[] = "_make_iter";
static const char __pyx_k_pyx_state[] = "__pyx_state";
static const char __pyx_k_reduce_ex[] = "__reduce_ex__";
static const char __pyx_k_ChainTubes[] = "ChainTubes(";
static const char __pyx_k_IndexError[] = "IndexError";
static const char __pyx_k_NameLookup[] = "NameLookup(";
static const char __pyx_k_SkipUnless[] = "SkipUnless(";
static const char __pyx_k_ValueError[] = "ValueError";
static const char __pyx_k_chunk_size[] = "chunk_size";
static const char __pyx_k_pyx_result[] = "__pyx_result";
static const char __pyx_k_pyx_vtable[] = "__pyx_vtable__";
static const char __pyx_k_root_chain[] = "root_chain";
static const char __pyx_k_setdefault[] = "setdefault";
static const char __pyx_k_PickleError[] = "PickleError";
static const char __pyx_k_conditional[] = "conditional";
static const char __pyx_k_default_val[] = "default_val";
static const char __pyx_k_name_lookups[] = "_name_lookups";
static const char __pyx_k_pyx_checksum[] = "__pyx_checksum";
static const char __pyx_k_stringsource[] = "stringsource";
static const char __pyx_k_describe_self[] = "_describe_self";
static const char __pyx_k_reduce_cython[] = "__reduce_cython__";
static const char __pyx_k_Chains_ordered[] = "Chains.ordered";
static const char __pyx_k_Cannot_get_slot[] = "Cannot get slot ";
static const char __pyx_k_pyx_PickleError[] = "__pyx_PickleError";
static const char __pyx_k_setstate_cython[] = "__setstate_cython__";
static const char __pyx_k_Tube_gt_line_382[] = "Tube.gt (line 382)";
static const char __pyx_k_Tube_lt_line_393[] = "Tube.lt (line 393)";
static const char __pyx_k_from_parent_with[] = " from parent with ";
static const char __pyx_k_update_each_iter[] = "update_each_iter";
static const char __pyx_k_Tube_get_line_272[] = "Tube.get (line 272)";
static const char __pyx_k_Tube_zip_line_351[] = "Tube.zip (line 351)";
static const char __pyx_k_pyx_unpickle_Tube[] = "__pyx_unpickle_Tube";
static const char __pyx_k_Tube_json_line_221[] = "Tube.json (line 221)";
static const char __pyx_k_Tube_skip_line_132[] = "Tube.skip (line 132)";
static const char __pyx_k_cline_in_traceback[] = "cline_in_traceback";
static const char __pyx_k_NotImplementedError[] = "NotImplementedError";
static const char __pyx_k_Tube_chunk_line_404[] = "Tube.chunk (line 404)";
static const char __pyx_k_Tube_first_line_120[] = "Tube.first (line 120)";
static const char __pyx_k_Tube_multi_line_250[] = "Tube.multi (line 250)";
static const char __pyx_k_Tube_split_line_205[] = "Tube.split (line 205)";
static const char __pyx_k_Tube_equals_line_368[] = "Tube.equals (line 368)";
static const char __pyx_k_Tube_gunzip_line_188[] = "Tube.gunzip (line 188)";
static const char __pyx_k_next___locals_genexpr[] = "__next__.<locals>.genexpr";
static const char __pyx_k_ordered_locals_lambda[] = "ordered.<locals>.<lambda>";
static const char __pyx_k_Tube_enumerate_line_338[] = "Tube.enumerate (line 338)";
static const char __pyx_k_Tube_in_multiple_chains[] = "Tube in multiple chains";
static const char __pyx_k_Tube_read_files_line_165[] = "Tube.read_files (line 165)";
static const char __pyx_k_inputs_to__make_iter_got[] = " inputs to _make_iter, got ";
static const char __pyx_k_Tube_skip_unless_line_309[] = "Tube.skip_unless (line 309)";
static const char __pyx_k_Zip___get___locals_genexpr[] = "Zip.__get__.<locals>.genexpr";
static const char __pyx_k_Multi___get___locals_genexpr[] = "Multi.__get__.<locals>.genexpr";
static const char __pyx_k_Combine_two_inputs_into_one_by[] = "\n        Combine two inputs into one, by joining their dtypes, and iterating both\n        together.\n\n        >>> first = Each(['a', 'b', 'c']).to(str)\n        >>> second = Each([1, 2, 3]).to(int)\n        >>> (first.dtype, second.dtype)\n        ((DType[Utf8],), (DType[Int64],))\n        >>> first.zip(second).dtype\n        (DType[Utf8], DType[Int64])\n        >>>  list(first.zip(second))\n        [('a', 1), ('b', 2), ('c', 3)]\n\n        ";
static const char __pyx_k_Compatibility_list_tube_equals[] = "\n        Compatibility: list(tube.equals(value))\n\n        Compare the values in parent against a static value, and output a ``bool``\n        tube with the result of that comparison.\n\n        >>> list(Each(['apple', 'banana', 'cloud']).to(str).equals('banana'))\n        [False, True, False]\n        >>> list(Each([False, 0, '']).equals(False))\n        [True, True, False]\n        ";
static const char __pyx_k_Compatibility_tube_gunzip_zlib[] = "\n        Compatibility: tube.gunzip()\n        zlib/gzip decompress the input bytes, returning a view of up to 16 \n        megabytes of decompressed data.\n\n        By default, this assumes that each input slice is an entire stream \n        (i.e. from map_files).  Setting `stream=True` treats all input values\n        as part of a single gzip stream.\n\n        >>> list(Each([\"file.gz\", \"file2.gz\"]).map_files().gunzip())\n        [\"file1 contents\", \"file2 contents\"]\n        >>> list(Each([\"file.gz\", \"file2.gz\"]).read_files().gunzip(stream=True).chunk(1))\n        [\"file1 contents\", \"file2 contents\"]\n        ";
static const char __pyx_k_Compatibility_tube_skip_unless[] = "\n        Compatibility: tube.skip_unless(lambda x: x.to(bool))\n\n        ``conditional`` must either be a callable that takes a single tube \n        argument (the parent), and returns a ``bool`` tube, or a  ``bool`` tube.\n\n        Iterates over conditional and the parent together, yielding values only\n        where the result of conditional is True.\n\n        Stops only when either the input __or__ conditional raise ``StopIteration``.\n        This can be sligtly unexpected in, for example, this case:  \n        :code:`Count().skip_unless(lambda x: x.lt(3))`\n        in which case, the result is :code:`[0, 1, 2]`, but iteration over the \n        tube will never complete because ``skip_unless`` isn't clever enough to \n        work out that the condition tube will never return another ``True``.\n        In this case, an explicit :code:`.first(n)` will limit the run time.\n\n        >>> list(Count().skip_unless(lambda x: x.gt(4)).first(2))\n        [5, 6]\n        >>> list(Count().skip_unless(Each([False, True, False]).to(bool)))\n        [1]\n        ";
static const char __pyx_k_Compatibility_tube_split_Split[] = "\n        Compatibility: tube.split()\n        Split the input view  on the character `sep`.  This behaves similarly\n        to the python :func:`str.split()` function.\n\n        This iterator will typically produce multiple values for each input\n        value, as each split produces a new output value.\n\n        >>> list(Each(['a.b.c', 'd.e']).split(\".\"))\n        ['a', 'b', 'c', 'd', 'e']\n        >>> list(Each(['ab\\ncd', 'ef\\ngh']).split())\n        ['ab', 'cd', 'ef', 'gh']\n        ";
static const char __pyx_k_Cannot_make_a_FileMap_Tube_with[] = "Cannot make a FileMap Tube with 'parent' tube of type ";
static const char __pyx_k_Compatibility_list_tube_gt_valu[] = "\n        Compatibility: list(tube.gt(value))\n\n        Return a bool tube, that is True if the input is greater than value, otherwise False\n        \n        >>> list(Count().skip_unless(lambda x: x.gt(4)).first(2))\n        [5, 6]\n        ";
static const char __pyx_k_Compatibility_list_tube_lt_valu[] = "\n        Compatibility: list(tube.lt(value))\n\n        Return a bool tube, that is True if the input is less than value, otherwise False\n        \n        >>> list(Count().skip_unless(lambda x: x.lt(4)).first(100))\n        [0, 1, 2, 3]\n        ";
static const char __pyx_k_Compatibility_tube_chunk_2_Recu[] = "\n        Compatibility: tube.chunk(2)\n\n        Recursively look at the inputs to find an Each() tube.  If a single\n        Each() tube with a list/tuple contents is found, split the value into\n        ``num`` sized chunks, and chain them together.\n\n        This is a bit of a hack to support some tricky use-cases (for example\n        reading very large g-zipped files requires treating every file as a \n        different gzip stream, so calling .chunk(1) allows this to work)\n\n        It's also an experiment to see how multi-threading may work in the future\n\n        >>> list(Each([\"file.gz\", \"file2.gz\"]).read_files().gunzip(stream=True))\n        Traceback (most recent call last):\n        ...\n        ValueError: Trailing data in gzip stream\n        >>> list(Each([\"file.gz\", \"file2.gz\"]).read_files().gunzip(stream=True).chunk(1))\n        [\"file1 contents\", \"file2 contents\"]\n        ";
static const char __pyx_k_Compatibility_tube_enumerate_Si[] = "\n        Compatibility: tube.enumerate()\n        Similar to the python builtin :func:``enumerate`` function, prefix\n        the tube's dtype with an Int64 counter, starting from ``start``\n\n        >>> list(Each(['a', 'b', 'c']).enumerate())\n        [(0, 'a'), (1, 'b'), (2, 'c')]\n        >>> list(Each(['a', 'b', 'c']).enumerate(10))\n        [(10, 'a'), (11, 'b'), (12, 'c')]\n        ";
static const char __pyx_k_Compatibility_tube_first_5_Crea[] = "\n        Compatibility: tube.first(5)\n        Create a tube that yields no more than the first `num` items from its parent.\n\n        >>>  list(Each([1,2,3,4,5]).first(1))\n        [1]\n        >>>  list(Each([1,2,3,4,5]).first(10))\n        [1, 2, 3, 4, 5]\n        ";
static const char __pyx_k_Compatibility_tube_get_field_Ef[] = "\n        Compatibility: tube.get(\"field\")\n\n        Efficiently read the field ``key`` from the input object and\n        return it's value.  \n\n        If field is missing and a ``default`` is provided, return ``default``,\n        otherwise raise.  \n\n        ``default`` must be a valid value for the input type.\n        For example, if the input is a Json dtype, default must be a string/bytes\n        value that is valid JSON (e.g. ``'null'``)\n\n        >>> list(Each(['{\"a\": 1}', '{\"a\": 2}']).json().get(\"a\"))\n        [1, 2]\n        >>> list(Each(['{\"a\": 1}', '{\"b\": 2}']).json().get(\"a\"))\n        Traceback (most recent call last):\n        ...\n        KeyError: Field not found\n        >>> list(Each(['{\"a\": 1}', '{\"b\": 2}']).json().get(\"a\", \"null\"))\n        [1, None]\n        ";
static const char __pyx_k_Compatibility_tube_json_Interpr[] = "\n        Compatibility: tube.json()\n        Interpret the input as JSON documents.\n        The JSON parser is *not* validating, and will accept invalid JSON.\n\n        >>> list(Each(['1', '{}', '[]', 'null']).to(tubes.Utf8).json())\n        [1, {}, [], None]\n        >>> list(Each(['neil']).to(tubes.Utf8).json())\n        [None]\n        ";
static const char __pyx_k_Compatibility_tube_multi_lambda[] = "\n        Compatibility: tube.multi(lambda x: (x, ))\n\n        Perform multiple operations on a tube, and return a tube with `n` slots\n\n        ``makers`` should be a callable that takes the input tube, and returns a \n        tuple of tubes derived from the input.\n\n        >>> list(Count().multi(lambda x: (x.lt(1), x.equals(1), x.gt(1))).first(3))\n        [(True, False, False), (False, True, False), (False, False, True)]\n\n        ";
static const char __pyx_k_Compatibility_tube_skip_5_Creat[] = "\n        Compatibility: tube.skip(5)\n        Create a tube that skips the first `num` items, yielding any furthe times.\n\n        >>>  list(Each([1,2,3,4,5]).skip(1))\n        [2, 3, 4, 5]\n        >>>  list(Each([1,2,3,4,5]).skip(10))\n        []\n        ";
static const char __pyx_k_Compatible_Dtypes_bytes_Utf8_Fo[] = "\n        Compatible Dtypes: ``bytes``, ``Utf8``\n\n        For each filename from the input, open the file and read successive\n        chunks of data from it.  Each new file will start at  the beginning of\n        a slice, but a single file may result in multiple slices.\n\n        Care must be taken when using this with iterators that have file-level\n        context (for example gunzip()) as file boundaries are not communicated.\n\n        `chunk(1)` may be used to process files in isolation before compbining the \n        iterators.\n\n        >>> list(Each(['file1.txt']).read_files().split())\n        ['file 1, line 1', 'file 1, line 2']\n        >>> list(Each(['file1.txt', 'file2.txt']).read_files().split().skip(1).chunk(1))\n        ['file 1 line 2', 'file 1 line 3', 'file 2 line 2', ...]\n        ";
static const char __pyx_k_Tubes_Tubes_is_a_library_for_ef[] = "\nTubes\n-------\n\nTubes is a library for efficient data loading.  Implemented as a cython/c++\nextension module, it can extract data from large datasets much faster than\nby using traditional python methods.\n\n";
static const char __pyx_k_Cannot_chunk_tubes_without_a_sin[] = "Cannot chunk tubes without a single fixed-sized Each input";
static const char __pyx_k_Cannot_make_a_JsonParse_Tube_wit[] = "Cannot make a JsonParse Tube with 'parent' tube of type ";
static const char __pyx_k_Cannot_make_a_ReadFile_Tube_with[] = "Cannot make a ReadFile Tube with 'parent' tube of type ";
static const char __pyx_k_Cannot_make_a_SkipUnless_Tube_wi[] = "Cannot make a SkipUnless Tube with 'conditional' tube of type ";
static const char __pyx_k_Cannot_make_a_Split_Tube_with_pa[] = "Cannot make a Split Tube with 'parent' tube of type ";
static const char __pyx_k_ChainTubes___get___locals_genexp[] = "ChainTubes.__get__.<locals>.genexpr";
static const char __pyx_k_Chain_requires_all_inputs_to_hav[] = "Chain requires all inputs to have the same dtype";
static const char __pyx_k_Convert_iter_cannot_have_more_el[] = "Convert iter cannot have more elements than parent";
static const char __pyx_k_Found_an_Each_input_but_cannot_g[] = "Found an Each input, but cannot get len() of it";
static const char __pyx_k_Incompatible_checksums_s_vs_0xdf[] = "Incompatible checksums (%s vs 0xdf446ce = (_name_lookup, _name_lookup_inited))";
static const char __pyx_k_no_default___reduce___due_to_non[] = "no default __reduce__ due to non-trivial __cinit__";
static const char __pyx_k_ordered_locals_lambda_locals_gen[] = "ordered.<locals>.<lambda>.<locals>.genexpr";
static const char __pyx_k_self_iter_cannot_be_converted_to[] = "self.iter cannot be converted to a Python object for pickling";
static const char __pyx_k_self_type_cannot_be_converted_to[] = "self.type cannot be converted to a Python object for pickling";
static PyObject *__pyx_n_s_Bool;
static PyObject *__pyx_n_u_Bool;
static PyObject *__pyx_n_s_ByteSlice;
static PyObject *__pyx_kp_u_Cannot_chunk_tubes_without_a_sin;
static PyObject *__pyx_kp_u_Cannot_get_slot;
static PyObject *__pyx_kp_u_Cannot_make_a_FileMap_Tube_with;
static PyObject *__pyx_kp_u_Cannot_make_a_JsonParse_Tube_wit;
static PyObject *__pyx_kp_u_Cannot_make_a_ReadFile_Tube_with;
static PyObject *__pyx_kp_u_Cannot_make_a_SkipUnless_Tube_wi;
static PyObject *__pyx_kp_u_Cannot_make_a_Split_Tube_with_pa;
static PyObject *__pyx_kp_u_ChainTubes;
static PyObject *__pyx_n_s_ChainTubes___get___locals_genexp;
static PyObject *__pyx_kp_u_Chain_requires_all_inputs_to_hav;
static PyObject *__pyx_n_s_Chains_ordered;
static PyObject *__pyx_kp_u_Chunk;
static PyObject *__pyx_kp_u_Combine_two_inputs_into_one_by;
static PyObject *__pyx_kp_u_Compare;
static PyObject *__pyx_kp_u_Compatibility_list_tube_equals;
static PyObject *__pyx_kp_u_Compatibility_list_tube_gt_valu;
static PyObject *__pyx_kp_u_Compatibility_list_tube_lt_valu;
static PyObject *__pyx_kp_u_Compatibility_tube_chunk_2_Recu;
static PyObject *__pyx_kp_u_Compatibility_tube_enumerate_Si;
static PyObject *__pyx_kp_u_Compatibility_tube_first_5_Crea;
static PyObject *__pyx_kp_u_Compatibility_tube_get_field_Ef;
static PyObject *__pyx_kp_u_Compatibility_tube_gunzip_zlib;
static PyObject *__pyx_kp_u_Compatibility_tube_json_Interpr;
static PyObject *__pyx_kp_u_Compatibility_tube_multi_lambda;
static PyObject *__pyx_kp_u_Compatibility_tube_skip_5_Creat;
static PyObject *__pyx_kp_u_Compatibility_tube_skip_unless;
static PyObject *__pyx_kp_u_Compatibility_tube_split_Split;
static PyObject *__pyx_kp_u_Compatible_Dtypes_bytes_Utf8_Fo;
static PyObject *__pyx_kp_u_Convert;
static PyObject *__pyx_kp_u_Convert_iter_cannot_have_more_el;
static PyObject *__pyx_kp_u_Count;
static PyObject *__pyx_n_s_DTYPE_MAP;
static PyObject *__pyx_kp_u_DType;
static PyObject *__pyx_kp_u_Each;
static PyObject *__pyx_kp_u_Expected;
static PyObject *__pyx_kp_u_FileMap;
static PyObject *__pyx_kp_u_First;
static PyObject *__pyx_n_s_Float;
static PyObject *__pyx_kp_u_Found_an_Each_input_but_cannot_g;
static PyObject *__pyx_kp_u_Gunzip;
static PyObject *__pyx_kp_s_Incompatible_checksums_s_vs_0xdf;
static PyObject *__pyx_n_s_IndexError;
static PyObject *__pyx_n_s_Int64;
static PyObject *__pyx_n_u_Int64;
static PyObject *__pyx_n_u_Json;
static PyObject *__pyx_kp_u_JsonParse;
static PyObject *__pyx_n_s_JsonUtf8;
static PyObject *__pyx_kp_u_Multi;
static PyObject *__pyx_n_s_Multi___get___locals_genexpr;
static PyObject *__pyx_kp_u_NameLookup;
static PyObject *__pyx_n_s_NotImplementedError;
static PyObject *__pyx_n_s_Null;
static PyObject *__pyx_n_u_Null;
static PyObject *__pyx_n_s_Object;
static PyObject *__pyx_n_s_PickleError;
static PyObject *__pyx_kp_u_ReadFile;
static PyObject *__pyx_kp_u_Skip;
static PyObject *__pyx_kp_u_SkipUnless;
static PyObject *__pyx_kp_u_SlotGet;
static PyObject *__pyx_kp_u_Split;
static PyObject *__pyx_kp_u_ToPy;
static PyObject *__pyx_kp_u_Tube_chunk_line_404;
static PyObject *__pyx_kp_u_Tube_enumerate_line_338;
static PyObject *__pyx_kp_u_Tube_equals_line_368;
static PyObject *__pyx_kp_u_Tube_first_line_120;
static PyObject *__pyx_kp_u_Tube_get_line_272;
static PyObject *__pyx_kp_u_Tube_gt_line_382;
static PyObject *__pyx_kp_u_Tube_gunzip_line_188;
static PyObject *__pyx_kp_u_Tube_in_multiple_chains;
static PyObject *__pyx_kp_u_Tube_json_line_221;
static PyObject *__pyx_kp_u_Tube_lt_line_393;
static PyObject *__pyx_kp_u_Tube_multi_line_250;
static PyObject *__pyx_kp_u_Tube_read_files_line_165;
static PyObject *__pyx_kp_u_Tube_skip_line_132;
static PyObject *__pyx_kp_u_Tube_skip_unless_line_309;
static PyObject *__pyx_kp_u_Tube_split_line_205;
static PyObject *__pyx_kp_u_Tube_zip_line_351;
static PyObject *__pyx_kp_u_Tubes_Tubes_is_a_library_for_ef;
static PyObject *__pyx_n_s_TypeError;
static PyObject *__pyx_n_s_Utf8;
static PyObject *__pyx_n_s_ValueError;
static PyObject *__pyx_kp_u_Zip;
static PyObject *__pyx_n_s_Zip___get___locals_genexpr;
static PyObject *__pyx_kp_u__19;
static PyObject *__pyx_kp_u__20;
static PyObject *__pyx_kp_u__25;
static PyObject *__pyx_kp_u__27;
static PyObject *__pyx_kp_u__3;
static PyObject *__pyx_kp_u__32;
static PyObject *__pyx_kp_b__36;
static PyObject *__pyx_n_s_add;
static PyObject *__pyx_n_s_args;
static PyObject *__pyx_n_u_ascii;
static PyObject *__pyx_n_u_bytes;
static PyObject *__pyx_n_s_chains;
static PyObject *__pyx_n_s_chunk;
static PyObject *__pyx_kp_s_chunk_pxi;
static PyObject *__pyx_n_s_chunk_size;
static PyObject *__pyx_n_s_cline_in_traceback;
static PyObject *__pyx_n_s_close;
static PyObject *__pyx_n_s_codec;
static PyObject *__pyx_n_s_conditional;
static PyObject *__pyx_n_s_default;
static PyObject *__pyx_n_s_default_val;
static PyObject *__pyx_n_s_describe_self;
static PyObject *__pyx_n_u_describe_self;
static PyObject *__pyx_n_s_dict;
static PyObject *__pyx_n_s_doc;
static PyObject *__pyx_n_s_dtype;
static PyObject *__pyx_n_u_dtype;
static PyObject *__pyx_n_s_each;
static PyObject *__pyx_n_s_encode;
static PyObject *__pyx_n_u_float;
static PyObject *__pyx_kp_u_from_parent_with;
static PyObject *__pyx_n_u_fs;
static PyObject *__pyx_n_s_functools;
static PyObject *__pyx_n_s_genexpr;
static PyObject *__pyx_n_s_get;
static PyObject *__pyx_n_s_getstate;
static PyObject *__pyx_n_s_import;
static PyObject *__pyx_n_s_index;
static PyObject *__pyx_n_s_inputs;
static PyObject *__pyx_n_u_inputs;
static PyObject *__pyx_n_s_inputs_2;
static PyObject *__pyx_kp_u_inputs_to__make_iter_got;
static PyObject *__pyx_n_s_it;
static PyObject *__pyx_n_s_items;
static PyObject *__pyx_n_s_iter;
static PyObject *__pyx_n_s_iters;
static PyObject *__pyx_n_s_key;
static PyObject *__pyx_n_s_main;
static PyObject *__pyx_n_u_make_iter;
static PyObject *__pyx_n_s_max;
static PyObject *__pyx_n_s_name;
static PyObject *__pyx_n_s_name_lookups;
static PyObject *__pyx_n_s_new;
static PyObject *__pyx_n_u_next;
static PyObject *__pyx_n_s_next___locals_genexpr;
static PyObject *__pyx_kp_s_no_default___reduce___due_to_non;
static PyObject *__pyx_n_s_num;
static PyObject *__pyx_n_s_object;
static PyObject *__pyx_n_u_object;
static PyObject *__pyx_n_s_op;
static PyObject *__pyx_n_s_ordered;
static PyObject *__pyx_n_s_ordered_locals_lambda;
static PyObject *__pyx_n_s_ordered_locals_lambda_locals_gen;
static PyObject *__pyx_n_s_output;
static PyObject *__pyx_n_s_parent;
static PyObject *__pyx_n_s_parents;
static PyObject *__pyx_n_s_partial;
static PyObject *__pyx_n_s_pickle;
static PyObject *__pyx_n_s_py_iter;
static PyObject *__pyx_n_s_pyx_PickleError;
static PyObject *__pyx_n_s_pyx_checksum;
static PyObject *__pyx_n_s_pyx_result;
static PyObject *__pyx_n_s_pyx_state;
static PyObject *__pyx_n_s_pyx_type;
static PyObject *__pyx_n_s_pyx_unpickle_Tube;
static PyObject *__pyx_n_s_pyx_vtable;
static PyObject *__pyx_n_s_range;
static PyObject *__pyx_n_s_rank;
static PyObject *__pyx_n_s_reduce;
static PyObject *__pyx_n_s_reduce_cython;
static PyObject *__pyx_n_s_reduce_ex;
static PyObject *__pyx_n_s_reverse;
static PyObject *__pyx_n_s_root_chain;
static PyObject *__pyx_kp_s_self_iter_cannot_be_converted_to;
static PyObject *__pyx_kp_s_self_type_cannot_be_converted_to;
static PyObject *__pyx_n_s_send;
static PyObject *__pyx_n_s_sep;
static PyObject *__pyx_n_s_setdefault;
static PyObject *__pyx_n_s_setstate;
static PyObject *__pyx_n_s_setstate_cython;
static PyObject *__pyx_kp_u_slots;
static PyObject *__pyx_n_s_sorted;
static PyObject *__pyx_n_s_start;
static PyObject *__pyx_n_s_start_2;
static PyObject *__pyx_n_u_str;
static PyObject *__pyx_n_s_stream;
static PyObject *__pyx_kp_s_stringsource;
static PyObject *__pyx_n_s_test;
static PyObject *__pyx_n_s_throw;
static PyObject *__pyx_n_s_to;
static PyObject *__pyx_n_s_to_py;
static PyObject *__pyx_n_s_to_types;
static PyObject *__pyx_n_s_tube;
static PyObject *__pyx_n_s_tubes;
static PyObject *__pyx_n_s_update;
static PyObject *__pyx_n_s_update_each_iter;
static PyObject *__pyx_kp_b_utf_8;
static PyObject *__pyx_kp_u_utf_8;
static PyObject *__pyx_n_s_value;
static PyObject *__pyx_n_s_values;
static PyObject *__pyx_n_s_verify;
static PyObject *__pyx_n_s_wrapped;
static PyObject *__pyx_n_s_zip;
static PyObject *__pyx_pf_5tubes_11IterWrapper___reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5tubes_IterWrapper *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5tubes_11IterWrapper_2__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5tubes_IterWrapper *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_5tubes_5DType___repr__(struct __pyx_obj_5tubes_DType *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5tubes_5DType_4name___get__(struct __pyx_obj_5tubes_DType *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5tubes_5DType_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5tubes_DType *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5tubes_5DType_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5tubes_DType *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_5tubes_8TubeIter___cinit__(struct __pyx_obj_5tubes_TubeIter *__pyx_v_self, struct __pyx_obj_5tubes_IterWrapper *__pyx_v_output, PyObject *__pyx_v_iters, PyObject *__pyx_v_root_chain, CYTHON_UNUSED PyObject *__pyx_v_a); /* proto */
static PyObject *__pyx_pf_5tubes_8TubeIter_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5tubes_TubeIter *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5tubes_8TubeIter_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5tubes_TubeIter *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_5tubes_14TubeSingleIter___next__(struct __pyx_obj_5tubes_TubeSingleIter *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5tubes_14TubeSingleIter_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5tubes_TubeSingleIter *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5tubes_14TubeSingleIter_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5tubes_TubeSingleIter *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_5tubes_13TubeMultiIter___cinit__(struct __pyx_obj_5tubes_TubeMultiIter *__pyx_v_self, CYTHON_UNUSED struct __pyx_obj_5tubes_IterWrapper *__pyx_v_output, CYTHON_UNUSED PyObject *__pyx_v_iters, CYTHON_UNUSED PyObject *__pyx_v_root_chain, PyObject *__pyx_v_a); /* proto */
static PyObject *__pyx_pf_5tubes_13TubeMultiIter_8__next___genexpr(PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_5tubes_13TubeMultiIter_2__next__(struct __pyx_obj_5tubes_TubeMultiIter *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5tubes_13TubeMultiIter_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5tubes_TubeMultiIter *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5tubes_13TubeMultiIter_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5tubes_TubeMultiIter *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_5tubes_6Chains___cinit__(struct __pyx_obj_5tubes_Chains *__pyx_v_self, struct __pyx_obj_5tubes_Tube *__pyx_v_output); /* proto */
static PyObject *__pyx_pf_5tubes_6Chains_2add(struct __pyx_obj_5tubes_Chains *__pyx_v_self, PyObject *__pyx_v_tube, PyObject *__pyx_v_parent, PyObject *__pyx_v_rank); /* proto */
static PyObject *__pyx_pf_5tubes_6Chains_7ordered_7lambda1_genexpr(PyObject *__pyx_self); /* proto */
static PyObject *__pyx_lambda_funcdef_lambda1(PyObject *__pyx_self, PyObject *__pyx_v_i); /* proto */
static PyObject *__pyx_lambda_funcdef_lambda3(PyObject *__pyx_self, PyObject *__pyx_v_t); /* proto */
static PyObject *__pyx_pf_5tubes_6Chains_4ordered(struct __pyx_obj_5tubes_Chains *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5tubes_6Chains_7verify(struct __pyx_obj_5tubes_Chains *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5tubes_6Chains_6output___get__(struct __pyx_obj_5tubes_Chains *__pyx_v_self); /* proto */
static int __pyx_pf_5tubes_6Chains_6output_2__set__(struct __pyx_obj_5tubes_Chains *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_5tubes_6Chains_6output_4__del__(struct __pyx_obj_5tubes_Chains *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5tubes_6Chains_6chains___get__(struct __pyx_obj_5tubes_Chains *__pyx_v_self); /* proto */
static int __pyx_pf_5tubes_6Chains_6chains_2__set__(struct __pyx_obj_5tubes_Chains *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_5tubes_6Chains_6chains_4__del__(struct __pyx_obj_5tubes_Chains *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5tubes_6Chains_8ordering___get__(struct __pyx_obj_5tubes_Chains *__pyx_v_self); /* proto */
static int __pyx_pf_5tubes_6Chains_8ordering_2__set__(struct __pyx_obj_5tubes_Chains *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_5tubes_6Chains_8ordering_4__del__(struct __pyx_obj_5tubes_Chains *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5tubes_6Chains_6inputs___get__(struct __pyx_obj_5tubes_Chains *__pyx_v_self); /* proto */
static int __pyx_pf_5tubes_6Chains_6inputs_2__set__(struct __pyx_obj_5tubes_Chains *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_5tubes_6Chains_6inputs_4__del__(struct __pyx_obj_5tubes_Chains *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5tubes_6Chains_9__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5tubes_Chains *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5tubes_6Chains_11__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5tubes_Chains *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_5tubes_4Tube_5dtype___get__(CYTHON_UNUSED struct __pyx_obj_5tubes_Tube *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5tubes_4Tube_7_inputs___get__(CYTHON_UNUSED struct __pyx_obj_5tubes_Tube *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5tubes_4Tube__describe_self(struct __pyx_obj_5tubes_Tube *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5tubes_4Tube_2__iter__(struct __pyx_obj_5tubes_Tube *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5tubes_4Tube_4__repr__(struct __pyx_obj_5tubes_Tube *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5tubes_4Tube_6first(struct __pyx_obj_5tubes_Tube *__pyx_v_self, size_t __pyx_v_num); /* proto */
static PyObject *__pyx_pf_5tubes_4Tube_8skip(struct __pyx_obj_5tubes_Tube *__pyx_v_self, size_t __pyx_v_num); /* proto */
static PyObject *__pyx_pf_5tubes_4Tube_10to_py(struct __pyx_obj_5tubes_Tube *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5tubes_4Tube_12map_files(struct __pyx_obj_5tubes_Tube *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5tubes_4Tube_14read_files(struct __pyx_obj_5tubes_Tube *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5tubes_4Tube_16gunzip(struct __pyx_obj_5tubes_Tube *__pyx_v_self, PyObject *__pyx_v_stream); /* proto */
static PyObject *__pyx_pf_5tubes_4Tube_18split(struct __pyx_obj_5tubes_Tube *__pyx_v_self, PyObject *__pyx_v_sep); /* proto */
static PyObject *__pyx_pf_5tubes_4Tube_20json(struct __pyx_obj_5tubes_Tube *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5tubes_4Tube_22to(struct __pyx_obj_5tubes_Tube *__pyx_v_self, PyObject *__pyx_v_codec, PyObject *__pyx_v_types); /* proto */
static PyObject *__pyx_pf_5tubes_4Tube_24multi(struct __pyx_obj_5tubes_Tube *__pyx_v_self, PyObject *__pyx_v_makers); /* proto */
static PyObject *__pyx_pf_5tubes_4Tube_26get(struct __pyx_obj_5tubes_Tube *__pyx_v_self, PyObject *__pyx_v_key, PyObject *__pyx_v_default); /* proto */
static PyObject *__pyx_pf_5tubes_4Tube_28slot(struct __pyx_obj_5tubes_Tube *__pyx_v_self, size_t __pyx_v_num, PyObject *__pyx_v_default); /* proto */
static PyObject *__pyx_pf_5tubes_4Tube_30skip_unless(struct __pyx_obj_5tubes_Tube *__pyx_v_self, PyObject *__pyx_v_conditional); /* proto */
static PyObject *__pyx_pf_5tubes_4Tube_32enumerate(struct __pyx_obj_5tubes_Tube *__pyx_v_self, PyObject *__pyx_v_start); /* proto */
static PyObject *__pyx_pf_5tubes_4Tube_34zip(struct __pyx_obj_5tubes_Tube *__pyx_v_self, PyObject *__pyx_v_other); /* proto */
static PyObject *__pyx_pf_5tubes_4Tube_36equals(struct __pyx_obj_5tubes_Tube *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_5tubes_4Tube_38gt(struct __pyx_obj_5tubes_Tube *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_5tubes_4Tube_40lt(struct __pyx_obj_5tubes_Tube *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_5tubes_4Tube_42chunk(struct __pyx_obj_5tubes_Tube *__pyx_v_self, size_t __pyx_v_num); /* proto */
static PyObject *__pyx_pf_5tubes_4Tube_44__reduce_cython__(struct __pyx_obj_5tubes_Tube *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5tubes_4Tube_46__setstate_cython__(struct __pyx_obj_5tubes_Tube *__pyx_v_self, PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_5tubes_4Each___cinit__(struct __pyx_obj_5tubes_Each *__pyx_v_self, PyObject *__pyx_v__iter); /* proto */
static PyObject *__pyx_pf_5tubes_4Each_5dtype___get__(CYTHON_UNUSED struct __pyx_obj_5tubes_Each *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5tubes_4Each_7_chains___get__(CYTHON_UNUSED struct __pyx_obj_5tubes_Each *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5tubes_4Each_7_inputs___get__(CYTHON_UNUSED struct __pyx_obj_5tubes_Each *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5tubes_4Each_2_describe_self(struct __pyx_obj_5tubes_Each *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5tubes_4Each_5_iter___get__(struct __pyx_obj_5tubes_Each *__pyx_v_self); /* proto */
static int __pyx_pf_5tubes_4Each_5_iter_2__set__(struct __pyx_obj_5tubes_Each *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_5tubes_4Each_5_iter_4__del__(struct __pyx_obj_5tubes_Each *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5tubes_4Each_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5tubes_Each *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5tubes_4Each_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5tubes_Each *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_5tubes_3Zip___cinit__(struct __pyx_obj_5tubes_Zip *__pyx_v_self, PyObject *__pyx_v_inputs); /* proto */
static PyObject *__pyx_pf_5tubes_3Zip_5dtype_7__get___genexpr(PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_5tubes_3Zip_5dtype___get__(struct __pyx_obj_5tubes_Zip *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5tubes_3Zip_7_chains___get__(struct __pyx_obj_5tubes_Zip *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5tubes_3Zip_7_inputs___get__(struct __pyx_obj_5tubes_Zip *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5tubes_3Zip_2_describe_self(struct __pyx_obj_5tubes_Zip *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5tubes_3Zip_6inputs___get__(struct __pyx_obj_5tubes_Zip *__pyx_v_self); /* proto */
static int __pyx_pf_5tubes_3Zip_6inputs_2__set__(struct __pyx_obj_5tubes_Zip *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_5tubes_3Zip_6inputs_4__del__(struct __pyx_obj_5tubes_Zip *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5tubes_3Zip_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5tubes_Zip *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5tubes_3Zip_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5tubes_Zip *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_5tubes_7SlotGet___cinit__(struct __pyx_obj_5tubes_SlotGet *__pyx_v_self, struct __pyx_obj_5tubes_Tube *__pyx_v_parent, size_t __pyx_v_index, PyObject *__pyx_v_default_val); /* proto */
static PyObject *__pyx_pf_5tubes_7SlotGet_5dtype___get__(struct __pyx_obj_5tubes_SlotGet *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5tubes_7SlotGet_7_chains___get__(CYTHON_UNUSED struct __pyx_obj_5tubes_SlotGet *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5tubes_7SlotGet_7_inputs___get__(struct __pyx_obj_5tubes_SlotGet *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5tubes_7SlotGet_2_describe_self(struct __pyx_obj_5tubes_SlotGet *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5tubes_7SlotGet_6parent___get__(struct __pyx_obj_5tubes_SlotGet *__pyx_v_self); /* proto */
static int __pyx_pf_5tubes_7SlotGet_6parent_2__set__(struct __pyx_obj_5tubes_SlotGet *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_5tubes_7SlotGet_6parent_4__del__(struct __pyx_obj_5tubes_SlotGet *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5tubes_7SlotGet_5index___get__(struct __pyx_obj_5tubes_SlotGet *__pyx_v_self); /* proto */
static int __pyx_pf_5tubes_7SlotGet_5index_2__set__(struct __pyx_obj_5tubes_SlotGet *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_5tubes_7SlotGet_11default_val___get__(struct __pyx_obj_5tubes_SlotGet *__pyx_v_self); /* proto */
static int __pyx_pf_5tubes_7SlotGet_11default_val_2__set__(struct __pyx_obj_5tubes_SlotGet *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_5tubes_7SlotGet_11default_val_4__del__(struct __pyx_obj_5tubes_SlotGet *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5tubes_7SlotGet_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5tubes_SlotGet *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5tubes_7SlotGet_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5tubes_SlotGet *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_5tubes_10NameLookup___cinit__(struct __pyx_obj_5tubes_NameLookup *__pyx_v_self, struct __pyx_obj_5tubes_Tube *__pyx_v_parent, PyObject *__pyx_v_items, PyObject *__pyx_v__name_lookups); /* proto */
static PyObject *__pyx_pf_5tubes_10NameLookup_5dtype___get__(struct __pyx_obj_5tubes_NameLookup *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5tubes_10NameLookup_7_chains___get__(CYTHON_UNUSED struct __pyx_obj_5tubes_NameLookup *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5tubes_10NameLookup_7_inputs___get__(struct __pyx_obj_5tubes_NameLookup *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5tubes_10NameLookup_2_describe_self(struct __pyx_obj_5tubes_NameLookup *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5tubes_10NameLookup_6parent___get__(struct __pyx_obj_5tubes_NameLookup *__pyx_v_self); /* proto */
static int __pyx_pf_5tubes_10NameLookup_6parent_2__set__(struct __pyx_obj_5tubes_NameLookup *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_5tubes_10NameLookup_6parent_4__del__(struct __pyx_obj_5tubes_NameLookup *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5tubes_10NameLookup_5items___get__(struct __pyx_obj_5tubes_NameLookup *__pyx_v_self); /* proto */
static int __pyx_pf_5tubes_10NameLookup_5items_2__set__(struct __pyx_obj_5tubes_NameLookup *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_5tubes_10NameLookup_5items_4__del__(struct __pyx_obj_5tubes_NameLookup *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5tubes_10NameLookup_13_name_lookups___get__(struct __pyx_obj_5tubes_NameLookup *__pyx_v_self); /* proto */
static int __pyx_pf_5tubes_10NameLookup_13_name_lookups_2__set__(struct __pyx_obj_5tubes_NameLookup *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_5tubes_10NameLookup_13_name_lookups_4__del__(struct __pyx_obj_5tubes_NameLookup *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5tubes_10NameLookup_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5tubes_NameLookup *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5tubes_10NameLookup_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5tubes_NameLookup *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_5tubes_5Multi___cinit__(struct __pyx_obj_5tubes_Multi *__pyx_v_self, struct __pyx_obj_5tubes_Tube *__pyx_v_parent, PyObject *__pyx_v_inputs); /* proto */
static PyObject *__pyx_pf_5tubes_5Multi_5dtype_7__get___genexpr(PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_5tubes_5Multi_5dtype___get__(struct __pyx_obj_5tubes_Multi *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5tubes_5Multi_7_chains___get__(CYTHON_UNUSED struct __pyx_obj_5tubes_Multi *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5tubes_5Multi_7_inputs___get__(struct __pyx_obj_5tubes_Multi *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5tubes_5Multi_2_describe_self(struct __pyx_obj_5tubes_Multi *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5tubes_5Multi_6parent___get__(struct __pyx_obj_5tubes_Multi *__pyx_v_self); /* proto */
static int __pyx_pf_5tubes_5Multi_6parent_2__set__(struct __pyx_obj_5tubes_Multi *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_5tubes_5Multi_6parent_4__del__(struct __pyx_obj_5tubes_Multi *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5tubes_5Multi_6inputs___get__(struct __pyx_obj_5tubes_Multi *__pyx_v_self); /* proto */
static int __pyx_pf_5tubes_5Multi_6inputs_2__set__(struct __pyx_obj_5tubes_Multi *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_5tubes_5Multi_6inputs_4__del__(struct __pyx_obj_5tubes_Multi *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5tubes_5Multi_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5tubes_Multi *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5tubes_5Multi_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5tubes_Multi *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_5tubes_9JsonParse___cinit__(struct __pyx_obj_5tubes_JsonParse *__pyx_v_self, struct __pyx_obj_5tubes_Tube *__pyx_v_parent); /* proto */
static PyObject *__pyx_pf_5tubes_9JsonParse_5dtype___get__(CYTHON_UNUSED struct __pyx_obj_5tubes_JsonParse *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5tubes_9JsonParse_7_chains___get__(CYTHON_UNUSED struct __pyx_obj_5tubes_JsonParse *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5tubes_9JsonParse_7_inputs___get__(struct __pyx_obj_5tubes_JsonParse *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5tubes_9JsonParse_2_describe_self(struct __pyx_obj_5tubes_JsonParse *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5tubes_9JsonParse_6parent___get__(struct __pyx_obj_5tubes_JsonParse *__pyx_v_self); /* proto */
static int __pyx_pf_5tubes_9JsonParse_6parent_2__set__(struct __pyx_obj_5tubes_JsonParse *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_5tubes_9JsonParse_6parent_4__del__(struct __pyx_obj_5tubes_JsonParse *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5tubes_9JsonParse_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5tubes_JsonParse *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5tubes_9JsonParse_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5tubes_JsonParse *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_5tubes_4ToPy___cinit__(struct __pyx_obj_5tubes_ToPy *__pyx_v_self, struct __pyx_obj_5tubes_Tube *__pyx_v_parent); /* proto */
static PyObject *__pyx_pf_5tubes_4ToPy_5dtype___get__(struct __pyx_obj_5tubes_ToPy *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5tubes_4ToPy_7_chains___get__(CYTHON_UNUSED struct __pyx_obj_5tubes_ToPy *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5tubes_4ToPy_7_inputs___get__(struct __pyx_obj_5tubes_ToPy *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5tubes_4ToPy_2_describe_self(struct __pyx_obj_5tubes_ToPy *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5tubes_4ToPy_6parent___get__(struct __pyx_obj_5tubes_ToPy *__pyx_v_self); /* proto */
static int __pyx_pf_5tubes_4ToPy_6parent_2__set__(struct __pyx_obj_5tubes_ToPy *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_5tubes_4ToPy_6parent_4__del__(struct __pyx_obj_5tubes_ToPy *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5tubes_4ToPy_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5tubes_ToPy *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5tubes_4ToPy_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5tubes_ToPy *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_5tubes_10SkipUnless___cinit__(struct __pyx_obj_5tubes_SkipUnless *__pyx_v_self, struct __pyx_obj_5tubes_Tube *__pyx_v_parent, struct __pyx_obj_5tubes_Tube *__pyx_v_conditional); /* proto */
static PyObject *__pyx_pf_5tubes_10SkipUnless_5dtype___get__(struct __pyx_obj_5tubes_SkipUnless *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5tubes_10SkipUnless_7_chains___get__(struct __pyx_obj_5tubes_SkipUnless *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5tubes_10SkipUnless_7_inputs___get__(struct __pyx_obj_5tubes_SkipUnless *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5tubes_10SkipUnless_2_describe_self(struct __pyx_obj_5tubes_SkipUnless *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5tubes_10SkipUnless_6parent___get__(struct __pyx_obj_5tubes_SkipUnless *__pyx_v_self); /* proto */
static int __pyx_pf_5tubes_10SkipUnless_6parent_2__set__(struct __pyx_obj_5tubes_SkipUnless *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_5tubes_10SkipUnless_6parent_4__del__(struct __pyx_obj_5tubes_SkipUnless *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5tubes_10SkipUnless_11conditional___get__(struct __pyx_obj_5tubes_SkipUnless *__pyx_v_self); /* proto */
static int __pyx_pf_5tubes_10SkipUnless_11conditional_2__set__(struct __pyx_obj_5tubes_SkipUnless *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_5tubes_10SkipUnless_11conditional_4__del__(struct __pyx_obj_5tubes_SkipUnless *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5tubes_10SkipUnless_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5tubes_SkipUnless *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5tubes_10SkipUnless_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5tubes_SkipUnless *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_5tubes_8ReadFile___cinit__(struct __pyx_obj_5tubes_ReadFile *__pyx_v_self, struct __pyx_obj_5tubes_Tube *__pyx_v_parent); /* proto */
static PyObject *__pyx_pf_5tubes_8ReadFile_5dtype___get__(CYTHON_UNUSED struct __pyx_obj_5tubes_ReadFile *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5tubes_8ReadFile_7_chains___get__(struct __pyx_obj_5tubes_ReadFile *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5tubes_8ReadFile_7_inputs___get__(struct __pyx_obj_5tubes_ReadFile *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5tubes_8ReadFile_2_describe_self(struct __pyx_obj_5tubes_ReadFile *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5tubes_8ReadFile_6parent___get__(struct __pyx_obj_5tubes_ReadFile *__pyx_v_self); /* proto */
static int __pyx_pf_5tubes_8ReadFile_6parent_2__set__(struct __pyx_obj_5tubes_ReadFile *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_5tubes_8ReadFile_6parent_4__del__(struct __pyx_obj_5tubes_ReadFile *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5tubes_8ReadFile_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5tubes_ReadFile *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5tubes_8ReadFile_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5tubes_ReadFile *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_5tubes_10ChainTubes___cinit__(struct __pyx_obj_5tubes_ChainTubes *__pyx_v_self, PyObject *__pyx_v_parents); /* proto */
static PyObject *__pyx_pf_5tubes_10ChainTubes_5dtype___get__(struct __pyx_obj_5tubes_ChainTubes *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5tubes_10ChainTubes_7_chains_7__get___genexpr(PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_5tubes_10ChainTubes_7_chains___get__(struct __pyx_obj_5tubes_ChainTubes *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5tubes_10ChainTubes_2_describe_self(struct __pyx_obj_5tubes_ChainTubes *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5tubes_10ChainTubes_7_inputs___get__(struct __pyx_obj_5tubes_ChainTubes *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5tubes_10ChainTubes_7parents___get__(struct __pyx_obj_5tubes_ChainTubes *__pyx_v_self); /* proto */
static int __pyx_pf_5tubes_10ChainTubes_7parents_2__set__(struct __pyx_obj_5tubes_ChainTubes *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_5tubes_10ChainTubes_7parents_4__del__(struct __pyx_obj_5tubes_ChainTubes *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5tubes_10ChainTubes_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5tubes_ChainTubes *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5tubes_10ChainTubes_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5tubes_ChainTubes *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_5tubes_4Skip___cinit__(struct __pyx_obj_5tubes_Skip *__pyx_v_self, struct __pyx_obj_5tubes_Tube *__pyx_v_parent, size_t __pyx_v_num); /* proto */
static PyObject *__pyx_pf_5tubes_4Skip_5dtype___get__(struct __pyx_obj_5tubes_Skip *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5tubes_4Skip_7_chains___get__(struct __pyx_obj_5tubes_Skip *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5tubes_4Skip_7_inputs___get__(struct __pyx_obj_5tubes_Skip *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5tubes_4Skip_2_describe_self(struct __pyx_obj_5tubes_Skip *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5tubes_4Skip_6parent___get__(struct __pyx_obj_5tubes_Skip *__pyx_v_self); /* proto */
static int __pyx_pf_5tubes_4Skip_6parent_2__set__(struct __pyx_obj_5tubes_Skip *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_5tubes_4Skip_6parent_4__del__(struct __pyx_obj_5tubes_Skip *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5tubes_4Skip_3num___get__(struct __pyx_obj_5tubes_Skip *__pyx_v_self); /* proto */
static int __pyx_pf_5tubes_4Skip_3num_2__set__(struct __pyx_obj_5tubes_Skip *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_5tubes_4Skip_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5tubes_Skip *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5tubes_4Skip_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5tubes_Skip *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_5tubes_7FileMap___cinit__(struct __pyx_obj_5tubes_FileMap *__pyx_v_self, struct __pyx_obj_5tubes_Tube *__pyx_v_parent); /* proto */
static PyObject *__pyx_pf_5tubes_7FileMap_5dtype___get__(CYTHON_UNUSED struct __pyx_obj_5tubes_FileMap *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5tubes_7FileMap_7_chains___get__(CYTHON_UNUSED struct __pyx_obj_5tubes_FileMap *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5tubes_7FileMap_7_inputs___get__(struct __pyx_obj_5tubes_FileMap *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5tubes_7FileMap_2_describe_self(struct __pyx_obj_5tubes_FileMap *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5tubes_7FileMap_6parent___get__(struct __pyx_obj_5tubes_FileMap *__pyx_v_self); /* proto */
static int __pyx_pf_5tubes_7FileMap_6parent_2__set__(struct __pyx_obj_5tubes_FileMap *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_5tubes_7FileMap_6parent_4__del__(struct __pyx_obj_5tubes_FileMap *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5tubes_7FileMap_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5tubes_FileMap *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5tubes_7FileMap_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5tubes_FileMap *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_5tubes_6Gunzip___cinit__(struct __pyx_obj_5tubes_Gunzip *__pyx_v_self, struct __pyx_obj_5tubes_Tube *__pyx_v_parent, int __pyx_v_stream); /* proto */
static PyObject *__pyx_pf_5tubes_6Gunzip_5dtype___get__(CYTHON_UNUSED struct __pyx_obj_5tubes_Gunzip *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5tubes_6Gunzip_7_chains___get__(struct __pyx_obj_5tubes_Gunzip *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5tubes_6Gunzip_7_inputs___get__(struct __pyx_obj_5tubes_Gunzip *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5tubes_6Gunzip_2_describe_self(struct __pyx_obj_5tubes_Gunzip *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5tubes_6Gunzip_6parent___get__(struct __pyx_obj_5tubes_Gunzip *__pyx_v_self); /* proto */
static int __pyx_pf_5tubes_6Gunzip_6parent_2__set__(struct __pyx_obj_5tubes_Gunzip *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_5tubes_6Gunzip_6parent_4__del__(struct __pyx_obj_5tubes_Gunzip *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5tubes_6Gunzip_6stream___get__(struct __pyx_obj_5tubes_Gunzip *__pyx_v_self); /* proto */
static int __pyx_pf_5tubes_6Gunzip_6stream_2__set__(struct __pyx_obj_5tubes_Gunzip *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_5tubes_6Gunzip_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5tubes_Gunzip *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5tubes_6Gunzip_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5tubes_Gunzip *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_5tubes_5Count___cinit__(struct __pyx_obj_5tubes_Count *__pyx_v_self, size_t __pyx_v__start); /* proto */
static PyObject *__pyx_pf_5tubes_5Count_5dtype___get__(CYTHON_UNUSED struct __pyx_obj_5tubes_Count *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5tubes_5Count_7_chains___get__(CYTHON_UNUSED struct __pyx_obj_5tubes_Count *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5tubes_5Count_7_inputs___get__(CYTHON_UNUSED struct __pyx_obj_5tubes_Count *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5tubes_5Count_2_describe_self(struct __pyx_obj_5tubes_Count *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5tubes_5Count_6_start___get__(struct __pyx_obj_5tubes_Count *__pyx_v_self); /* proto */
static int __pyx_pf_5tubes_5Count_6_start_2__set__(struct __pyx_obj_5tubes_Count *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_5tubes_5Count_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5tubes_Count *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5tubes_5Count_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5tubes_Count *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_5tubes_7Compare___cinit__(struct __pyx_obj_5tubes_Compare *__pyx_v_self, struct __pyx_obj_5tubes_Tube *__pyx_v_parent, int __pyx_v_op, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_5tubes_7Compare_5dtype___get__(CYTHON_UNUSED struct __pyx_obj_5tubes_Compare *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5tubes_7Compare_7_chains___get__(CYTHON_UNUSED struct __pyx_obj_5tubes_Compare *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5tubes_7Compare_7_inputs___get__(struct __pyx_obj_5tubes_Compare *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5tubes_7Compare_2_describe_self(struct __pyx_obj_5tubes_Compare *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5tubes_7Compare_6parent___get__(struct __pyx_obj_5tubes_Compare *__pyx_v_self); /* proto */
static int __pyx_pf_5tubes_7Compare_6parent_2__set__(struct __pyx_obj_5tubes_Compare *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_5tubes_7Compare_6parent_4__del__(struct __pyx_obj_5tubes_Compare *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5tubes_7Compare_2op___get__(struct __pyx_obj_5tubes_Compare *__pyx_v_self); /* proto */
static int __pyx_pf_5tubes_7Compare_2op_2__set__(struct __pyx_obj_5tubes_Compare *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_5tubes_7Compare_5value___get__(struct __pyx_obj_5tubes_Compare *__pyx_v_self); /* proto */
static int __pyx_pf_5tubes_7Compare_5value_2__set__(struct __pyx_obj_5tubes_Compare *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_5tubes_7Compare_5value_4__del__(struct __pyx_obj_5tubes_Compare *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5tubes_7Compare_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5tubes_Compare *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5tubes_7Compare_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5tubes_Compare *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_5tubes_5First___cinit__(struct __pyx_obj_5tubes_First *__pyx_v_self, struct __pyx_obj_5tubes_Tube *__pyx_v_parent, size_t __pyx_v_num); /* proto */
static PyObject *__pyx_pf_5tubes_5First_5dtype___get__(struct __pyx_obj_5tubes_First *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5tubes_5First_7_chains___get__(CYTHON_UNUSED struct __pyx_obj_5tubes_First *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5tubes_5First_7_inputs___get__(struct __pyx_obj_5tubes_First *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5tubes_5First_2_describe_self(struct __pyx_obj_5tubes_First *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5tubes_5First_6parent___get__(struct __pyx_obj_5tubes_First *__pyx_v_self); /* proto */
static int __pyx_pf_5tubes_5First_6parent_2__set__(struct __pyx_obj_5tubes_First *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_5tubes_5First_6parent_4__del__(struct __pyx_obj_5tubes_First *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5tubes_5First_3num___get__(struct __pyx_obj_5tubes_First *__pyx_v_self); /* proto */
static int __pyx_pf_5tubes_5First_3num_2__set__(struct __pyx_obj_5tubes_First *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_5tubes_5First_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5tubes_First *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5tubes_5First_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5tubes_First *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_5tubes_5Split___cinit__(struct __pyx_obj_5tubes_Split *__pyx_v_self, struct __pyx_obj_5tubes_Tube *__pyx_v_parent, PyObject *__pyx_v_sep); /* proto */
static PyObject *__pyx_pf_5tubes_5Split_5dtype___get__(struct __pyx_obj_5tubes_Split *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5tubes_5Split_7_chains___get__(struct __pyx_obj_5tubes_Split *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5tubes_5Split_7_inputs___get__(struct __pyx_obj_5tubes_Split *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5tubes_5Split_2_describe_self(struct __pyx_obj_5tubes_Split *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5tubes_5Split_6parent___get__(struct __pyx_obj_5tubes_Split *__pyx_v_self); /* proto */
static int __pyx_pf_5tubes_5Split_6parent_2__set__(struct __pyx_obj_5tubes_Split *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_5tubes_5Split_6parent_4__del__(struct __pyx_obj_5tubes_Split *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5tubes_5Split_3sep___get__(struct __pyx_obj_5tubes_Split *__pyx_v_self); /* proto */
static int __pyx_pf_5tubes_5Split_3sep_2__set__(struct __pyx_obj_5tubes_Split *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_5tubes_5Split_3sep_4__del__(struct __pyx_obj_5tubes_Split *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5tubes_5Split_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5tubes_Split *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5tubes_5Split_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5tubes_Split *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_5tubes_7Convert___cinit__(struct __pyx_obj_5tubes_Convert *__pyx_v_self, struct __pyx_obj_5tubes_Tube *__pyx_v_parent, PyObject *__pyx_v_to_types, PyObject *__pyx_v_codec); /* proto */
static PyObject *__pyx_pf_5tubes_7Convert_5dtype___get__(struct __pyx_obj_5tubes_Convert *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5tubes_7Convert_7_chains___get__(CYTHON_UNUSED struct __pyx_obj_5tubes_Convert *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5tubes_7Convert_7_inputs___get__(struct __pyx_obj_5tubes_Convert *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5tubes_7Convert_2_describe_self(struct __pyx_obj_5tubes_Convert *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5tubes_7Convert_6parent___get__(struct __pyx_obj_5tubes_Convert *__pyx_v_self); /* proto */
static int __pyx_pf_5tubes_7Convert_6parent_2__set__(struct __pyx_obj_5tubes_Convert *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_5tubes_7Convert_6parent_4__del__(struct __pyx_obj_5tubes_Convert *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5tubes_7Convert_8to_types___get__(struct __pyx_obj_5tubes_Convert *__pyx_v_self); /* proto */
static int __pyx_pf_5tubes_7Convert_8to_types_2__set__(struct __pyx_obj_5tubes_Convert *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_5tubes_7Convert_8to_types_4__del__(struct __pyx_obj_5tubes_Convert *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5tubes_7Convert_5codec___get__(struct __pyx_obj_5tubes_Convert *__pyx_v_self); /* proto */
static int __pyx_pf_5tubes_7Convert_5codec_2__set__(struct __pyx_obj_5tubes_Convert *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_5tubes_7Convert_5codec_4__del__(struct __pyx_obj_5tubes_Convert *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5tubes_7Convert_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5tubes_Convert *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5tubes_7Convert_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5tubes_Convert *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_5tubes_update_each_iter(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_chunk, struct __pyx_obj_5tubes_IterWrapper *__pyx_v_wrapped); /* proto */
static int __pyx_pf_5tubes_5Chunk___cinit__(struct __pyx_obj_5tubes_Chunk *__pyx_v_self, struct __pyx_obj_5tubes_Tube *__pyx_v_parent, size_t __pyx_v_chunk_size); /* proto */
static PyObject *__pyx_pf_5tubes_5Chunk_2_describe_self(struct __pyx_obj_5tubes_Chunk *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5tubes_5Chunk_5dtype___get__(struct __pyx_obj_5tubes_Chunk *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5tubes_5Chunk_7_chains___get__(CYTHON_UNUSED struct __pyx_obj_5tubes_Chunk *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5tubes_5Chunk_7_inputs___get__(CYTHON_UNUSED struct __pyx_obj_5tubes_Chunk *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5tubes_5Chunk_6parent___get__(struct __pyx_obj_5tubes_Chunk *__pyx_v_self); /* proto */
static int __pyx_pf_5tubes_5Chunk_6parent_2__set__(struct __pyx_obj_5tubes_Chunk *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_5tubes_5Chunk_6parent_4__del__(struct __pyx_obj_5tubes_Chunk *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5tubes_5Chunk_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5tubes_Chunk *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5tubes_5Chunk_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5tubes_Chunk *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_5tubes_2__pyx_unpickle_Tube(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_tp_new_5tubes_IterWrapper(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5tubes_DType(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5tubes_TubeIter(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5tubes_TubeSingleIter(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5tubes_TubeMultiIter(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5tubes_Chains(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5tubes_Tube(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5tubes_Each(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5tubes_Zip(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5tubes_SlotGet(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5tubes_NameLookup(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5tubes_Multi(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5tubes_JsonParse(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5tubes_ToPy(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5tubes_SkipUnless(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5tubes_ReadFile(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5tubes_ChainTubes(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5tubes_Skip(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5tubes_FileMap(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5tubes_Gunzip(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5tubes_Count(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5tubes_Compare(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5tubes_First(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5tubes_Split(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5tubes_Convert(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5tubes_Chunk(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5tubes___pyx_scope_struct____next__(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5tubes___pyx_scope_struct_1_genexpr(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5tubes___pyx_scope_struct_2_ordered(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5tubes___pyx_scope_struct_3___pyx_lambda_funcdef_lambda1(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5tubes___pyx_scope_struct_4_genexpr(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5tubes___pyx_scope_struct_5___get__(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5tubes___pyx_scope_struct_6_genexpr(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5tubes___pyx_scope_struct_7___get__(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5tubes___pyx_scope_struct_8_genexpr(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5tubes___pyx_scope_struct_9___get__(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5tubes___pyx_scope_struct_10_genexpr(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static __Pyx_CachedCFunction __pyx_umethod_PyDict_Type_items = {0, &__pyx_n_s_items, 0, 0, 0};
static PyObject *__pyx_int_0;
static PyObject *__pyx_int_1;
static PyObject *__pyx_int_9;
static PyObject *__pyx_int_234112718;
static PyObject *__pyx_int_neg_1;
static PyObject *__pyx_int_neg_9;
static PyObject *__pyx_k__22;
static PyObject *__pyx_k__23;
static PyObject *__pyx_tuple_;
static PyObject *__pyx_tuple__2;
static PyObject *__pyx_tuple__4;
static PyObject *__pyx_tuple__5;
static PyObject *__pyx_tuple__6;
static PyObject *__pyx_tuple__7;
static PyObject *__pyx_tuple__8;
static PyObject *__pyx_tuple__9;
static PyObject *__pyx_slice__24;
static PyObject *__pyx_slice__26;
static PyObject *__pyx_slice__39;
static PyObject *__pyx_tuple__10;
static PyObject *__pyx_tuple__11;
static PyObject *__pyx_tuple__12;
static PyObject *__pyx_tuple__13;
static PyObject *__pyx_tuple__14;
static PyObject *__pyx_tuple__15;
static PyObject *__pyx_tuple__16;
static PyObject *__pyx_tuple__17;
static PyObject *__pyx_tuple__18;
static PyObject *__pyx_tuple__21;
static PyObject *__pyx_tuple__28;
static PyObject *__pyx_tuple__29;
static PyObject *__pyx_tuple__30;
static PyObject *__pyx_tuple__31;
static PyObject *__pyx_tuple__33;
static PyObject *__pyx_tuple__34;
static PyObject *__pyx_tuple__35;
static PyObject *__pyx_tuple__37;
static PyObject *__pyx_tuple__38;
static PyObject *__pyx_tuple__40;
static PyObject *__pyx_tuple__41;
static PyObject *__pyx_tuple__42;
static PyObject *__pyx_tuple__43;
static PyObject *__pyx_tuple__44;
static PyObject *__pyx_tuple__45;
static PyObject *__pyx_tuple__46;
static PyObject *__pyx_tuple__47;
static PyObject *__pyx_tuple__48;
static PyObject *__pyx_tuple__49;
static PyObject *__pyx_tuple__50;
static PyObject *__pyx_tuple__51;
static PyObject *__pyx_tuple__52;
static PyObject *__pyx_tuple__53;
static PyObject *__pyx_tuple__54;
static PyObject *__pyx_tuple__55;
static PyObject *__pyx_tuple__56;
static PyObject *__pyx_tuple__57;
static PyObject *__pyx_tuple__58;
static PyObject *__pyx_tuple__59;
static PyObject *__pyx_tuple__60;
static PyObject *__pyx_tuple__61;
static PyObject *__pyx_tuple__62;
static PyObject *__pyx_tuple__63;
static PyObject *__pyx_tuple__64;
static PyObject *__pyx_tuple__65;
static PyObject *__pyx_tuple__66;
static PyObject *__pyx_tuple__67;
static PyObject *__pyx_tuple__68;
static PyObject *__pyx_tuple__69;
static PyObject *__pyx_tuple__70;
static PyObject *__pyx_tuple__71;
static PyObject *__pyx_tuple__72;
static PyObject *__pyx_tuple__73;
static PyObject *__pyx_tuple__74;
static PyObject *__pyx_tuple__76;
static PyObject *__pyx_codeobj__75;
static PyObject *__pyx_codeobj__77;
PyObject *UNDEFINED_OBJ;

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.iter cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_5tubes_11IterWrapper_1__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5tubes_11IterWrapper___reduce_cython__[] = "IterWrapper.__reduce_cython__(self)";
static PyObject *__pyx_pw_5tubes_11IterWrapper_1__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5tubes_11IterWrapper___reduce_cython__(((struct __pyx_obj_5tubes_IterWrapper *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5tubes_11IterWrapper___reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5tubes_IterWrapper *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.iter cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.iter cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple_, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.iter cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("tubes.IterWrapper.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.iter cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.iter cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_5tubes_11IterWrapper_3__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static char __pyx_doc_5tubes_11IterWrapper_2__setstate_cython__[] = "IterWrapper.__setstate_cython__(self, __pyx_state)";
static PyObject *__pyx_pw_5tubes_11IterWrapper_3__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5tubes_11IterWrapper_2__setstate_cython__(((struct __pyx_obj_5tubes_IterWrapper *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5tubes_11IterWrapper_2__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5tubes_IterWrapper *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self.iter cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.iter cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.iter cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.iter cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("tubes.IterWrapper.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "iter.pxi":42
 *     cdef AnyIter iter
 * 
 * cdef inline wrap(AnyIter it):             # <<<<<<<<<<<<<<
 *     cdef IterWrapper wrapper = IterWrapper()
 *     wrapper.iter = it
 */

static CYTHON_INLINE PyObject *__pyx_f_5tubes_wrap(ss::iter::AnyIter __pyx_v_it) {
  struct __pyx_obj_5tubes_IterWrapper *__pyx_v_wrapper = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("wrap", 0);

  /* "iter.pxi":43
 * 
 * cdef inline wrap(AnyIter it):
 *     cdef IterWrapper wrapper = IterWrapper()             # <<<<<<<<<<<<<<
 *     wrapper.iter = it
 *     return wrapper
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_5tubes_IterWrapper), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 43, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_wrapper = ((struct __pyx_obj_5tubes_IterWrapper *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "iter.pxi":44
 * cdef inline wrap(AnyIter it):
 *     cdef IterWrapper wrapper = IterWrapper()
 *     wrapper.iter = it             # <<<<<<<<<<<<<<
 *     return wrapper
 */
  __pyx_v_wrapper->iter = __pyx_v_it;

  /* "iter.pxi":45
 *     cdef IterWrapper wrapper = IterWrapper()
 *     wrapper.iter = it
 *     return wrapper             # <<<<<<<<<<<<<<
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_wrapper));
  __pyx_r = ((PyObject *)__pyx_v_wrapper);
  goto __pyx_L0;

  /* "iter.pxi":42
 *     cdef AnyIter iter
 * 
 * cdef inline wrap(AnyIter it):             # <<<<<<<<<<<<<<
 *     cdef IterWrapper wrapper = IterWrapper()
 *     wrapper.iter = it
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("tubes.wrap", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_wrapper);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "tubes.pyx":27
 *     cdef readonly str name
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return f"DType[{self.name}]"
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5tubes_5DType_1__repr__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5tubes_5DType_1__repr__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__repr__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5tubes_5DType___repr__(((struct __pyx_obj_5tubes_DType *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5tubes_5DType___repr__(struct __pyx_obj_5tubes_DType *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  Py_UCS4 __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("__repr__", 0);

  /* "tubes.pyx":28
 * 
 *     def __repr__(self):
 *         return f"DType[{self.name}]"             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 28, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = 0;
  __pyx_t_3 = 127;
  __Pyx_INCREF(__pyx_kp_u_DType);
  __pyx_t_2 += 6;
  __Pyx_GIVEREF(__pyx_kp_u_DType);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_kp_u_DType);
  __pyx_t_4 = __Pyx_PyObject_FormatSimple(__pyx_v_self->name, __pyx_empty_unicode); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 28, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) > __pyx_t_3) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) : __pyx_t_3;
  __pyx_t_2 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_4);
  __pyx_t_4 = 0;
  __Pyx_INCREF(__pyx_kp_u__3);
  __pyx_t_2 += 1;
  __Pyx_GIVEREF(__pyx_kp_u__3);
  PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_kp_u__3);
  __pyx_t_4 = __Pyx_PyUnicode_Join(__pyx_t_1, 3, __pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 28, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "tubes.pyx":27
 *     cdef readonly str name
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return f"DType[{self.name}]"
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("tubes.DType.__repr__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "tubes.pyx":25
 * cdef class DType:
 *     cdef scalar_type.ScalarType type
 *     cdef readonly str name             # <<<<<<<<<<<<<<
 * 
 *     def __repr__(self):
 */

/* Python wrapper */
static PyObject *__pyx_pw_5tubes_5DType_4name_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5tubes_5DType_4name_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5tubes_5DType_4name___get__(((struct __pyx_obj_5tubes_DType *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5tubes_5DType_4name___get__(struct __pyx_obj_5tubes_DType *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->name);
  __pyx_r = __pyx_v_self->name;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.type cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_5tubes_5DType_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5tubes_5DType_2__reduce_cython__[] = "DType.__reduce_cython__(self)";
static PyObject *__pyx_pw_5tubes_5DType_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5tubes_5DType_2__reduce_cython__(((struct __pyx_obj_5tubes_DType *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5tubes_5DType_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5tubes_DType *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.type cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.type cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.type cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("tubes.DType.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.type cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.type cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_5tubes_5DType_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static char __pyx_doc_5tubes_5DType_4__setstate_cython__[] = "DType.__setstate_cython__(self, __pyx_state)";
static PyObject *__pyx_pw_5tubes_5DType_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5tubes_5DType_4__setstate_cython__(((struct __pyx_obj_5tubes_DType *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5tubes_5DType_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5tubes_DType *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self.type cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.type cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.type cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.type cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("tubes.DType.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "tubes.pyx":31
 * 
 * 
 * cdef _make_dtype(scalar_type.ScalarType ty, str name):             # <<<<<<<<<<<<<<
 *     cdef DType dtype = DType()
 *     dtype.type = ty
 */

static PyObject *__pyx_f_5tubes__make_dtype(ss::iter::ScalarType __pyx_v_ty, PyObject *__pyx_v_name) {
  struct __pyx_obj_5tubes_DType *__pyx_v_dtype = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("_make_dtype", 0);

  /* "tubes.pyx":32
 * 
 * cdef _make_dtype(scalar_type.ScalarType ty, str name):
 *     cdef DType dtype = DType()             # <<<<<<<<<<<<<<
 *     dtype.type = ty
 *     dtype.name = name
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_5tubes_DType), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 32, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_dtype = ((struct __pyx_obj_5tubes_DType *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "tubes.pyx":33
 * cdef _make_dtype(scalar_type.ScalarType ty, str name):
 *     cdef DType dtype = DType()
 *     dtype.type = ty             # <<<<<<<<<<<<<<
 *     dtype.name = name
 *     return dtype
 */
  __pyx_v_dtype->type = __pyx_v_ty;

  /* "tubes.pyx":34
 *     cdef DType dtype = DType()
 *     dtype.type = ty
 *     dtype.name = name             # <<<<<<<<<<<<<<
 *     return dtype
 * 
 */
  __Pyx_INCREF(__pyx_v_name);
  __Pyx_GIVEREF(__pyx_v_name);
  __Pyx_GOTREF(__pyx_v_dtype->name);
  __Pyx_DECREF(__pyx_v_dtype->name);
  __pyx_v_dtype->name = __pyx_v_name;

  /* "tubes.pyx":35
 *     dtype.type = ty
 *     dtype.name = name
 *     return dtype             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_dtype));
  __pyx_r = ((PyObject *)__pyx_v_dtype);
  goto __pyx_L0;

  /* "tubes.pyx":31
 * 
 * 
 * cdef _make_dtype(scalar_type.ScalarType ty, str name):             # <<<<<<<<<<<<<<
 *     cdef DType dtype = DType()
 *     dtype.type = ty
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("tubes._make_dtype", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_dtype);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyiter.pxi":3
 * 
 * 
 * cdef Chain iters_to_c_chain(list ob):             # <<<<<<<<<<<<<<
 *     cdef IterWrapper wrapped
 *     cdef AnyIter it
 */

static struct ss::iter::Chain __pyx_f_5tubes_iters_to_c_chain(PyObject *__pyx_v_ob) {
  struct __pyx_obj_5tubes_IterWrapper *__pyx_v_wrapped = 0;
  ss::iter::AnyIter __pyx_v_it;
  struct ss::iter::Chain __pyx_v_c_chain;
  struct ss::iter::Chain __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  ss::iter::AnyIter __pyx_t_4;
  __Pyx_RefNannySetupContext("iters_to_c_chain", 0);

  /* "pyiter.pxi":7
 *     cdef AnyIter it
 *     cdef Chain c_chain
 *     for wrapped in ob:             # <<<<<<<<<<<<<<
 *         it = wrapped.iter
 *         c_chain.push_back(it)
 */
  if (unlikely(__pyx_v_ob == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(2, 7, __pyx_L1_error)
  }
  __pyx_t_1 = __pyx_v_ob; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
  for (;;) {
    if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_3 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_3); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(2, 7, __pyx_L1_error)
    #else
    __pyx_t_3 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 7, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    #endif
    if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_5tubes_IterWrapper))))) __PYX_ERR(2, 7, __pyx_L1_error)
    __Pyx_XDECREF_SET(__pyx_v_wrapped, ((struct __pyx_obj_5tubes_IterWrapper *)__pyx_t_3));
    __pyx_t_3 = 0;

    /* "pyiter.pxi":8
 *     cdef Chain c_chain
 *     for wrapped in ob:
 *         it = wrapped.iter             # <<<<<<<<<<<<<<
 *         c_chain.push_back(it)
 *     return c_chain
 */
    __pyx_t_4 = __pyx_v_wrapped->iter;
    __pyx_v_it = __pyx_t_4;

    /* "pyiter.pxi":9
 *     for wrapped in ob:
 *         it = wrapped.iter
 *         c_chain.push_back(it)             # <<<<<<<<<<<<<<
 *     return c_chain
 * 
 */
    __pyx_v_c_chain.push_back(__pyx_v_it);

    /* "pyiter.pxi":7
 *     cdef AnyIter it
 *     cdef Chain c_chain
 *     for wrapped in ob:             # <<<<<<<<<<<<<<
 *         it = wrapped.iter
 *         c_chain.push_back(it)
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pyiter.pxi":10
 *         it = wrapped.iter
 *         c_chain.push_back(it)
 *     return c_chain             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_c_chain;
  goto __pyx_L0;

  /* "pyiter.pxi":3
 * 
 * 
 * cdef Chain iters_to_c_chain(list ob):             # <<<<<<<<<<<<<<
 *     cdef IterWrapper wrapped
 *     cdef AnyIter it
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_WriteUnraisable("tubes.iters_to_c_chain", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_wrapped);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyiter.pxi":18
 *     cdef Chain chain;
 * 
 *     def __cinit__(self, IterWrapper output, list iters, list root_chain, *a):             # <<<<<<<<<<<<<<
 *         self.output = <ToPyIter*>output.iter.get()
 *         self.iters = iters
 */

/* Python wrapper */
static int __pyx_pw_5tubes_8TubeIter_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_5tubes_8TubeIter_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_5tubes_IterWrapper *__pyx_v_output = 0;
  PyObject *__pyx_v_iters = 0;
  PyObject *__pyx_v_root_chain = 0;
  CYTHON_UNUSED PyObject *__pyx_v_a = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  if (PyTuple_GET_SIZE(__pyx_args) > 3) {
    __pyx_v_a = PyTuple_GetSlice(__pyx_args, 3, PyTuple_GET_SIZE(__pyx_args));
    if (unlikely(!__pyx_v_a)) {
      __Pyx_RefNannyFinishContext();
      return -1;
    }
    __Pyx_GOTREF(__pyx_v_a);
  } else {
    __pyx_v_a = __pyx_empty_tuple; __Pyx_INCREF(__pyx_empty_tuple);
  }
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_output,&__pyx_n_s_iters,&__pyx_n_s_root_chain,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        default:
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_output)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_iters)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 3, 3, 1); __PYX_ERR(2, 18, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_root_chain)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 3, 3, 2); __PYX_ERR(2, 18, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t used_pos_args = (pos_args < 3) ? pos_args : 3;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, used_pos_args, "__cinit__") < 0)) __PYX_ERR(2, 18, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) < 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_output = ((struct __pyx_obj_5tubes_IterWrapper *)values[0]);
    __pyx_v_iters = ((PyObject*)values[1]);
    __pyx_v_root_chain = ((PyObject*)values[2]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(2, 18, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_DECREF(__pyx_v_a); __pyx_v_a = 0;
  __Pyx_AddTraceback("tubes.TubeIter.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_output), __pyx_ptype_5tubes_IterWrapper, 1, "output", 0))) __PYX_ERR(2, 18, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_iters), (&PyList_Type), 1, "iters", 1))) __PYX_ERR(2, 18, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_root_chain), (&PyList_Type), 1, "root_chain", 1))) __PYX_ERR(2, 18, __pyx_L1_error)
  __pyx_r = __pyx_pf_5tubes_8TubeIter___cinit__(((struct __pyx_obj_5tubes_TubeIter *)__pyx_v_self), __pyx_v_output, __pyx_v_iters, __pyx_v_root_chain, __pyx_v_a);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_a);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5tubes_8TubeIter___cinit__(struct __pyx_obj_5tubes_TubeIter *__pyx_v_self, struct __pyx_obj_5tubes_IterWrapper *__pyx_v_output, PyObject *__pyx_v_iters, PyObject *__pyx_v_root_chain, CYTHON_UNUSED PyObject *__pyx_v_a) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "pyiter.pxi":19
 * 
 *     def __cinit__(self, IterWrapper output, list iters, list root_chain, *a):
 *         self.output = <ToPyIter*>output.iter.get()             # <<<<<<<<<<<<<<
 *         self.iters = iters
 *         self.chain = iters_to_c_chain(root_chain)
 */
  __pyx_v_self->output = ((ss::iter::ToPyIter *)__pyx_v_output->iter.get());

  /* "pyiter.pxi":20
 *     def __cinit__(self, IterWrapper output, list iters, list root_chain, *a):
 *         self.output = <ToPyIter*>output.iter.get()
 *         self.iters = iters             # <<<<<<<<<<<<<<
 *         self.chain = iters_to_c_chain(root_chain)
 * 
 */
  __Pyx_INCREF(__pyx_v_iters);
  __Pyx_GIVEREF(__pyx_v_iters);
  __Pyx_GOTREF(__pyx_v_self->iters);
  __Pyx_DECREF(__pyx_v_self->iters);
  __pyx_v_self->iters = __pyx_v_iters;

  /* "pyiter.pxi":21
 *         self.output = <ToPyIter*>output.iter.get()
 *         self.iters = iters
 *         self.chain = iters_to_c_chain(root_chain)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_v_self->chain = __pyx_f_5tubes_iters_to_c_chain(__pyx_v_root_chain);

  /* "pyiter.pxi":18
 *     cdef Chain chain;
 * 
 *     def __cinit__(self, IterWrapper output, list iters, list root_chain, *a):             # <<<<<<<<<<<<<<
 *         self.output = <ToPyIter*>output.iter.get()
 *         self.iters = iters
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_5tubes_8TubeIter_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5tubes_8TubeIter_2__reduce_cython__[] = "TubeIter.__reduce_cython__(self)";
static PyObject *__pyx_pw_5tubes_8TubeIter_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5tubes_8TubeIter_2__reduce_cython__(((struct __pyx_obj_5tubes_TubeIter *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5tubes_8TubeIter_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5tubes_TubeIter *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__6, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("tubes.TubeIter.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_5tubes_8TubeIter_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static char __pyx_doc_5tubes_8TubeIter_4__setstate_cython__[] = "TubeIter.__setstate_cython__(self, __pyx_state)";
static PyObject *__pyx_pw_5tubes_8TubeIter_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5tubes_8TubeIter_4__setstate_cython__(((struct __pyx_obj_5tubes_TubeIter *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5tubes_8TubeIter_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5tubes_TubeIter *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__7, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("tubes.TubeIter.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyiter.pxi":26
 * cdef class TubeSingleIter(TubeIter):
 * 
 *     def __next__(self):             # <<<<<<<<<<<<<<
 *         do_next(self.chain)
 *         cdef ToPyIter *out = self.output
 */

/* Python wrapper */
static PyObject *__pyx_pw_5tubes_14TubeSingleIter_1__next__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5tubes_14TubeSingleIter_1__next__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__next__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5tubes_14TubeSingleIter___next__(((struct __pyx_obj_5tubes_TubeSingleIter *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5tubes_14TubeSingleIter___next__(struct __pyx_obj_5tubes_TubeSingleIter *__pyx_v_self) {
  ss::iter::ToPyIter *__pyx_v_out;
  ss::PyObj __pyx_v_obj;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  ss::iter::ToPyIter *__pyx_t_1;
  PyObject *__pyx_t_2;
  __Pyx_RefNannySetupContext("__next__", 0);

  /* "pyiter.pxi":27
 * 
 *     def __next__(self):
 *         do_next(self.chain)             # <<<<<<<<<<<<<<
 *         cdef ToPyIter *out = self.output
 *         cdef PyObj obj = out.get(0).acquire()
 */
  try {
    ss::iter::do_next(__pyx_v_self->__pyx_base.chain);
  } catch(...) {
    ss::iter::convert_stop_iteration(); if (!PyErr_Occurred()) PyErr_SetString(PyExc_RuntimeError , "Error converting c++ exception.");
    __PYX_ERR(2, 27, __pyx_L1_error)
  }

  /* "pyiter.pxi":28
 *     def __next__(self):
 *         do_next(self.chain)
 *         cdef ToPyIter *out = self.output             # <<<<<<<<<<<<<<
 *         cdef PyObj obj = out.get(0).acquire()
 *         return <object>obj.give()
 */
  __pyx_t_1 = __pyx_v_self->__pyx_base.output;
  __pyx_v_out = __pyx_t_1;

  /* "pyiter.pxi":29
 *         do_next(self.chain)
 *         cdef ToPyIter *out = self.output
 *         cdef PyObj obj = out.get(0).acquire()             # <<<<<<<<<<<<<<
 *         return <object>obj.give()
 * 
 */
  __pyx_v_obj = __pyx_v_out->get(0).acquire();

  /* "pyiter.pxi":30
 *         cdef ToPyIter *out = self.output
 *         cdef PyObj obj = out.get(0).acquire()
 *         return <object>obj.give()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __pyx_v_obj.give();
  __Pyx_INCREF(((PyObject *)__pyx_t_2));
  __pyx_r = ((PyObject *)__pyx_t_2);
  goto __pyx_L0;

  /* "pyiter.pxi":26
 * cdef class TubeSingleIter(TubeIter):
 * 
 *     def __next__(self):             # <<<<<<<<<<<<<<
 *         do_next(self.chain)
 *         cdef ToPyIter *out = self.output
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("tubes.TubeSingleIter.__next__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_5tubes_14TubeSingleIter_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5tubes_14TubeSingleIter_2__reduce_cython__[] = "TubeSingleIter.__reduce_cython__(self)";
static PyObject *__pyx_pw_5tubes_14TubeSingleIter_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5tubes_14TubeSingleIter_2__reduce_cython__(((struct __pyx_obj_5tubes_TubeSingleIter *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5tubes_14TubeSingleIter_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5tubes_TubeSingleIter *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__8, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("tubes.TubeSingleIter.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_5tubes_14TubeSingleIter_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static char __pyx_doc_5tubes_14TubeSingleIter_4__setstate_cython__[] = "TubeSingleIter.__setstate_cython__(self, __pyx_state)";
static PyObject *__pyx_pw_5tubes_14TubeSingleIter_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5tubes_14TubeSingleIter_4__setstate_cython__(((struct __pyx_obj_5tubes_TubeSingleIter *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5tubes_14TubeSingleIter_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5tubes_TubeSingleIter *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__9, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("tubes.TubeSingleIter.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyiter.pxi":36
 *     cdef size_t num_slots
 * 
 *     def __cinit__(self, IterWrapper output, list iters, list root_chain, *a):             # <<<<<<<<<<<<<<
 *         self.num_slots, = a
 * 
 */

/* Python wrapper */
static int __pyx_pw_5tubes_13TubeMultiIter_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_5tubes_13TubeMultiIter_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  CYTHON_UNUSED struct __pyx_obj_5tubes_IterWrapper *__pyx_v_output = 0;
  CYTHON_UNUSED PyObject *__pyx_v_iters = 0;
  CYTHON_UNUSED PyObject *__pyx_v_root_chain = 0;
  PyObject *__pyx_v_a = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  if (PyTuple_GET_SIZE(__pyx_args) > 3) {
    __pyx_v_a = PyTuple_GetSlice(__pyx_args, 3, PyTuple_GET_SIZE(__pyx_args));
    if (unlikely(!__pyx_v_a)) {
      __Pyx_RefNannyFinishContext();
      return -1;
    }
    __Pyx_GOTREF(__pyx_v_a);
  } else {
    __pyx_v_a = __pyx_empty_tuple; __Pyx_INCREF(__pyx_empty_tuple);
  }
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_output,&__pyx_n_s_iters,&__pyx_n_s_root_chain,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        default:
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_output)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_iters)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 3, 3, 1); __PYX_ERR(2, 36, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_root_chain)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 3, 3, 2); __PYX_ERR(2, 36, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t used_pos_args = (pos_args < 3) ? pos_args : 3;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, used_pos_args, "__cinit__") < 0)) __PYX_ERR(2, 36, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) < 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_output = ((struct __pyx_obj_5tubes_IterWrapper *)values[0]);
    __pyx_v_iters = ((PyObject*)values[1]);
    __pyx_v_root_chain = ((PyObject*)values[2]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(2, 36, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_DECREF(__pyx_v_a); __pyx_v_a = 0;
  __Pyx_AddTraceback("tubes.TubeMultiIter.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_output), __pyx_ptype_5tubes_IterWrapper, 1, "output", 0))) __PYX_ERR(2, 36, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_iters), (&PyList_Type), 1, "iters", 1))) __PYX_ERR(2, 36, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_root_chain), (&PyList_Type), 1, "root_chain", 1))) __PYX_ERR(2, 36, __pyx_L1_error)
  __pyx_r = __pyx_pf_5tubes_13TubeMultiIter___cinit__(((struct __pyx_obj_5tubes_TubeMultiIter *)__pyx_v_self), __pyx_v_output, __pyx_v_iters, __pyx_v_root_chain, __pyx_v_a);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_a);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5tubes_13TubeMultiIter___cinit__(struct __pyx_obj_5tubes_TubeMultiIter *__pyx_v_self, CYTHON_UNUSED struct __pyx_obj_5tubes_IterWrapper *__pyx_v_output, CYTHON_UNUSED PyObject *__pyx_v_iters, CYTHON_UNUSED PyObject *__pyx_v_root_chain, PyObject *__pyx_v_a) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  size_t __pyx_t_2;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "pyiter.pxi":37
 * 
 *     def __cinit__(self, IterWrapper output, list iters, list root_chain, *a):
 *         self.num_slots, = a             # <<<<<<<<<<<<<<
 * 
 *     def __next__(self):
 */
  if (1) {
    PyObject* sequence = __pyx_v_a;
    #if !CYTHON_COMPILING_IN_PYPY
    Py_ssize_t size = Py_SIZE(sequence);
    #else
    Py_ssize_t size = PySequence_Size(sequence);
    #endif
    if (unlikely(size != 1)) {
      if (size > 1) __Pyx_RaiseTooManyValuesError(1);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(2, 37, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_1 = PyTuple_GET_ITEM(sequence, 0); 
    __Pyx_INCREF(__pyx_t_1);
    #else
    __pyx_t_1 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 37, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    #endif
  }
  __pyx_t_2 = __Pyx_PyInt_As_size_t(__pyx_t_1); if (unlikely((__pyx_t_2 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(2, 37, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_self->num_slots = __pyx_t_2;

  /* "pyiter.pxi":36
 *     cdef size_t num_slots
 * 
 *     def __cinit__(self, IterWrapper output, list iters, list root_chain, *a):             # <<<<<<<<<<<<<<
 *         self.num_slots, = a
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("tubes.TubeMultiIter.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyiter.pxi":39
 *         self.num_slots, = a
 * 
 *     def __next__(self):             # <<<<<<<<<<<<<<
 *         do_next(self.chain)
 *         cdef ToPyIter *out = self.output
 */

/* Python wrapper */
static PyObject *__pyx_pw_5tubes_13TubeMultiIter_3__next__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5tubes_13TubeMultiIter_3__next__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__next__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5tubes_13TubeMultiIter_2__next__(((struct __pyx_obj_5tubes_TubeMultiIter *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_5tubes_13TubeMultiIter_8__next___2generator1(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "pyiter.pxi":42
 *         do_next(self.chain)
 *         cdef ToPyIter *out = self.output
 *         return tuple(<object>out.get(i).acquire().give() for i in range(self.num_slots))             # <<<<<<<<<<<<<<
 * 
 * 
 */

static PyObject *__pyx_pf_5tubes_13TubeMultiIter_8__next___genexpr(PyObject *__pyx_self) {
  struct __pyx_obj_5tubes___pyx_scope_struct_1_genexpr *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("genexpr", 0);
  __pyx_cur_scope = (struct __pyx_obj_5tubes___pyx_scope_struct_1_genexpr *)__pyx_tp_new_5tubes___pyx_scope_struct_1_genexpr(__pyx_ptype_5tubes___pyx_scope_struct_1_genexpr, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_5tubes___pyx_scope_struct_1_genexpr *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(2, 42, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_outer_scope = (struct __pyx_obj_5tubes___pyx_scope_struct____next__ *) __pyx_self;
  __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_outer_scope));
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_outer_scope);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_5tubes_13TubeMultiIter_8__next___2generator1, (PyObject *) __pyx_cur_scope, __pyx_n_s_genexpr, __pyx_n_s_next___locals_genexpr, __pyx_n_s_tubes); if (unlikely(!gen)) __PYX_ERR(2, 42, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("tubes.TubeMultiIter.__next__.genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_5tubes_13TubeMultiIter_8__next___2generator1(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_5tubes___pyx_scope_struct_1_genexpr *__pyx_cur_scope = ((struct __pyx_obj_5tubes___pyx_scope_struct_1_genexpr *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  size_t __pyx_t_1;
  size_t __pyx_t_2;
  PyObject *__pyx_t_3;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("genexpr", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L6_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(2, 42, __pyx_L1_error)
  if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_self)) { __Pyx_RaiseClosureNameError("self"); __PYX_ERR(2, 42, __pyx_L1_error) }
  __pyx_t_1 = __pyx_cur_scope->__pyx_outer_scope->__pyx_v_self->num_slots;
  for (__pyx_t_2 = 0; __pyx_t_2 < __pyx_t_1; __pyx_t_2+=1) {
    __pyx_cur_scope->__pyx_v_i = __pyx_t_2;
    __pyx_t_3 = __pyx_cur_scope->__pyx_outer_scope->__pyx_v_out->get(__pyx_cur_scope->__pyx_v_i).acquire().give();
    __Pyx_INCREF(((PyObject *)__pyx_t_3));
    __pyx_r = ((PyObject *)__pyx_t_3);
    __pyx_cur_scope->__pyx_t_0 = __pyx_t_1;
    __pyx_cur_scope->__pyx_t_1 = __pyx_t_2;
    __Pyx_XGIVEREF(__pyx_r);
    __Pyx_RefNannyFinishContext();
    __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
    /* return from generator, yielding value */
    __pyx_generator->resume_label = 1;
    return __pyx_r;
    __pyx_L6_resume_from_yield:;
    __pyx_t_1 = __pyx_cur_scope->__pyx_t_0;
    __pyx_t_2 = __pyx_cur_scope->__pyx_t_1;
    if (unlikely(!__pyx_sent_value)) __PYX_ERR(2, 42, __pyx_L1_error)
  }
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyiter.pxi":39
 *         self.num_slots, = a
 * 
 *     def __next__(self):             # <<<<<<<<<<<<<<
 *         do_next(self.chain)
 *         cdef ToPyIter *out = self.output
 */

static PyObject *__pyx_pf_5tubes_13TubeMultiIter_2__next__(struct __pyx_obj_5tubes_TubeMultiIter *__pyx_v_self) {
  struct __pyx_obj_5tubes___pyx_scope_struct____next__ *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  ss::iter::ToPyIter *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__next__", 0);
  __pyx_cur_scope = (struct __pyx_obj_5tubes___pyx_scope_struct____next__ *)__pyx_tp_new_5tubes___pyx_scope_struct____next__(__pyx_ptype_5tubes___pyx_scope_struct____next__, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_5tubes___pyx_scope_struct____next__ *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(2, 39, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_self = __pyx_v_self;
  __Pyx_INCREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __Pyx_GIVEREF((PyObject *)__pyx_cur_scope->__pyx_v_self);

  /* "pyiter.pxi":40
 * 
 *     def __next__(self):
 *         do_next(self.chain)             # <<<<<<<<<<<<<<
 *         cdef ToPyIter *out = self.output
 *         return tuple(<object>out.get(i).acquire().give() for i in range(self.num_slots))
 */
  try {
    ss::iter::do_next(__pyx_cur_scope->__pyx_v_self->__pyx_base.chain);
  } catch(...) {
    ss::iter::convert_stop_iteration(); if (!PyErr_Occurred()) PyErr_SetString(PyExc_RuntimeError , "Error converting c++ exception.");
    __PYX_ERR(2, 40, __pyx_L1_error)
  }

  /* "pyiter.pxi":41
 *     def __next__(self):
 *         do_next(self.chain)
 *         cdef ToPyIter *out = self.output             # <<<<<<<<<<<<<<
 *         return tuple(<object>out.get(i).acquire().give() for i in range(self.num_slots))
 * 
 */
  __pyx_t_1 = __pyx_cur_scope->__pyx_v_self->__pyx_base.output;
  __pyx_cur_scope->__pyx_v_out = __pyx_t_1;

  /* "pyiter.pxi":42
 *         do_next(self.chain)
 *         cdef ToPyIter *out = self.output
 *         return tuple(<object>out.get(i).acquire().give() for i in range(self.num_slots))             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __pyx_pf_5tubes_13TubeMultiIter_8__next___genexpr(((PyObject*)__pyx_cur_scope)); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 42, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PySequence_Tuple(__pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 42, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "pyiter.pxi":39
 *         self.num_slots, = a
 * 
 *     def __next__(self):             # <<<<<<<<<<<<<<
 *         do_next(self.chain)
 *         cdef ToPyIter *out = self.output
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("tubes.TubeMultiIter.__next__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_5tubes_13TubeMultiIter_5__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5tubes_13TubeMultiIter_4__reduce_cython__[] = "TubeMultiIter.__reduce_cython__(self)";
static PyObject *__pyx_pw_5tubes_13TubeMultiIter_5__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5tubes_13TubeMultiIter_4__reduce_cython__(((struct __pyx_obj_5tubes_TubeMultiIter *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5tubes_13TubeMultiIter_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5tubes_TubeMultiIter *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__10, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("tubes.TubeMultiIter.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_5tubes_13TubeMultiIter_7__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static char __pyx_doc_5tubes_13TubeMultiIter_6__setstate_cython__[] = "TubeMultiIter.__setstate_cython__(self, __pyx_state)";
static PyObject *__pyx_pw_5tubes_13TubeMultiIter_7__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5tubes_13TubeMultiIter_6__setstate_cython__(((struct __pyx_obj_5tubes_TubeMultiIter *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5tubes_13TubeMultiIter_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5tubes_TubeMultiIter *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__11, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("tubes.TubeMultiIter.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyiter.pxi":51
 *     cdef public set inputs
 * 
 *     def __cinit__(self, Tube output):             # <<<<<<<<<<<<<<
 *         self.output = output
 *         self.chains = {}
 */

/* Python wrapper */
static int __pyx_pw_5tubes_6Chains_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_5tubes_6Chains_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_5tubes_Tube *__pyx_v_output = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_output,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_output)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(2, 51, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_output = ((struct __pyx_obj_5tubes_Tube *)values[0]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(2, 51, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("tubes.Chains.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_output), __pyx_ptype_5tubes_Tube, 1, "output", 0))) __PYX_ERR(2, 51, __pyx_L1_error)
  __pyx_r = __pyx_pf_5tubes_6Chains___cinit__(((struct __pyx_obj_5tubes_Chains *)__pyx_v_self), __pyx_v_output);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5tubes_6Chains___cinit__(struct __pyx_obj_5tubes_Chains *__pyx_v_self, struct __pyx_obj_5tubes_Tube *__pyx_v_output) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "pyiter.pxi":52
 * 
 *     def __cinit__(self, Tube output):
 *         self.output = output             # <<<<<<<<<<<<<<
 *         self.chains = {}
 *         self.ordering = {}
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_output));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_output));
  __Pyx_GOTREF(__pyx_v_self->output);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->output));
  __pyx_v_self->output = __pyx_v_output;

  /* "pyiter.pxi":53
 *     def __cinit__(self, Tube output):
 *         self.output = output
 *         self.chains = {}             # <<<<<<<<<<<<<<
 *         self.ordering = {}
 *         self.inputs = set()
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 53, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->chains);
  __Pyx_DECREF(__pyx_v_self->chains);
  __pyx_v_self->chains = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pyiter.pxi":54
 *         self.output = output
 *         self.chains = {}
 *         self.ordering = {}             # <<<<<<<<<<<<<<
 *         self.inputs = set()
 *         self.add(output, (None, output), 0)
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 54, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->ordering);
  __Pyx_DECREF(__pyx_v_self->ordering);
  __pyx_v_self->ordering = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pyiter.pxi":55
 *         self.chains = {}
 *         self.ordering = {}
 *         self.inputs = set()             # <<<<<<<<<<<<<<
 *         self.add(output, (None, output), 0)
 * 
 */
  __pyx_t_1 = PySet_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 55, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->inputs);
  __Pyx_DECREF(__pyx_v_self->inputs);
  __pyx_v_self->inputs = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pyiter.pxi":56
 *         self.ordering = {}
 *         self.inputs = set()
 *         self.add(output, (None, output), 0)             # <<<<<<<<<<<<<<
 * 
 *     def add(self, tube, parent, rank=0):
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_add); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 56, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 56, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  PyTuple_SET_ITEM(__pyx_t_3, 0, Py_None);
  __Pyx_INCREF(((PyObject *)__pyx_v_output));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_output));
  PyTuple_SET_ITEM(__pyx_t_3, 1, ((PyObject *)__pyx_v_output));
  __pyx_t_4 = NULL;
  __pyx_t_5 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_5 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[4] = {__pyx_t_4, ((PyObject *)__pyx_v_output), __pyx_t_3, __pyx_int_0};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_5, 3+__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 56, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[4] = {__pyx_t_4, ((PyObject *)__pyx_v_output), __pyx_t_3, __pyx_int_0};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_5, 3+__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 56, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else
  #endif
  {
    __pyx_t_6 = PyTuple_New(3+__pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(2, 56, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    if (__pyx_t_4) {
      __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_4); __pyx_t_4 = NULL;
    }
    __Pyx_INCREF(((PyObject *)__pyx_v_output));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_output));
    PyTuple_SET_ITEM(__pyx_t_6, 0+__pyx_t_5, ((PyObject *)__pyx_v_output));
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_6, 1+__pyx_t_5, __pyx_t_3);
    __Pyx_INCREF(__pyx_int_0);
    __Pyx_GIVEREF(__pyx_int_0);
    PyTuple_SET_ITEM(__pyx_t_6, 2+__pyx_t_5, __pyx_int_0);
    __pyx_t_3 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_6, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 56, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pyiter.pxi":51
 *     cdef public set inputs
 * 
 *     def __cinit__(self, Tube output):             # <<<<<<<<<<<<<<
 *         self.output = output
 *         self.chains = {}
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("tubes.Chains.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyiter.pxi":58
 *         self.add(output, (None, output), 0)
 * 
 *     def add(self, tube, parent, rank=0):             # <<<<<<<<<<<<<<
 *         self.chains.setdefault(parent, set())
 *         self.chains[parent].add(tube)
 */

/* Python wrapper */
static PyObject *__pyx_pw_5tubes_6Chains_3add(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5tubes_6Chains_2add[] = "Chains.add(self, tube, parent, rank=0)";
static PyObject *__pyx_pw_5tubes_6Chains_3add(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_tube = 0;
  PyObject *__pyx_v_parent = 0;
  PyObject *__pyx_v_rank = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("add (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_tube,&__pyx_n_s_parent,&__pyx_n_s_rank,0};
    PyObject* values[3] = {0,0,0};
    values[2] = ((PyObject *)__pyx_int_0);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_tube)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_parent)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("add", 0, 2, 3, 1); __PYX_ERR(2, 58, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_rank);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "add") < 0)) __PYX_ERR(2, 58, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_tube = values[0];
    __pyx_v_parent = values[1];
    __pyx_v_rank = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("add", 0, 2, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(2, 58, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("tubes.Chains.add", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5tubes_6Chains_2add(((struct __pyx_obj_5tubes_Chains *)__pyx_v_self), __pyx_v_tube, __pyx_v_parent, __pyx_v_rank);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5tubes_6Chains_2add(struct __pyx_obj_5tubes_Chains *__pyx_v_self, PyObject *__pyx_v_tube, PyObject *__pyx_v_parent, PyObject *__pyx_v_rank) {
  PyObject *__pyx_v_owned_inputs = NULL;
  PyObject *__pyx_v_chain = NULL;
  PyObject *__pyx_v_owned_tube = NULL;
  PyObject *__pyx_v_tube_input = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  Py_ssize_t __pyx_t_6;
  PyObject *(*__pyx_t_7)(PyObject *);
  Py_ssize_t __pyx_t_8;
  PyObject *(*__pyx_t_9)(PyObject *);
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  int __pyx_t_13;
  PyObject *__pyx_t_14 = NULL;
  int __pyx_t_15;
  int __pyx_t_16;
  __Pyx_RefNannySetupContext("add", 0);

  /* "pyiter.pxi":59
 * 
 *     def add(self, tube, parent, rank=0):
 *         self.chains.setdefault(parent, set())             # <<<<<<<<<<<<<<
 *         self.chains[parent].add(tube)
 *         self.ordering[tube] = max(rank, self.ordering.get(tube, -1))
 */
  if (unlikely(__pyx_v_self->chains == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "setdefault");
    __PYX_ERR(2, 59, __pyx_L1_error)
  }
  __pyx_t_1 = PySet_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 59, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyDict_SetDefault(__pyx_v_self->chains, __pyx_v_parent, __pyx_t_1, -1L); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 59, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyiter.pxi":60
 *     def add(self, tube, parent, rank=0):
 *         self.chains.setdefault(parent, set())
 *         self.chains[parent].add(tube)             # <<<<<<<<<<<<<<
 *         self.ordering[tube] = max(rank, self.ordering.get(tube, -1))
 * 
 */
  if (unlikely(__pyx_v_self->chains == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(2, 60, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_self->chains, __pyx_v_parent); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 60, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_add); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 60, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_1)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (!__pyx_t_1) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_v_tube); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 60, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[2] = {__pyx_t_1, __pyx_v_tube};
      __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 60, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_GOTREF(__pyx_t_2);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[2] = {__pyx_t_1, __pyx_v_tube};
      __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 60, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_GOTREF(__pyx_t_2);
    } else
    #endif
    {
      __pyx_t_4 = PyTuple_New(1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 60, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_1); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_1); __pyx_t_1 = NULL;
      __Pyx_INCREF(__pyx_v_tube);
      __Pyx_GIVEREF(__pyx_v_tube);
      PyTuple_SET_ITEM(__pyx_t_4, 0+1, __pyx_v_tube);
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_4, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 60, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyiter.pxi":61
 *         self.chains.setdefault(parent, set())
 *         self.chains[parent].add(tube)
 *         self.ordering[tube] = max(rank, self.ordering.get(tube, -1))             # <<<<<<<<<<<<<<
 * 
 *         owned_inputs = set()
 */
  if (unlikely(__pyx_v_self->ordering == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "get");
    __PYX_ERR(2, 61, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyDict_GetItemDefault(__pyx_v_self->ordering, __pyx_v_tube, __pyx_int_neg_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 61, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_v_rank);
  __pyx_t_3 = __pyx_v_rank;
  __pyx_t_1 = PyObject_RichCompare(__pyx_t_2, __pyx_t_3, Py_GT); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 61, __pyx_L1_error)
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(2, 61, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_5) {
    __Pyx_INCREF(__pyx_t_2);
    __pyx_t_4 = __pyx_t_2;
  } else {
    __Pyx_INCREF(__pyx_t_3);
    __pyx_t_4 = __pyx_t_3;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __pyx_t_4;
  __Pyx_INCREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(__pyx_v_self->ordering == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(2, 61, __pyx_L1_error)
  }
  if (unlikely(PyDict_SetItem(__pyx_v_self->ordering, __pyx_v_tube, __pyx_t_2) < 0)) __PYX_ERR(2, 61, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyiter.pxi":63
 *         self.ordering[tube] = max(rank, self.ordering.get(tube, -1))
 * 
 *         owned_inputs = set()             # <<<<<<<<<<<<<<
 *         for chain in tube._chains:
 *             for owned_tube in chain:
 */
  __pyx_t_2 = PySet_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 63, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_owned_inputs = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "pyiter.pxi":64
 * 
 *         owned_inputs = set()
 *         for chain in tube._chains:             # <<<<<<<<<<<<<<
 *             for owned_tube in chain:
 *                 self.add(owned_tube, (tube, chain), rank+1)
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_tube, __pyx_n_s_chains); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 64, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (likely(PyList_CheckExact(__pyx_t_2)) || PyTuple_CheckExact(__pyx_t_2)) {
    __pyx_t_4 = __pyx_t_2; __Pyx_INCREF(__pyx_t_4); __pyx_t_6 = 0;
    __pyx_t_7 = NULL;
  } else {
    __pyx_t_6 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 64, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_7 = Py_TYPE(__pyx_t_4)->tp_iternext; if (unlikely(!__pyx_t_7)) __PYX_ERR(2, 64, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  for (;;) {
    if (likely(!__pyx_t_7)) {
      if (likely(PyList_CheckExact(__pyx_t_4))) {
        if (__pyx_t_6 >= PyList_GET_SIZE(__pyx_t_4)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_2 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_6); __Pyx_INCREF(__pyx_t_2); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(2, 64, __pyx_L1_error)
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_4, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 64, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      } else {
        if (__pyx_t_6 >= PyTuple_GET_SIZE(__pyx_t_4)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_6); __Pyx_INCREF(__pyx_t_2); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(2, 64, __pyx_L1_error)
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_4, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 64, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      }
    } else {
      __pyx_t_2 = __pyx_t_7(__pyx_t_4);
      if (unlikely(!__pyx_t_2)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(2, 64, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_2);
    }
    __Pyx_XDECREF_SET(__pyx_v_chain, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "pyiter.pxi":65
 *         owned_inputs = set()
 *         for chain in tube._chains:
 *             for owned_tube in chain:             # <<<<<<<<<<<<<<
 *                 self.add(owned_tube, (tube, chain), rank+1)
 *                 owned_inputs.add(owned_tube)
 */
    if (likely(PyList_CheckExact(__pyx_v_chain)) || PyTuple_CheckExact(__pyx_v_chain)) {
      __pyx_t_2 = __pyx_v_chain; __Pyx_INCREF(__pyx_t_2); __pyx_t_8 = 0;
      __pyx_t_9 = NULL;
    } else {
      __pyx_t_8 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_v_chain); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 65, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_9 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_9)) __PYX_ERR(2, 65, __pyx_L1_error)
    }
    for (;;) {
      if (likely(!__pyx_t_9)) {
        if (likely(PyList_CheckExact(__pyx_t_2))) {
          if (__pyx_t_8 >= PyList_GET_SIZE(__pyx_t_2)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_3 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_8); __Pyx_INCREF(__pyx_t_3); __pyx_t_8++; if (unlikely(0 < 0)) __PYX_ERR(2, 65, __pyx_L1_error)
          #else
          __pyx_t_3 = PySequence_ITEM(__pyx_t_2, __pyx_t_8); __pyx_t_8++; if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 65, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          #endif
        } else {
          if (__pyx_t_8 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_8); __Pyx_INCREF(__pyx_t_3); __pyx_t_8++; if (unlikely(0 < 0)) __PYX_ERR(2, 65, __pyx_L1_error)
          #else
          __pyx_t_3 = PySequence_ITEM(__pyx_t_2, __pyx_t_8); __pyx_t_8++; if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 65, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          #endif
        }
      } else {
        __pyx_t_3 = __pyx_t_9(__pyx_t_2);
        if (unlikely(!__pyx_t_3)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(2, 65, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_3);
      }
      __Pyx_XDECREF_SET(__pyx_v_owned_tube, __pyx_t_3);
      __pyx_t_3 = 0;

      /* "pyiter.pxi":66
 *         for chain in tube._chains:
 *             for owned_tube in chain:
 *                 self.add(owned_tube, (tube, chain), rank+1)             # <<<<<<<<<<<<<<
 *                 owned_inputs.add(owned_tube)
 * 
 */
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_add); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 66, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_10 = PyTuple_New(2); if (unlikely(!__pyx_t_10)) __PYX_ERR(2, 66, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_INCREF(__pyx_v_tube);
      __Pyx_GIVEREF(__pyx_v_tube);
      PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_v_tube);
      __Pyx_INCREF(__pyx_v_chain);
      __Pyx_GIVEREF(__pyx_v_chain);
      PyTuple_SET_ITEM(__pyx_t_10, 1, __pyx_v_chain);
      __pyx_t_11 = __Pyx_PyInt_AddObjC(__pyx_v_rank, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_11)) __PYX_ERR(2, 66, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __pyx_t_12 = NULL;
      __pyx_t_13 = 0;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
        __pyx_t_12 = PyMethod_GET_SELF(__pyx_t_1);
        if (likely(__pyx_t_12)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
          __Pyx_INCREF(__pyx_t_12);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_1, function);
          __pyx_t_13 = 1;
        }
      }
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_1)) {
        PyObject *__pyx_temp[4] = {__pyx_t_12, __pyx_v_owned_tube, __pyx_t_10, __pyx_t_11};
        __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_13, 3+__pyx_t_13); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 66, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_1)) {
        PyObject *__pyx_temp[4] = {__pyx_t_12, __pyx_v_owned_tube, __pyx_t_10, __pyx_t_11};
        __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_13, 3+__pyx_t_13); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 66, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      } else
      #endif
      {
        __pyx_t_14 = PyTuple_New(3+__pyx_t_13); if (unlikely(!__pyx_t_14)) __PYX_ERR(2, 66, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_14);
        if (__pyx_t_12) {
          __Pyx_GIVEREF(__pyx_t_12); PyTuple_SET_ITEM(__pyx_t_14, 0, __pyx_t_12); __pyx_t_12 = NULL;
        }
        __Pyx_INCREF(__pyx_v_owned_tube);
        __Pyx_GIVEREF(__pyx_v_owned_tube);
        PyTuple_SET_ITEM(__pyx_t_14, 0+__pyx_t_13, __pyx_v_owned_tube);
        __Pyx_GIVEREF(__pyx_t_10);
        PyTuple_SET_ITEM(__pyx_t_14, 1+__pyx_t_13, __pyx_t_10);
        __Pyx_GIVEREF(__pyx_t_11);
        PyTuple_SET_ITEM(__pyx_t_14, 2+__pyx_t_13, __pyx_t_11);
        __pyx_t_10 = 0;
        __pyx_t_11 = 0;
        __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_14, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 66, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
      }
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

      /* "pyiter.pxi":67
 *             for owned_tube in chain:
 *                 self.add(owned_tube, (tube, chain), rank+1)
 *                 owned_inputs.add(owned_tube)             # <<<<<<<<<<<<<<
 * 
 *         for tube_input in tube._inputs:
 */
      __pyx_t_15 = PySet_Add(__pyx_v_owned_inputs, __pyx_v_owned_tube); if (unlikely(__pyx_t_15 == ((int)-1))) __PYX_ERR(2, 67, __pyx_L1_error)

      /* "pyiter.pxi":65
 *         owned_inputs = set()
 *         for chain in tube._chains:
 *             for owned_tube in chain:             # <<<<<<<<<<<<<<
 *                 self.add(owned_tube, (tube, chain), rank+1)
 *                 owned_inputs.add(owned_tube)
 */
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "pyiter.pxi":64
 * 
 *         owned_inputs = set()
 *         for chain in tube._chains:             # <<<<<<<<<<<<<<
 *             for owned_tube in chain:
 *                 self.add(owned_tube, (tube, chain), rank+1)
 */
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "pyiter.pxi":69
 *                 owned_inputs.add(owned_tube)
 * 
 *         for tube_input in tube._inputs:             # <<<<<<<<<<<<<<
 *             if tube_input not in owned_inputs:
 *                 self.add(tube_input, parent, rank+1)
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_tube, __pyx_n_s_inputs); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 69, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (likely(PyList_CheckExact(__pyx_t_4)) || PyTuple_CheckExact(__pyx_t_4)) {
    __pyx_t_2 = __pyx_t_4; __Pyx_INCREF(__pyx_t_2); __pyx_t_6 = 0;
    __pyx_t_7 = NULL;
  } else {
    __pyx_t_6 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 69, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_7 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_7)) __PYX_ERR(2, 69, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  for (;;) {
    if (likely(!__pyx_t_7)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_6 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_6); __Pyx_INCREF(__pyx_t_4); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(2, 69, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_2, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 69, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_6 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_6); __Pyx_INCREF(__pyx_t_4); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(2, 69, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_2, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 69, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_7(__pyx_t_2);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(2, 69, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XDECREF_SET(__pyx_v_tube_input, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "pyiter.pxi":70
 * 
 *         for tube_input in tube._inputs:
 *             if tube_input not in owned_inputs:             # <<<<<<<<<<<<<<
 *                 self.add(tube_input, parent, rank+1)
 * 
 */
    __pyx_t_5 = (__Pyx_PySequence_ContainsTF(__pyx_v_tube_input, __pyx_v_owned_inputs, Py_NE)); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(2, 70, __pyx_L1_error)
    __pyx_t_16 = (__pyx_t_5 != 0);
    if (__pyx_t_16) {

      /* "pyiter.pxi":71
 *         for tube_input in tube._inputs:
 *             if tube_input not in owned_inputs:
 *                 self.add(tube_input, parent, rank+1)             # <<<<<<<<<<<<<<
 * 
 *         if not tube._inputs:
 */
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_add); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 71, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_1 = __Pyx_PyInt_AddObjC(__pyx_v_rank, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 71, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_14 = NULL;
      __pyx_t_13 = 0;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_14 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_14)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_14);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
          __pyx_t_13 = 1;
        }
      }
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_3)) {
        PyObject *__pyx_temp[4] = {__pyx_t_14, __pyx_v_tube_input, __pyx_v_parent, __pyx_t_1};
        __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_13, 3+__pyx_t_13); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 71, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
        PyObject *__pyx_temp[4] = {__pyx_t_14, __pyx_v_tube_input, __pyx_v_parent, __pyx_t_1};
        __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_13, 3+__pyx_t_13); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 71, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      } else
      #endif
      {
        __pyx_t_11 = PyTuple_New(3+__pyx_t_13); if (unlikely(!__pyx_t_11)) __PYX_ERR(2, 71, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        if (__pyx_t_14) {
          __Pyx_GIVEREF(__pyx_t_14); PyTuple_SET_ITEM(__pyx_t_11, 0, __pyx_t_14); __pyx_t_14 = NULL;
        }
        __Pyx_INCREF(__pyx_v_tube_input);
        __Pyx_GIVEREF(__pyx_v_tube_input);
        PyTuple_SET_ITEM(__pyx_t_11, 0+__pyx_t_13, __pyx_v_tube_input);
        __Pyx_INCREF(__pyx_v_parent);
        __Pyx_GIVEREF(__pyx_v_parent);
        PyTuple_SET_ITEM(__pyx_t_11, 1+__pyx_t_13, __pyx_v_parent);
        __Pyx_GIVEREF(__pyx_t_1);
        PyTuple_SET_ITEM(__pyx_t_11, 2+__pyx_t_13, __pyx_t_1);
        __pyx_t_1 = 0;
        __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_11, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 71, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      }
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

      /* "pyiter.pxi":70
 * 
 *         for tube_input in tube._inputs:
 *             if tube_input not in owned_inputs:             # <<<<<<<<<<<<<<
 *                 self.add(tube_input, parent, rank+1)
 * 
 */
    }

    /* "pyiter.pxi":69
 *                 owned_inputs.add(owned_tube)
 * 
 *         for tube_input in tube._inputs:             # <<<<<<<<<<<<<<
 *             if tube_input not in owned_inputs:
 *                 self.add(tube_input, parent, rank+1)
 */
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyiter.pxi":73
 *                 self.add(tube_input, parent, rank+1)
 * 
 *         if not tube._inputs:             # <<<<<<<<<<<<<<
 *             self.inputs.add(tube)
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_tube, __pyx_n_s_inputs); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 73, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_16 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_16 < 0)) __PYX_ERR(2, 73, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_5 = ((!__pyx_t_16) != 0);
  if (__pyx_t_5) {

    /* "pyiter.pxi":74
 * 
 *         if not tube._inputs:
 *             self.inputs.add(tube)             # <<<<<<<<<<<<<<
 * 
 *     def ordered(self):
 */
    if (unlikely(__pyx_v_self->inputs == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "add");
      __PYX_ERR(2, 74, __pyx_L1_error)
    }
    __pyx_t_15 = PySet_Add(__pyx_v_self->inputs, __pyx_v_tube); if (unlikely(__pyx_t_15 == ((int)-1))) __PYX_ERR(2, 74, __pyx_L1_error)

    /* "pyiter.pxi":73
 *                 self.add(tube_input, parent, rank+1)
 * 
 *         if not tube._inputs:             # <<<<<<<<<<<<<<
 *             self.inputs.add(tube)
 * 
 */
  }

  /* "pyiter.pxi":58
 *         self.add(output, (None, output), 0)
 * 
 *     def add(self, tube, parent, rank=0):             # <<<<<<<<<<<<<<
 *         self.chains.setdefault(parent, set())
 *         self.chains[parent].add(tube)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_XDECREF(__pyx_t_14);
  __Pyx_AddTraceback("tubes.Chains.add", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_owned_inputs);
  __Pyx_XDECREF(__pyx_v_chain);
  __Pyx_XDECREF(__pyx_v_owned_tube);
  __Pyx_XDECREF(__pyx_v_tube_input);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_5tubes_6Chains_6generator(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "pyiter.pxi":76
 *             self.inputs.add(tube)
 * 
 *     def ordered(self):             # <<<<<<<<<<<<<<
 *         chain_order = lambda i: max(self.ordering[t] for t in i[1])
 *         ordered_chains = sorted(self.chains.items(), key=chain_order, reverse=True)
 */

/* Python wrapper */
static PyObject *__pyx_pw_5tubes_6Chains_5ordered(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5tubes_6Chains_4ordered[] = "Chains.ordered(self)";
static PyObject *__pyx_pw_5tubes_6Chains_5ordered(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("ordered (wrapper)", 0);
  __pyx_r = __pyx_pf_5tubes_6Chains_4ordered(((struct __pyx_obj_5tubes_Chains *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyiter.pxi":77
 * 
 *     def ordered(self):
 *         chain_order = lambda i: max(self.ordering[t] for t in i[1])             # <<<<<<<<<<<<<<
 *         ordered_chains = sorted(self.chains.items(), key=chain_order, reverse=True)
 *         for key, tubes in ordered_chains:
 */

/* Python wrapper */
static PyObject *__pyx_pw_5tubes_6Chains_7ordered_lambda1(PyObject *__pyx_self, PyObject *__pyx_v_i); /*proto*/
static PyMethodDef __pyx_mdef_5tubes_6Chains_7ordered_lambda1 = {"lambda1", (PyCFunction)__pyx_pw_5tubes_6Chains_7ordered_lambda1, METH_O, 0};
static PyObject *__pyx_pw_5tubes_6Chains_7ordered_lambda1(PyObject *__pyx_self, PyObject *__pyx_v_i) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("lambda1 (wrapper)", 0);
  __pyx_r = __pyx_lambda_funcdef_lambda1(__pyx_self, ((PyObject *)__pyx_v_i));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_5tubes_6Chains_7ordered_7lambda1_2generator2(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

static PyObject *__pyx_pf_5tubes_6Chains_7ordered_7lambda1_genexpr(PyObject *__pyx_self) {
  struct __pyx_obj_5tubes___pyx_scope_struct_4_genexpr *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("genexpr", 0);
  __pyx_cur_scope = (struct __pyx_obj_5tubes___pyx_scope_struct_4_genexpr *)__pyx_tp_new_5tubes___pyx_scope_struct_4_genexpr(__pyx_ptype_5tubes___pyx_scope_struct_4_genexpr, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_5tubes___pyx_scope_struct_4_genexpr *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(2, 77, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_outer_scope = (struct __pyx_obj_5tubes___pyx_scope_struct_3___pyx_lambda_funcdef_lambda1 *) __pyx_self;
  __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_outer_scope));
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_outer_scope);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_5tubes_6Chains_7ordered_7lambda1_2generator2, (PyObject *) __pyx_cur_scope, __pyx_n_s_genexpr, __pyx_n_s_ordered_locals_lambda_locals_gen, __pyx_n_s_tubes); if (unlikely(!gen)) __PYX_ERR(2, 77, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("tubes.Chains.ordered.lambda1.genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_5tubes_6Chains_7ordered_7lambda1_2generator2(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_5tubes___pyx_scope_struct_4_genexpr *__pyx_cur_scope = ((struct __pyx_obj_5tubes___pyx_scope_struct_4_genexpr *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *(*__pyx_t_4)(PyObject *);
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("genexpr", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L6_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(2, 77, __pyx_L1_error)
  if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_i)) { __Pyx_RaiseClosureNameError("i"); __PYX_ERR(2, 77, __pyx_L1_error) }
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_i, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 77, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
    __pyx_t_2 = __pyx_t_1; __Pyx_INCREF(__pyx_t_2); __pyx_t_3 = 0;
    __pyx_t_4 = NULL;
  } else {
    __pyx_t_3 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 77, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 77, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (;;) {
    if (likely(!__pyx_t_4)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(2, 77, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 77, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      } else {
        if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(2, 77, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 77, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      }
    } else {
      __pyx_t_1 = __pyx_t_4(__pyx_t_2);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(2, 77, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_t);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_t, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_1);
    __pyx_t_1 = 0;
    if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_outer_scope->__pyx_v_self)) { __Pyx_RaiseClosureNameError("self"); __PYX_ERR(2, 77, __pyx_L1_error) }
    if (unlikely(__pyx_cur_scope->__pyx_outer_scope->__pyx_outer_scope->__pyx_v_self->ordering == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(2, 77, __pyx_L1_error)
    }
    __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_cur_scope->__pyx_outer_scope->__pyx_outer_scope->__pyx_v_self->ordering, __pyx_cur_scope->__pyx_v_t); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 77, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    __Pyx_XGIVEREF(__pyx_t_2);
    __pyx_cur_scope->__pyx_t_0 = __pyx_t_2;
    __pyx_cur_scope->__pyx_t_1 = __pyx_t_3;
    __pyx_cur_scope->__pyx_t_2 = __pyx_t_4;
    __Pyx_XGIVEREF(__pyx_r);
    __Pyx_RefNannyFinishContext();
    __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
    /* return from generator, yielding value */
    __pyx_generator->resume_label = 1;
    return __pyx_r;
    __pyx_L6_resume_from_yield:;
    __pyx_t_2 = __pyx_cur_scope->__pyx_t_0;
    __pyx_cur_scope->__pyx_t_0 = 0;
    __Pyx_XGOTREF(__pyx_t_2);
    __pyx_t_3 = __pyx_cur_scope->__pyx_t_1;
    __pyx_t_4 = __pyx_cur_scope->__pyx_t_2;
    if (unlikely(!__pyx_sent_value)) __PYX_ERR(2, 77, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_lambda_funcdef_lambda1(PyObject *__pyx_self, PyObject *__pyx_v_i) {
  struct __pyx_obj_5tubes___pyx_scope_struct_3___pyx_lambda_funcdef_lambda1 *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("lambda1", 0);
  __pyx_cur_scope = (struct __pyx_obj_5tubes___pyx_scope_struct_3___pyx_lambda_funcdef_lambda1 *)__pyx_tp_new_5tubes___pyx_scope_struct_3___pyx_lambda_funcdef_lambda1(__pyx_ptype_5tubes___pyx_scope_struct_3___pyx_lambda_funcdef_lambda1, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_5tubes___pyx_scope_struct_3___pyx_lambda_funcdef_lambda1 *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(2, 77, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_outer_scope = (struct __pyx_obj_5tubes___pyx_scope_struct_2_ordered *) __Pyx_CyFunction_GetClosure(__pyx_self);
  __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_outer_scope));
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_outer_scope);
  __pyx_cur_scope->__pyx_v_i = __pyx_v_i;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_i);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_i);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_pf_5tubes_6Chains_7ordered_7lambda1_genexpr(((PyObject*)__pyx_cur_scope)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 77, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 77, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_max, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 77, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("tubes.Chains.ordered.lambda1", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyiter.pxi":80
 *         ordered_chains = sorted(self.chains.items(), key=chain_order, reverse=True)
 *         for key, tubes in ordered_chains:
 *             ordered_tubes = sorted(tubes, key=lambda t: self.ordering[t], reverse=True)             # <<<<<<<<<<<<<<
 *             yield key, ordered_tubes
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5tubes_6Chains_7ordered_1lambda3(PyObject *__pyx_self, PyObject *__pyx_v_t); /*proto*/
static PyMethodDef __pyx_mdef_5tubes_6Chains_7ordered_1lambda3 = {"lambda3", (PyCFunction)__pyx_pw_5tubes_6Chains_7ordered_1lambda3, METH_O, 0};
static PyObject *__pyx_pw_5tubes_6Chains_7ordered_1lambda3(PyObject *__pyx_self, PyObject *__pyx_v_t) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("lambda3 (wrapper)", 0);
  __pyx_r = __pyx_lambda_funcdef_lambda3(__pyx_self, ((PyObject *)__pyx_v_t));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_lambda_funcdef_lambda3(PyObject *__pyx_self, PyObject *__pyx_v_t) {
  struct __pyx_obj_5tubes___pyx_scope_struct_2_ordered *__pyx_cur_scope;
  struct __pyx_obj_5tubes___pyx_scope_struct_2_ordered *__pyx_outer_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("lambda3", 0);
  __pyx_outer_scope = (struct __pyx_obj_5tubes___pyx_scope_struct_2_ordered *) __Pyx_CyFunction_GetClosure(__pyx_self);
  __pyx_cur_scope = __pyx_outer_scope;
  __Pyx_XDECREF(__pyx_r);
  if (unlikely(!__pyx_cur_scope->__pyx_v_self)) { __Pyx_RaiseClosureNameError("self"); __PYX_ERR(2, 80, __pyx_L1_error) }
  if (unlikely(__pyx_cur_scope->__pyx_v_self->ordering == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(2, 80, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_cur_scope->__pyx_v_self->ordering, __pyx_v_t); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 80, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("tubes.Chains.ordered.lambda3", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyiter.pxi":76
 *             self.inputs.add(tube)
 * 
 *     def ordered(self):             # <<<<<<<<<<<<<<
 *         chain_order = lambda i: max(self.ordering[t] for t in i[1])
 *         ordered_chains = sorted(self.chains.items(), key=chain_order, reverse=True)
 */

static PyObject *__pyx_pf_5tubes_6Chains_4ordered(struct __pyx_obj_5tubes_Chains *__pyx_v_self) {
  struct __pyx_obj_5tubes___pyx_scope_struct_2_ordered *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("ordered", 0);
  __pyx_cur_scope = (struct __pyx_obj_5tubes___pyx_scope_struct_2_ordered *)__pyx_tp_new_5tubes___pyx_scope_struct_2_ordered(__pyx_ptype_5tubes___pyx_scope_struct_2_ordered, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_5tubes___pyx_scope_struct_2_ordered *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(2, 76, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_self = __pyx_v_self;
  __Pyx_INCREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __Pyx_GIVEREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_5tubes_6Chains_6generator, (PyObject *) __pyx_cur_scope, __pyx_n_s_ordered, __pyx_n_s_Chains_ordered, __pyx_n_s_tubes); if (unlikely(!gen)) __PYX_ERR(2, 76, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("tubes.Chains.ordered", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_5tubes_6Chains_6generator(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_5tubes___pyx_scope_struct_2_ordered *__pyx_cur_scope = ((struct __pyx_obj_5tubes___pyx_scope_struct_2_ordered *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  PyObject *(*__pyx_t_5)(PyObject *);
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *(*__pyx_t_8)(PyObject *);
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("ordered", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L8_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(2, 76, __pyx_L1_error)

  /* "pyiter.pxi":77
 * 
 *     def ordered(self):
 *         chain_order = lambda i: max(self.ordering[t] for t in i[1])             # <<<<<<<<<<<<<<
 *         ordered_chains = sorted(self.chains.items(), key=chain_order, reverse=True)
 *         for key, tubes in ordered_chains:
 */
  __pyx_t_1 = __Pyx_CyFunction_NewEx(&__pyx_mdef_5tubes_6Chains_7ordered_lambda1, 0, __pyx_n_s_ordered_locals_lambda, ((PyObject*)__pyx_cur_scope), __pyx_n_s_tubes, __pyx_d, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 77, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_cur_scope->__pyx_v_chain_order = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "pyiter.pxi":78
 *     def ordered(self):
 *         chain_order = lambda i: max(self.ordering[t] for t in i[1])
 *         ordered_chains = sorted(self.chains.items(), key=chain_order, reverse=True)             # <<<<<<<<<<<<<<
 *         for key, tubes in ordered_chains:
 *             ordered_tubes = sorted(tubes, key=lambda t: self.ordering[t], reverse=True)
 */
  if (unlikely(__pyx_cur_scope->__pyx_v_self->chains == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "items");
    __PYX_ERR(2, 78, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_Items(__pyx_cur_scope->__pyx_v_self->chains); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 78, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 78, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 78, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_key, __pyx_cur_scope->__pyx_v_chain_order) < 0) __PYX_ERR(2, 78, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_reverse, Py_True) < 0) __PYX_ERR(2, 78, __pyx_L1_error)
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_sorted, __pyx_t_2, __pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 78, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_GIVEREF(__pyx_t_3);
  __pyx_cur_scope->__pyx_v_ordered_chains = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "pyiter.pxi":79
 *         chain_order = lambda i: max(self.ordering[t] for t in i[1])
 *         ordered_chains = sorted(self.chains.items(), key=chain_order, reverse=True)
 *         for key, tubes in ordered_chains:             # <<<<<<<<<<<<<<
 *             ordered_tubes = sorted(tubes, key=lambda t: self.ordering[t], reverse=True)
 *             yield key, ordered_tubes
 */
  if (likely(PyList_CheckExact(__pyx_cur_scope->__pyx_v_ordered_chains)) || PyTuple_CheckExact(__pyx_cur_scope->__pyx_v_ordered_chains)) {
    __pyx_t_3 = __pyx_cur_scope->__pyx_v_ordered_chains; __Pyx_INCREF(__pyx_t_3); __pyx_t_4 = 0;
    __pyx_t_5 = NULL;
  } else {
    __pyx_t_4 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_cur_scope->__pyx_v_ordered_chains); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 79, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = Py_TYPE(__pyx_t_3)->tp_iternext; if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 79, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_5)) {
      if (likely(PyList_CheckExact(__pyx_t_3))) {
        if (__pyx_t_4 >= PyList_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_4); __Pyx_INCREF(__pyx_t_1); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(2, 79, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_3, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 79, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      } else {
        if (__pyx_t_4 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_4); __Pyx_INCREF(__pyx_t_1); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(2, 79, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_3, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 79, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      }
    } else {
      __pyx_t_1 = __pyx_t_5(__pyx_t_3);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(2, 79, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    if ((likely(PyTuple_CheckExact(__pyx_t_1))) || (PyList_CheckExact(__pyx_t_1))) {
      PyObject* sequence = __pyx_t_1;
      #if !CYTHON_COMPILING_IN_PYPY
      Py_ssize_t size = Py_SIZE(sequence);
      #else
      Py_ssize_t size = PySequence_Size(sequence);
      #endif
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(2, 79, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_2 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_6 = PyTuple_GET_ITEM(sequence, 1); 
      } else {
        __pyx_t_2 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_6 = PyList_GET_ITEM(sequence, 1); 
      }
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_6);
      #else
      __pyx_t_2 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 79, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_6 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(2, 79, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    } else {
      Py_ssize_t index = -1;
      __pyx_t_7 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_7)) __PYX_ERR(2, 79, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_8 = Py_TYPE(__pyx_t_7)->tp_iternext;
      index = 0; __pyx_t_2 = __pyx_t_8(__pyx_t_7); if (unlikely(!__pyx_t_2)) goto __pyx_L6_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_2);
      index = 1; __pyx_t_6 = __pyx_t_8(__pyx_t_7); if (unlikely(!__pyx_t_6)) goto __pyx_L6_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_6);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_8(__pyx_t_7), 2) < 0) __PYX_ERR(2, 79, __pyx_L1_error)
      __pyx_t_8 = NULL;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      goto __pyx_L7_unpacking_done;
      __pyx_L6_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_8 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(2, 79, __pyx_L1_error)
      __pyx_L7_unpacking_done:;
    }
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_key);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_key, __pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_2);
    __pyx_t_2 = 0;
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_tubes);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_tubes, __pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_6);
    __pyx_t_6 = 0;

    /* "pyiter.pxi":80
 *         ordered_chains = sorted(self.chains.items(), key=chain_order, reverse=True)
 *         for key, tubes in ordered_chains:
 *             ordered_tubes = sorted(tubes, key=lambda t: self.ordering[t], reverse=True)             # <<<<<<<<<<<<<<
 *             yield key, ordered_tubes
 * 
 */
    __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 80, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_cur_scope->__pyx_v_tubes);
    __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_tubes);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_cur_scope->__pyx_v_tubes);
    __pyx_t_6 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_6)) __PYX_ERR(2, 80, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_2 = __Pyx_CyFunction_NewEx(&__pyx_mdef_5tubes_6Chains_7ordered_1lambda3, 0, __pyx_n_s_ordered_locals_lambda, ((PyObject*)__pyx_cur_scope), __pyx_n_s_tubes, __pyx_d, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 80, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    if (PyDict_SetItem(__pyx_t_6, __pyx_n_s_key, __pyx_t_2) < 0) __PYX_ERR(2, 80, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (PyDict_SetItem(__pyx_t_6, __pyx_n_s_reverse, Py_True) < 0) __PYX_ERR(2, 80, __pyx_L1_error)
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_sorted, __pyx_t_1, __pyx_t_6); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 80, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_ordered_tubes);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_ordered_tubes, __pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_2);
    __pyx_t_2 = 0;

    /* "pyiter.pxi":81
 *         for key, tubes in ordered_chains:
 *             ordered_tubes = sorted(tubes, key=lambda t: self.ordering[t], reverse=True)
 *             yield key, ordered_tubes             # <<<<<<<<<<<<<<
 * 
 *     def verify(self):
 */
    __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 81, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_cur_scope->__pyx_v_key);
    __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_key);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_cur_scope->__pyx_v_key);
    __Pyx_INCREF(__pyx_cur_scope->__pyx_v_ordered_tubes);
    __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_ordered_tubes);
    PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_cur_scope->__pyx_v_ordered_tubes);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    __Pyx_XGIVEREF(__pyx_t_3);
    __pyx_cur_scope->__pyx_t_0 = __pyx_t_3;
    __pyx_cur_scope->__pyx_t_1 = __pyx_t_4;
    __pyx_cur_scope->__pyx_t_2 = __pyx_t_5;
    __Pyx_XGIVEREF(__pyx_r);
    __Pyx_RefNannyFinishContext();
    __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
    /* return from generator, yielding value */
    __pyx_generator->resume_label = 1;
    return __pyx_r;
    __pyx_L8_resume_from_yield:;
    __pyx_t_3 = __pyx_cur_scope->__pyx_t_0;
    __pyx_cur_scope->__pyx_t_0 = 0;
    __Pyx_XGOTREF(__pyx_t_3);
    __pyx_t_4 = __pyx_cur_scope->__pyx_t_1;
    __pyx_t_5 = __pyx_cur_scope->__pyx_t_2;
    if (unlikely(!__pyx_sent_value)) __PYX_ERR(2, 81, __pyx_L1_error)

    /* "pyiter.pxi":79
 *         chain_order = lambda i: max(self.ordering[t] for t in i[1])
 *         ordered_chains = sorted(self.chains.items(), key=chain_order, reverse=True)
 *         for key, tubes in ordered_chains:             # <<<<<<<<<<<<<<
 *             ordered_tubes = sorted(tubes, key=lambda t: self.ordering[t], reverse=True)
 *             yield key, ordered_tubes
 */
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* "pyiter.pxi":76
 *             self.inputs.add(tube)
 * 
 *     def ordered(self):             # <<<<<<<<<<<<<<
 *         chain_order = lambda i: max(self.ordering[t] for t in i[1])
 *         ordered_chains = sorted(self.chains.items(), key=chain_order, reverse=True)
 */

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("ordered", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyiter.pxi":83
 *             yield key, ordered_tubes
 * 
 *     def verify(self):             # <<<<<<<<<<<<<<
 *         seen = set()
 *         for chain in self.chains.values():
 */

/* Python wrapper */
static PyObject *__pyx_pw_5tubes_6Chains_8verify(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5tubes_6Chains_7verify[] = "Chains.verify(self)";
static PyObject *__pyx_pw_5tubes_6Chains_8verify(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("verify (wrapper)", 0);
  __pyx_r = __pyx_pf_5tubes_6Chains_7verify(((struct __pyx_obj_5tubes_Chains *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5tubes_6Chains_7verify(struct __pyx_obj_5tubes_Chains *__pyx_v_self) {
  PyObject *__pyx_v_seen = NULL;
  PyObject *__pyx_v_chain = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  __Pyx_RefNannySetupContext("verify", 0);

  /* "pyiter.pxi":84
 * 
 *     def verify(self):
 *         seen = set()             # <<<<<<<<<<<<<<
 *         for chain in self.chains.values():
 *             if seen & chain:
 */
  __pyx_t_1 = PySet_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 84, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_seen = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pyiter.pxi":85
 *     def verify(self):
 *         seen = set()
 *         for chain in self.chains.values():             # <<<<<<<<<<<<<<
 *             if seen & chain:
 *                 raise ValueError("Tube in multiple chains")
 */
  __pyx_t_2 = 0;
  if (unlikely(__pyx_v_self->chains == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "values");
    __PYX_ERR(2, 85, __pyx_L1_error)
  }
  __pyx_t_5 = __Pyx_dict_iterator(__pyx_v_self->chains, 1, __pyx_n_s_values, (&__pyx_t_3), (&__pyx_t_4)); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 85, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_1);
  __pyx_t_1 = __pyx_t_5;
  __pyx_t_5 = 0;
  while (1) {
    __pyx_t_6 = __Pyx_dict_iter_next(__pyx_t_1, __pyx_t_3, &__pyx_t_2, NULL, &__pyx_t_5, NULL, __pyx_t_4);
    if (unlikely(__pyx_t_6 == 0)) break;
    if (unlikely(__pyx_t_6 == -1)) __PYX_ERR(2, 85, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_XDECREF_SET(__pyx_v_chain, __pyx_t_5);
    __pyx_t_5 = 0;

    /* "pyiter.pxi":86
 *         seen = set()
 *         for chain in self.chains.values():
 *             if seen & chain:             # <<<<<<<<<<<<<<
 *                 raise ValueError("Tube in multiple chains")
 *             seen.update(chain)
 */
    __pyx_t_5 = PyNumber_And(__pyx_v_seen, __pyx_v_chain); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 86, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(2, 86, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (__pyx_t_7) {

      /* "pyiter.pxi":87
 *         for chain in self.chains.values():
 *             if seen & chain:
 *                 raise ValueError("Tube in multiple chains")             # <<<<<<<<<<<<<<
 *             seen.update(chain)
 * 
 */
      __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__12, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 87, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_Raise(__pyx_t_5, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __PYX_ERR(2, 87, __pyx_L1_error)

      /* "pyiter.pxi":86
 *         seen = set()
 *         for chain in self.chains.values():
 *             if seen & chain:             # <<<<<<<<<<<<<<
 *                 raise ValueError("Tube in multiple chains")
 *             seen.update(chain)
 */
    }

    /* "pyiter.pxi":88
 *             if seen & chain:
 *                 raise ValueError("Tube in multiple chains")
 *             seen.update(chain)             # <<<<<<<<<<<<<<
 * 
 *     cdef make_chains_iters(self, modifiers=None):
 */
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_seen, __pyx_n_s_update); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 88, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_9 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_8))) {
      __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_8);
      if (likely(__pyx_t_9)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
        __Pyx_INCREF(__pyx_t_9);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_8, function);
      }
    }
    if (!__pyx_t_9) {
      __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_v_chain); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 88, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_8)) {
        PyObject *__pyx_temp[2] = {__pyx_t_9, __pyx_v_chain};
        __pyx_t_5 = __Pyx_PyFunction_FastCall(__pyx_t_8, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 88, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
        __Pyx_GOTREF(__pyx_t_5);
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_8)) {
        PyObject *__pyx_temp[2] = {__pyx_t_9, __pyx_v_chain};
        __pyx_t_5 = __Pyx_PyCFunction_FastCall(__pyx_t_8, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 88, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
        __Pyx_GOTREF(__pyx_t_5);
      } else
      #endif
      {
        __pyx_t_10 = PyTuple_New(1+1); if (unlikely(!__pyx_t_10)) __PYX_ERR(2, 88, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_GIVEREF(__pyx_t_9); PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_9); __pyx_t_9 = NULL;
        __Pyx_INCREF(__pyx_v_chain);
        __Pyx_GIVEREF(__pyx_v_chain);
        PyTuple_SET_ITEM(__pyx_t_10, 0+1, __pyx_v_chain);
        __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_8, __pyx_t_10, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 88, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pyiter.pxi":83
 *             yield key, ordered_tubes
 * 
 *     def verify(self):             # <<<<<<<<<<<<<<
 *         seen = set()
 *         for chain in self.chains.values():
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("tubes.Chains.verify", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_seen);
  __Pyx_XDECREF(__pyx_v_chain);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyiter.pxi":90
 *             seen.update(chain)
 * 
 *     cdef make_chains_iters(self, modifiers=None):             # <<<<<<<<<<<<<<
 *         cdef Tube tube
 *         self.verify()
 */

static PyObject *__pyx_f_5tubes_6Chains_make_chains_iters(struct __pyx_obj_5tubes_Chains *__pyx_v_self, struct __pyx_opt_args_5tubes_6Chains_make_chains_iters *__pyx_optional_args) {
  PyObject *__pyx_v_modifiers = ((PyObject *)Py_None);
  struct __pyx_obj_5tubes_Tube *__pyx_v_tube = 0;
  PyObject *__pyx_v_made_chains = NULL;
  PyObject *__pyx_v_made_iters = NULL;
  PyObject *__pyx_v_key = NULL;
  PyObject *__pyx_v_tubes = NULL;
  PyObject *__pyx_v_this_chain = NULL;
  PyObject *__pyx_v_args = NULL;
  PyObject *__pyx_v_calls_next = NULL;
  PyObject *__pyx_v_next_key = NULL;
  PyObject *__pyx_v_tube_input = NULL;
  struct __pyx_obj_5tubes_IterWrapper *__pyx_v_the_iter = NULL;
  struct __pyx_obj_5tubes_Tube *__pyx_v_output = 0;
  CYTHON_UNUSED Py_ssize_t __pyx_v_num_slots;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  Py_ssize_t __pyx_t_6;
  PyObject *(*__pyx_t_7)(PyObject *);
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *(*__pyx_t_10)(PyObject *);
  Py_ssize_t __pyx_t_11;
  PyObject *(*__pyx_t_12)(PyObject *);
  Py_ssize_t __pyx_t_13;
  PyObject *(*__pyx_t_14)(PyObject *);
  int __pyx_t_15;
  PyObject *__pyx_t_16 = NULL;
  __Pyx_RefNannySetupContext("make_chains_iters", 0);
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_modifiers = __pyx_optional_args->modifiers;
    }
  }
  __Pyx_INCREF(__pyx_v_modifiers);

  /* "pyiter.pxi":92
 *     cdef make_chains_iters(self, modifiers=None):
 *         cdef Tube tube
 *         self.verify()             # <<<<<<<<<<<<<<
 *         if modifiers is None:
 *             modifiers = {}
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_verify); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 92, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 92, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 92, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pyiter.pxi":93
 *         cdef Tube tube
 *         self.verify()
 *         if modifiers is None:             # <<<<<<<<<<<<<<
 *             modifiers = {}
 *         made_chains = {}
 */
  __pyx_t_4 = (__pyx_v_modifiers == Py_None);
  __pyx_t_5 = (__pyx_t_4 != 0);
  if (__pyx_t_5) {

    /* "pyiter.pxi":94
 *         self.verify()
 *         if modifiers is None:
 *             modifiers = {}             # <<<<<<<<<<<<<<
 *         made_chains = {}
 *         made_iters = {}
 */
    __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 94, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF_SET(__pyx_v_modifiers, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "pyiter.pxi":93
 *         cdef Tube tube
 *         self.verify()
 *         if modifiers is None:             # <<<<<<<<<<<<<<
 *             modifiers = {}
 *         made_chains = {}
 */
  }

  /* "pyiter.pxi":95
 *         if modifiers is None:
 *             modifiers = {}
 *         made_chains = {}             # <<<<<<<<<<<<<<
 *         made_iters = {}
 * 
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 95, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_made_chains = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pyiter.pxi":96
 *             modifiers = {}
 *         made_chains = {}
 *         made_iters = {}             # <<<<<<<<<<<<<<
 * 
 *         for key, tubes in self.ordered():
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 96, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_made_iters = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pyiter.pxi":98
 *         made_iters = {}
 * 
 *         for key, tubes in self.ordered():             # <<<<<<<<<<<<<<
 *             this_chain = []
 *             for tube in tubes:
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ordered); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 98, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 98, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 98, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
    __pyx_t_2 = __pyx_t_1; __Pyx_INCREF(__pyx_t_2); __pyx_t_6 = 0;
    __pyx_t_7 = NULL;
  } else {
    __pyx_t_6 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 98, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_7 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_7)) __PYX_ERR(2, 98, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (;;) {
    if (likely(!__pyx_t_7)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_6 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_6); __Pyx_INCREF(__pyx_t_1); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(2, 98, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 98, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      } else {
        if (__pyx_t_6 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_6); __Pyx_INCREF(__pyx_t_1); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(2, 98, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 98, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      }
    } else {
      __pyx_t_1 = __pyx_t_7(__pyx_t_2);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(2, 98, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    if ((likely(PyTuple_CheckExact(__pyx_t_1))) || (PyList_CheckExact(__pyx_t_1))) {
      PyObject* sequence = __pyx_t_1;
      #if !CYTHON_COMPILING_IN_PYPY
      Py_ssize_t size = Py_SIZE(sequence);
      #else
      Py_ssize_t size = PySequence_Size(sequence);
      #endif
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(2, 98, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_3 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_8 = PyTuple_GET_ITEM(sequence, 1); 
      } else {
        __pyx_t_3 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_8 = PyList_GET_ITEM(sequence, 1); 
      }
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_8);
      #else
      __pyx_t_3 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 98, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_8 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 98, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    } else {
      Py_ssize_t index = -1;
      __pyx_t_9 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_9)) __PYX_ERR(2, 98, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_10 = Py_TYPE(__pyx_t_9)->tp_iternext;
      index = 0; __pyx_t_3 = __pyx_t_10(__pyx_t_9); if (unlikely(!__pyx_t_3)) goto __pyx_L6_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_3);
      index = 1; __pyx_t_8 = __pyx_t_10(__pyx_t_9); if (unlikely(!__pyx_t_8)) goto __pyx_L6_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_8);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_10(__pyx_t_9), 2) < 0) __PYX_ERR(2, 98, __pyx_L1_error)
      __pyx_t_10 = NULL;
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      goto __pyx_L7_unpacking_done;
      __pyx_L6_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __pyx_t_10 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(2, 98, __pyx_L1_error)
      __pyx_L7_unpacking_done:;
    }
    __Pyx_XDECREF_SET(__pyx_v_key, __pyx_t_3);
    __pyx_t_3 = 0;
    __Pyx_XDECREF_SET(__pyx_v_tubes, __pyx_t_8);
    __pyx_t_8 = 0;

    /* "pyiter.pxi":99
 * 
 *         for key, tubes in self.ordered():
 *             this_chain = []             # <<<<<<<<<<<<<<
 *             for tube in tubes:
 *                 args = []
 */
    __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 99, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_XDECREF_SET(__pyx_v_this_chain, ((PyObject*)__pyx_t_1));
    __pyx_t_1 = 0;

    /* "pyiter.pxi":100
 *         for key, tubes in self.ordered():
 *             this_chain = []
 *             for tube in tubes:             # <<<<<<<<<<<<<<
 *                 args = []
 *                 for calls_next in tube._chains:
 */
    if (likely(PyList_CheckExact(__pyx_v_tubes)) || PyTuple_CheckExact(__pyx_v_tubes)) {
      __pyx_t_1 = __pyx_v_tubes; __Pyx_INCREF(__pyx_t_1); __pyx_t_11 = 0;
      __pyx_t_12 = NULL;
    } else {
      __pyx_t_11 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_tubes); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 100, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_12 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_12)) __PYX_ERR(2, 100, __pyx_L1_error)
    }
    for (;;) {
      if (likely(!__pyx_t_12)) {
        if (likely(PyList_CheckExact(__pyx_t_1))) {
          if (__pyx_t_11 >= PyList_GET_SIZE(__pyx_t_1)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_8 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_11); __Pyx_INCREF(__pyx_t_8); __pyx_t_11++; if (unlikely(0 < 0)) __PYX_ERR(2, 100, __pyx_L1_error)
          #else
          __pyx_t_8 = PySequence_ITEM(__pyx_t_1, __pyx_t_11); __pyx_t_11++; if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 100, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_8);
          #endif
        } else {
          if (__pyx_t_11 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_8 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_11); __Pyx_INCREF(__pyx_t_8); __pyx_t_11++; if (unlikely(0 < 0)) __PYX_ERR(2, 100, __pyx_L1_error)
          #else
          __pyx_t_8 = PySequence_ITEM(__pyx_t_1, __pyx_t_11); __pyx_t_11++; if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 100, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_8);
          #endif
        }
      } else {
        __pyx_t_8 = __pyx_t_12(__pyx_t_1);
        if (unlikely(!__pyx_t_8)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(2, 100, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_8);
      }
      if (!(likely(((__pyx_t_8) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_8, __pyx_ptype_5tubes_Tube))))) __PYX_ERR(2, 100, __pyx_L1_error)
      __Pyx_XDECREF_SET(__pyx_v_tube, ((struct __pyx_obj_5tubes_Tube *)__pyx_t_8));
      __pyx_t_8 = 0;

      /* "pyiter.pxi":101
 *             this_chain = []
 *             for tube in tubes:
 *                 args = []             # <<<<<<<<<<<<<<
 *                 for calls_next in tube._chains:
 *                     next_key = (tube, calls_next)
 */
      __pyx_t_8 = PyList_New(0); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 101, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_XDECREF_SET(__pyx_v_args, ((PyObject*)__pyx_t_8));
      __pyx_t_8 = 0;

      /* "pyiter.pxi":102
 *             for tube in tubes:
 *                 args = []
 *                 for calls_next in tube._chains:             # <<<<<<<<<<<<<<
 *                     next_key = (tube, calls_next)
 *                     args.append(made_chains[next_key])
 */
      __pyx_t_8 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_tube), __pyx_n_s_chains); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 102, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      if (likely(PyList_CheckExact(__pyx_t_8)) || PyTuple_CheckExact(__pyx_t_8)) {
        __pyx_t_3 = __pyx_t_8; __Pyx_INCREF(__pyx_t_3); __pyx_t_13 = 0;
        __pyx_t_14 = NULL;
      } else {
        __pyx_t_13 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_t_8); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 102, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_14 = Py_TYPE(__pyx_t_3)->tp_iternext; if (unlikely(!__pyx_t_14)) __PYX_ERR(2, 102, __pyx_L1_error)
      }
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      for (;;) {
        if (likely(!__pyx_t_14)) {
          if (likely(PyList_CheckExact(__pyx_t_3))) {
            if (__pyx_t_13 >= PyList_GET_SIZE(__pyx_t_3)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_8 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_13); __Pyx_INCREF(__pyx_t_8); __pyx_t_13++; if (unlikely(0 < 0)) __PYX_ERR(2, 102, __pyx_L1_error)
            #else
            __pyx_t_8 = PySequence_ITEM(__pyx_t_3, __pyx_t_13); __pyx_t_13++; if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 102, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_8);
            #endif
          } else {
            if (__pyx_t_13 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_8 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_13); __Pyx_INCREF(__pyx_t_8); __pyx_t_13++; if (unlikely(0 < 0)) __PYX_ERR(2, 102, __pyx_L1_error)
            #else
            __pyx_t_8 = PySequence_ITEM(__pyx_t_3, __pyx_t_13); __pyx_t_13++; if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 102, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_8);
            #endif
          }
        } else {
          __pyx_t_8 = __pyx_t_14(__pyx_t_3);
          if (unlikely(!__pyx_t_8)) {
            PyObject* exc_type = PyErr_Occurred();
            if (exc_type) {
              if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
              else __PYX_ERR(2, 102, __pyx_L1_error)
            }
            break;
          }
          __Pyx_GOTREF(__pyx_t_8);
        }
        __Pyx_XDECREF_SET(__pyx_v_calls_next, __pyx_t_8);
        __pyx_t_8 = 0;

        /* "pyiter.pxi":103
 *                 args = []
 *                 for calls_next in tube._chains:
 *                     next_key = (tube, calls_next)             # <<<<<<<<<<<<<<
 *                     args.append(made_chains[next_key])
 *                 for tube_input in tube._inputs:
 */
        __pyx_t_8 = PyTuple_New(2); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 103, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_INCREF(((PyObject *)__pyx_v_tube));
        __Pyx_GIVEREF(((PyObject *)__pyx_v_tube));
        PyTuple_SET_ITEM(__pyx_t_8, 0, ((PyObject *)__pyx_v_tube));
        __Pyx_INCREF(__pyx_v_calls_next);
        __Pyx_GIVEREF(__pyx_v_calls_next);
        PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_v_calls_next);
        __Pyx_XDECREF_SET(__pyx_v_next_key, ((PyObject*)__pyx_t_8));
        __pyx_t_8 = 0;

        /* "pyiter.pxi":104
 *                 for calls_next in tube._chains:
 *                     next_key = (tube, calls_next)
 *                     args.append(made_chains[next_key])             # <<<<<<<<<<<<<<
 *                 for tube_input in tube._inputs:
 *                     args.append(made_iters[tube_input])
 */
        __pyx_t_8 = __Pyx_PyDict_GetItem(__pyx_v_made_chains, __pyx_v_next_key); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 104, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __pyx_t_15 = __Pyx_PyList_Append(__pyx_v_args, __pyx_t_8); if (unlikely(__pyx_t_15 == ((int)-1))) __PYX_ERR(2, 104, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

        /* "pyiter.pxi":102
 *             for tube in tubes:
 *                 args = []
 *                 for calls_next in tube._chains:             # <<<<<<<<<<<<<<
 *                     next_key = (tube, calls_next)
 *                     args.append(made_chains[next_key])
 */
      }
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

      /* "pyiter.pxi":105
 *                     next_key = (tube, calls_next)
 *                     args.append(made_chains[next_key])
 *                 for tube_input in tube._inputs:             # <<<<<<<<<<<<<<
 *                     args.append(made_iters[tube_input])
 *                 the_iter = tube._make_iter(args)
 */
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_tube), __pyx_n_s_inputs); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 105, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      if (likely(PyList_CheckExact(__pyx_t_3)) || PyTuple_CheckExact(__pyx_t_3)) {
        __pyx_t_8 = __pyx_t_3; __Pyx_INCREF(__pyx_t_8); __pyx_t_13 = 0;
        __pyx_t_14 = NULL;
      } else {
        __pyx_t_13 = -1; __pyx_t_8 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 105, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __pyx_t_14 = Py_TYPE(__pyx_t_8)->tp_iternext; if (unlikely(!__pyx_t_14)) __PYX_ERR(2, 105, __pyx_L1_error)
      }
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      for (;;) {
        if (likely(!__pyx_t_14)) {
          if (likely(PyList_CheckExact(__pyx_t_8))) {
            if (__pyx_t_13 >= PyList_GET_SIZE(__pyx_t_8)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_3 = PyList_GET_ITEM(__pyx_t_8, __pyx_t_13); __Pyx_INCREF(__pyx_t_3); __pyx_t_13++; if (unlikely(0 < 0)) __PYX_ERR(2, 105, __pyx_L1_error)
            #else
            __pyx_t_3 = PySequence_ITEM(__pyx_t_8, __pyx_t_13); __pyx_t_13++; if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 105, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_3);
            #endif
          } else {
            if (__pyx_t_13 >= PyTuple_GET_SIZE(__pyx_t_8)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_8, __pyx_t_13); __Pyx_INCREF(__pyx_t_3); __pyx_t_13++; if (unlikely(0 < 0)) __PYX_ERR(2, 105, __pyx_L1_error)
            #else
            __pyx_t_3 = PySequence_ITEM(__pyx_t_8, __pyx_t_13); __pyx_t_13++; if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 105, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_3);
            #endif
          }
        } else {
          __pyx_t_3 = __pyx_t_14(__pyx_t_8);
          if (unlikely(!__pyx_t_3)) {
            PyObject* exc_type = PyErr_Occurred();
            if (exc_type) {
              if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
              else __PYX_ERR(2, 105, __pyx_L1_error)
            }
            break;
          }
          __Pyx_GOTREF(__pyx_t_3);
        }
        __Pyx_XDECREF_SET(__pyx_v_tube_input, __pyx_t_3);
        __pyx_t_3 = 0;

        /* "pyiter.pxi":106
 *                     args.append(made_chains[next_key])
 *                 for tube_input in tube._inputs:
 *                     args.append(made_iters[tube_input])             # <<<<<<<<<<<<<<
 *                 the_iter = tube._make_iter(args)
 *                 if tube in modifiers:
 */
        __pyx_t_3 = __Pyx_PyDict_GetItem(__pyx_v_made_iters, __pyx_v_tube_input); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 106, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_15 = __Pyx_PyList_Append(__pyx_v_args, __pyx_t_3); if (unlikely(__pyx_t_15 == ((int)-1))) __PYX_ERR(2, 106, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

        /* "pyiter.pxi":105
 *                     next_key = (tube, calls_next)
 *                     args.append(made_chains[next_key])
 *                 for tube_input in tube._inputs:             # <<<<<<<<<<<<<<
 *                     args.append(made_iters[tube_input])
 *                 the_iter = tube._make_iter(args)
 */
      }
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

      /* "pyiter.pxi":107
 *                 for tube_input in tube._inputs:
 *                     args.append(made_iters[tube_input])
 *                 the_iter = tube._make_iter(args)             # <<<<<<<<<<<<<<
 *                 if tube in modifiers:
 *                     modifiers[tube](the_iter)
 */
      __pyx_t_8 = ((PyObject *)((struct __pyx_vtabstruct_5tubes_Tube *)__pyx_v_tube->__pyx_vtab)->_make_iter(__pyx_v_tube, __pyx_v_args)); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 107, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_XDECREF_SET(__pyx_v_the_iter, ((struct __pyx_obj_5tubes_IterWrapper *)__pyx_t_8));
      __pyx_t_8 = 0;

      /* "pyiter.pxi":108
 *                     args.append(made_iters[tube_input])
 *                 the_iter = tube._make_iter(args)
 *                 if tube in modifiers:             # <<<<<<<<<<<<<<
 *                     modifiers[tube](the_iter)
 *                 made_iters[tube] = the_iter
 */
      __pyx_t_5 = (__Pyx_PySequence_ContainsTF(((PyObject *)__pyx_v_tube), __pyx_v_modifiers, Py_EQ)); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(2, 108, __pyx_L1_error)
      __pyx_t_4 = (__pyx_t_5 != 0);
      if (__pyx_t_4) {

        /* "pyiter.pxi":109
 *                 the_iter = tube._make_iter(args)
 *                 if tube in modifiers:
 *                     modifiers[tube](the_iter)             # <<<<<<<<<<<<<<
 *                 made_iters[tube] = the_iter
 *                 this_chain.append(the_iter)
 */
        __pyx_t_3 = PyObject_GetItem(__pyx_v_modifiers, ((PyObject *)__pyx_v_tube)); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 109, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_9 = NULL;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
          __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_3);
          if (likely(__pyx_t_9)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
            __Pyx_INCREF(__pyx_t_9);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_3, function);
          }
        }
        if (!__pyx_t_9) {
          __pyx_t_8 = __Pyx_PyObject_CallOneArg(__pyx_t_3, ((PyObject *)__pyx_v_the_iter)); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 109, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_8);
        } else {
          #if CYTHON_FAST_PYCALL
          if (PyFunction_Check(__pyx_t_3)) {
            PyObject *__pyx_temp[2] = {__pyx_t_9, ((PyObject *)__pyx_v_the_iter)};
            __pyx_t_8 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 109, __pyx_L1_error)
            __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
            __Pyx_GOTREF(__pyx_t_8);
          } else
          #endif
          #if CYTHON_FAST_PYCCALL
          if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
            PyObject *__pyx_temp[2] = {__pyx_t_9, ((PyObject *)__pyx_v_the_iter)};
            __pyx_t_8 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 109, __pyx_L1_error)
            __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
            __Pyx_GOTREF(__pyx_t_8);
          } else
          #endif
          {
            __pyx_t_16 = PyTuple_New(1+1); if (unlikely(!__pyx_t_16)) __PYX_ERR(2, 109, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_16);
            __Pyx_GIVEREF(__pyx_t_9); PyTuple_SET_ITEM(__pyx_t_16, 0, __pyx_t_9); __pyx_t_9 = NULL;
            __Pyx_INCREF(((PyObject *)__pyx_v_the_iter));
            __Pyx_GIVEREF(((PyObject *)__pyx_v_the_iter));
            PyTuple_SET_ITEM(__pyx_t_16, 0+1, ((PyObject *)__pyx_v_the_iter));
            __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_16, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 109, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_8);
            __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
          }
        }
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

        /* "pyiter.pxi":108
 *                     args.append(made_iters[tube_input])
 *                 the_iter = tube._make_iter(args)
 *                 if tube in modifiers:             # <<<<<<<<<<<<<<
 *                     modifiers[tube](the_iter)
 *                 made_iters[tube] = the_iter
 */
      }

      /* "pyiter.pxi":110
 *                 if tube in modifiers:
 *                     modifiers[tube](the_iter)
 *                 made_iters[tube] = the_iter             # <<<<<<<<<<<<<<
 *                 this_chain.append(the_iter)
 *             made_chains[key] = this_chain
 */
      if (unlikely(PyDict_SetItem(__pyx_v_made_iters, ((PyObject *)__pyx_v_tube), ((PyObject *)__pyx_v_the_iter)) < 0)) __PYX_ERR(2, 110, __pyx_L1_error)

      /* "pyiter.pxi":111
 *                     modifiers[tube](the_iter)
 *                 made_iters[tube] = the_iter
 *                 this_chain.append(the_iter)             # <<<<<<<<<<<<<<
 *             made_chains[key] = this_chain
 * 
 */
      __pyx_t_15 = __Pyx_PyList_Append(__pyx_v_this_chain, ((PyObject *)__pyx_v_the_iter)); if (unlikely(__pyx_t_15 == ((int)-1))) __PYX_ERR(2, 111, __pyx_L1_error)

      /* "pyiter.pxi":100
 *         for key, tubes in self.ordered():
 *             this_chain = []
 *             for tube in tubes:             # <<<<<<<<<<<<<<
 *                 args = []
 *                 for calls_next in tube._chains:
 */
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "pyiter.pxi":112
 *                 made_iters[tube] = the_iter
 *                 this_chain.append(the_iter)
 *             made_chains[key] = this_chain             # <<<<<<<<<<<<<<
 * 
 *         cdef Tube output = self.output
 */
    if (unlikely(PyDict_SetItem(__pyx_v_made_chains, __pyx_v_key, __pyx_v_this_chain) < 0)) __PYX_ERR(2, 112, __pyx_L1_error)

    /* "pyiter.pxi":98
 *         made_iters = {}
 * 
 *         for key, tubes in self.ordered():             # <<<<<<<<<<<<<<
 *             this_chain = []
 *             for tube in tubes:
 */
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyiter.pxi":114
 *             made_chains[key] = this_chain
 * 
 *         cdef Tube output = self.output             # <<<<<<<<<<<<<<
 *         num_slots = len(output.dtype)
 * 
 */
  __pyx_t_2 = ((PyObject *)__pyx_v_self->output);
  __Pyx_INCREF(__pyx_t_2);
  __pyx_v_output = ((struct __pyx_obj_5tubes_Tube *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "pyiter.pxi":115
 * 
 *         cdef Tube output = self.output
 *         num_slots = len(output.dtype)             # <<<<<<<<<<<<<<
 * 
 *         return made_chains, made_iters
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_output), __pyx_n_s_dtype); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 115, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_6 = PyObject_Length(__pyx_t_2); if (unlikely(__pyx_t_6 == ((Py_ssize_t)-1))) __PYX_ERR(2, 115, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_num_slots = __pyx_t_6;

  /* "pyiter.pxi":117
 *         num_slots = len(output.dtype)
 * 
 *         return made_chains, made_iters             # <<<<<<<<<<<<<<
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 117, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_v_made_chains);
  __Pyx_GIVEREF(__pyx_v_made_chains);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_made_chains);
  __Pyx_INCREF(__pyx_v_made_iters);
  __Pyx_GIVEREF(__pyx_v_made_iters);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_v_made_iters);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "pyiter.pxi":90
 *             seen.update(chain)
 * 
 *     cdef make_chains_iters(self, modifiers=None):             # <<<<<<<<<<<<<<
 *         cdef Tube tube
 *         self.verify()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_16);
  __Pyx_AddTraceback("tubes.Chains.make_chains_iters", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_tube);
  __Pyx_XDECREF(__pyx_v_made_chains);
  __Pyx_XDECREF(__pyx_v_made_iters);
  __Pyx_XDECREF(__pyx_v_key);
  __Pyx_XDECREF(__pyx_v_tubes);
  __Pyx_XDECREF(__pyx_v_this_chain);
  __Pyx_XDECREF(__pyx_v_args);
  __Pyx_XDECREF(__pyx_v_calls_next);
  __Pyx_XDECREF(__pyx_v_next_key);
  __Pyx_XDECREF(__pyx_v_tube_input);
  __Pyx_XDECREF((PyObject *)__pyx_v_the_iter);
  __Pyx_XDECREF((PyObject *)__pyx_v_output);
  __Pyx_XDECREF(__pyx_v_modifiers);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyiter.pxi":46
 * 
 * cdef class Chains:
 *     cdef public Tube output             # <<<<<<<<<<<<<<
 *     cdef public dict chains
 *     cdef public dict ordering
 */

/* Python wrapper */
static PyObject *__pyx_pw_5tubes_6Chains_6output_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5tubes_6Chains_6output_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5tubes_6Chains_6output___get__(((struct __pyx_obj_5tubes_Chains *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5tubes_6Chains_6output___get__(struct __pyx_obj_5tubes_Chains *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->output));
  __pyx_r = ((PyObject *)__pyx_v_self->output);
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_5tubes_6Chains_6output_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_5tubes_6Chains_6output_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5tubes_6Chains_6output_2__set__(((struct __pyx_obj_5tubes_Chains *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5tubes_6Chains_6output_2__set__(struct __pyx_obj_5tubes_Chains *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__set__", 0);
  if (!(likely(((__pyx_v_value) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_value, __pyx_ptype_5tubes_Tube))))) __PYX_ERR(2, 46, __pyx_L1_error)
  __pyx_t_1 = __pyx_v_value;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->output);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->output));
  __pyx_v_self->output = ((struct __pyx_obj_5tubes_Tube *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("tubes.Chains.output.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_5tubes_6Chains_6output_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_5tubes_6Chains_6output_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5tubes_6Chains_6output_4__del__(((struct __pyx_obj_5tubes_Chains *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5tubes_6Chains_6output_4__del__(struct __pyx_obj_5tubes_Chains *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->output);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->output));
  __pyx_v_self->output = ((struct __pyx_obj_5tubes_Tube *)Py_None);

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyiter.pxi":47
 * cdef class Chains:
 *     cdef public Tube output
 *     cdef public dict chains             # <<<<<<<<<<<<<<
 *     cdef public dict ordering
 *     cdef public set inputs
 */

/* Python wrapper */
static PyObject *__pyx_pw_5tubes_6Chains_6chains_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5tubes_6Chains_6chains_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5tubes_6Chains_6chains___get__(((struct __pyx_obj_5tubes_Chains *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5tubes_6Chains_6chains___get__(struct __pyx_obj_5tubes_Chains *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->chains);
  __pyx_r = __pyx_v_self->chains;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_5tubes_6Chains_6chains_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_5tubes_6Chains_6chains_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5tubes_6Chains_6chains_2__set__(((struct __pyx_obj_5tubes_Chains *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5tubes_6Chains_6chains_2__set__(struct __pyx_obj_5tubes_Chains *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__set__", 0);
  if (!(likely(PyDict_CheckExact(__pyx_v_value))||((__pyx_v_value) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "dict", Py_TYPE(__pyx_v_value)->tp_name), 0))) __PYX_ERR(2, 47, __pyx_L1_error)
  __pyx_t_1 = __pyx_v_value;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->chains);
  __Pyx_DECREF(__pyx_v_self->chains);
  __pyx_v_self->chains = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("tubes.Chains.chains.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_5tubes_6Chains_6chains_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_5tubes_6Chains_6chains_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5tubes_6Chains_6chains_4__del__(((struct __pyx_obj_5tubes_Chains *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5tubes_6Chains_6chains_4__del__(struct __pyx_obj_5tubes_Chains *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->chains);
  __Pyx_DECREF(__pyx_v_self->chains);
  __pyx_v_self->chains = ((PyObject*)Py_None);

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyiter.pxi":48
 *     cdef public Tube output
 *     cdef public dict chains
 *     cdef public dict ordering             # <<<<<<<<<<<<<<
 *     cdef public set inputs
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5tubes_6Chains_8ordering_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5tubes_6Chains_8ordering_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5tubes_6Chains_8ordering___get__(((struct __pyx_obj_5tubes_Chains *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5tubes_6Chains_8ordering___get__(struct __pyx_obj_5tubes_Chains *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->ordering);
  __pyx_r = __pyx_v_self->ordering;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_5tubes_6Chains_8ordering_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_5tubes_6Chains_8ordering_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5tubes_6Chains_8ordering_2__set__(((struct __pyx_obj_5tubes_Chains *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5tubes_6Chains_8ordering_2__set__(struct __pyx_obj_5tubes_Chains *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__set__", 0);
  if (!(likely(PyDict_CheckExact(__pyx_v_value))||((__pyx_v_value) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "dict", Py_TYPE(__pyx_v_value)->tp_name), 0))) __PYX_ERR(2, 48, __pyx_L1_error)
  __pyx_t_1 = __pyx_v_value;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->ordering);
  __Pyx_DECREF(__pyx_v_self->ordering);
  __pyx_v_self->ordering = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("tubes.Chains.ordering.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_5tubes_6Chains_8ordering_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_5tubes_6Chains_8ordering_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5tubes_6Chains_8ordering_4__del__(((struct __pyx_obj_5tubes_Chains *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5tubes_6Chains_8ordering_4__del__(struct __pyx_obj_5tubes_Chains *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->ordering);
  __Pyx_DECREF(__pyx_v_self->ordering);
  __pyx_v_self->ordering = ((PyObject*)Py_None);

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyiter.pxi":49
 *     cdef public dict chains
 *     cdef public dict ordering
 *     cdef public set inputs             # <<<<<<<<<<<<<<
 * 
 *     def __cinit__(self, Tube output):
 */

/* Python wrapper */
static PyObject *__pyx_pw_5tubes_6Chains_6inputs_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5tubes_6Chains_6inputs_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5tubes_6Chains_6inputs___get__(((struct __pyx_obj_5tubes_Chains *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5tubes_6Chains_6inputs___get__(struct __pyx_obj_5tubes_Chains *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->inputs);
  __pyx_r = __pyx_v_self->inputs;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_5tubes_6Chains_6inputs_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_5tubes_6Chains_6inputs_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5tubes_6Chains_6inputs_2__set__(((struct __pyx_obj_5tubes_Chains *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5tubes_6Chains_6inputs_2__set__(struct __pyx_obj_5tubes_Chains *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__set__", 0);
  if (!(likely(PySet_CheckExact(__pyx_v_value))||((__pyx_v_value) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "set", Py_TYPE(__pyx_v_value)->tp_name), 0))) __PYX_ERR(2, 49, __pyx_L1_error)
  __pyx_t_1 = __pyx_v_value;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->inputs);
  __Pyx_DECREF(__pyx_v_self->inputs);
  __pyx_v_self->inputs = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("tubes.Chains.inputs.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_5tubes_6Chains_6inputs_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_5tubes_6Chains_6inputs_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5tubes_6Chains_6inputs_4__del__(((struct __pyx_obj_5tubes_Chains *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5tubes_6Chains_6inputs_4__del__(struct __pyx_obj_5tubes_Chains *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->inputs);
  __Pyx_DECREF(__pyx_v_self->inputs);
  __pyx_v_self->inputs = ((PyObject*)Py_None);

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_5tubes_6Chains_10__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5tubes_6Chains_9__reduce_cython__[] = "Chains.__reduce_cython__(self)";
static PyObject *__pyx_pw_5tubes_6Chains_10__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5tubes_6Chains_9__reduce_cython__(((struct __pyx_obj_5tubes_Chains *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5tubes_6Chains_9__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5tubes_Chains *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__13, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("tubes.Chains.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_5tubes_6Chains_12__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static char __pyx_doc_5tubes_6Chains_11__setstate_cython__[] = "Chains.__setstate_cython__(self, __pyx_state)";
static PyObject *__pyx_pw_5tubes_6Chains_12__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5tubes_6Chains_11__setstate_cython__(((struct __pyx_obj_5tubes_Chains *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5tubes_6Chains_11__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5tubes_Chains *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__14, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("tubes.Chains.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "tubes.pyx":73
 *     cdef int _name_lookup_inited
 * 
 *     cdef IterWrapper _make_iter(self, args):             # <<<<<<<<<<<<<<
 *         raise NotImplementedError("_make_iter")
 * 
 */

static struct __pyx_obj_5tubes_IterWrapper *__pyx_f_5tubes_4Tube__make_iter(CYTHON_UNUSED struct __pyx_obj_5tubes_Tube *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_args) {
  struct __pyx_obj_5tubes_IterWrapper *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("_make_iter", 0);

  /* "tubes.pyx":74
 * 
 *     cdef IterWrapper _make_iter(self, args):
 *         raise NotImplementedError("_make_iter")             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_NotImplementedError, __pyx_tuple__15, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 74, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 74, __pyx_L1_error)

  /* "tubes.pyx":73
 *     cdef int _name_lookup_inited
 * 
 *     cdef IterWrapper _make_iter(self, args):             # <<<<<<<<<<<<<<
 *         raise NotImplementedError("_make_iter")
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("tubes.Tube._make_iter", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "tubes.pyx":77
 * 
 *     @property
 *     def dtype(self):             # <<<<<<<<<<<<<<
 *         raise NotImplementedError("dtype")
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5tubes_4Tube_5dtype_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5tubes_4Tube_5dtype_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5tubes_4Tube_5dtype___get__(((struct __pyx_obj_5tubes_Tube *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5tubes_4Tube_5dtype___get__(CYTHON_UNUSED struct __pyx_obj_5tubes_Tube *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "tubes.pyx":78
 *     @property
 *     def dtype(self):
 *         raise NotImplementedError("dtype")             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_NotImplementedError, __pyx_tuple__16, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 78, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 78, __pyx_L1_error)

  /* "tubes.pyx":77
 * 
 *     @property
 *     def dtype(self):             # <<<<<<<<<<<<<<
 *         raise NotImplementedError("dtype")
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("tubes.Tube.dtype.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "tubes.pyx":81
 * 
 *     @property
 *     def _inputs(self):             # <<<<<<<<<<<<<<
 *         raise NotImplementedError("_inputs")
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5tubes_4Tube_7_inputs_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5tubes_4Tube_7_inputs_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5tubes_4Tube_7_inputs___get__(((struct __pyx_obj_5tubes_Tube *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5tubes_4Tube_7_inputs___get__(CYTHON_UNUSED struct __pyx_obj_5tubes_Tube *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "tubes.pyx":82
 *     @property
 *     def _inputs(self):
 *         raise NotImplementedError("_inputs")             # <<<<<<<<<<<<<<
 * 
 *     cpdef _describe_self(self):
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_NotImplementedError, __pyx_tuple__17, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 82, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 82, __pyx_L1_error)

  /* "tubes.pyx":81
 * 
 *     @property
 *     def _inputs(self):             # <<<<<<<<<<<<<<
 *         raise NotImplementedError("_inputs")
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("tubes.Tube._inputs.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "tubes.pyx":84
 *         raise NotImplementedError("_inputs")
 * 
 *     cpdef _describe_self(self):             # <<<<<<<<<<<<<<
 *         raise NotImplementedError("_describe_self")
 * 
 */

static PyObject *__pyx_pw_5tubes_4Tube_1_describe_self(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_f_5tubes_4Tube__describe_self(CYTHON_UNUSED struct __pyx_obj_5tubes_Tube *__pyx_v_self, int __pyx_skip_dispatch) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("_describe_self", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_describe_self); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 84, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_5tubes_4Tube_1_describe_self)) {
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(__pyx_t_1);
      __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
        }
      }
      if (__pyx_t_4) {
        __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 84, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else {
        __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 84, __pyx_L1_error)
      }
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_r = __pyx_t_2;
      __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "tubes.pyx":85
 * 
 *     cpdef _describe_self(self):
 *         raise NotImplementedError("_describe_self")             # <<<<<<<<<<<<<<
 * 
 *     def __iter__(self):
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_NotImplementedError, __pyx_tuple__18, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 85, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 85, __pyx_L1_error)

  /* "tubes.pyx":84
 *         raise NotImplementedError("_inputs")
 * 
 *     cpdef _describe_self(self):             # <<<<<<<<<<<<<<
 *         raise NotImplementedError("_describe_self")
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("tubes.Tube._describe_self", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5tubes_4Tube_1_describe_self(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5tubes_4Tube__describe_self[] = "Tube._describe_self(self)";
static PyObject *__pyx_pw_5tubes_4Tube_1_describe_self(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_describe_self (wrapper)", 0);
  __pyx_r = __pyx_pf_5tubes_4Tube__describe_self(((struct __pyx_obj_5tubes_Tube *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5tubes_4Tube__describe_self(struct __pyx_obj_5tubes_Tube *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("_describe_self", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_5tubes_4Tube__describe_self(__pyx_v_self, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 84, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("tubes.Tube._describe_self", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "tubes.pyx":87
 *         raise NotImplementedError("_describe_self")
 * 
 *     def __iter__(self):             # <<<<<<<<<<<<<<
 *         if not isinstance(self, ToPy):
 *             return iter(self.to_py())
 */

/* Python wrapper */
static PyObject *__pyx_pw_5tubes_4Tube_3__iter__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5tubes_4Tube_3__iter__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__iter__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5tubes_4Tube_2__iter__(((struct __pyx_obj_5tubes_Tube *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5tubes_4Tube_2__iter__(struct __pyx_obj_5tubes_Tube *__pyx_v_self) {
  struct __pyx_obj_5tubes_Chains *__pyx_v_chains = NULL;
  PyObject *__pyx_v_made_chains = NULL;
  PyObject *__pyx_v_made_iters = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *(*__pyx_t_7)(PyObject *);
  Py_ssize_t __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  __Pyx_RefNannySetupContext("__iter__", 0);

  /* "tubes.pyx":88
 * 
 *     def __iter__(self):
 *         if not isinstance(self, ToPy):             # <<<<<<<<<<<<<<
 *             return iter(self.to_py())
 *         chains = Chains(self)
 */
  __pyx_t_1 = __Pyx_TypeCheck(((PyObject *)__pyx_v_self), __pyx_ptype_5tubes_ToPy); 
  __pyx_t_2 = ((!(__pyx_t_1 != 0)) != 0);
  if (__pyx_t_2) {

    /* "tubes.pyx":89
 *     def __iter__(self):
 *         if not isinstance(self, ToPy):
 *             return iter(self.to_py())             # <<<<<<<<<<<<<<
 *         chains = Chains(self)
 *         made_chains, made_iters = chains.make_chains_iters()
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_to_py); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 89, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    if (__pyx_t_5) {
      __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 89, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } else {
      __pyx_t_3 = __Pyx_PyObject_CallNoArg(__pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 89, __pyx_L1_error)
    }
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 89, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;

    /* "tubes.pyx":88
 * 
 *     def __iter__(self):
 *         if not isinstance(self, ToPy):             # <<<<<<<<<<<<<<
 *             return iter(self.to_py())
 *         chains = Chains(self)
 */
  }

  /* "tubes.pyx":90
 *         if not isinstance(self, ToPy):
 *             return iter(self.to_py())
 *         chains = Chains(self)             # <<<<<<<<<<<<<<
 *         made_chains, made_iters = chains.make_chains_iters()
 *         if len(self.dtype) == 1:
 */
  __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 90, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  PyTuple_SET_ITEM(__pyx_t_4, 0, ((PyObject *)__pyx_v_self));
  __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_5tubes_Chains), __pyx_t_4, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 90, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_chains = ((struct __pyx_obj_5tubes_Chains *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "tubes.pyx":91
 *             return iter(self.to_py())
 *         chains = Chains(self)
 *         made_chains, made_iters = chains.make_chains_iters()             # <<<<<<<<<<<<<<
 *         if len(self.dtype) == 1:
 *             return TubeSingleIter(made_iters[self], list(made_iters.values()), made_chains[None, self])
 */
  __pyx_t_3 = ((struct __pyx_vtabstruct_5tubes_Chains *)__pyx_v_chains->__pyx_vtab)->make_chains_iters(__pyx_v_chains, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 91, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if ((likely(PyTuple_CheckExact(__pyx_t_3))) || (PyList_CheckExact(__pyx_t_3))) {
    PyObject* sequence = __pyx_t_3;
    #if !CYTHON_COMPILING_IN_PYPY
    Py_ssize_t size = Py_SIZE(sequence);
    #else
    Py_ssize_t size = PySequence_Size(sequence);
    #endif
    if (unlikely(size != 2)) {
      if (size > 2) __Pyx_RaiseTooManyValuesError(2);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(0, 91, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    if (likely(PyTuple_CheckExact(sequence))) {
      __pyx_t_4 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_5 = PyTuple_GET_ITEM(sequence, 1); 
    } else {
      __pyx_t_4 = PyList_GET_ITEM(sequence, 0); 
      __pyx_t_5 = PyList_GET_ITEM(sequence, 1); 
    }
    __Pyx_INCREF(__pyx_t_4);
    __Pyx_INCREF(__pyx_t_5);
    #else
    __pyx_t_4 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 91, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 91, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    #endif
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    Py_ssize_t index = -1;
    __pyx_t_6 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 91, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_7 = Py_TYPE(__pyx_t_6)->tp_iternext;
    index = 0; __pyx_t_4 = __pyx_t_7(__pyx_t_6); if (unlikely(!__pyx_t_4)) goto __pyx_L4_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_4);
    index = 1; __pyx_t_5 = __pyx_t_7(__pyx_t_6); if (unlikely(!__pyx_t_5)) goto __pyx_L4_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_5);
    if (__Pyx_IternextUnpackEndCheck(__pyx_t_7(__pyx_t_6), 2) < 0) __PYX_ERR(0, 91, __pyx_L1_error)
    __pyx_t_7 = NULL;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    goto __pyx_L5_unpacking_done;
    __pyx_L4_unpacking_failed:;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_7 = NULL;
    if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
    __PYX_ERR(0, 91, __pyx_L1_error)
    __pyx_L5_unpacking_done:;
  }
  __pyx_v_made_chains = __pyx_t_4;
  __pyx_t_4 = 0;
  __pyx_v_made_iters = __pyx_t_5;
  __pyx_t_5 = 0;

  /* "tubes.pyx":92
 *         chains = Chains(self)
 *         made_chains, made_iters = chains.make_chains_iters()
 *         if len(self.dtype) == 1:             # <<<<<<<<<<<<<<
 *             return TubeSingleIter(made_iters[self], list(made_iters.values()), made_chains[None, self])
 *         return TubeMultiIter(made_iters[self], list(made_iters.values()), made_chains[None, self], len(self.dtype))
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_dtype); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 92, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_8 = PyObject_Length(__pyx_t_3); if (unlikely(__pyx_t_8 == ((Py_ssize_t)-1))) __PYX_ERR(0, 92, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_2 = ((__pyx_t_8 == 1) != 0);
  if (__pyx_t_2) {

    /* "tubes.pyx":93
 *         made_chains, made_iters = chains.make_chains_iters()
 *         if len(self.dtype) == 1:
 *             return TubeSingleIter(made_iters[self], list(made_iters.values()), made_chains[None, self])             # <<<<<<<<<<<<<<
 *         return TubeMultiIter(made_iters[self], list(made_iters.values()), made_chains[None, self], len(self.dtype))
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = PyObject_GetItem(__pyx_v_made_iters, ((PyObject *)__pyx_v_self)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 93, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_made_iters, __pyx_n_s_values); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 93, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    if (__pyx_t_6) {
      __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_6); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 93, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    } else {
      __pyx_t_5 = __Pyx_PyObject_CallNoArg(__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 93, __pyx_L1_error)
    }
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = PySequence_List(__pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 93, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 93, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    PyTuple_SET_ITEM(__pyx_t_5, 0, Py_None);
    __Pyx_INCREF(((PyObject *)__pyx_v_self));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
    PyTuple_SET_ITEM(__pyx_t_5, 1, ((PyObject *)__pyx_v_self));
    __pyx_t_6 = PyObject_GetItem(__pyx_v_made_chains, __pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 93, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = PyTuple_New(3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 93, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_t_6);
    __pyx_t_3 = 0;
    __pyx_t_4 = 0;
    __pyx_t_6 = 0;
    __pyx_t_6 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_5tubes_TubeSingleIter), __pyx_t_5, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 93, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_r = __pyx_t_6;
    __pyx_t_6 = 0;
    goto __pyx_L0;

    /* "tubes.pyx":92
 *         chains = Chains(self)
 *         made_chains, made_iters = chains.make_chains_iters()
 *         if len(self.dtype) == 1:             # <<<<<<<<<<<<<<
 *             return TubeSingleIter(made_iters[self], list(made_iters.values()), made_chains[None, self])
 *         return TubeMultiIter(made_iters[self], list(made_iters.values()), made_chains[None, self], len(self.dtype))
 */
  }

  /* "tubes.pyx":94
 *         if len(self.dtype) == 1:
 *             return TubeSingleIter(made_iters[self], list(made_iters.values()), made_chains[None, self])
 *         return TubeMultiIter(made_iters[self], list(made_iters.values()), made_chains[None, self], len(self.dtype))             # <<<<<<<<<<<<<<
 * 
 *     cdef _repr(self, stop=None):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_6 = PyObject_GetItem(__pyx_v_made_iters, ((PyObject *)__pyx_v_self)); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 94, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_made_iters, __pyx_n_s_values); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 94, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 94, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_5 = __Pyx_PyObject_CallNoArg(__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 94, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PySequence_List(__pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 94, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 94, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  PyTuple_SET_ITEM(__pyx_t_5, 0, Py_None);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  PyTuple_SET_ITEM(__pyx_t_5, 1, ((PyObject *)__pyx_v_self));
  __pyx_t_3 = PyObject_GetItem(__pyx_v_made_chains, __pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 94, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_dtype); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 94, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_8 = PyObject_Length(__pyx_t_5); if (unlikely(__pyx_t_8 == ((Py_ssize_t)-1))) __PYX_ERR(0, 94, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = PyInt_FromSsize_t(__pyx_t_8); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 94, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_9 = PyTuple_New(4); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 94, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_GIVEREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_9, 1, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_9, 2, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_9, 3, __pyx_t_5);
  __pyx_t_6 = 0;
  __pyx_t_4 = 0;
  __pyx_t_3 = 0;
  __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_5tubes_TubeMultiIter), __pyx_t_9, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 94, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  /* "tubes.pyx":87
 *         raise NotImplementedError("_describe_self")
 * 
 *     def __iter__(self):             # <<<<<<<<<<<<<<
 *         if not isinstance(self, ToPy):
 *             return iter(self.to_py())
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("tubes.Tube.__iter__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_chains);
  __Pyx_XDECREF(__pyx_v_made_chains);
  __Pyx_XDECREF(__pyx_v_made_iters);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "tubes.pyx":96
 *         return TubeMultiIter(made_iters[self], list(made_iters.values()), made_chains[None, self], len(self.dtype))
 * 
 *     cdef _repr(self, stop=None):             # <<<<<<<<<<<<<<
 *         cdef Tube tube_input
 *         if stop is None:
 */

static PyObject *__pyx_f_5tubes_4Tube__repr(struct __pyx_obj_5tubes_Tube *__pyx_v_self, struct __pyx_opt_args_5tubes_4Tube__repr *__pyx_optional_args) {
  PyObject *__pyx_v_stop = ((PyObject *)Py_None);
  struct __pyx_obj_5tubes_Tube *__pyx_v_tube_input = 0;
  PyObject *__pyx_v_inputs = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  Py_ssize_t __pyx_t_6;
  Py_UCS4 __pyx_t_7;
  struct __pyx_opt_args_5tubes_4Tube__repr __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  __Pyx_RefNannySetupContext("_repr", 0);
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_stop = __pyx_optional_args->stop;
    }
  }
  __Pyx_INCREF(__pyx_v_stop);

  /* "tubes.pyx":98
 *     cdef _repr(self, stop=None):
 *         cdef Tube tube_input
 *         if stop is None:             # <<<<<<<<<<<<<<
 *             stop = set()
 *         inputs = self._inputs
 */
  __pyx_t_1 = (__pyx_v_stop == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "tubes.pyx":99
 *         cdef Tube tube_input
 *         if stop is None:
 *             stop = set()             # <<<<<<<<<<<<<<
 *         inputs = self._inputs
 *         if inputs and not (set(inputs) & stop):
 */
    __pyx_t_3 = PySet_New(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 99, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF_SET(__pyx_v_stop, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "tubes.pyx":98
 *     cdef _repr(self, stop=None):
 *         cdef Tube tube_input
 *         if stop is None:             # <<<<<<<<<<<<<<
 *             stop = set()
 *         inputs = self._inputs
 */
  }

  /* "tubes.pyx":100
 *         if stop is None:
 *             stop = set()
 *         inputs = self._inputs             # <<<<<<<<<<<<<<
 *         if inputs and not (set(inputs) & stop):
 *             tube_input = inputs[0]
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_inputs); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 100, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_v_inputs = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "tubes.pyx":101
 *             stop = set()
 *         inputs = self._inputs
 *         if inputs and not (set(inputs) & stop):             # <<<<<<<<<<<<<<
 *             tube_input = inputs[0]
 *             return f"{tube_input._repr(stop)}.{self._describe_self()}"
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_inputs); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 101, __pyx_L1_error)
  if (__pyx_t_1) {
  } else {
    __pyx_t_2 = __pyx_t_1;
    goto __pyx_L5_bool_binop_done;
  }
  __pyx_t_3 = PySet_New(__pyx_v_inputs); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 101, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyNumber_And(__pyx_t_3, __pyx_v_stop); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 101, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 101, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_5 = ((!__pyx_t_1) != 0);
  __pyx_t_2 = __pyx_t_5;
  __pyx_L5_bool_binop_done:;
  if (__pyx_t_2) {

    /* "tubes.pyx":102
 *         inputs = self._inputs
 *         if inputs and not (set(inputs) & stop):
 *             tube_input = inputs[0]             # <<<<<<<<<<<<<<
 *             return f"{tube_input._repr(stop)}.{self._describe_self()}"
 *         return self._describe_self()
 */
    __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_inputs, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 102, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    if (!(likely(((__pyx_t_4) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_4, __pyx_ptype_5tubes_Tube))))) __PYX_ERR(0, 102, __pyx_L1_error)
    __pyx_v_tube_input = ((struct __pyx_obj_5tubes_Tube *)__pyx_t_4);
    __pyx_t_4 = 0;

    /* "tubes.pyx":103
 *         if inputs and not (set(inputs) & stop):
 *             tube_input = inputs[0]
 *             return f"{tube_input._repr(stop)}.{self._describe_self()}"             # <<<<<<<<<<<<<<
 *         return self._describe_self()
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_4 = PyTuple_New(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 103, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = 0;
    __pyx_t_7 = 127;
    __pyx_t_8.__pyx_n = 1;
    __pyx_t_8.stop = __pyx_v_stop;
    __pyx_t_3 = ((struct __pyx_vtabstruct_5tubes_Tube *)__pyx_v_tube_input->__pyx_vtab)->_repr(__pyx_v_tube_input, &__pyx_t_8); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 103, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_9 = __Pyx_PyObject_FormatSimple(__pyx_t_3, __pyx_empty_unicode); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 103, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_7 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_9) > __pyx_t_7) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_9) : __pyx_t_7;
    __pyx_t_6 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_9);
    __Pyx_GIVEREF(__pyx_t_9);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_9);
    __pyx_t_9 = 0;
    __Pyx_INCREF(__pyx_kp_u__19);
    __pyx_t_6 += 1;
    __Pyx_GIVEREF(__pyx_kp_u__19);
    PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_kp_u__19);
    __pyx_t_9 = ((struct __pyx_vtabstruct_5tubes_Tube *)__pyx_v_self->__pyx_vtab)->_describe_self(__pyx_v_self, 0); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 103, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_3 = __Pyx_PyObject_FormatSimple(__pyx_t_9, __pyx_empty_unicode); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 103, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __pyx_t_7 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_3) > __pyx_t_7) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_3) : __pyx_t_7;
    __pyx_t_6 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_t_3);
    __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyUnicode_Join(__pyx_t_4, 3, __pyx_t_6, __pyx_t_7); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 103, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;

    /* "tubes.pyx":101
 *             stop = set()
 *         inputs = self._inputs
 *         if inputs and not (set(inputs) & stop):             # <<<<<<<<<<<<<<
 *             tube_input = inputs[0]
 *             return f"{tube_input._repr(stop)}.{self._describe_self()}"
 */
  }

  /* "tubes.pyx":104
 *             tube_input = inputs[0]
 *             return f"{tube_input._repr(stop)}.{self._describe_self()}"
 *         return self._describe_self()             # <<<<<<<<<<<<<<
 * 
 *     def __repr__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = ((struct __pyx_vtabstruct_5tubes_Tube *)__pyx_v_self->__pyx_vtab)->_describe_self(__pyx_v_self, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 104, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "tubes.pyx":96
 *         return TubeMultiIter(made_iters[self], list(made_iters.values()), made_chains[None, self], len(self.dtype))
 * 
 *     cdef _repr(self, stop=None):             # <<<<<<<<<<<<<<
 *         cdef Tube tube_input
 *         if stop is None:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("tubes.Tube._repr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_tube_input);
  __Pyx_XDECREF(__pyx_v_inputs);
  __Pyx_XDECREF(__pyx_v_stop);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "tubes.pyx":106
 *         return self._describe_self()
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return self._repr()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5tubes_4Tube_5__repr__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5tubes_4Tube_5__repr__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__repr__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5tubes_4Tube_4__repr__(((struct __pyx_obj_5tubes_Tube *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5tubes_4Tube_4__repr__(struct __pyx_obj_5tubes_Tube *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__repr__", 0);

  /* "tubes.pyx":107
 * 
 *     def __repr__(self):
 *         return self._repr()             # <<<<<<<<<<<<<<
 * 
 *     cdef _set_name_lookup(self, NameLookup lookup):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_vtabstruct_5tubes_Tube *)__pyx_v_self->__pyx_vtab)->_repr(__pyx_v_self, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 107, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "tubes.pyx":106
 *         return self._describe_self()
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return self._repr()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("tubes.Tube.__repr__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "tubes.pyx":109
 *         return self._repr()
 * 
 *     cdef _set_name_lookup(self, NameLookup lookup):             # <<<<<<<<<<<<<<
 *         assert self._name_lookup_inited == 0
 *         self._name_lookup = lookup
 */

static PyObject *__pyx_f_5tubes_4Tube__set_name_lookup(struct __pyx_obj_5tubes_Tube *__pyx_v_self, struct __pyx_obj_5tubes_NameLookup *__pyx_v_lookup) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_set_name_lookup", 0);

  /* "tubes.pyx":110
 * 
 *     cdef _set_name_lookup(self, NameLookup lookup):
 *         assert self._name_lookup_inited == 0             # <<<<<<<<<<<<<<
 *         self._name_lookup = lookup
 *         self._name_lookup_inited = 1
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    if (unlikely(!((__pyx_v_self->_name_lookup_inited == 0) != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 110, __pyx_L1_error)
    }
  }
  #endif

  /* "tubes.pyx":111
 *     cdef _set_name_lookup(self, NameLookup lookup):
 *         assert self._name_lookup_inited == 0
 *         self._name_lookup = lookup             # <<<<<<<<<<<<<<
 *         self._name_lookup_inited = 1
 * 
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_lookup));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_lookup));
  __Pyx_GOTREF(__pyx_v_self->_name_lookup);
  __Pyx_DECREF(__pyx_v_self->_name_lookup);
  __pyx_v_self->_name_lookup = ((PyObject *)__pyx_v_lookup);

  /* "tubes.pyx":112
 *         assert self._name_lookup_inited == 0
 *         self._name_lookup = lookup
 *         self._name_lookup_inited = 1             # <<<<<<<<<<<<<<
 * 
 *     cdef NameLookup name_lookup(self):
 */
  __pyx_v_self->_name_lookup_inited = 1;

  /* "tubes.pyx":109
 *         return self._repr()
 * 
 *     cdef _set_name_lookup(self, NameLookup lookup):             # <<<<<<<<<<<<<<
 *         assert self._name_lookup_inited == 0
 *         self._name_lookup = lookup
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("tubes.Tube._set_name_lookup", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "tubes.pyx":114
 *         self._name_lookup_inited = 1
 * 
 *     cdef NameLookup name_lookup(self):             # <<<<<<<<<<<<<<
 *         if not self._name_lookup_inited:
 *             self._name_lookup = NameLookup(self, [])
 */

static struct __pyx_obj_5tubes_NameLookup *__pyx_f_5tubes_4Tube_name_lookup(struct __pyx_obj_5tubes_Tube *__pyx_v_self) {
  struct __pyx_obj_5tubes_NameLookup *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("name_lookup", 0);

  /* "tubes.pyx":115
 * 
 *     cdef NameLookup name_lookup(self):
 *         if not self._name_lookup_inited:             # <<<<<<<<<<<<<<
 *             self._name_lookup = NameLookup(self, [])
 *             self._name_lookup_inited = 1
 */
  __pyx_t_1 = ((!(__pyx_v_self->_name_lookup_inited != 0)) != 0);
  if (__pyx_t_1) {

    /* "tubes.pyx":116
 *     cdef NameLookup name_lookup(self):
 *         if not self._name_lookup_inited:
 *             self._name_lookup = NameLookup(self, [])             # <<<<<<<<<<<<<<
 *             self._name_lookup_inited = 1
 *         return self._name_lookup
 */
    __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 116, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 116, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(((PyObject *)__pyx_v_self));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
    PyTuple_SET_ITEM(__pyx_t_3, 0, ((PyObject *)__pyx_v_self));
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_2);
    __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_5tubes_NameLookup), __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 116, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GIVEREF(__pyx_t_2);
    __Pyx_GOTREF(__pyx_v_self->_name_lookup);
    __Pyx_DECREF(__pyx_v_self->_name_lookup);
    __pyx_v_self->_name_lookup = __pyx_t_2;
    __pyx_t_2 = 0;

    /* "tubes.pyx":117
 *         if not self._name_lookup_inited:
 *             self._name_lookup = NameLookup(self, [])
 *             self._name_lookup_inited = 1             # <<<<<<<<<<<<<<
 *         return self._name_lookup
 * 
 */
    __pyx_v_self->_name_lookup_inited = 1;

    /* "tubes.pyx":115
 * 
 *     cdef NameLookup name_lookup(self):
 *         if not self._name_lookup_inited:             # <<<<<<<<<<<<<<
 *             self._name_lookup = NameLookup(self, [])
 *             self._name_lookup_inited = 1
 */
  }

  /* "tubes.pyx":118
 *             self._name_lookup = NameLookup(self, [])
 *             self._name_lookup_inited = 1
 *         return self._name_lookup             # <<<<<<<<<<<<<<
 * 
 *     def first(self, size_t num):
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  if (!(likely(((__pyx_v_self->_name_lookup) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_self->_name_lookup, __pyx_ptype_5tubes_NameLookup))))) __PYX_ERR(0, 118, __pyx_L1_error)
  __Pyx_INCREF(__pyx_v_self->_name_lookup);
  __pyx_r = ((struct __pyx_obj_5tubes_NameLookup *)__pyx_v_self->_name_lookup);
  goto __pyx_L0;

  /* "tubes.pyx":114
 *         self._name_lookup_inited = 1
 * 
 *     cdef NameLookup name_lookup(self):             # <<<<<<<<<<<<<<
 *         if not self._name_lookup_inited:
 *             self._name_lookup = NameLookup(self, [])
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("tubes.Tube.name_lookup", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "tubes.pyx":120
 *         return self._name_lookup
 * 
 *     def first(self, size_t num):             # <<<<<<<<<<<<<<
 *         """
 *         Compatibility: tube.first(5)
 */

/* Python wrapper */
static PyObject *__pyx_pw_5tubes_4Tube_7first(PyObject *__pyx_v_self, PyObject *__pyx_arg_num); /*proto*/
static char __pyx_doc_5tubes_4Tube_6first[] = "Tube.first(self, size_t num)\n\n        Compatibility: tube.first(5)\n        Create a tube that yields no more than the first `num` items from its parent.\n\n        >>>  list(Each([1,2,3,4,5]).first(1))\n        [1]\n        >>>  list(Each([1,2,3,4,5]).first(10))\n        [1, 2, 3, 4, 5]\n        ";
static PyObject *__pyx_pw_5tubes_4Tube_7first(PyObject *__pyx_v_self, PyObject *__pyx_arg_num) {
  size_t __pyx_v_num;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("first (wrapper)", 0);
  assert(__pyx_arg_num); {
    __pyx_v_num = __Pyx_PyInt_As_size_t(__pyx_arg_num); if (unlikely((__pyx_v_num == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 120, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("tubes.Tube.first", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5tubes_4Tube_6first(((struct __pyx_obj_5tubes_Tube *)__pyx_v_self), ((size_t)__pyx_v_num));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5tubes_4Tube_6first(struct __pyx_obj_5tubes_Tube *__pyx_v_self, size_t __pyx_v_num) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("first", 0);

  /* "tubes.pyx":130
 *         [1, 2, 3, 4, 5]
 *         """
 *         return First(self, num)             # <<<<<<<<<<<<<<
 * 
 *     def skip(self, size_t num):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_FromSize_t(__pyx_v_num); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 130, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 130, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_5tubes_First), __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 130, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "tubes.pyx":120
 *         return self._name_lookup
 * 
 *     def first(self, size_t num):             # <<<<<<<<<<<<<<
 *         """
 *         Compatibility: tube.first(5)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("tubes.Tube.first", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "tubes.pyx":132
 *         return First(self, num)
 * 
 *     def skip(self, size_t num):             # <<<<<<<<<<<<<<
 *         """
 *         Compatibility: tube.skip(5)
 */

/* Python wrapper */
static PyObject *__pyx_pw_5tubes_4Tube_9skip(PyObject *__pyx_v_self, PyObject *__pyx_arg_num); /*proto*/
static char __pyx_doc_5tubes_4Tube_8skip[] = "Tube.skip(self, size_t num)\n\n        Compatibility: tube.skip(5)\n        Create a tube that skips the first `num` items, yielding any furthe times.\n\n        >>>  list(Each([1,2,3,4,5]).skip(1))\n        [2, 3, 4, 5]\n        >>>  list(Each([1,2,3,4,5]).skip(10))\n        []\n        ";
static PyObject *__pyx_pw_5tubes_4Tube_9skip(PyObject *__pyx_v_self, PyObject *__pyx_arg_num) {
  size_t __pyx_v_num;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("skip (wrapper)", 0);
  assert(__pyx_arg_num); {
    __pyx_v_num = __Pyx_PyInt_As_size_t(__pyx_arg_num); if (unlikely((__pyx_v_num == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 132, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("tubes.Tube.skip", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5tubes_4Tube_8skip(((struct __pyx_obj_5tubes_Tube *)__pyx_v_self), ((size_t)__pyx_v_num));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5tubes_4Tube_8skip(struct __pyx_obj_5tubes_Tube *__pyx_v_self, size_t __pyx_v_num) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("skip", 0);

  /* "tubes.pyx":142
 *         []
 *         """
 *         return Skip(self, num)             # <<<<<<<<<<<<<<
 * 
 *     def to_py(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_FromSize_t(__pyx_v_num); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 142, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 142, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_5tubes_Skip), __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 142, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "tubes.pyx":132
 *         return First(self, num)
 * 
 *     def skip(self, size_t num):             # <<<<<<<<<<<<<<
 *         """
 *         Compatibility: tube.skip(5)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("tubes.Tube.skip", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "tubes.pyx":144
 *         return Skip(self, num)
 * 
 *     def to_py(self):             # <<<<<<<<<<<<<<
 *         """
 *         Compatibility: tube.to_py()
 */

/* Python wrapper */
static PyObject *__pyx_pw_5tubes_4Tube_11to_py(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5tubes_4Tube_10to_py[] = "Tube.to_py(self)\n\n        Compatibility: tube.to_py()\n        Convert a tube of any type to python objects.\n\n        This is not typically needed, as calling ``__iter__`` on a tube implicitly\n        converts values to python\n        ";
static PyObject *__pyx_pw_5tubes_4Tube_11to_py(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("to_py (wrapper)", 0);
  __pyx_r = __pyx_pf_5tubes_4Tube_10to_py(((struct __pyx_obj_5tubes_Tube *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5tubes_4Tube_10to_py(struct __pyx_obj_5tubes_Tube *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("to_py", 0);

  /* "tubes.pyx":152
 *         converts values to python
 *         """
 *         return ToPy(self)             # <<<<<<<<<<<<<<
 * 
 *     def map_files(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 152, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_v_self));
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_5tubes_ToPy), __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 152, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "tubes.pyx":144
 *         return Skip(self, num)
 * 
 *     def to_py(self):             # <<<<<<<<<<<<<<
 *         """
 *         Compatibility: tube.to_py()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("tubes.Tube.to_py", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "tubes.pyx":154
 *         return ToPy(self)
 * 
 *     def map_files(self):             # <<<<<<<<<<<<<<
 *         """
 *         Compatible Dtypes: ``bytes``, ``Utf8``
 */

/* Python wrapper */
static PyObject *__pyx_pw_5tubes_4Tube_13map_files(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5tubes_4Tube_12map_files[] = "Tube.map_files(self)\n\n        Compatible Dtypes: ``bytes``, ``Utf8``\n\n        For each filename from the input, open the file and mmap it to a\n        byte slice.\n        ";
static PyObject *__pyx_pw_5tubes_4Tube_13map_files(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("map_files (wrapper)", 0);
  __pyx_r = __pyx_pf_5tubes_4Tube_12map_files(((struct __pyx_obj_5tubes_Tube *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5tubes_4Tube_12map_files(struct __pyx_obj_5tubes_Tube *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("map_files", 0);

  /* "tubes.pyx":161
 *         byte slice.
 *         """
 *         if self.dtype[0] != ByteSlice:             # <<<<<<<<<<<<<<
 *             return FileMap(self.to(ByteSlice, codec="fs"))
 *         return FileMap(self)
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_dtype); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 161, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_t_1, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 161, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_ByteSlice); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 161, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyObject_RichCompare(__pyx_t_2, __pyx_t_1, Py_NE); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 161, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 161, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__pyx_t_4) {

    /* "tubes.pyx":162
 *         """
 *         if self.dtype[0] != ByteSlice:
 *             return FileMap(self.to(ByteSlice, codec="fs"))             # <<<<<<<<<<<<<<
 *         return FileMap(self)
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_to); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 162, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_ByteSlice); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 162, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 162, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
    __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 162, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_codec, __pyx_n_u_fs) < 0) __PYX_ERR(0, 162, __pyx_L1_error)
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_2, __pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 162, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 162, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_5);
    __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_5tubes_FileMap), __pyx_t_1, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 162, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_r = __pyx_t_5;
    __pyx_t_5 = 0;
    goto __pyx_L0;

    /* "tubes.pyx":161
 *         byte slice.
 *         """
 *         if self.dtype[0] != ByteSlice:             # <<<<<<<<<<<<<<
 *             return FileMap(self.to(ByteSlice, codec="fs"))
 *         return FileMap(self)
 */
  }

  /* "tubes.pyx":163
 *         if self.dtype[0] != ByteSlice:
 *             return FileMap(self.to(ByteSlice, codec="fs"))
 *         return FileMap(self)             # <<<<<<<<<<<<<<
 * 
 *     def read_files(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 163, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  PyTuple_SET_ITEM(__pyx_t_5, 0, ((PyObject *)__pyx_v_self));
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_5tubes_FileMap), __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 163, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "tubes.pyx":154
 *         return ToPy(self)
 * 
 *     def map_files(self):             # <<<<<<<<<<<<<<
 *         """
 *         Compatible Dtypes: ``bytes``, ``Utf8``
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("tubes.Tube.map_files", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "tubes.pyx":165
 *         return FileMap(self)
 * 
 *     def read_files(self):             # <<<<<<<<<<<<<<
 *         """
 *         Compatible Dtypes: ``bytes``, ``Utf8``
 */

/* Python wrapper */
static PyObject *__pyx_pw_5tubes_4Tube_15read_files(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5tubes_4Tube_14read_files[] = "Tube.read_files(self)\n\n        Compatible Dtypes: ``bytes``, ``Utf8``\n\n        For each filename from the input, open the file and read successive\n        chunks of data from it.  Each new file will start at  the beginning of\n        a slice, but a single file may result in multiple slices.\n\n        Care must be taken when using this with iterators that have file-level\n        context (for example gunzip()) as file boundaries are not communicated.\n\n        `chunk(1)` may be used to process files in isolation before compbining the \n        iterators.\n\n        >>> list(Each(['file1.txt']).read_files().split())\n        ['file 1, line 1', 'file 1, line 2']\n        >>> list(Each(['file1.txt', 'file2.txt']).read_files().split().skip(1).chunk(1))\n        ['file 1 line 2', 'file 1 line 3', 'file 2 line 2', ...]\n        ";
static PyObject *__pyx_pw_5tubes_4Tube_15read_files(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("read_files (wrapper)", 0);
  __pyx_r = __pyx_pf_5tubes_4Tube_14read_files(((struct __pyx_obj_5tubes_Tube *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5tubes_4Tube_14read_files(struct __pyx_obj_5tubes_Tube *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("read_files", 0);

  /* "tubes.pyx":184
 *         ['file 1 line 2', 'file 1 line 3', 'file 2 line 2', ...]
 *         """
 *         if self.dtype[0] != ByteSlice:             # <<<<<<<<<<<<<<
 *             return ReadFile(self.to(ByteSlice, codec="fs"))
 *         return ReadFile(self)
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_dtype); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 184, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_t_1, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 184, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_ByteSlice); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 184, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyObject_RichCompare(__pyx_t_2, __pyx_t_1, Py_NE); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 184, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 184, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__pyx_t_4) {

    /* "tubes.pyx":185
 *         """
 *         if self.dtype[0] != ByteSlice:
 *             return ReadFile(self.to(ByteSlice, codec="fs"))             # <<<<<<<<<<<<<<
 *         return ReadFile(self)
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_to); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 185, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_ByteSlice); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 185, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 185, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
    __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 185, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_codec, __pyx_n_u_fs) < 0) __PYX_ERR(0, 185, __pyx_L1_error)
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_2, __pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 185, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 185, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_5);
    __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_5tubes_ReadFile), __pyx_t_1, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 185, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_r = __pyx_t_5;
    __pyx_t_5 = 0;
    goto __pyx_L0;

    /* "tubes.pyx":184
 *         ['file 1 line 2', 'file 1 line 3', 'file 2 line 2', ...]
 *         """
 *         if self.dtype[0] != ByteSlice:             # <<<<<<<<<<<<<<
 *             return ReadFile(self.to(ByteSlice, codec="fs"))
 *         return ReadFile(self)
 */
  }

  /* "tubes.pyx":186
 *         if self.dtype[0] != ByteSlice:
 *             return ReadFile(self.to(ByteSlice, codec="fs"))
 *         return ReadFile(self)             # <<<<<<<<<<<<<<
 * 
 *     def gunzip(self, stream=False):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 186, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  PyTuple_SET_ITEM(__pyx_t_5, 0, ((PyObject *)__pyx_v_self));
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_5tubes_ReadFile), __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 186, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "tubes.pyx":165
 *         return FileMap(self)
 * 
 *     def read_files(self):             # <<<<<<<<<<<<<<
 *         """
 *         Compatible Dtypes: ``bytes``, ``Utf8``
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("tubes.Tube.read_files", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "tubes.pyx":188
 *         return ReadFile(self)
 * 
 *     def gunzip(self, stream=False):             # <<<<<<<<<<<<<<
 *         """
 *         Compatibility: tube.gunzip()
 */

/* Python wrapper */
static PyObject *__pyx_pw_5tubes_4Tube_17gunzip(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5tubes_4Tube_16gunzip[] = "Tube.gunzip(self, stream=False)\n\n        Compatibility: tube.gunzip()\n        zlib/gzip decompress the input bytes, returning a view of up to 16 \n        megabytes of decompressed data.\n\n        By default, this assumes that each input slice is an entire stream \n        (i.e. from map_files).  Setting `stream=True` treats all input values\n        as part of a single gzip stream.\n\n        >>> list(Each([\"file.gz\", \"file2.gz\"]).map_files().gunzip())\n        [\"file1 contents\", \"file2 contents\"]\n        >>> list(Each([\"file.gz\", \"file2.gz\"]).read_files().gunzip(stream=True).chunk(1))\n        [\"file1 contents\", \"file2 contents\"]\n        ";
static PyObject *__pyx_pw_5tubes_4Tube_17gunzip(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_stream = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("gunzip (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_stream,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)Py_False);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_stream);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "gunzip") < 0)) __PYX_ERR(0, 188, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_stream = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("gunzip", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 188, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("tubes.Tube.gunzip", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5tubes_4Tube_16gunzip(((struct __pyx_obj_5tubes_Tube *)__pyx_v_self), __pyx_v_stream);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5tubes_4Tube_16gunzip(struct __pyx_obj_5tubes_Tube *__pyx_v_self, PyObject *__pyx_v_stream) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("gunzip", 0);

  /* "tubes.pyx":203
 *         ["file1 contents", "file2 contents"]
 *         """
 *         return Gunzip(self, stream)             # <<<<<<<<<<<<<<
 * 
 *     def split(self, sep="\n"):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 203, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_v_self));
  __Pyx_INCREF(__pyx_v_stream);
  __Pyx_GIVEREF(__pyx_v_stream);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_v_stream);
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_5tubes_Gunzip), __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 203, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "tubes.pyx":188
 *         return ReadFile(self)
 * 
 *     def gunzip(self, stream=False):             # <<<<<<<<<<<<<<
 *         """
 *         Compatibility: tube.gunzip()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("tubes.Tube.gunzip", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "tubes.pyx":205
 *         return Gunzip(self, stream)
 * 
 *     def split(self, sep="\n"):             # <<<<<<<<<<<<<<
 *         """
 *         Compatibility: tube.split()
 */

/* Python wrapper */
static PyObject *__pyx_pw_5tubes_4Tube_19split(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5tubes_4Tube_18split[] = "Tube.split(self, sep=u'\\n')\n\n        Compatibility: tube.split()\n        Split the input view  on the character `sep`.  This behaves similarly\n        to the python :func:`str.split()` function.\n\n        This iterator will typically produce multiple values for each input\n        value, as each split produces a new output value.\n\n        >>> list(Each(['a.b.c', 'd.e']).split(\".\"))\n        ['a', 'b', 'c', 'd', 'e']\n        >>> list(Each(['ab\\ncd', 'ef\\ngh']).split())\n        ['ab', 'cd', 'ef', 'gh']\n        ";
static PyObject *__pyx_pw_5tubes_4Tube_19split(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_sep = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("split (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_sep,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)__pyx_kp_u__20);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_sep);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "split") < 0)) __PYX_ERR(0, 205, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_sep = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("split", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 205, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("tubes.Tube.split", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5tubes_4Tube_18split(((struct __pyx_obj_5tubes_Tube *)__pyx_v_self), __pyx_v_sep);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5tubes_4Tube_18split(struct __pyx_obj_5tubes_Tube *__pyx_v_self, PyObject *__pyx_v_sep) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("split", 0);

  /* "tubes.pyx":219
 *         ['ab', 'cd', 'ef', 'gh']
 *         """
 *         return Split(self, sep)             # <<<<<<<<<<<<<<
 * 
 *     def json(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 219, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_v_self));
  __Pyx_INCREF(__pyx_v_sep);
  __Pyx_GIVEREF(__pyx_v_sep);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_v_sep);
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_5tubes_Split), __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 219, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "tubes.pyx":205
 *         return Gunzip(self, stream)
 * 
 *     def split(self, sep="\n"):             # <<<<<<<<<<<<<<
 *         """
 *         Compatibility: tube.split()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("tubes.Tube.split", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "tubes.pyx":221
 *         return Split(self, sep)
 * 
 *     def json(self):             # <<<<<<<<<<<<<<
 *         """
 *         Compatibility: tube.json()
 */

/* Python wrapper */
static PyObject *__pyx_pw_5tubes_4Tube_21json(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5tubes_4Tube_20json[] = "Tube.json(self)\n\n        Compatibility: tube.json()\n        Interpret the input as JSON documents.\n        The JSON parser is *not* validating, and will accept invalid JSON.\n\n        >>> list(Each(['1', '{}', '[]', 'null']).to(tubes.Utf8).json())\n        [1, {}, [], None]\n        >>> list(Each(['neil']).to(tubes.Utf8).json())\n        [None]\n        ";
static PyObject *__pyx_pw_5tubes_4Tube_21json(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("json (wrapper)", 0);
  __pyx_r = __pyx_pf_5tubes_4Tube_20json(((struct __pyx_obj_5tubes_Tube *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5tubes_4Tube_20json(struct __pyx_obj_5tubes_Tube *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  __Pyx_RefNannySetupContext("json", 0);

  /* "tubes.pyx":232
 *         [None]
 *         """
 *         if self.dtype[0] in {ByteSlice, Object}:             # <<<<<<<<<<<<<<
 *             return JsonParse(self.to(str, codec="utf-8"))
 *         return JsonParse(self)
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_dtype); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 232, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_t_1, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 232, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_ByteSlice); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 232, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = PyObject_RichCompare(__pyx_t_2, __pyx_t_1, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 232, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 232, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (!__pyx_t_5) {
  } else {
    __pyx_t_3 = __pyx_t_5;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_Object); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 232, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_1 = PyObject_RichCompare(__pyx_t_2, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 232, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 232, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __pyx_t_5;
  __pyx_L4_bool_binop_done:;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_5 = (__pyx_t_3 != 0);
  if (__pyx_t_5) {

    /* "tubes.pyx":233
 *         """
 *         if self.dtype[0] in {ByteSlice, Object}:
 *             return JsonParse(self.to(str, codec="utf-8"))             # <<<<<<<<<<<<<<
 *         return JsonParse(self)
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_to); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 233, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 233, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(((PyObject *)(&PyUnicode_Type)));
    __Pyx_GIVEREF(((PyObject *)(&PyUnicode_Type)));
    PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)(&PyUnicode_Type)));
    __pyx_t_4 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 233, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_codec, __pyx_kp_u_utf_8) < 0) __PYX_ERR(0, 233, __pyx_L1_error)
    __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_1, __pyx_t_4); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 233, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 233, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_6);
    __pyx_t_6 = 0;
    __pyx_t_6 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_5tubes_JsonParse), __pyx_t_4, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 233, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_r = __pyx_t_6;
    __pyx_t_6 = 0;
    goto __pyx_L0;

    /* "tubes.pyx":232
 *         [None]
 *         """
 *         if self.dtype[0] in {ByteSlice, Object}:             # <<<<<<<<<<<<<<
 *             return JsonParse(self.to(str, codec="utf-8"))
 *         return JsonParse(self)
 */
  }

  /* "tubes.pyx":234
 *         if self.dtype[0] in {ByteSlice, Object}:
 *             return JsonParse(self.to(str, codec="utf-8"))
 *         return JsonParse(self)             # <<<<<<<<<<<<<<
 * 
 *     def to(self, *types, codec="utf-8"):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 234, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  PyTuple_SET_ITEM(__pyx_t_6, 0, ((PyObject *)__pyx_v_self));
  __pyx_t_4 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_5tubes_JsonParse), __pyx_t_6, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 234, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "tubes.pyx":221
 *         return Split(self, sep)
 * 
 *     def json(self):             # <<<<<<<<<<<<<<
 *         """
 *         Compatibility: tube.json()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("tubes.Tube.json", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "tubes.pyx":236
 *         return JsonParse(self)
 * 
 *     def to(self, *types, codec="utf-8"):             # <<<<<<<<<<<<<<
 *         """
 *         Convert the input to the specified dtype.
 */

/* Python wrapper */
static PyObject *__pyx_pw_5tubes_4Tube_23to(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5tubes_4Tube_22to[] = "Tube.to(self, *types, codec=u'utf-8')\n\n        Convert the input to the specified dtype.\n\n        Supported conversions:\n        XCompatibility: from_tube.to(*to_tube.dtype)\n        ";
static PyObject *__pyx_pw_5tubes_4Tube_23to(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_codec = 0;
  PyObject *__pyx_v_types = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("to (wrapper)", 0);
  if (PyTuple_GET_SIZE(__pyx_args) > 0) {
    __pyx_v_types = PyTuple_GetSlice(__pyx_args, 0, PyTuple_GET_SIZE(__pyx_args));
    if (unlikely(!__pyx_v_types)) {
      __Pyx_RefNannyFinishContext();
      return NULL;
    }
    __Pyx_GOTREF(__pyx_v_types);
  } else {
    __pyx_v_types = __pyx_empty_tuple; __Pyx_INCREF(__pyx_empty_tuple);
  }
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_codec,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)__pyx_kp_u_utf_8);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        default:
        case  0: break;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      if (kw_args == 1) {
        const Py_ssize_t index = 0;
        PyObject* value = PyDict_GetItem(__pyx_kwds, *__pyx_pyargnames[index]);
        if (value) { values[index] = value; kw_args--; }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, 0, "to") < 0)) __PYX_ERR(0, 236, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) < 0) {
      goto __pyx_L5_argtuple_error;
    } else {
    }
    __pyx_v_codec = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("to", 0, 0, 0, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 236, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_DECREF(__pyx_v_types); __pyx_v_types = 0;
  __Pyx_AddTraceback("tubes.Tube.to", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5tubes_4Tube_22to(((struct __pyx_obj_5tubes_Tube *)__pyx_v_self), __pyx_v_codec, __pyx_v_types);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_types);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5tubes_4Tube_22to(struct __pyx_obj_5tubes_Tube *__pyx_v_self, PyObject *__pyx_v_codec, PyObject *__pyx_v_types) {
  PyObject *__pyx_v_resolved = NULL;
  PyObject *__pyx_v_slot_type = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  __Pyx_RefNannySetupContext("to", 0);

  /* "tubes.pyx":243
 *         XCompatibility: from_tube.to(*to_tube.dtype)
 *         """
 *         resolved = []             # <<<<<<<<<<<<<<
 *         for slot_type in types:
 *             if not isinstance(slot_type, DType):
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 243, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_resolved = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "tubes.pyx":244
 *         """
 *         resolved = []
 *         for slot_type in types:             # <<<<<<<<<<<<<<
 *             if not isinstance(slot_type, DType):
 *                 slot_type = DTYPE_MAP[slot_type]
 */
  __pyx_t_1 = __pyx_v_types; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
  for (;;) {
    if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_3); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 244, __pyx_L1_error)
    #else
    __pyx_t_3 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 244, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    #endif
    __Pyx_XDECREF_SET(__pyx_v_slot_type, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "tubes.pyx":245
 *         resolved = []
 *         for slot_type in types:
 *             if not isinstance(slot_type, DType):             # <<<<<<<<<<<<<<
 *                 slot_type = DTYPE_MAP[slot_type]
 *             resolved.append(slot_type)
 */
    __pyx_t_4 = __Pyx_TypeCheck(__pyx_v_slot_type, __pyx_ptype_5tubes_DType); 
    __pyx_t_5 = ((!(__pyx_t_4 != 0)) != 0);
    if (__pyx_t_5) {

      /* "tubes.pyx":246
 *         for slot_type in types:
 *             if not isinstance(slot_type, DType):
 *                 slot_type = DTYPE_MAP[slot_type]             # <<<<<<<<<<<<<<
 *             resolved.append(slot_type)
 *         return Convert(self, resolved, codec=codec.encode('ascii'))
 */
      __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_DTYPE_MAP); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 246, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_6 = PyObject_GetItem(__pyx_t_3, __pyx_v_slot_type); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 246, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF_SET(__pyx_v_slot_type, __pyx_t_6);
      __pyx_t_6 = 0;

      /* "tubes.pyx":245
 *         resolved = []
 *         for slot_type in types:
 *             if not isinstance(slot_type, DType):             # <<<<<<<<<<<<<<
 *                 slot_type = DTYPE_MAP[slot_type]
 *             resolved.append(slot_type)
 */
    }

    /* "tubes.pyx":247
 *             if not isinstance(slot_type, DType):
 *                 slot_type = DTYPE_MAP[slot_type]
 *             resolved.append(slot_type)             # <<<<<<<<<<<<<<
 *         return Convert(self, resolved, codec=codec.encode('ascii'))
 * 
 */
    __pyx_t_7 = __Pyx_PyList_Append(__pyx_v_resolved, __pyx_v_slot_type); if (unlikely(__pyx_t_7 == ((int)-1))) __PYX_ERR(0, 247, __pyx_L1_error)

    /* "tubes.pyx":244
 *         """
 *         resolved = []
 *         for slot_type in types:             # <<<<<<<<<<<<<<
 *             if not isinstance(slot_type, DType):
 *                 slot_type = DTYPE_MAP[slot_type]
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "tubes.pyx":248
 *                 slot_type = DTYPE_MAP[slot_type]
 *             resolved.append(slot_type)
 *         return Convert(self, resolved, codec=codec.encode('ascii'))             # <<<<<<<<<<<<<<
 * 
 *     def multi(self, *makers):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 248, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_v_self));
  __Pyx_INCREF(__pyx_v_resolved);
  __Pyx_GIVEREF(__pyx_v_resolved);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_v_resolved);
  __pyx_t_6 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 248, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_codec, __pyx_n_s_encode); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 248, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_tuple__21, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 248, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_t_6, __pyx_n_s_codec, __pyx_t_8) < 0) __PYX_ERR(0, 248, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_t_8 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_5tubes_Convert), __pyx_t_1, __pyx_t_6); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 248, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_r = __pyx_t_8;
  __pyx_t_8 = 0;
  goto __pyx_L0;

  /* "tubes.pyx":236
 *         return JsonParse(self)
 * 
 *     def to(self, *types, codec="utf-8"):             # <<<<<<<<<<<<<<
 *         """
 *         Convert the input to the specified dtype.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("tubes.Tube.to", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_resolved);
  __Pyx_XDECREF(__pyx_v_slot_type);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "tubes.pyx":250
 *         return Convert(self, resolved, codec=codec.encode('ascii'))
 * 
 *     def multi(self, *makers):             # <<<<<<<<<<<<<<
 *         """
 *         Compatibility: tube.multi(lambda x: (x, ))
 */

/* Python wrapper */
static PyObject *__pyx_pw_5tubes_4Tube_25multi(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5tubes_4Tube_24multi[] = "Tube.multi(self, *makers)\n\n        Compatibility: tube.multi(lambda x: (x, ))\n\n        Perform multiple operations on a tube, and return a tube with `n` slots\n\n        ``makers`` should be a callable that takes the input tube, and returns a \n        tuple of tubes derived from the input.\n\n        >>> list(Count().multi(lambda x: (x.lt(1), x.equals(1), x.gt(1))).first(3))\n        [(True, False, False), (False, True, False), (False, False, True)]\n\n        ";
static PyObject *__pyx_pw_5tubes_4Tube_25multi(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_makers = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("multi (wrapper)", 0);
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "multi", 0))) return NULL;
  __Pyx_INCREF(__pyx_args);
  __pyx_v_makers = __pyx_args;
  __pyx_r = __pyx_pf_5tubes_4Tube_24multi(((struct __pyx_obj_5tubes_Tube *)__pyx_v_self), __pyx_v_makers);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_makers);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5tubes_4Tube_24multi(struct __pyx_obj_5tubes_Tube *__pyx_v_self, PyObject *__pyx_v_makers) {
  PyObject *__pyx_v_tubes = NULL;
  PyObject *__pyx_v_maker = NULL;
  PyObject *__pyx_v_result = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  int __pyx_t_8;
  int __pyx_t_9;
  __Pyx_RefNannySetupContext("multi", 0);

  /* "tubes.pyx":263
 * 
 *         """
 *         tubes = []             # <<<<<<<<<<<<<<
 *         for maker in makers:
 *             result = maker(self)
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 263, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_tubes = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "tubes.pyx":264
 *         """
 *         tubes = []
 *         for maker in makers:             # <<<<<<<<<<<<<<
 *             result = maker(self)
 *             if isinstance(result, Tube):
 */
  __pyx_t_1 = __pyx_v_makers; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
  for (;;) {
    if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_3); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 264, __pyx_L1_error)
    #else
    __pyx_t_3 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 264, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    #endif
    __Pyx_XDECREF_SET(__pyx_v_maker, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "tubes.pyx":265
 *         tubes = []
 *         for maker in makers:
 *             result = maker(self)             # <<<<<<<<<<<<<<
 *             if isinstance(result, Tube):
 *                 tubes.append(result)
 */
    __Pyx_INCREF(__pyx_v_maker);
    __pyx_t_4 = __pyx_v_maker; __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    if (!__pyx_t_5) {
      __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_4, ((PyObject *)__pyx_v_self)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 265, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_4)) {
        PyObject *__pyx_temp[2] = {__pyx_t_5, ((PyObject *)__pyx_v_self)};
        __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 265, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_GOTREF(__pyx_t_3);
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
        PyObject *__pyx_temp[2] = {__pyx_t_5, ((PyObject *)__pyx_v_self)};
        __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 265, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_GOTREF(__pyx_t_3);
      } else
      #endif
      {
        __pyx_t_6 = PyTuple_New(1+1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 265, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_5); __pyx_t_5 = NULL;
        __Pyx_INCREF(((PyObject *)__pyx_v_self));
        __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
        PyTuple_SET_ITEM(__pyx_t_6, 0+1, ((PyObject *)__pyx_v_self));
        __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_6, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 265, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_XDECREF_SET(__pyx_v_result, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "tubes.pyx":266
 *         for maker in makers:
 *             result = maker(self)
 *             if isinstance(result, Tube):             # <<<<<<<<<<<<<<
 *                 tubes.append(result)
 *             else:
 */
    __pyx_t_7 = __Pyx_TypeCheck(__pyx_v_result, __pyx_ptype_5tubes_Tube); 
    __pyx_t_8 = (__pyx_t_7 != 0);
    if (__pyx_t_8) {

      /* "tubes.pyx":267
 *             result = maker(self)
 *             if isinstance(result, Tube):
 *                 tubes.append(result)             # <<<<<<<<<<<<<<
 *             else:
 *                 tubes.extend(result)
 */
      __pyx_t_9 = __Pyx_PyList_Append(__pyx_v_tubes, __pyx_v_result); if (unlikely(__pyx_t_9 == ((int)-1))) __PYX_ERR(0, 267, __pyx_L1_error)

      /* "tubes.pyx":266
 *         for maker in makers:
 *             result = maker(self)
 *             if isinstance(result, Tube):             # <<<<<<<<<<<<<<
 *                 tubes.append(result)
 *             else:
 */
      goto __pyx_L5;
    }

    /* "tubes.pyx":269
 *                 tubes.append(result)
 *             else:
 *                 tubes.extend(result)             # <<<<<<<<<<<<<<
 *         return Multi(self, tubes)
 * 
 */
    /*else*/ {
      __pyx_t_9 = __Pyx_PyList_Extend(__pyx_v_tubes, __pyx_v_result); if (unlikely(__pyx_t_9 == ((int)-1))) __PYX_ERR(0, 269, __pyx_L1_error)
    }
    __pyx_L5:;

    /* "tubes.pyx":264
 *         """
 *         tubes = []
 *         for maker in makers:             # <<<<<<<<<<<<<<
 *             result = maker(self)
 *             if isinstance(result, Tube):
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "tubes.pyx":270
 *             else:
 *                 tubes.extend(result)
 *         return Multi(self, tubes)             # <<<<<<<<<<<<<<
 * 
 *     def get(self, str key, default=UNDEFINED):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 270, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_v_self));
  __Pyx_INCREF(__pyx_v_tubes);
  __Pyx_GIVEREF(__pyx_v_tubes);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_v_tubes);
  __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_5tubes_Multi), __pyx_t_1, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 270, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "tubes.pyx":250
 *         return Convert(self, resolved, codec=codec.encode('ascii'))
 * 
 *     def multi(self, *makers):             # <<<<<<<<<<<<<<
 *         """
 *         Compatibility: tube.multi(lambda x: (x, ))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("tubes.Tube.multi", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_tubes);
  __Pyx_XDECREF(__pyx_v_maker);
  __Pyx_XDECREF(__pyx_v_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "tubes.pyx":272
 *         return Multi(self, tubes)
 * 
 *     def get(self, str key, default=UNDEFINED):             # <<<<<<<<<<<<<<
 *         """
 *         Compatibility: tube.get("field")
 */

/* Python wrapper */
static PyObject *__pyx_pw_5tubes_4Tube_27get(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5tubes_4Tube_26get[] = "Tube.get(self, unicode key, default=UNDEFINED)\n\n        Compatibility: tube.get(\"field\")\n\n        Efficiently read the field ``key`` from the input object and\n        return it's value.  \n\n        If field is missing and a ``default`` is provided, return ``default``,\n        otherwise raise.  \n\n        ``default`` must be a valid value for the input type.\n        For example, if the input is a Json dtype, default must be a string/bytes\n        value that is valid JSON (e.g. ``'null'``)\n\n        >>> list(Each(['{\"a\": 1}', '{\"a\": 2}']).json().get(\"a\"))\n        [1, 2]\n        >>> list(Each(['{\"a\": 1}', '{\"b\": 2}']).json().get(\"a\"))\n        Traceback (most recent call last):\n        ...\n        KeyError: Field not found\n        >>> list(Each(['{\"a\": 1}', '{\"b\": 2}']).json().get(\"a\", \"null\"))\n        [1, None]\n        ";
static PyObject *__pyx_pw_5tubes_4Tube_27get(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_key = 0;
  PyObject *__pyx_v_default = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_key,&__pyx_n_s_default,0};
    PyObject* values[2] = {0,0};
    values[1] = __pyx_k__22;
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_key)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_default);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "get") < 0)) __PYX_ERR(0, 272, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_key = ((PyObject*)values[0]);
    __pyx_v_default = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("get", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 272, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("tubes.Tube.get", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_key), (&PyUnicode_Type), 1, "key", 1))) __PYX_ERR(0, 272, __pyx_L1_error)
  __pyx_r = __pyx_pf_5tubes_4Tube_26get(((struct __pyx_obj_5tubes_Tube *)__pyx_v_self), __pyx_v_key, __pyx_v_default);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5tubes_4Tube_26get(struct __pyx_obj_5tubes_Tube *__pyx_v_self, PyObject *__pyx_v_key, PyObject *__pyx_v_default) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("get", 0);

  /* "tubes.pyx":295
 *         [1, None]
 *         """
 *         return self.name_lookup().lookup_name(key, default)             # <<<<<<<<<<<<<<
 * 
 *     def slot(self, size_t num, default=UNDEFINED):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((PyObject *)((struct __pyx_vtabstruct_5tubes_Tube *)__pyx_v_self->__pyx_vtab)->name_lookup(__pyx_v_self)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 295, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_5tubes_10NameLookup_lookup_name(((struct __pyx_obj_5tubes_NameLookup *)__pyx_t_1), __pyx_v_key, __pyx_v_default); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 295, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "tubes.pyx":272
 *         return Multi(self, tubes)
 * 
 *     def get(self, str key, default=UNDEFINED):             # <<<<<<<<<<<<<<
 *         """
 *         Compatibility: tube.get("field")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("tubes.Tube.get", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "tubes.pyx":297
 *         return self.name_lookup().lookup_name(key, default)
 * 
 *     def slot(self, size_t num, default=UNDEFINED):             # <<<<<<<<<<<<<<
 *         """
 *         Compatibility: tube.slot(0)
 */

/* Python wrapper */
static PyObject *__pyx_pw_5tubes_4Tube_29slot(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5tubes_4Tube_28slot[] = "Tube.slot(self, size_t num, default=UNDEFINED)\n\n        Compatibility: tube.slot(0)\n\n        Return slot number ``num`` from the parent iter.  This is only useful\n        when dealing with multi-slot tubes.\n\n        If the value in the slot can be considered undefined (for example json missing value)\n        then ``default`` is returned if provided, otherwise ``KeyError`` is raised.\n        ";
static PyObject *__pyx_pw_5tubes_4Tube_29slot(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  size_t __pyx_v_num;
  PyObject *__pyx_v_default = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("slot (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_num,&__pyx_n_s_default,0};
    PyObject* values[2] = {0,0};
    values[1] = __pyx_k__23;
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_num)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_default);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "slot") < 0)) __PYX_ERR(0, 297, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_num = __Pyx_PyInt_As_size_t(values[0]); if (unlikely((__pyx_v_num == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 297, __pyx_L3_error)
    __pyx_v_default = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("slot", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 297, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("tubes.Tube.slot", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5tubes_4Tube_28slot(((struct __pyx_obj_5tubes_Tube *)__pyx_v_self), __pyx_v_num, __pyx_v_default);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5tubes_4Tube_28slot(struct __pyx_obj_5tubes_Tube *__pyx_v_self, size_t __pyx_v_num, PyObject *__pyx_v_default) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("slot", 0);

  /* "tubes.pyx":307
 *         then ``default`` is returned if provided, otherwise ``KeyError`` is raised.
 *         """
 *         return SlotGet(self, num, default)             # <<<<<<<<<<<<<<
 * 
 *     def skip_unless(self, conditional):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_FromSize_t(__pyx_v_num); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 307, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 307, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_1);
  __Pyx_INCREF(__pyx_v_default);
  __Pyx_GIVEREF(__pyx_v_default);
  PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_v_default);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_5tubes_SlotGet), __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 307, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "tubes.pyx":297
 *         return self.name_lookup().lookup_name(key, default)
 * 
 *     def slot(self, size_t num, default=UNDEFINED):             # <<<<<<<<<<<<<<
 *         """
 *         Compatibility: tube.slot(0)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("tubes.Tube.slot", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "tubes.pyx":309
 *         return SlotGet(self, num, default)
 * 
 *     def skip_unless(self, conditional):             # <<<<<<<<<<<<<<
 *         """
 *         Compatibility: tube.skip_unless(lambda x: x.to(bool))
 */

/* Python wrapper */
static PyObject *__pyx_pw_5tubes_4Tube_31skip_unless(PyObject *__pyx_v_self, PyObject *__pyx_v_conditional); /*proto*/
static char __pyx_doc_5tubes_4Tube_30skip_unless[] = "Tube.skip_unless(self, conditional)\n\n        Compatibility: tube.skip_unless(lambda x: x.to(bool))\n\n        ``conditional`` must either be a callable that takes a single tube \n        argument (the parent), and returns a ``bool`` tube, or a  ``bool`` tube.\n\n        Iterates over conditional and the parent together, yielding values only\n        where the result of conditional is True.\n\n        Stops only when either the input __or__ conditional raise ``StopIteration``.\n        This can be sligtly unexpected in, for example, this case:  \n        :code:`Count().skip_unless(lambda x: x.lt(3))`\n        in which case, the result is :code:`[0, 1, 2]`, but iteration over the \n        tube will never complete because ``skip_unless`` isn't clever enough to \n        work out that the condition tube will never return another ``True``.\n        In this case, an explicit :code:`.first(n)` will limit the run time.\n\n        >>> list(Count().skip_unless(lambda x: x.gt(4)).first(2))\n        [5, 6]\n        >>> list(Count().skip_unless(Each([False, True, False]).to(bool)))\n        [1]\n        ";
static PyObject *__pyx_pw_5tubes_4Tube_31skip_unless(PyObject *__pyx_v_self, PyObject *__pyx_v_conditional) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("skip_unless (wrapper)", 0);
  __pyx_r = __pyx_pf_5tubes_4Tube_30skip_unless(((struct __pyx_obj_5tubes_Tube *)__pyx_v_self), ((PyObject *)__pyx_v_conditional));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5tubes_4Tube_30skip_unless(struct __pyx_obj_5tubes_Tube *__pyx_v_self, PyObject *__pyx_v_conditional) {
  PyObject *__pyx_v_condition_tube = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  __Pyx_RefNannySetupContext("skip_unless", 0);

  /* "tubes.pyx":332
 *         [1]
 *         """
 *         if isinstance(conditional, Tube):             # <<<<<<<<<<<<<<
 *             condition_tube = conditional
 *         else:
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_conditional, __pyx_ptype_5tubes_Tube); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "tubes.pyx":333
 *         """
 *         if isinstance(conditional, Tube):
 *             condition_tube = conditional             # <<<<<<<<<<<<<<
 *         else:
 *             condition_tube = conditional(self)
 */
    __Pyx_INCREF(__pyx_v_conditional);
    __pyx_v_condition_tube = __pyx_v_conditional;

    /* "tubes.pyx":332
 *         [1]
 *         """
 *         if isinstance(conditional, Tube):             # <<<<<<<<<<<<<<
 *             condition_tube = conditional
 *         else:
 */
    goto __pyx_L3;
  }

  /* "tubes.pyx":335
 *             condition_tube = conditional
 *         else:
 *             condition_tube = conditional(self)             # <<<<<<<<<<<<<<
 *         return SkipUnless(self, condition_tube)
 * 
 */
  /*else*/ {
    __Pyx_INCREF(__pyx_v_conditional);
    __pyx_t_4 = __pyx_v_conditional; __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    if (!__pyx_t_5) {
      __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_4, ((PyObject *)__pyx_v_self)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 335, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_4)) {
        PyObject *__pyx_temp[2] = {__pyx_t_5, ((PyObject *)__pyx_v_self)};
        __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 335, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_GOTREF(__pyx_t_3);
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
        PyObject *__pyx_temp[2] = {__pyx_t_5, ((PyObject *)__pyx_v_self)};
        __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 335, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_GOTREF(__pyx_t_3);
      } else
      #endif
      {
        __pyx_t_6 = PyTuple_New(1+1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 335, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_5); __pyx_t_5 = NULL;
        __Pyx_INCREF(((PyObject *)__pyx_v_self));
        __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
        PyTuple_SET_ITEM(__pyx_t_6, 0+1, ((PyObject *)__pyx_v_self));
        __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_6, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 335, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_v_condition_tube = __pyx_t_3;
    __pyx_t_3 = 0;
  }
  __pyx_L3:;

  /* "tubes.pyx":336
 *         else:
 *             condition_tube = conditional(self)
 *         return SkipUnless(self, condition_tube)             # <<<<<<<<<<<<<<
 * 
 *     def enumerate(self, start=0):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 336, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  PyTuple_SET_ITEM(__pyx_t_3, 0, ((PyObject *)__pyx_v_self));
  __Pyx_INCREF(__pyx_v_condition_tube);
  __Pyx_GIVEREF(__pyx_v_condition_tube);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_v_condition_tube);
  __pyx_t_4 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_5tubes_SkipUnless), __pyx_t_3, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 336, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "tubes.pyx":309
 *         return SlotGet(self, num, default)
 * 
 *     def skip_unless(self, conditional):             # <<<<<<<<<<<<<<
 *         """
 *         Compatibility: tube.skip_unless(lambda x: x.to(bool))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("tubes.Tube.skip_unless", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_condition_tube);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "tubes.pyx":338
 *         return SkipUnless(self, condition_tube)
 * 
 *     def enumerate(self, start=0):             # <<<<<<<<<<<<<<
 *         """
 *         Compatibility: tube.enumerate()
 */

/* Python wrapper */
static PyObject *__pyx_pw_5tubes_4Tube_33enumerate(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5tubes_4Tube_32enumerate[] = "Tube.enumerate(self, start=0)\n\n        Compatibility: tube.enumerate()\n        Similar to the python builtin :func:``enumerate`` function, prefix\n        the tube's dtype with an Int64 counter, starting from ``start``\n\n        >>> list(Each(['a', 'b', 'c']).enumerate())\n        [(0, 'a'), (1, 'b'), (2, 'c')]\n        >>> list(Each(['a', 'b', 'c']).enumerate(10))\n        [(10, 'a'), (11, 'b'), (12, 'c')]\n        ";
static PyObject *__pyx_pw_5tubes_4Tube_33enumerate(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_start = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("enumerate (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_start,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)__pyx_int_0);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_start);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "enumerate") < 0)) __PYX_ERR(0, 338, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_start = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("enumerate", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 338, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("tubes.Tube.enumerate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5tubes_4Tube_32enumerate(((struct __pyx_obj_5tubes_Tube *)__pyx_v_self), __pyx_v_start);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5tubes_4Tube_32enumerate(struct __pyx_obj_5tubes_Tube *__pyx_v_self, PyObject *__pyx_v_start) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("enumerate", 0);

  /* "tubes.pyx":349
 *         [(10, 'a'), (11, 'b'), (12, 'c')]
 *         """
 *         return Zip([Count(start), self])             # <<<<<<<<<<<<<<
 * 
 *     def zip(self, other):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 349, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_v_start);
  __Pyx_GIVEREF(__pyx_v_start);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_start);
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_5tubes_Count), __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 349, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyList_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 349, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_t_2);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  PyList_SET_ITEM(__pyx_t_1, 1, ((PyObject *)__pyx_v_self));
  __pyx_t_2 = 0;
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 349, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_5tubes_Zip), __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 349, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "tubes.pyx":338
 *         return SkipUnless(self, condition_tube)
 * 
 *     def enumerate(self, start=0):             # <<<<<<<<<<<<<<
 *         """
 *         Compatibility: tube.enumerate()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("tubes.Tube.enumerate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "tubes.pyx":351
 *         return Zip([Count(start), self])
 * 
 *     def zip(self, other):             # <<<<<<<<<<<<<<
 *         """
 *         Combine two inputs into one, by joining their dtypes, and iterating both
 */

/* Python wrapper */
static PyObject *__pyx_pw_5tubes_4Tube_35zip(PyObject *__pyx_v_self, PyObject *__pyx_v_other); /*proto*/
static char __pyx_doc_5tubes_4Tube_34zip[] = "Tube.zip(self, other)\n\n        Combine two inputs into one, by joining their dtypes, and iterating both\n        together.\n\n        >>> first = Each(['a', 'b', 'c']).to(str)\n        >>> second = Each([1, 2, 3]).to(int)\n        >>> (first.dtype, second.dtype)\n        ((DType[Utf8],), (DType[Int64],))\n        >>> first.zip(second).dtype\n        (DType[Utf8], DType[Int64])\n        >>>  list(first.zip(second))\n        [('a', 1), ('b', 2), ('c', 3)]\n\n        ";
static PyObject *__pyx_pw_5tubes_4Tube_35zip(PyObject *__pyx_v_self, PyObject *__pyx_v_other) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("zip (wrapper)", 0);
  __pyx_r = __pyx_pf_5tubes_4Tube_34zip(((struct __pyx_obj_5tubes_Tube *)__pyx_v_self), ((PyObject *)__pyx_v_other));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5tubes_4Tube_34zip(struct __pyx_obj_5tubes_Tube *__pyx_v_self, PyObject *__pyx_v_other) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("zip", 0);

  /* "tubes.pyx":366
 * 
 *         """
 *         return Zip([self, other])             # <<<<<<<<<<<<<<
 * 
 *     def equals(self, value):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyList_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 366, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  PyList_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_v_self));
  __Pyx_INCREF(__pyx_v_other);
  __Pyx_GIVEREF(__pyx_v_other);
  PyList_SET_ITEM(__pyx_t_1, 1, __pyx_v_other);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 366, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_5tubes_Zip), __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 366, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "tubes.pyx":351
 *         return Zip([Count(start), self])
 * 
 *     def zip(self, other):             # <<<<<<<<<<<<<<
 *         """
 *         Combine two inputs into one, by joining their dtypes, and iterating both
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("tubes.Tube.zip", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "tubes.pyx":368
 *         return Zip([self, other])
 * 
 *     def equals(self, value):             # <<<<<<<<<<<<<<
 *         """
 *         Compatibility: list(tube.equals(value))
 */

/* Python wrapper */
static PyObject *__pyx_pw_5tubes_4Tube_37equals(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static char __pyx_doc_5tubes_4Tube_36equals[] = "Tube.equals(self, value)\n\n        Compatibility: list(tube.equals(value))\n\n        Compare the values in parent against a static value, and output a ``bool``\n        tube with the result of that comparison.\n\n        >>> list(Each(['apple', 'banana', 'cloud']).to(str).equals('banana'))\n        [False, True, False]\n        >>> list(Each([False, 0, '']).equals(False))\n        [True, True, False]\n        ";
static PyObject *__pyx_pw_5tubes_4Tube_37equals(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("equals (wrapper)", 0);
  __pyx_r = __pyx_pf_5tubes_4Tube_36equals(((struct __pyx_obj_5tubes_Tube *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5tubes_4Tube_36equals(struct __pyx_obj_5tubes_Tube *__pyx_v_self, PyObject *__pyx_v_value) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("equals", 0);

  /* "tubes.pyx":380
 *         [True, True, False]
 *         """
 *         return Compare(self, Py_EQ, value)             # <<<<<<<<<<<<<<
 * 
 *     def gt(self, value):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(Py_EQ); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 380, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 380, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_1);
  __Pyx_INCREF(__pyx_v_value);
  __Pyx_GIVEREF(__pyx_v_value);
  PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_v_value);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_5tubes_Compare), __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 380, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "tubes.pyx":368
 *         return Zip([self, other])
 * 
 *     def equals(self, value):             # <<<<<<<<<<<<<<
 *         """
 *         Compatibility: list(tube.equals(value))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("tubes.Tube.equals", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "tubes.pyx":382
 *         return Compare(self, Py_EQ, value)
 * 
 *     def gt(self, value):             # <<<<<<<<<<<<<<
 *         """
 *         Compatibility: list(tube.gt(value))
 */

/* Python wrapper */
static PyObject *__pyx_pw_5tubes_4Tube_39gt(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static char __pyx_doc_5tubes_4Tube_38gt[] = "Tube.gt(self, value)\n\n        Compatibility: list(tube.gt(value))\n\n        Return a bool tube, that is True if the input is greater than value, otherwise False\n        \n        >>> list(Count().skip_unless(lambda x: x.gt(4)).first(2))\n        [5, 6]\n        ";
static PyObject *__pyx_pw_5tubes_4Tube_39gt(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("gt (wrapper)", 0);
  __pyx_r = __pyx_pf_5tubes_4Tube_38gt(((struct __pyx_obj_5tubes_Tube *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5tubes_4Tube_38gt(struct __pyx_obj_5tubes_Tube *__pyx_v_self, PyObject *__pyx_v_value) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("gt", 0);

  /* "tubes.pyx":391
 *         [5, 6]
 *         """
 *         return Compare(self, Py_GT, value)             # <<<<<<<<<<<<<<
 * 
 *     def lt(self, value):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(Py_GT); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 391, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 391, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_1);
  __Pyx_INCREF(__pyx_v_value);
  __Pyx_GIVEREF(__pyx_v_value);
  PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_v_value);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_5tubes_Compare), __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 391, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "tubes.pyx":382
 *         return Compare(self, Py_EQ, value)
 * 
 *     def gt(self, value):             # <<<<<<<<<<<<<<
 *         """
 *         Compatibility: list(tube.gt(value))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("tubes.Tube.gt", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "tubes.pyx":393
 *         return Compare(self, Py_GT, value)
 * 
 *     def lt(self, value):             # <<<<<<<<<<<<<<
 *         """
 *         Compatibility: list(tube.lt(value))
 */

/* Python wrapper */
static PyObject *__pyx_pw_5tubes_4Tube_41lt(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static char __pyx_doc_5tubes_4Tube_40lt[] = "Tube.lt(self, value)\n\n        Compatibility: list(tube.lt(value))\n\n        Return a bool tube, that is True if the input is less than value, otherwise False\n        \n        >>> list(Count().skip_unless(lambda x: x.lt(4)).first(100))\n        [0, 1, 2, 3]\n        ";
static PyObject *__pyx_pw_5tubes_4Tube_41lt(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("lt (wrapper)", 0);
  __pyx_r = __pyx_pf_5tubes_4Tube_40lt(((struct __pyx_obj_5tubes_Tube *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5tubes_4Tube_40lt(struct __pyx_obj_5tubes_Tube *__pyx_v_self, PyObject *__pyx_v_value) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("lt", 0);

  /* "tubes.pyx":402
 *         [0, 1, 2, 3]
 *         """
 *         return Compare(self, Py_LT, value)             # <<<<<<<<<<<<<<
 * 
 *     def chunk(self, size_t num):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(Py_LT); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 402, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 402, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_1);
  __Pyx_INCREF(__pyx_v_value);
  __Pyx_GIVEREF(__pyx_v_value);
  PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_v_value);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_5tubes_Compare), __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 402, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "tubes.pyx":393
 *         return Compare(self, Py_GT, value)
 * 
 *     def lt(self, value):             # <<<<<<<<<<<<<<
 *         """
 *         Compatibility: list(tube.lt(value))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("tubes.Tube.lt", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "tubes.pyx":404
 *         return Compare(self, Py_LT, value)
 * 
 *     def chunk(self, size_t num):             # <<<<<<<<<<<<<<
 *         """
 *         Compatibility: tube.chunk(2)
 */

/* Python wrapper */
static PyObject *__pyx_pw_5tubes_4Tube_43chunk(PyObject *__pyx_v_self, PyObject *__pyx_arg_num); /*proto*/
static char __pyx_doc_5tubes_4Tube_42chunk[] = "Tube.chunk(self, size_t num)\n\n        Compatibility: tube.chunk(2)\n\n        Recursively look at the inputs to find an Each() tube.  If a single\n        Each() tube with a list/tuple contents is found, split the value into\n        ``num`` sized chunks, and chain them together.\n\n        This is a bit of a hack to support some tricky use-cases (for example\n        reading very large g-zipped files requires treating every file as a \n        different gzip stream, so calling .chunk(1) allows this to work)\n\n        It's also an experiment to see how multi-threading may work in the future\n\n        >>> list(Each([\"file.gz\", \"file2.gz\"]).read_files().gunzip(stream=True))\n        Traceback (most recent call last):\n        ...\n        ValueError: Trailing data in gzip stream\n        >>> list(Each([\"file.gz\", \"file2.gz\"]).read_files().gunzip(stream=True).chunk(1))\n        [\"file1 contents\", \"file2 contents\"]\n        ";
static PyObject *__pyx_pw_5tubes_4Tube_43chunk(PyObject *__pyx_v_self, PyObject *__pyx_arg_num) {
  size_t __pyx_v_num;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("chunk (wrapper)", 0);
  assert(__pyx_arg_num); {
    __pyx_v_num = __Pyx_PyInt_As_size_t(__pyx_arg_num); if (unlikely((__pyx_v_num == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 404, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("tubes.Tube.chunk", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5tubes_4Tube_42chunk(((struct __pyx_obj_5tubes_Tube *)__pyx_v_self), ((size_t)__pyx_v_num));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5tubes_4Tube_42chunk(struct __pyx_obj_5tubes_Tube *__pyx_v_self, size_t __pyx_v_num) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("chunk", 0);

  /* "tubes.pyx":425
 *         ["file1 contents", "file2 contents"]
 *         """
 *         return Chunk(self, num)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_FromSize_t(__pyx_v_num); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 425, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 425, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_5tubes_Chunk), __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 425, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "tubes.pyx":404
 *         return Compare(self, Py_LT, value)
 * 
 *     def chunk(self, size_t num):             # <<<<<<<<<<<<<<
 *         """
 *         Compatibility: tube.chunk(2)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("tubes.Tube.chunk", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef bint use_setstate
 *     state = (self._name_lookup, self._name_lookup_inited)
 */

/* Python wrapper */
static PyObject *__pyx_pw_5tubes_4Tube_45__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5tubes_4Tube_44__reduce_cython__[] = "Tube.__reduce_cython__(self)";
static PyObject *__pyx_pw_5tubes_4Tube_45__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5tubes_4Tube_44__reduce_cython__(((struct __pyx_obj_5tubes_Tube *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5tubes_4Tube_44__reduce_cython__(struct __pyx_obj_5tubes_Tube *__pyx_v_self) {
  int __pyx_v_use_setstate;
  PyObject *__pyx_v_state = NULL;
  PyObject *__pyx_v__dict = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     cdef bint use_setstate
 *     state = (self._name_lookup, self._name_lookup_inited)             # <<<<<<<<<<<<<<
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 */
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->_name_lookup_inited); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_v_self->_name_lookup);
  __Pyx_GIVEREF(__pyx_v_self->_name_lookup);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_self->_name_lookup);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_v_state = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "(tree fragment)":4
 *     cdef bint use_setstate
 *     state = (self._name_lookup, self._name_lookup_inited)
 *     _dict = getattr(self, '__dict__', None)             # <<<<<<<<<<<<<<
 *     if _dict is not None:
 *         state += (_dict,)
 */
  __pyx_t_2 = __Pyx_GetAttr3(((PyObject *)__pyx_v_self), __pyx_n_s_dict, Py_None); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v__dict = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "(tree fragment)":5
 *     state = (self._name_lookup, self._name_lookup_inited)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
  __pyx_t_3 = (__pyx_v__dict != Py_None);
  __pyx_t_4 = (__pyx_t_3 != 0);
  if (__pyx_t_4) {

    /* "(tree fragment)":6
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 *         state += (_dict,)             # <<<<<<<<<<<<<<
 *         use_setstate = True
 *     else:
 */
    __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_v__dict);
    __Pyx_GIVEREF(__pyx_v__dict);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v__dict);
    __pyx_t_1 = PyNumber_InPlaceAdd(__pyx_v_state, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF_SET(__pyx_v_state, ((PyObject*)__pyx_t_1));
    __pyx_t_1 = 0;

    /* "(tree fragment)":7
 *     if _dict is not None:
 *         state += (_dict,)
 *         use_setstate = True             # <<<<<<<<<<<<<<
 *     else:
 *         use_setstate = self._name_lookup is not None
 */
    __pyx_v_use_setstate = 1;

    /* "(tree fragment)":5
 *     state = (self._name_lookup, self._name_lookup_inited)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
    goto __pyx_L3;
  }

  /* "(tree fragment)":9
 *         use_setstate = True
 *     else:
 *         use_setstate = self._name_lookup is not None             # <<<<<<<<<<<<<<
 *     if use_setstate:
 *         return __pyx_unpickle_Tube, (type(self), 0xdf446ce, None), state
 */
  /*else*/ {
    __pyx_t_4 = (__pyx_v_self->_name_lookup != Py_None);
    __pyx_v_use_setstate = __pyx_t_4;
  }
  __pyx_L3:;

  /* "(tree fragment)":10
 *     else:
 *         use_setstate = self._name_lookup is not None
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_Tube, (type(self), 0xdf446ce, None), state
 *     else:
 */
  __pyx_t_4 = (__pyx_v_use_setstate != 0);
  if (__pyx_t_4) {

    /* "(tree fragment)":11
 *         use_setstate = self._name_lookup is not None
 *     if use_setstate:
 *         return __pyx_unpickle_Tube, (type(self), 0xdf446ce, None), state             # <<<<<<<<<<<<<<
 *     else:
 *         return __pyx_unpickle_Tube, (type(self), 0xdf446ce, state)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_pyx_unpickle_Tube); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 11, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PyTuple_New(3); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 11, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_234112718);
    __Pyx_GIVEREF(__pyx_int_234112718);
    PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_int_234112718);
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    PyTuple_SET_ITEM(__pyx_t_2, 2, Py_None);
    __pyx_t_5 = PyTuple_New(3); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 11, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_2);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_v_state);
    __pyx_t_1 = 0;
    __pyx_t_2 = 0;
    __pyx_r = __pyx_t_5;
    __pyx_t_5 = 0;
    goto __pyx_L0;

    /* "(tree fragment)":10
 *     else:
 *         use_setstate = self._name_lookup is not None
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_Tube, (type(self), 0xdf446ce, None), state
 *     else:
 */
  }

  /* "(tree fragment)":13
 *         return __pyx_unpickle_Tube, (type(self), 0xdf446ce, None), state
 *     else:
 *         return __pyx_unpickle_Tube, (type(self), 0xdf446ce, state)             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_Tube__set_state(self, __pyx_state)
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_pyx_unpickle_Tube); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_2 = PyTuple_New(3); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_234112718);
    __Pyx_GIVEREF(__pyx_int_234112718);
    PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_int_234112718);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_v_state);
    __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_2);
    __pyx_t_5 = 0;
    __pyx_t_2 = 0;
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;
  }

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef bint use_setstate
 *     state = (self._name_lookup, self._name_lookup_inited)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("tubes.Tube.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_state);
  __Pyx_XDECREF(__pyx_v__dict);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":14
 *     else:
 *         return __pyx_unpickle_Tube, (type(self), 0xdf446ce, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_Tube__set_state(self, __pyx_state)
 */

/* Python wrapper */
static PyObject *__pyx_pw_5tubes_4Tube_47__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static char __pyx_doc_5tubes_4Tube_46__setstate_cython__[] = "Tube.__setstate_cython__(self, __pyx_state)";
static PyObject *__pyx_pw_5tubes_4Tube_47__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5tubes_4Tube_46__setstate_cython__(((struct __pyx_obj_5tubes_Tube *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5tubes_4Tube_46__setstate_cython__(struct __pyx_obj_5tubes_Tube *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":15
 *         return __pyx_unpickle_Tube, (type(self), 0xdf446ce, state)
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_Tube__set_state(self, __pyx_state)             # <<<<<<<<<<<<<<
 */
  if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(1, 15, __pyx_L1_error)
  __pyx_t_1 = __pyx_f_5tubes___pyx_unpickle_Tube__set_state(__pyx_v_self, ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 15, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "(tree fragment)":14
 *     else:
 *         return __pyx_unpickle_Tube, (type(self), 0xdf446ce, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_Tube__set_state(self, __pyx_state)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("tubes.Tube.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "iter_defs.pxi":173
 *     cdef public object _iter
 * 
 *     def __cinit__(self, object _iter):             # <<<<<<<<<<<<<<
 *         self._iter = _iter
 * 
 */

/* Python wrapper */
static int __pyx_pw_5tubes_4Each_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_5tubes_4Each_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v__iter = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_iter,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_iter)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(3, 173, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v__iter = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(3, 173, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("tubes.Each.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5tubes_4Each___cinit__(((struct __pyx_obj_5tubes_Each *)__pyx_v_self), __pyx_v__iter);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5tubes_4Each___cinit__(struct __pyx_obj_5tubes_Each *__pyx_v_self, PyObject *__pyx_v__iter) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "iter_defs.pxi":174
 * 
 *     def __cinit__(self, object _iter):
 *         self._iter = _iter             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_INCREF(__pyx_v__iter);
  __Pyx_GIVEREF(__pyx_v__iter);
  __Pyx_GOTREF(__pyx_v_self->_iter);
  __Pyx_DECREF(__pyx_v_self->_iter);
  __pyx_v_self->_iter = __pyx_v__iter;

  /* "iter_defs.pxi":173
 *     cdef public object _iter
 * 
 *     def __cinit__(self, object _iter):             # <<<<<<<<<<<<<<
 *         self._iter = _iter
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "iter_defs.pxi":178
 * 
 * 
 *     cdef IterWrapper _make_iter(self, args):             # <<<<<<<<<<<<<<
 * 
 *         expected_args = len(self._inputs) + len(self._chains)
 */

static struct __pyx_obj_5tubes_IterWrapper *__pyx_f_5tubes_4Each__make_iter(struct __pyx_obj_5tubes_Each *__pyx_v_self, PyObject *__pyx_v_args) {
  Py_ssize_t __pyx_v_expected_args;
  CYTHON_UNUSED PyObject *__pyx_v_chains = NULL;
  CYTHON_UNUSED PyObject *__pyx_v_iters = NULL;
  ss::iter::EachIter *__pyx_v_iter;
  struct __pyx_obj_5tubes_IterWrapper *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  int __pyx_t_4;
  Py_UCS4 __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  ss::iter::EachIter *__pyx_t_7;
  __Pyx_RefNannySetupContext("_make_iter", 0);

  /* "iter_defs.pxi":180
 *     cdef IterWrapper _make_iter(self, args):
 * 
 *         expected_args = len(self._inputs) + len(self._chains)             # <<<<<<<<<<<<<<
 *         if len(args) != expected_args:
 *             raise ValueError(f"Expected {expected_args} inputs to _make_iter, got {len(args)}")
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_inputs); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 180, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Length(__pyx_t_1); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1))) __PYX_ERR(3, 180, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_chains); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 180, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyObject_Length(__pyx_t_1); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1))) __PYX_ERR(3, 180, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_expected_args = (__pyx_t_2 + __pyx_t_3);

  /* "iter_defs.pxi":181
 * 
 *         expected_args = len(self._inputs) + len(self._chains)
 *         if len(args) != expected_args:             # <<<<<<<<<<<<<<
 *             raise ValueError(f"Expected {expected_args} inputs to _make_iter, got {len(args)}")
 * 
 */
  __pyx_t_3 = PyObject_Length(__pyx_v_args); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1))) __PYX_ERR(3, 181, __pyx_L1_error)
  __pyx_t_4 = ((__pyx_t_3 != __pyx_v_expected_args) != 0);
  if (__pyx_t_4) {

    /* "iter_defs.pxi":182
 *         expected_args = len(self._inputs) + len(self._chains)
 *         if len(args) != expected_args:
 *             raise ValueError(f"Expected {expected_args} inputs to _make_iter, got {len(args)}")             # <<<<<<<<<<<<<<
 * 
 *         chains = args[:len(self._chains)]
 */
    __pyx_t_1 = PyTuple_New(4); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 182, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = 0;
    __pyx_t_5 = 127;
    __Pyx_INCREF(__pyx_kp_u_Expected);
    __pyx_t_3 += 9;
    __Pyx_GIVEREF(__pyx_kp_u_Expected);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_kp_u_Expected);
    __pyx_t_6 = __Pyx_PyUnicode_From_Py_ssize_t(__pyx_v_expected_args, 0, ' ', 'd'); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 182, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_3 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_6);
    __pyx_t_6 = 0;
    __Pyx_INCREF(__pyx_kp_u_inputs_to__make_iter_got);
    __pyx_t_3 += 27;
    __Pyx_GIVEREF(__pyx_kp_u_inputs_to__make_iter_got);
    PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_kp_u_inputs_to__make_iter_got);
    __pyx_t_2 = PyObject_Length(__pyx_v_args); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1))) __PYX_ERR(3, 182, __pyx_L1_error)
    __pyx_t_6 = __Pyx_PyUnicode_From_Py_ssize_t(__pyx_t_2, 0, ' ', 'd'); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 182, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_3 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_1, 3, __pyx_t_6);
    __pyx_t_6 = 0;
    __pyx_t_6 = __Pyx_PyUnicode_Join(__pyx_t_1, 4, __pyx_t_3, __pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 182, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 182, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_6);
    __pyx_t_6 = 0;
    __pyx_t_6 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_t_1, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 182, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_Raise(__pyx_t_6, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __PYX_ERR(3, 182, __pyx_L1_error)

    /* "iter_defs.pxi":181
 * 
 *         expected_args = len(self._inputs) + len(self._chains)
 *         if len(args) != expected_args:             # <<<<<<<<<<<<<<
 *             raise ValueError(f"Expected {expected_args} inputs to _make_iter, got {len(args)}")
 * 
 */
  }

  /* "iter_defs.pxi":184
 *             raise ValueError(f"Expected {expected_args} inputs to _make_iter, got {len(args)}")
 * 
 *         chains = args[:len(self._chains)]             # <<<<<<<<<<<<<<
 *         iters = args[len(self._chains):]
 *         cdef EachIter *iter = new EachIter(self._ob_to_iter().obj)
 */
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_chains); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 184, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_3 = PyObject_Length(__pyx_t_6); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1))) __PYX_ERR(3, 184, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = __Pyx_PyObject_GetSlice(__pyx_v_args, 0, __pyx_t_3, NULL, NULL, NULL, 0, 1, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 184, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_v_chains = __pyx_t_6;
  __pyx_t_6 = 0;

  /* "iter_defs.pxi":185
 * 
 *         chains = args[:len(self._chains)]
 *         iters = args[len(self._chains):]             # <<<<<<<<<<<<<<
 *         cdef EachIter *iter = new EachIter(self._ob_to_iter().obj)
 * 
 */
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_chains); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 185, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_3 = PyObject_Length(__pyx_t_6); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1))) __PYX_ERR(3, 185, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = __Pyx_PyObject_GetSlice(__pyx_v_args, __pyx_t_3, 0, NULL, NULL, NULL, 1, 0, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 185, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_v_iters = __pyx_t_6;
  __pyx_t_6 = 0;

  /* "iter_defs.pxi":186
 *         chains = args[:len(self._chains)]
 *         iters = args[len(self._chains):]
 *         cdef EachIter *iter = new EachIter(self._ob_to_iter().obj)             # <<<<<<<<<<<<<<
 * 
 *         return wrap(to_any(iter))
 */
  try {
    __pyx_t_7 = new ss::iter::EachIter(__pyx_f_5tubes_4Each__ob_to_iter(__pyx_v_self).obj);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(3, 186, __pyx_L1_error)
  }
  __pyx_v_iter = __pyx_t_7;

  /* "iter_defs.pxi":188
 *         cdef EachIter *iter = new EachIter(self._ob_to_iter().obj)
 * 
 *         return wrap(to_any(iter))             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __pyx_t_6 = __pyx_f_5tubes_wrap(ss::iter::to_any<ss::iter::EachIter>(__pyx_v_iter)); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 188, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  if (!(likely(((__pyx_t_6) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_6, __pyx_ptype_5tubes_IterWrapper))))) __PYX_ERR(3, 188, __pyx_L1_error)
  __pyx_r = ((struct __pyx_obj_5tubes_IterWrapper *)__pyx_t_6);
  __pyx_t_6 = 0;
  goto __pyx_L0;

  /* "iter_defs.pxi":178
 * 
 * 
 *     cdef IterWrapper _make_iter(self, args):             # <<<<<<<<<<<<<<
 * 
 *         expected_args = len(self._inputs) + len(self._chains)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("tubes.Each._make_iter", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_chains);
  __Pyx_XDECREF(__pyx_v_iters);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "iter_defs.pxi":191
 * 
 *     @property
 *     def dtype(self):             # <<<<<<<<<<<<<<
 *         return (Object,)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5tubes_4Each_5dtype_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5tubes_4Each_5dtype_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5tubes_4Each_5dtype___get__(((struct __pyx_obj_5tubes_Each *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5tubes_4Each_5dtype___get__(CYTHON_UNUSED struct __pyx_obj_5tubes_Each *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "iter_defs.pxi":192
 *     @property
 *     def dtype(self):
 *         return (Object,)             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_Object); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 192, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 192, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "iter_defs.pxi":191
 * 
 *     @property
 *     def dtype(self):             # <<<<<<<<<<<<<<
 *         return (Object,)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("tubes.Each.dtype.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "iter_defs.pxi":195
 * 
 *     @property
 *     def _chains(self):             # <<<<<<<<<<<<<<
 *         return ()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5tubes_4Each_7_chains_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5tubes_4Each_7_chains_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5tubes_4Each_7_chains___get__(((struct __pyx_obj_5tubes_Each *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5tubes_4Each_7_chains___get__(CYTHON_UNUSED struct __pyx_obj_5tubes_Each *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "iter_defs.pxi":196
 *     @property
 *     def _chains(self):
 *         return ()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_empty_tuple);
  __pyx_r = __pyx_empty_tuple;
  goto __pyx_L0;

  /* "iter_defs.pxi":195
 * 
 *     @property
 *     def _chains(self):             # <<<<<<<<<<<<<<
 *         return ()
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "iter_defs.pxi":200
 * 
 *     @property
 *     def _inputs(self):             # <<<<<<<<<<<<<<
 *         return ()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5tubes_4Each_7_inputs_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5tubes_4Each_7_inputs_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5tubes_4Each_7_inputs___get__(((struct __pyx_obj_5tubes_Each *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5tubes_4Each_7_inputs___get__(CYTHON_UNUSED struct __pyx_obj_5tubes_Each *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "iter_defs.pxi":201
 *     @property
 *     def _inputs(self):
 *         return ()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_empty_tuple);
  __pyx_r = __pyx_empty_tuple;
  goto __pyx_L0;

  /* "iter_defs.pxi":200
 * 
 *     @property
 *     def _inputs(self):             # <<<<<<<<<<<<<<
 *         return ()
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "iter_defs.pxi":206
 * 
 * 
 *     cdef PyObj _ob_to_iter(self):             # <<<<<<<<<<<<<<
 *         if hasattr(self._iter, "__next__"):
 *             return PyObj(<PyObject *>self._iter)
 */

static ss::PyObj __pyx_f_5tubes_4Each__ob_to_iter(struct __pyx_obj_5tubes_Each *__pyx_v_self) {
  PyObject *__pyx_v_real_it = 0;
  ss::PyObj __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("_ob_to_iter", 0);

  /* "iter_defs.pxi":207
 * 
 *     cdef PyObj _ob_to_iter(self):
 *         if hasattr(self._iter, "__next__"):             # <<<<<<<<<<<<<<
 *             return PyObj(<PyObject *>self._iter)
 *         cdef object real_it = iter(self._iter)
 */
  __pyx_t_1 = __pyx_v_self->_iter;
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_HasAttr(__pyx_t_1, __pyx_n_u_next); if (unlikely(__pyx_t_2 == ((int)-1))) __PYX_ERR(3, 207, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "iter_defs.pxi":208
 *     cdef PyObj _ob_to_iter(self):
 *         if hasattr(self._iter, "__next__"):
 *             return PyObj(<PyObject *>self._iter)             # <<<<<<<<<<<<<<
 *         cdef object real_it = iter(self._iter)
 *         return PyObj(<PyObject *>real_it)
 */
    __pyx_r = ss::PyObj(((PyObject *)__pyx_v_self->_iter));
    goto __pyx_L0;

    /* "iter_defs.pxi":207
 * 
 *     cdef PyObj _ob_to_iter(self):
 *         if hasattr(self._iter, "__next__"):             # <<<<<<<<<<<<<<
 *             return PyObj(<PyObject *>self._iter)
 *         cdef object real_it = iter(self._iter)
 */
  }

  /* "iter_defs.pxi":209
 *         if hasattr(self._iter, "__next__"):
 *             return PyObj(<PyObject *>self._iter)
 *         cdef object real_it = iter(self._iter)             # <<<<<<<<<<<<<<
 *         return PyObj(<PyObject *>real_it)
 * 
 */
  __pyx_t_1 = __pyx_v_self->_iter;
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_4 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 209, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_real_it = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "iter_defs.pxi":210
 *             return PyObj(<PyObject *>self._iter)
 *         cdef object real_it = iter(self._iter)
 *         return PyObj(<PyObject *>real_it)             # <<<<<<<<<<<<<<
 * 
 *     cpdef _describe_self(self):
 */
  __pyx_r = ss::PyObj(((PyObject *)__pyx_v_real_it));
  goto __pyx_L0;

  /* "iter_defs.pxi":206
 * 
 * 
 *     cdef PyObj _ob_to_iter(self):             # <<<<<<<<<<<<<<
 *         if hasattr(self._iter, "__next__"):
 *             return PyObj(<PyObject *>self._iter)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_WriteUnraisable("tubes.Each._ob_to_iter", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_real_it);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "iter_defs.pxi":212
 *         return PyObj(<PyObject *>real_it)
 * 
 *     cpdef _describe_self(self):             # <<<<<<<<<<<<<<
 *         iter_desc = repr(self._iter)
 *         if len(iter_desc) > 20:
 */

static PyObject *__pyx_pw_5tubes_4Each_3_describe_self(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_f_5tubes_4Each__describe_self(struct __pyx_obj_5tubes_Each *__pyx_v_self, CYTHON_UNUSED int __pyx_skip_dispatch) {
  PyObject *__pyx_v_iter_desc = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  Py_UCS4 __pyx_t_6;
  __Pyx_RefNannySetupContext("_describe_self", 0);

  /* "iter_defs.pxi":213
 * 
 *     cpdef _describe_self(self):
 *         iter_desc = repr(self._iter)             # <<<<<<<<<<<<<<
 *         if len(iter_desc) > 20:
 *             iter_desc = iter_desc[:9] + "..." + iter_desc[-9:]
 */
  __pyx_t_1 = __pyx_v_self->_iter;
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Repr(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 213, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_iter_desc = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "iter_defs.pxi":214
 *     cpdef _describe_self(self):
 *         iter_desc = repr(self._iter)
 *         if len(iter_desc) > 20:             # <<<<<<<<<<<<<<
 *             iter_desc = iter_desc[:9] + "..." + iter_desc[-9:]
 *         return f"Each({iter_desc})"
 */
  __pyx_t_3 = PyObject_Length(__pyx_v_iter_desc); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1))) __PYX_ERR(3, 214, __pyx_L1_error)
  __pyx_t_4 = ((__pyx_t_3 > 20) != 0);
  if (__pyx_t_4) {

    /* "iter_defs.pxi":215
 *         iter_desc = repr(self._iter)
 *         if len(iter_desc) > 20:
 *             iter_desc = iter_desc[:9] + "..." + iter_desc[-9:]             # <<<<<<<<<<<<<<
 *         return f"Each({iter_desc})"
 * 
 */
    __pyx_t_2 = __Pyx_PyObject_GetSlice(__pyx_v_iter_desc, 0, 9, NULL, NULL, &__pyx_slice__24, 0, 1, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 215, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = PyNumber_Add(__pyx_t_2, __pyx_kp_u__25); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 215, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyObject_GetSlice(__pyx_v_iter_desc, -9L, 0, NULL, NULL, &__pyx_slice__26, 1, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 215, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = PyNumber_Add(__pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 215, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF_SET(__pyx_v_iter_desc, __pyx_t_5);
    __pyx_t_5 = 0;

    /* "iter_defs.pxi":214
 *     cpdef _describe_self(self):
 *         iter_desc = repr(self._iter)
 *         if len(iter_desc) > 20:             # <<<<<<<<<<<<<<
 *             iter_desc = iter_desc[:9] + "..." + iter_desc[-9:]
 *         return f"Each({iter_desc})"
 */
  }

  /* "iter_defs.pxi":216
 *         if len(iter_desc) > 20:
 *             iter_desc = iter_desc[:9] + "..." + iter_desc[-9:]
 *         return f"Each({iter_desc})"             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_5 = PyTuple_New(3); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 216, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_3 = 0;
  __pyx_t_6 = 127;
  __Pyx_INCREF(__pyx_kp_u_Each);
  __pyx_t_3 += 5;
  __Pyx_GIVEREF(__pyx_kp_u_Each);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_kp_u_Each);
  __pyx_t_2 = __Pyx_PyObject_FormatSimple(__pyx_v_iter_desc, __pyx_empty_unicode); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 216, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_6 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_2) > __pyx_t_6) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_2) : __pyx_t_6;
  __pyx_t_3 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_2);
  __pyx_t_2 = 0;
  __Pyx_INCREF(__pyx_kp_u__27);
  __pyx_t_3 += 1;
  __Pyx_GIVEREF(__pyx_kp_u__27);
  PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_kp_u__27);
  __pyx_t_2 = __Pyx_PyUnicode_Join(__pyx_t_5, 3, __pyx_t_3, __pyx_t_6); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 216, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "iter_defs.pxi":212
 *         return PyObj(<PyObject *>real_it)
 * 
 *     cpdef _describe_self(self):             # <<<<<<<<<<<<<<
 *         iter_desc = repr(self._iter)
 *         if len(iter_desc) > 20:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("tubes.Each._describe_self", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_iter_desc);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5tubes_4Each_3_describe_self(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5tubes_4Each_2_describe_self[] = "Each._describe_self(self)";
static PyObject *__pyx_pw_5tubes_4Each_3_describe_self(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_describe_self (wrapper)", 0);
  __pyx_r = __pyx_pf_5tubes_4Each_2_describe_self(((struct __pyx_obj_5tubes_Each *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5tubes_4Each_2_describe_self(struct __pyx_obj_5tubes_Each *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("_describe_self", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_5tubes_4Each__describe_self(__pyx_v_self, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 212, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("tubes.Each._describe_self", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "iter_defs.pxi":171
 *     """
 * 
 *     cdef public object _iter             # <<<<<<<<<<<<<<
 * 
 *     def __cinit__(self, object _iter):
 */

/* Python wrapper */
static PyObject *__pyx_pw_5tubes_4Each_5_iter_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5tubes_4Each_5_iter_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5tubes_4Each_5_iter___get__(((struct __pyx_obj_5tubes_Each *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5tubes_4Each_5_iter___get__(struct __pyx_obj_5tubes_Each *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->_iter);
  __pyx_r = __pyx_v_self->_iter;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_5tubes_4Each_5_iter_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_5tubes_4Each_5_iter_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5tubes_4Each_5_iter_2__set__(((struct __pyx_obj_5tubes_Each *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5tubes_4Each_5_iter_2__set__(struct __pyx_obj_5tubes_Each *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_INCREF(__pyx_v_value);
  __Pyx_GIVEREF(__pyx_v_value);
  __Pyx_GOTREF(__pyx_v_self->_iter);
  __Pyx_DECREF(__pyx_v_self->_iter);
  __pyx_v_self->_iter = __pyx_v_value;

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_5tubes_4Each_5_iter_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_5tubes_4Each_5_iter_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5tubes_4Each_5_iter_4__del__(((struct __pyx_obj_5tubes_Each *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5tubes_4Each_5_iter_4__del__(struct __pyx_obj_5tubes_Each *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->_iter);
  __Pyx_DECREF(__pyx_v_self->_iter);
  __pyx_v_self->_iter = Py_None;

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_5tubes_4Each_5__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5tubes_4Each_4__reduce_cython__[] = "Each.__reduce_cython__(self)";
static PyObject *__pyx_pw_5tubes_4Each_5__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5tubes_4Each_4__reduce_cython__(((struct __pyx_obj_5tubes_Each *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5tubes_4Each_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5tubes_Each *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__28, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("tubes.Each.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_5tubes_4Each_7__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static char __pyx_doc_5tubes_4Each_6__setstate_cython__[] = "Each.__setstate_cython__(self, __pyx_state)";
static PyObject *__pyx_pw_5tubes_4Each_7__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5tubes_4Each_6__setstate_cython__(((struct __pyx_obj_5tubes_Each *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5tubes_4Each_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5tubes_Each *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__29, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("tubes.Each.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "iter_defs.pxi":224
 *     cdef public list inputs
 * 
 *     def __cinit__(self, list inputs):             # <<<<<<<<<<<<<<
 *         self.inputs = inputs
 * 
 */

/* Python wrapper */
static int __pyx_pw_5tubes_3Zip_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_5tubes_3Zip_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_inputs = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_inputs_2,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_inputs_2)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(3, 224, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_inputs = ((PyObject*)values[0]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(3, 224, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("tubes.Zip.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_inputs), (&PyList_Type), 1, "inputs", 1))) __PYX_ERR(3, 224, __pyx_L1_error)
  __pyx_r = __pyx_pf_5tubes_3Zip___cinit__(((struct __pyx_obj_5tubes_Zip *)__pyx_v_self), __pyx_v_inputs);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5tubes_3Zip___cinit__(struct __pyx_obj_5tubes_Zip *__pyx_v_self, PyObject *__pyx_v_inputs) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "iter_defs.pxi":225
 * 
 *     def __cinit__(self, list inputs):
 *         self.inputs = inputs             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_INCREF(__pyx_v_inputs);
  __Pyx_GIVEREF(__pyx_v_inputs);
  __Pyx_GOTREF(__pyx_v_self->inputs);
  __Pyx_DECREF(__pyx_v_self->inputs);
  __pyx_v_self->inputs = __pyx_v_inputs;

  /* "iter_defs.pxi":224
 *     cdef public list inputs
 * 
 *     def __cinit__(self, list inputs):             # <<<<<<<<<<<<<<
 *         self.inputs = inputs
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "iter_defs.pxi":229
 * 
 * 
 *     cdef IterWrapper _make_iter(self, args):             # <<<<<<<<<<<<<<
 * 
 *         expected_args = len(self._inputs) + len(self._chains)
 */

static struct __pyx_obj_5tubes_IterWrapper *__pyx_f_5tubes_3Zip__make_iter(struct __pyx_obj_5tubes_Zip *__pyx_v_self, PyObject *__pyx_v_args) {
  Py_ssize_t __pyx_v_expected_args;
  PyObject *__pyx_v_chains = NULL;
  PyObject *__pyx_v_iters = NULL;
  ss::iter::ZipIter *__pyx_v_iter;
  struct __pyx_obj_5tubes_IterWrapper *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  int __pyx_t_4;
  Py_UCS4 __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  ss::iter::ZipIter *__pyx_t_7;
  __Pyx_RefNannySetupContext("_make_iter", 0);

  /* "iter_defs.pxi":231
 *     cdef IterWrapper _make_iter(self, args):
 * 
 *         expected_args = len(self._inputs) + len(self._chains)             # <<<<<<<<<<<<<<
 *         if len(args) != expected_args:
 *             raise ValueError(f"Expected {expected_args} inputs to _make_iter, got {len(args)}")
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_inputs); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 231, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Length(__pyx_t_1); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1))) __PYX_ERR(3, 231, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_chains); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 231, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyObject_Length(__pyx_t_1); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1))) __PYX_ERR(3, 231, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_expected_args = (__pyx_t_2 + __pyx_t_3);

  /* "iter_defs.pxi":232
 * 
 *         expected_args = len(self._inputs) + len(self._chains)
 *         if len(args) != expected_args:             # <<<<<<<<<<<<<<
 *             raise ValueError(f"Expected {expected_args} inputs to _make_iter, got {len(args)}")
 * 
 */
  __pyx_t_3 = PyObject_Length(__pyx_v_args); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1))) __PYX_ERR(3, 232, __pyx_L1_error)
  __pyx_t_4 = ((__pyx_t_3 != __pyx_v_expected_args) != 0);
  if (__pyx_t_4) {

    /* "iter_defs.pxi":233
 *         expected_args = len(self._inputs) + len(self._chains)
 *         if len(args) != expected_args:
 *             raise ValueError(f"Expected {expected_args} inputs to _make_iter, got {len(args)}")             # <<<<<<<<<<<<<<
 * 
 *         chains = args[:len(self._chains)]
 */
    __pyx_t_1 = PyTuple_New(4); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 233, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = 0;
    __pyx_t_5 = 127;
    __Pyx_INCREF(__pyx_kp_u_Expected);
    __pyx_t_3 += 9;
    __Pyx_GIVEREF(__pyx_kp_u_Expected);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_kp_u_Expected);
    __pyx_t_6 = __Pyx_PyUnicode_From_Py_ssize_t(__pyx_v_expected_args, 0, ' ', 'd'); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 233, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_3 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_6);
    __pyx_t_6 = 0;
    __Pyx_INCREF(__pyx_kp_u_inputs_to__make_iter_got);
    __pyx_t_3 += 27;
    __Pyx_GIVEREF(__pyx_kp_u_inputs_to__make_iter_got);
    PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_kp_u_inputs_to__make_iter_got);
    __pyx_t_2 = PyObject_Length(__pyx_v_args); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1))) __PYX_ERR(3, 233, __pyx_L1_error)
    __pyx_t_6 = __Pyx_PyUnicode_From_Py_ssize_t(__pyx_t_2, 0, ' ', 'd'); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 233, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_3 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_1, 3, __pyx_t_6);
    __pyx_t_6 = 0;
    __pyx_t_6 = __Pyx_PyUnicode_Join(__pyx_t_1, 4, __pyx_t_3, __pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 233, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 233, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_6);
    __pyx_t_6 = 0;
    __pyx_t_6 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_t_1, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 233, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_Raise(__pyx_t_6, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __PYX_ERR(3, 233, __pyx_L1_error)

    /* "iter_defs.pxi":232
 * 
 *         expected_args = len(self._inputs) + len(self._chains)
 *         if len(args) != expected_args:             # <<<<<<<<<<<<<<
 *             raise ValueError(f"Expected {expected_args} inputs to _make_iter, got {len(args)}")
 * 
 */
  }

  /* "iter_defs.pxi":235
 *             raise ValueError(f"Expected {expected_args} inputs to _make_iter, got {len(args)}")
 * 
 *         chains = args[:len(self._chains)]             # <<<<<<<<<<<<<<
 *         iters = args[len(self._chains):]
 * 
 */
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_chains); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 235, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_3 = PyObject_Length(__pyx_t_6); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1))) __PYX_ERR(3, 235, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = __Pyx_PyObject_GetSlice(__pyx_v_args, 0, __pyx_t_3, NULL, NULL, NULL, 0, 1, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 235, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_v_chains = __pyx_t_6;
  __pyx_t_6 = 0;

  /* "iter_defs.pxi":236
 * 
 *         chains = args[:len(self._chains)]
 *         iters = args[len(self._chains):]             # <<<<<<<<<<<<<<
 * 
 *         cdef ZipIter *iter = new ZipIter(iters_to_c_chain(chains[0]), self._make_iters(iters))
 */
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_chains); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 236, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_3 = PyObject_Length(__pyx_t_6); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1))) __PYX_ERR(3, 236, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = __Pyx_PyObject_GetSlice(__pyx_v_args, __pyx_t_3, 0, NULL, NULL, NULL, 1, 0, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 236, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_v_iters = __pyx_t_6;
  __pyx_t_6 = 0;

  /* "iter_defs.pxi":238
 *         iters = args[len(self._chains):]
 * 
 *         cdef ZipIter *iter = new ZipIter(iters_to_c_chain(chains[0]), self._make_iters(iters))             # <<<<<<<<<<<<<<
 * 
 *         return wrap(to_any(iter))
 */
  __pyx_t_6 = __Pyx_GetItemInt(__pyx_v_chains, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 238, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  if (!(likely(PyList_CheckExact(__pyx_t_6))||((__pyx_t_6) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(__pyx_t_6)->tp_name), 0))) __PYX_ERR(3, 238, __pyx_L1_error)
  if (!(likely(PyList_CheckExact(__pyx_v_iters))||((__pyx_v_iters) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(__pyx_v_iters)->tp_name), 0))) __PYX_ERR(3, 238, __pyx_L1_error)
  try {
    __pyx_t_7 = new ss::iter::ZipIter(__pyx_f_5tubes_iters_to_c_chain(((PyObject*)__pyx_t_6)), __pyx_f_5tubes_3Zip__make_iters(__pyx_v_self, ((PyObject*)__pyx_v_iters)));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(3, 238, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_v_iter = __pyx_t_7;

  /* "iter_defs.pxi":240
 *         cdef ZipIter *iter = new ZipIter(iters_to_c_chain(chains[0]), self._make_iters(iters))
 * 
 *         return wrap(to_any(iter))             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __pyx_t_6 = __pyx_f_5tubes_wrap(ss::iter::to_any<ss::iter::ZipIter>(__pyx_v_iter)); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 240, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  if (!(likely(((__pyx_t_6) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_6, __pyx_ptype_5tubes_IterWrapper))))) __PYX_ERR(3, 240, __pyx_L1_error)
  __pyx_r = ((struct __pyx_obj_5tubes_IterWrapper *)__pyx_t_6);
  __pyx_t_6 = 0;
  goto __pyx_L0;

  /* "iter_defs.pxi":229
 * 
 * 
 *     cdef IterWrapper _make_iter(self, args):             # <<<<<<<<<<<<<<
 * 
 *         expected_args = len(self._inputs) + len(self._chains)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("tubes.Zip._make_iter", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_chains);
  __Pyx_XDECREF(__pyx_v_iters);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "iter_defs.pxi":243
 * 
 *     @property
 *     def dtype(self):             # <<<<<<<<<<<<<<
 *         return tuple(dty for t in self.inputs for dty in t.dtype)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5tubes_3Zip_5dtype_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5tubes_3Zip_5dtype_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5tubes_3Zip_5dtype___get__(((struct __pyx_obj_5tubes_Zip *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_5tubes_3Zip_5dtype_7__get___2generator3(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "iter_defs.pxi":244
 *     @property
 *     def dtype(self):
 *         return tuple(dty for t in self.inputs for dty in t.dtype)             # <<<<<<<<<<<<<<
 * 
 *     @property
 */

static PyObject *__pyx_pf_5tubes_3Zip_5dtype_7__get___genexpr(PyObject *__pyx_self) {
  struct __pyx_obj_5tubes___pyx_scope_struct_6_genexpr *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("genexpr", 0);
  __pyx_cur_scope = (struct __pyx_obj_5tubes___pyx_scope_struct_6_genexpr *)__pyx_tp_new_5tubes___pyx_scope_struct_6_genexpr(__pyx_ptype_5tubes___pyx_scope_struct_6_genexpr, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_5tubes___pyx_scope_struct_6_genexpr *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(3, 244, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_outer_scope = (struct __pyx_obj_5tubes___pyx_scope_struct_5___get__ *) __pyx_self;
  __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_outer_scope));
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_outer_scope);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_5tubes_3Zip_5dtype_7__get___2generator3, (PyObject *) __pyx_cur_scope, __pyx_n_s_genexpr, __pyx_n_s_Zip___get___locals_genexpr, __pyx_n_s_tubes); if (unlikely(!gen)) __PYX_ERR(3, 244, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("tubes.Zip.dtype.__get__.genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_5tubes_3Zip_5dtype_7__get___2generator3(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_5tubes___pyx_scope_struct_6_genexpr *__pyx_cur_scope = ((struct __pyx_obj_5tubes___pyx_scope_struct_6_genexpr *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  Py_ssize_t __pyx_t_5;
  PyObject *(*__pyx_t_6)(PyObject *);
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("genexpr", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L8_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(3, 244, __pyx_L1_error)
  if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_self)) { __Pyx_RaiseClosureNameError("self"); __PYX_ERR(3, 244, __pyx_L1_error) }
  if (unlikely(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_self->inputs == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(3, 244, __pyx_L1_error)
  }
  __pyx_t_1 = __pyx_cur_scope->__pyx_outer_scope->__pyx_v_self->inputs; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
  for (;;) {
    if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_3 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_3); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(3, 244, __pyx_L1_error)
    #else
    __pyx_t_3 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 244, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    #endif
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_t);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_t, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_3);
    __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_t, __pyx_n_s_dtype); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 244, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (likely(PyList_CheckExact(__pyx_t_3)) || PyTuple_CheckExact(__pyx_t_3)) {
      __pyx_t_4 = __pyx_t_3; __Pyx_INCREF(__pyx_t_4); __pyx_t_5 = 0;
      __pyx_t_6 = NULL;
    } else {
      __pyx_t_5 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 244, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_6 = Py_TYPE(__pyx_t_4)->tp_iternext; if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 244, __pyx_L1_error)
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    for (;;) {
      if (likely(!__pyx_t_6)) {
        if (likely(PyList_CheckExact(__pyx_t_4))) {
          if (__pyx_t_5 >= PyList_GET_SIZE(__pyx_t_4)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_3 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_5); __Pyx_INCREF(__pyx_t_3); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(3, 244, __pyx_L1_error)
          #else
          __pyx_t_3 = PySequence_ITEM(__pyx_t_4, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 244, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          #endif
        } else {
          if (__pyx_t_5 >= PyTuple_GET_SIZE(__pyx_t_4)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_5); __Pyx_INCREF(__pyx_t_3); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(3, 244, __pyx_L1_error)
          #else
          __pyx_t_3 = PySequence_ITEM(__pyx_t_4, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 244, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          #endif
        }
      } else {
        __pyx_t_3 = __pyx_t_6(__pyx_t_4);
        if (unlikely(!__pyx_t_3)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(3, 244, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_3);
      }
      __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_dty);
      __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_dty, __pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_3);
      __pyx_t_3 = 0;
      __Pyx_INCREF(__pyx_cur_scope->__pyx_v_dty);
      __pyx_r = __pyx_cur_scope->__pyx_v_dty;
      __Pyx_XGIVEREF(__pyx_t_1);
      __pyx_cur_scope->__pyx_t_0 = __pyx_t_1;
      __pyx_cur_scope->__pyx_t_1 = __pyx_t_2;
      __Pyx_XGIVEREF(__pyx_t_4);
      __pyx_cur_scope->__pyx_t_2 = __pyx_t_4;
      __pyx_cur_scope->__pyx_t_3 = __pyx_t_5;
      __pyx_cur_scope->__pyx_t_4 = __pyx_t_6;
      __Pyx_XGIVEREF(__pyx_r);
      __Pyx_RefNannyFinishContext();
      __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
      /* return from generator, yielding value */
      __pyx_generator->resume_label = 1;
      return __pyx_r;
      __pyx_L8_resume_from_yield:;
      __pyx_t_1 = __pyx_cur_scope->__pyx_t_0;
      __pyx_cur_scope->__pyx_t_0 = 0;
      __Pyx_XGOTREF(__pyx_t_1);
      __pyx_t_2 = __pyx_cur_scope->__pyx_t_1;
      __pyx_t_4 = __pyx_cur_scope->__pyx_t_2;
      __pyx_cur_scope->__pyx_t_2 = 0;
      __Pyx_XGOTREF(__pyx_t_4);
      __pyx_t_5 = __pyx_cur_scope->__pyx_t_3;
      __pyx_t_6 = __pyx_cur_scope->__pyx_t_4;
      if (unlikely(!__pyx_sent_value)) __PYX_ERR(3, 244, __pyx_L1_error)
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "iter_defs.pxi":243
 * 
 *     @property
 *     def dtype(self):             # <<<<<<<<<<<<<<
 *         return tuple(dty for t in self.inputs for dty in t.dtype)
 * 
 */

static PyObject *__pyx_pf_5tubes_3Zip_5dtype___get__(struct __pyx_obj_5tubes_Zip *__pyx_v_self) {
  struct __pyx_obj_5tubes___pyx_scope_struct_5___get__ *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);
  __pyx_cur_scope = (struct __pyx_obj_5tubes___pyx_scope_struct_5___get__ *)__pyx_tp_new_5tubes___pyx_scope_struct_5___get__(__pyx_ptype_5tubes___pyx_scope_struct_5___get__, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_5tubes___pyx_scope_struct_5___get__ *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(3, 243, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_self = __pyx_v_self;
  __Pyx_INCREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __Pyx_GIVEREF((PyObject *)__pyx_cur_scope->__pyx_v_self);

  /* "iter_defs.pxi":244
 *     @property
 *     def dtype(self):
 *         return tuple(dty for t in self.inputs for dty in t.dtype)             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_pf_5tubes_3Zip_5dtype_7__get___genexpr(((PyObject*)__pyx_cur_scope)); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 244, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PySequence_Tuple(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 244, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "iter_defs.pxi":243
 * 
 *     @property
 *     def dtype(self):             # <<<<<<<<<<<<<<
 *         return tuple(dty for t in self.inputs for dty in t.dtype)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("tubes.Zip.dtype.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "iter_defs.pxi":247
 * 
 *     @property
 *     def _chains(self):             # <<<<<<<<<<<<<<
 *         return (tuple(self.inputs), )
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5tubes_3Zip_7_chains_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5tubes_3Zip_7_chains_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5tubes_3Zip_7_chains___get__(((struct __pyx_obj_5tubes_Zip *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5tubes_3Zip_7_chains___get__(struct __pyx_obj_5tubes_Zip *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "iter_defs.pxi":248
 *     @property
 *     def _chains(self):
 *         return (tuple(self.inputs), )             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  if (unlikely(__pyx_v_self->inputs == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(3, 248, __pyx_L1_error)
  }
  __pyx_t_1 = PyList_AsTuple(__pyx_v_self->inputs); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 248, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 248, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "iter_defs.pxi":247
 * 
 *     @property
 *     def _chains(self):             # <<<<<<<<<<<<<<
 *         return (tuple(self.inputs), )
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("tubes.Zip._chains.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "iter_defs.pxi":255
 * 
 *     @property
 *     def _inputs(self):             # <<<<<<<<<<<<<<
 *         return tuple(self.inputs)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5tubes_3Zip_7_inputs_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5tubes_3Zip_7_inputs_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5tubes_3Zip_7_inputs___get__(((struct __pyx_obj_5tubes_Zip *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5tubes_3Zip_7_inputs___get__(struct __pyx_obj_5tubes_Zip *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "iter_defs.pxi":256
 *     @property
 *     def _inputs(self):
 *         return tuple(self.inputs)             # <<<<<<<<<<<<<<
 * 
 *     cdef vector[AnyIter] _make_iters(self, list args):
 */
  __Pyx_XDECREF(__pyx_r);
  if (unlikely(__pyx_v_self->inputs == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(3, 256, __pyx_L1_error)
  }
  __pyx_t_1 = PyList_AsTuple(__pyx_v_self->inputs); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 256, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "iter_defs.pxi":255
 * 
 *     @property
 *     def _inputs(self):             # <<<<<<<<<<<<<<
 *         return tuple(self.inputs)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("tubes.Zip._inputs.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "iter_defs.pxi":258
 *         return tuple(self.inputs)
 * 
 *     cdef vector[AnyIter] _make_iters(self, list args):             # <<<<<<<<<<<<<<
 *         cdef IterWrapper arg
 *         cdef vector[AnyIter] its
 */

static std::vector<ss::iter::AnyIter>  __pyx_f_5tubes_3Zip__make_iters(CYTHON_UNUSED struct __pyx_obj_5tubes_Zip *__pyx_v_self, PyObject *__pyx_v_args) {
  struct __pyx_obj_5tubes_IterWrapper *__pyx_v_arg = 0;
  std::vector<ss::iter::AnyIter>  __pyx_v_its;
  std::vector<ss::iter::AnyIter>  __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("_make_iters", 0);

  /* "iter_defs.pxi":261
 *         cdef IterWrapper arg
 *         cdef vector[AnyIter] its
 *         for arg in args:             # <<<<<<<<<<<<<<
 *             its.push_back(arg.iter)
 *         return its
 */
  if (unlikely(__pyx_v_args == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(3, 261, __pyx_L1_error)
  }
  __pyx_t_1 = __pyx_v_args; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
  for (;;) {
    if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_3 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_3); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(3, 261, __pyx_L1_error)
    #else
    __pyx_t_3 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 261, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    #endif
    if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_5tubes_IterWrapper))))) __PYX_ERR(3, 261, __pyx_L1_error)
    __Pyx_XDECREF_SET(__pyx_v_arg, ((struct __pyx_obj_5tubes_IterWrapper *)__pyx_t_3));
    __pyx_t_3 = 0;

    /* "iter_defs.pxi":262
 *         cdef vector[AnyIter] its
 *         for arg in args:
 *             its.push_back(arg.iter)             # <<<<<<<<<<<<<<
 *         return its
 * 
 */
    try {
      __pyx_v_its.push_back(__pyx_v_arg->iter);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(3, 262, __pyx_L1_error)
    }

    /* "iter_defs.pxi":261
 *         cdef IterWrapper arg
 *         cdef vector[AnyIter] its
 *         for arg in args:             # <<<<<<<<<<<<<<
 *             its.push_back(arg.iter)
 *         return its
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "iter_defs.pxi":263
 *         for arg in args:
 *             its.push_back(arg.iter)
 *         return its             # <<<<<<<<<<<<<<
 * 
 *     cpdef _describe_self(self):
 */
  __pyx_r = __pyx_v_its;
  goto __pyx_L0;

  /* "iter_defs.pxi":258
 *         return tuple(self.inputs)
 * 
 *     cdef vector[AnyIter] _make_iters(self, list args):             # <<<<<<<<<<<<<<
 *         cdef IterWrapper arg
 *         cdef vector[AnyIter] its
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_WriteUnraisable("tubes.Zip._make_iters", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_arg);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "iter_defs.pxi":265
 *         return its
 * 
 *     cpdef _describe_self(self):             # <<<<<<<<<<<<<<
 *         cdef Tube i
 *         input_reprs = [i._repr(stop=set(self.inputs)) for i in self.inputs]
 */

static PyObject *__pyx_pw_5tubes_3Zip_3_describe_self(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_f_5tubes_3Zip__describe_self(struct __pyx_obj_5tubes_Zip *__pyx_v_self, CYTHON_UNUSED int __pyx_skip_dispatch) {
  PyObject *__pyx_v_input_reprs = NULL;
  struct __pyx_obj_5tubes_Tube *__pyx_8genexpr3__pyx_v_i = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  struct __pyx_opt_args_5tubes_4Tube__repr __pyx_t_6;
  Py_UCS4 __pyx_t_7;
  __Pyx_RefNannySetupContext("_describe_self", 0);

  /* "iter_defs.pxi":267
 *     cpdef _describe_self(self):
 *         cdef Tube i
 *         input_reprs = [i._repr(stop=set(self.inputs)) for i in self.inputs]             # <<<<<<<<<<<<<<
 *         return f"Zip({input_reprs})"
 * 
 */
  { /* enter inner scope */
    __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 267, __pyx_L5_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (unlikely(__pyx_v_self->inputs == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
      __PYX_ERR(3, 267, __pyx_L5_error)
    }
    __pyx_t_2 = __pyx_v_self->inputs; __Pyx_INCREF(__pyx_t_2); __pyx_t_3 = 0;
    for (;;) {
      if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_2)) break;
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      __pyx_t_4 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_4); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(3, 267, __pyx_L5_error)
      #else
      __pyx_t_4 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 267, __pyx_L5_error)
      __Pyx_GOTREF(__pyx_t_4);
      #endif
      if (!(likely(((__pyx_t_4) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_4, __pyx_ptype_5tubes_Tube))))) __PYX_ERR(3, 267, __pyx_L5_error)
      __Pyx_XDECREF_SET(__pyx_8genexpr3__pyx_v_i, ((struct __pyx_obj_5tubes_Tube *)__pyx_t_4));
      __pyx_t_4 = 0;
      __pyx_t_4 = PySet_New(__pyx_v_self->inputs); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 267, __pyx_L5_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_6.__pyx_n = 1;
      __pyx_t_6.stop = __pyx_t_4;
      __pyx_t_5 = ((struct __pyx_vtabstruct_5tubes_Tube *)__pyx_8genexpr3__pyx_v_i->__pyx_vtab)->_repr(__pyx_8genexpr3__pyx_v_i, &__pyx_t_6); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 267, __pyx_L5_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_5))) __PYX_ERR(3, 267, __pyx_L5_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF((PyObject *)__pyx_8genexpr3__pyx_v_i); __pyx_8genexpr3__pyx_v_i = 0;
    goto __pyx_L8_exit_scope;
    __pyx_L5_error:;
    __Pyx_XDECREF((PyObject *)__pyx_8genexpr3__pyx_v_i); __pyx_8genexpr3__pyx_v_i = 0;
    goto __pyx_L1_error;
    __pyx_L8_exit_scope:;
  } /* exit inner scope */
  __pyx_v_input_reprs = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "iter_defs.pxi":268
 *         cdef Tube i
 *         input_reprs = [i._repr(stop=set(self.inputs)) for i in self.inputs]
 *         return f"Zip({input_reprs})"             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 268, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = 0;
  __pyx_t_7 = 127;
  __Pyx_INCREF(__pyx_kp_u_Zip);
  __pyx_t_3 += 4;
  __Pyx_GIVEREF(__pyx_kp_u_Zip);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_kp_u_Zip);
  __pyx_t_2 = __Pyx_PyObject_FormatSimple(__pyx_v_input_reprs, __pyx_empty_unicode); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 268, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_7 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_2) > __pyx_t_7) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_2) : __pyx_t_7;
  __pyx_t_3 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_2);
  __pyx_t_2 = 0;
  __Pyx_INCREF(__pyx_kp_u__27);
  __pyx_t_3 += 1;
  __Pyx_GIVEREF(__pyx_kp_u__27);
  PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_kp_u__27);
  __pyx_t_2 = __Pyx_PyUnicode_Join(__pyx_t_1, 3, __pyx_t_3, __pyx_t_7); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 268, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "iter_defs.pxi":265
 *         return its
 * 
 *     cpdef _describe_self(self):             # <<<<<<<<<<<<<<
 *         cdef Tube i
 *         input_reprs = [i._repr(stop=set(self.inputs)) for i in self.inputs]
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("tubes.Zip._describe_self", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_input_reprs);
  __Pyx_XDECREF((PyObject *)__pyx_8genexpr3__pyx_v_i);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5tubes_3Zip_3_describe_self(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5tubes_3Zip_2_describe_self[] = "Zip._describe_self(self)";
static PyObject *__pyx_pw_5tubes_3Zip_3_describe_self(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_describe_self (wrapper)", 0);
  __pyx_r = __pyx_pf_5tubes_3Zip_2_describe_self(((struct __pyx_obj_5tubes_Zip *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5tubes_3Zip_2_describe_self(struct __pyx_obj_5tubes_Zip *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("_describe_self", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_5tubes_3Zip__describe_self(__pyx_v_self, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 265, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("tubes.Zip._describe_self", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "iter_defs.pxi":222
 * cdef class Zip(Tube):  # AUTO GENERATED FROM tools/defn2.tmpl
 * 
 *     cdef public list inputs             # <<<<<<<<<<<<<<
 * 
 *     def __cinit__(self, list inputs):
 */

/* Python wrapper */
static PyObject *__pyx_pw_5tubes_3Zip_6inputs_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5tubes_3Zip_6inputs_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5tubes_3Zip_6inputs___get__(((struct __pyx_obj_5tubes_Zip *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5tubes_3Zip_6inputs___get__(struct __pyx_obj_5tubes_Zip *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->inputs);
  __pyx_r = __pyx_v_self->inputs;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_5tubes_3Zip_6inputs_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_5tubes_3Zip_6inputs_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5tubes_3Zip_6inputs_2__set__(((struct __pyx_obj_5tubes_Zip *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5tubes_3Zip_6inputs_2__set__(struct __pyx_obj_5tubes_Zip *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__set__", 0);
  if (!(likely(PyList_CheckExact(__pyx_v_value))||((__pyx_v_value) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(__pyx_v_value)->tp_name), 0))) __PYX_ERR(3, 222, __pyx_L1_error)
  __pyx_t_1 = __pyx_v_value;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->inputs);
  __Pyx_DECREF(__pyx_v_self->inputs);
  __pyx_v_self->inputs = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("tubes.Zip.inputs.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_5tubes_3Zip_6inputs_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_5tubes_3Zip_6inputs_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5tubes_3Zip_6inputs_4__del__(((struct __pyx_obj_5tubes_Zip *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5tubes_3Zip_6inputs_4__del__(struct __pyx_obj_5tubes_Zip *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->inputs);
  __Pyx_DECREF(__pyx_v_self->inputs);
  __pyx_v_self->inputs = ((PyObject*)Py_None);

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_5tubes_3Zip_5__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5tubes_3Zip_4__reduce_cython__[] = "Zip.__reduce_cython__(self)";
static PyObject *__pyx_pw_5tubes_3Zip_5__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5tubes_3Zip_4__reduce_cython__(((struct __pyx_obj_5tubes_Zip *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5tubes_3Zip_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5tubes_Zip *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__30, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("tubes.Zip.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_5tubes_3Zip_7__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static char __pyx_doc_5tubes_3Zip_6__setstate_cython__[] = "Zip.__setstate_cython__(self, __pyx_state)";
static PyObject *__pyx_pw_5tubes_3Zip_7__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5tubes_3Zip_6__setstate_cython__(((struct __pyx_obj_5tubes_Zip *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5tubes_3Zip_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5tubes_Zip *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__31, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("tubes.Zip.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "iter_defs.pxi":278
 *     cdef public object default_val
 * 
 *     def __cinit__(self, Tube parent, size_t index, object default_val):             # <<<<<<<<<<<<<<
 *         self.parent = parent
 *         self.index = index
 */

/* Python wrapper */
static int __pyx_pw_5tubes_7SlotGet_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_5tubes_7SlotGet_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_5tubes_Tube *__pyx_v_parent = 0;
  size_t __pyx_v_index;
  PyObject *__pyx_v_default_val = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_parent,&__pyx_n_s_index,&__pyx_n_s_default_val,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_parent)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_index)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 3, 3, 1); __PYX_ERR(3, 278, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_default_val)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 3, 3, 2); __PYX_ERR(3, 278, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(3, 278, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_parent = ((struct __pyx_obj_5tubes_Tube *)values[0]);
    __pyx_v_index = __Pyx_PyInt_As_size_t(values[1]); if (unlikely((__pyx_v_index == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(3, 278, __pyx_L3_error)
    __pyx_v_default_val = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(3, 278, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("tubes.SlotGet.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_parent), __pyx_ptype_5tubes_Tube, 1, "parent", 0))) __PYX_ERR(3, 278, __pyx_L1_error)
  __pyx_r = __pyx_pf_5tubes_7SlotGet___cinit__(((struct __pyx_obj_5tubes_SlotGet *)__pyx_v_self), __pyx_v_parent, __pyx_v_index, __pyx_v_default_val);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5tubes_7SlotGet___cinit__(struct __pyx_obj_5tubes_SlotGet *__pyx_v_self, struct __pyx_obj_5tubes_Tube *__pyx_v_parent, size_t __pyx_v_index, PyObject *__pyx_v_default_val) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  int __pyx_t_3;
  Py_UCS4 __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  Py_ssize_t __pyx_t_6;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "iter_defs.pxi":279
 * 
 *     def __cinit__(self, Tube parent, size_t index, object default_val):
 *         self.parent = parent             # <<<<<<<<<<<<<<
 *         self.index = index
 *         self.default_val = default_val
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_parent));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_parent));
  __Pyx_GOTREF(__pyx_v_self->parent);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->parent));
  __pyx_v_self->parent = __pyx_v_parent;

  /* "iter_defs.pxi":280
 *     def __cinit__(self, Tube parent, size_t index, object default_val):
 *         self.parent = parent
 *         self.index = index             # <<<<<<<<<<<<<<
 *         self.default_val = default_val
 * 
 */
  __pyx_v_self->index = __pyx_v_index;

  /* "iter_defs.pxi":281
 *         self.parent = parent
 *         self.index = index
 *         self.default_val = default_val             # <<<<<<<<<<<<<<
 * 
 *         if index > <size_t>len(parent.dtype):
 */
  __Pyx_INCREF(__pyx_v_default_val);
  __Pyx_GIVEREF(__pyx_v_default_val);
  __Pyx_GOTREF(__pyx_v_self->default_val);
  __Pyx_DECREF(__pyx_v_self->default_val);
  __pyx_v_self->default_val = __pyx_v_default_val;

  /* "iter_defs.pxi":283
 *         self.default_val = default_val
 * 
 *         if index > <size_t>len(parent.dtype):             # <<<<<<<<<<<<<<
 *             raise IndexError(f"Cannot get slot {index} from parent with {len(parent.dtype)} slots")
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_parent), __pyx_n_s_dtype); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 283, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Length(__pyx_t_1); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1))) __PYX_ERR(3, 283, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = ((__pyx_v_index > ((size_t)__pyx_t_2)) != 0);
  if (__pyx_t_3) {

    /* "iter_defs.pxi":284
 * 
 *         if index > <size_t>len(parent.dtype):
 *             raise IndexError(f"Cannot get slot {index} from parent with {len(parent.dtype)} slots")             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_t_1 = PyTuple_New(5); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 284, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = 0;
    __pyx_t_4 = 127;
    __Pyx_INCREF(__pyx_kp_u_Cannot_get_slot);
    __pyx_t_2 += 16;
    __Pyx_GIVEREF(__pyx_kp_u_Cannot_get_slot);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_kp_u_Cannot_get_slot);
    __pyx_t_5 = __Pyx_PyUnicode_From_size_t(__pyx_v_index, 0, ' ', 'd'); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 284, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_2 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_5);
    __pyx_t_5 = 0;
    __Pyx_INCREF(__pyx_kp_u_from_parent_with);
    __pyx_t_2 += 18;
    __Pyx_GIVEREF(__pyx_kp_u_from_parent_with);
    PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_kp_u_from_parent_with);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_parent), __pyx_n_s_dtype); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 284, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = PyObject_Length(__pyx_t_5); if (unlikely(__pyx_t_6 == ((Py_ssize_t)-1))) __PYX_ERR(3, 284, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyUnicode_From_Py_ssize_t(__pyx_t_6, 0, ' ', 'd'); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 284, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_2 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_1, 3, __pyx_t_5);
    __pyx_t_5 = 0;
    __Pyx_INCREF(__pyx_kp_u_slots);
    __pyx_t_2 += 6;
    __Pyx_GIVEREF(__pyx_kp_u_slots);
    PyTuple_SET_ITEM(__pyx_t_1, 4, __pyx_kp_u_slots);
    __pyx_t_5 = __Pyx_PyUnicode_Join(__pyx_t_1, 5, __pyx_t_2, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 284, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 284, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_5);
    __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_IndexError, __pyx_t_1, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 284, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_Raise(__pyx_t_5, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __PYX_ERR(3, 284, __pyx_L1_error)

    /* "iter_defs.pxi":283
 *         self.default_val = default_val
 * 
 *         if index > <size_t>len(parent.dtype):             # <<<<<<<<<<<<<<
 *             raise IndexError(f"Cannot get slot {index} from parent with {len(parent.dtype)} slots")
 * 
 */
  }

  /* "iter_defs.pxi":278
 *     cdef public object default_val
 * 
 *     def __cinit__(self, Tube parent, size_t index, object default_val):             # <<<<<<<<<<<<<<
 *         self.parent = parent
 *         self.index = index
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("tubes.SlotGet.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "iter_defs.pxi":287
 * 
 * 
 *     cdef IterWrapper _make_iter(self, args):             # <<<<<<<<<<<<<<
 * 
 *         expected_args = len(self._inputs) + len(self._chains)
 */

static struct __pyx_obj_5tubes_IterWrapper *__pyx_f_5tubes_7SlotGet__make_iter(struct __pyx_obj_5tubes_SlotGet *__pyx_v_self, PyObject *__pyx_v_args) {
  Py_ssize_t __pyx_v_expected_args;
  CYTHON_UNUSED PyObject *__pyx_v_chains = NULL;
  PyObject *__pyx_v_iters = NULL;
  struct __pyx_obj_5tubes_IterWrapper *__pyx_v_parent = 0;
  ss::PyObj __pyx_v_default_ob;
  ss::iter::Iter *__pyx_v_iter;
  struct __pyx_obj_5tubes_IterWrapper *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  int __pyx_t_4;
  Py_UCS4 __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  ss::iter::Iter *__pyx_t_7;
  __Pyx_RefNannySetupContext("_make_iter", 0);

  /* "iter_defs.pxi":289
 *     cdef IterWrapper _make_iter(self, args):
 * 
 *         expected_args = len(self._inputs) + len(self._chains)             # <<<<<<<<<<<<<<
 *         if len(args) != expected_args:
 *             raise ValueError(f"Expected {expected_args} inputs to _make_iter, got {len(args)}")
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_inputs); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 289, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Length(__pyx_t_1); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1))) __PYX_ERR(3, 289, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_chains); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 289, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyObject_Length(__pyx_t_1); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1))) __PYX_ERR(3, 289, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_expected_args = (__pyx_t_2 + __pyx_t_3);

  /* "iter_defs.pxi":290
 * 
 *         expected_args = len(self._inputs) + len(self._chains)
 *         if len(args) != expected_args:             # <<<<<<<<<<<<<<
 *             raise ValueError(f"Expected {expected_args} inputs to _make_iter, got {len(args)}")
 * 
 */
  __pyx_t_3 = PyObject_Length(__pyx_v_args); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1))) __PYX_ERR(3, 290, __pyx_L1_error)
  __pyx_t_4 = ((__pyx_t_3 != __pyx_v_expected_args) != 0);
  if (__pyx_t_4) {

    /* "iter_defs.pxi":291
 *         expected_args = len(self._inputs) + len(self._chains)
 *         if len(args) != expected_args:
 *             raise ValueError(f"Expected {expected_args} inputs to _make_iter, got {len(args)}")             # <<<<<<<<<<<<<<
 * 
 *         chains = args[:len(self._chains)]
 */
    __pyx_t_1 = PyTuple_New(4); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 291, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = 0;
    __pyx_t_5 = 127;
    __Pyx_INCREF(__pyx_kp_u_Expected);
    __pyx_t_3 += 9;
    __Pyx_GIVEREF(__pyx_kp_u_Expected);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_kp_u_Expected);
    __pyx_t_6 = __Pyx_PyUnicode_From_Py_ssize_t(__pyx_v_expected_args, 0, ' ', 'd'); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 291, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_3 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_6);
    __pyx_t_6 = 0;
    __Pyx_INCREF(__pyx_kp_u_inputs_to__make_iter_got);
    __pyx_t_3 += 27;
    __Pyx_GIVEREF(__pyx_kp_u_inputs_to__make_iter_got);
    PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_kp_u_inputs_to__make_iter_got);
    __pyx_t_2 = PyObject_Length(__pyx_v_args); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1))) __PYX_ERR(3, 291, __pyx_L1_error)
    __pyx_t_6 = __Pyx_PyUnicode_From_Py_ssize_t(__pyx_t_2, 0, ' ', 'd'); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 291, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_3 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_1, 3, __pyx_t_6);
    __pyx_t_6 = 0;
    __pyx_t_6 = __Pyx_PyUnicode_Join(__pyx_t_1, 4, __pyx_t_3, __pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 291, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 291, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_6);
    __pyx_t_6 = 0;
    __pyx_t_6 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_t_1, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 291, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_Raise(__pyx_t_6, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __PYX_ERR(3, 291, __pyx_L1_error)

    /* "iter_defs.pxi":290
 * 
 *         expected_args = len(self._inputs) + len(self._chains)
 *         if len(args) != expected_args:             # <<<<<<<<<<<<<<
 *             raise ValueError(f"Expected {expected_args} inputs to _make_iter, got {len(args)}")
 * 
 */
  }

  /* "iter_defs.pxi":293
 *             raise ValueError(f"Expected {expected_args} inputs to _make_iter, got {len(args)}")
 * 
 *         chains = args[:len(self._chains)]             # <<<<<<<<<<<<<<
 *         iters = args[len(self._chains):]
 *         cdef IterWrapper parent = iters[0]
 */
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_chains); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 293, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_3 = PyObject_Length(__pyx_t_6); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1))) __PYX_ERR(3, 293, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = __Pyx_PyObject_GetSlice(__pyx_v_args, 0, __pyx_t_3, NULL, NULL, NULL, 0, 1, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 293, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_v_chains = __pyx_t_6;
  __pyx_t_6 = 0;

  /* "iter_defs.pxi":294
 * 
 *         chains = args[:len(self._chains)]
 *         iters = args[len(self._chains):]             # <<<<<<<<<<<<<<
 *         cdef IterWrapper parent = iters[0]
 * 
 */
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_chains); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 294, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_3 = PyObject_Length(__pyx_t_6); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1))) __PYX_ERR(3, 294, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = __Pyx_PyObject_GetSlice(__pyx_v_args, __pyx_t_3, 0, NULL, NULL, NULL, 1, 0, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 294, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_v_iters = __pyx_t_6;
  __pyx_t_6 = 0;

  /* "iter_defs.pxi":295
 *         chains = args[:len(self._chains)]
 *         iters = args[len(self._chains):]
 *         cdef IterWrapper parent = iters[0]             # <<<<<<<<<<<<<<
 * 
 *         cdef PyObj default_ob = PyObj(<PyObject*>self.default_val)
 */
  __pyx_t_6 = __Pyx_GetItemInt(__pyx_v_iters, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 295, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  if (!(likely(((__pyx_t_6) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_6, __pyx_ptype_5tubes_IterWrapper))))) __PYX_ERR(3, 295, __pyx_L1_error)
  __pyx_v_parent = ((struct __pyx_obj_5tubes_IterWrapper *)__pyx_t_6);
  __pyx_t_6 = 0;

  /* "iter_defs.pxi":297
 *         cdef IterWrapper parent = iters[0]
 * 
 *         cdef PyObj default_ob = PyObj(<PyObject*>self.default_val)             # <<<<<<<<<<<<<<
 *         cdef Iter *iter = slot_get_iter_from_dtype(parent.iter, self.index, default_ob)
 * 
 */
  __pyx_v_default_ob = ss::PyObj(((PyObject *)__pyx_v_self->default_val));

  /* "iter_defs.pxi":298
 * 
 *         cdef PyObj default_ob = PyObj(<PyObject*>self.default_val)
 *         cdef Iter *iter = slot_get_iter_from_dtype(parent.iter, self.index, default_ob)             # <<<<<<<<<<<<<<
 * 
 *         return wrap(to_any(iter))
 */
  try {
    __pyx_t_7 = ss::iter::slot_get_iter_from_dtype(__pyx_v_parent->iter, __pyx_v_self->index, __pyx_v_default_ob);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(3, 298, __pyx_L1_error)
  }
  __pyx_v_iter = __pyx_t_7;

  /* "iter_defs.pxi":300
 *         cdef Iter *iter = slot_get_iter_from_dtype(parent.iter, self.index, default_ob)
 * 
 *         return wrap(to_any(iter))             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __pyx_t_6 = __pyx_f_5tubes_wrap(ss::iter::to_any<ss::iter::Iter>(__pyx_v_iter)); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 300, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  if (!(likely(((__pyx_t_6) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_6, __pyx_ptype_5tubes_IterWrapper))))) __PYX_ERR(3, 300, __pyx_L1_error)
  __pyx_r = ((struct __pyx_obj_5tubes_IterWrapper *)__pyx_t_6);
  __pyx_t_6 = 0;
  goto __pyx_L0;

  /* "iter_defs.pxi":287
 * 
 * 
 *     cdef IterWrapper _make_iter(self, args):             # <<<<<<<<<<<<<<
 * 
 *         expected_args = len(self._inputs) + len(self._chains)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("tubes.SlotGet._make_iter", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_chains);
  __Pyx_XDECREF(__pyx_v_iters);
  __Pyx_XDECREF((PyObject *)__pyx_v_parent);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "iter_defs.pxi":303
 * 
 *     @property
 *     def dtype(self):             # <<<<<<<<<<<<<<
 *         return (self.parent.dtype[self.index], )
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5tubes_7SlotGet_5dtype_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5tubes_7SlotGet_5dtype_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5tubes_7SlotGet_5dtype___get__(((struct __pyx_obj_5tubes_SlotGet *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5tubes_7SlotGet_5dtype___get__(struct __pyx_obj_5tubes_SlotGet *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "iter_defs.pxi":304
 *     @property
 *     def dtype(self):
 *         return (self.parent.dtype[self.index], )             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self->parent), __pyx_n_s_dtype); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 304, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_t_1, __pyx_v_self->index, size_t, 0, __Pyx_PyInt_FromSize_t, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 304, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 304, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "iter_defs.pxi":303
 * 
 *     @property
 *     def dtype(self):             # <<<<<<<<<<<<<<
 *         return (self.parent.dtype[self.index], )
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("tubes.SlotGet.dtype.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "iter_defs.pxi":307
 * 
 *     @property
 *     def _chains(self):             # <<<<<<<<<<<<<<
 *         return ()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5tubes_7SlotGet_7_chains_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5tubes_7SlotGet_7_chains_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5tubes_7SlotGet_7_chains___get__(((struct __pyx_obj_5tubes_SlotGet *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5tubes_7SlotGet_7_chains___get__(CYTHON_UNUSED struct __pyx_obj_5tubes_SlotGet *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "iter_defs.pxi":308
 *     @property
 *     def _chains(self):
 *         return ()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_empty_tuple);
  __pyx_r = __pyx_empty_tuple;
  goto __pyx_L0;

  /* "iter_defs.pxi":307
 * 
 *     @property
 *     def _chains(self):             # <<<<<<<<<<<<<<
 *         return ()
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "iter_defs.pxi":312
 * 
 *     @property
 *     def _inputs(self):             # <<<<<<<<<<<<<<
 *         return (self.parent, )
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5tubes_7SlotGet_7_inputs_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5tubes_7SlotGet_7_inputs_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5tubes_7SlotGet_7_inputs___get__(((struct __pyx_obj_5tubes_SlotGet *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5tubes_7SlotGet_7_inputs___get__(struct __pyx_obj_5tubes_SlotGet *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "iter_defs.pxi":313
 *     @property
 *     def _inputs(self):
 *         return (self.parent, )             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 313, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->parent));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self->parent));
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_v_self->parent));
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "iter_defs.pxi":312
 * 
 *     @property
 *     def _inputs(self):             # <<<<<<<<<<<<<<
 *         return (self.parent, )
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("tubes.SlotGet._inputs.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "iter_defs.pxi":317
 * 
 * 
 *     cpdef _describe_self(self):             # <<<<<<<<<<<<<<
 *         return f"SlotGet({repr(self.index)}, {repr(self.default_val)})"
 * 
 */

static PyObject *__pyx_pw_5tubes_7SlotGet_3_describe_self(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_f_5tubes_7SlotGet__describe_self(struct __pyx_obj_5tubes_SlotGet *__pyx_v_self, CYTHON_UNUSED int __pyx_skip_dispatch) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  Py_UCS4 __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("_describe_self", 0);

  /* "iter_defs.pxi":318
 * 
 *     cpdef _describe_self(self):
 *         return f"SlotGet({repr(self.index)}, {repr(self.default_val)})"             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyTuple_New(5); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 318, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = 0;
  __pyx_t_3 = 127;
  __Pyx_INCREF(__pyx_kp_u_SlotGet);
  __pyx_t_2 += 8;
  __Pyx_GIVEREF(__pyx_kp_u_SlotGet);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_kp_u_SlotGet);
  __pyx_t_4 = __Pyx_PyInt_FromSize_t(__pyx_v_self->index); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 318, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyObject_Repr(__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 318, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_FormatSimple(__pyx_t_5, __pyx_empty_unicode); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 318, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_3 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) > __pyx_t_3) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) : __pyx_t_3;
  __pyx_t_2 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_4);
  __pyx_t_4 = 0;
  __Pyx_INCREF(__pyx_kp_u__32);
  __pyx_t_2 += 2;
  __Pyx_GIVEREF(__pyx_kp_u__32);
  PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_kp_u__32);
  __pyx_t_4 = __pyx_v_self->default_val;
  __Pyx_INCREF(__pyx_t_4);
  __pyx_t_5 = PyObject_Repr(__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 318, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_FormatSimple(__pyx_t_5, __pyx_empty_unicode); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 318, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_3 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) > __pyx_t_3) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) : __pyx_t_3;
  __pyx_t_2 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_1, 3, __pyx_t_4);
  __pyx_t_4 = 0;
  __Pyx_INCREF(__pyx_kp_u__27);
  __pyx_t_2 += 1;
  __Pyx_GIVEREF(__pyx_kp_u__27);
  PyTuple_SET_ITEM(__pyx_t_1, 4, __pyx_kp_u__27);
  __pyx_t_4 = __Pyx_PyUnicode_Join(__pyx_t_1, 5, __pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 318, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "iter_defs.pxi":317
 * 
 * 
 *     cpdef _describe_self(self):             # <<<<<<<<<<<<<<
 *         return f"SlotGet({repr(self.index)}, {repr(self.default_val)})"
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("tubes.SlotGet._describe_self", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5tubes_7SlotGet_3_describe_self(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5tubes_7SlotGet_2_describe_self[] = "SlotGet._describe_self(self)";
static PyObject *__pyx_pw_5tubes_7SlotGet_3_describe_self(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_describe_self (wrapper)", 0);
  __pyx_r = __pyx_pf_5tubes_7SlotGet_2_describe_self(((struct __pyx_obj_5tubes_SlotGet *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5tubes_7SlotGet_2_describe_self(struct __pyx_obj_5tubes_SlotGet *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("_describe_self", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_5tubes_7SlotGet__describe_self(__pyx_v_self, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 317, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("tubes.SlotGet._describe_self", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "iter_defs.pxi":274
 * cdef class SlotGet(Tube):  # AUTO GENERATED FROM tools/defn2.tmpl
 * 
 *     cdef public Tube parent             # <<<<<<<<<<<<<<
 *     cdef public size_t index
 *     cdef public object default_val
 */

/* Python wrapper */
static PyObject *__pyx_pw_5tubes_7SlotGet_6parent_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5tubes_7SlotGet_6parent_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5tubes_7SlotGet_6parent___get__(((struct __pyx_obj_5tubes_SlotGet *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5tubes_7SlotGet_6parent___get__(struct __pyx_obj_5tubes_SlotGet *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->parent));
  __pyx_r = ((PyObject *)__pyx_v_self->parent);
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_5tubes_7SlotGet_6parent_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_5tubes_7SlotGet_6parent_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5tubes_7SlotGet_6parent_2__set__(((struct __pyx_obj_5tubes_SlotGet *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5tubes_7SlotGet_6parent_2__set__(struct __pyx_obj_5tubes_SlotGet *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__set__", 0);
  if (!(likely(((__pyx_v_value) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_value, __pyx_ptype_5tubes_Tube))))) __PYX_ERR(3, 274, __pyx_L1_error)
  __pyx_t_1 = __pyx_v_value;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->parent);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->parent));
  __pyx_v_self->parent = ((struct __pyx_obj_5tubes_Tube *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("tubes.SlotGet.parent.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_5tubes_7SlotGet_6parent_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_5tubes_7SlotGet_6parent_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5tubes_7SlotGet_6parent_4__del__(((struct __pyx_obj_5tubes_SlotGet *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5tubes_7SlotGet_6parent_4__del__(struct __pyx_obj_5tubes_SlotGet *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->parent);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->parent));
  __pyx_v_self->parent = ((struct __pyx_obj_5tubes_Tube *)Py_None);

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "iter_defs.pxi":275
 * 
 *     cdef public Tube parent
 *     cdef public size_t index             # <<<<<<<<<<<<<<
 *     cdef public object default_val
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5tubes_7SlotGet_5index_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5tubes_7SlotGet_5index_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5tubes_7SlotGet_5index___get__(((struct __pyx_obj_5tubes_SlotGet *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5tubes_7SlotGet_5index___get__(struct __pyx_obj_5tubes_SlotGet *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_FromSize_t(__pyx_v_self->index); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 275, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("tubes.SlotGet.index.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_5tubes_7SlotGet_5index_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_5tubes_7SlotGet_5index_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5tubes_7SlotGet_5index_2__set__(((struct __pyx_obj_5tubes_SlotGet *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5tubes_7SlotGet_5index_2__set__(struct __pyx_obj_5tubes_SlotGet *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  size_t __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_t_1 = __Pyx_PyInt_As_size_t(__pyx_v_value); if (unlikely((__pyx_t_1 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(3, 275, __pyx_L1_error)
  __pyx_v_self->index = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("tubes.SlotGet.index.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "iter_defs.pxi":276
 *     cdef public Tube parent
 *     cdef public size_t index
 *     cdef public object default_val             # <<<<<<<<<<<<<<
 * 
 *     def __cinit__(self, Tube parent, size_t index, object default_val):
 */

/* Python wrapper */
static PyObject *__pyx_pw_5tubes_7SlotGet_11default_val_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5tubes_7SlotGet_11default_val_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5tubes_7SlotGet_11default_val___get__(((struct __pyx_obj_5tubes_SlotGet *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5tubes_7SlotGet_11default_val___get__(struct __pyx_obj_5tubes_SlotGet *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->default_val);
  __pyx_r = __pyx_v_self->default_val;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_5tubes_7SlotGet_11default_val_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_5tubes_7SlotGet_11default_val_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5tubes_7SlotGet_11default_val_2__set__(((struct __pyx_obj_5tubes_SlotGet *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5tubes_7SlotGet_11default_val_2__set__(struct __pyx_obj_5tubes_SlotGet *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_INCREF(__pyx_v_value);
  __Pyx_GIVEREF(__pyx_v_value);
  __Pyx_GOTREF(__pyx_v_self->default_val);
  __Pyx_DECREF(__pyx_v_self->default_val);
  __pyx_v_self->default_val = __pyx_v_value;

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_5tubes_7SlotGet_11default_val_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_5tubes_7SlotGet_11default_val_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5tubes_7SlotGet_11default_val_4__del__(((struct __pyx_obj_5tubes_SlotGet *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5tubes_7SlotGet_11default_val_4__del__(struct __pyx_obj_5tubes_SlotGet *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->default_val);
  __Pyx_DECREF(__pyx_v_self->default_val);
  __pyx_v_self->default_val = Py_None;

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_5tubes_7SlotGet_5__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5tubes_7SlotGet_4__reduce_cython__[] = "SlotGet.__reduce_cython__(self)";
static PyObject *__pyx_pw_5tubes_7SlotGet_5__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5tubes_7SlotGet_4__reduce_cython__(((struct __pyx_obj_5tubes_SlotGet *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5tubes_7SlotGet_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5tubes_SlotGet *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__33, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("tubes.SlotGet.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_5tubes_7SlotGet_7__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static char __pyx_doc_5tubes_7SlotGet_6__setstate_cython__[] = "SlotGet.__setstate_cython__(self, __pyx_state)";
static PyObject *__pyx_pw_5tubes_7SlotGet_7__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5tubes_7SlotGet_6__setstate_cython__(((struct __pyx_obj_5tubes_SlotGet *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5tubes_7SlotGet_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5tubes_SlotGet *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__34, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("tubes.SlotGet.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "iter_defs.pxi":330
 *     cdef public dict _name_lookups
 * 
 *     def __cinit__(self, Tube parent, list items, dict _name_lookups=None):             # <<<<<<<<<<<<<<
 *         self.parent = parent
 *         self.items = items
 */

/* Python wrapper */
static int __pyx_pw_5tubes_10NameLookup_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_5tubes_10NameLookup_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_5tubes_Tube *__pyx_v_parent = 0;
  PyObject *__pyx_v_items = 0;
  PyObject *__pyx_v__name_lookups = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_parent,&__pyx_n_s_items,&__pyx_n_s_name_lookups,0};
    PyObject* values[3] = {0,0,0};
    values[2] = ((PyObject*)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_parent)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_items)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 2, 3, 1); __PYX_ERR(3, 330, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_name_lookups);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(3, 330, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_parent = ((struct __pyx_obj_5tubes_Tube *)values[0]);
    __pyx_v_items = ((PyObject*)values[1]);
    __pyx_v__name_lookups = ((PyObject*)values[2]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 2, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(3, 330, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("tubes.NameLookup.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_parent), __pyx_ptype_5tubes_Tube, 1, "parent", 0))) __PYX_ERR(3, 330, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_items), (&PyList_Type), 1, "items", 1))) __PYX_ERR(3, 330, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v__name_lookups), (&PyDict_Type), 1, "_name_lookups", 1))) __PYX_ERR(3, 330, __pyx_L1_error)
  __pyx_r = __pyx_pf_5tubes_10NameLookup___cinit__(((struct __pyx_obj_5tubes_NameLookup *)__pyx_v_self), __pyx_v_parent, __pyx_v_items, __pyx_v__name_lookups);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5tubes_10NameLookup___cinit__(struct __pyx_obj_5tubes_NameLookup *__pyx_v_self, struct __pyx_obj_5tubes_Tube *__pyx_v_parent, PyObject *__pyx_v_items, PyObject *__pyx_v__name_lookups) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "iter_defs.pxi":331
 * 
 *     def __cinit__(self, Tube parent, list items, dict _name_lookups=None):
 *         self.parent = parent             # <<<<<<<<<<<<<<
 *         self.items = items
 *         self._name_lookups = _name_lookups
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_parent));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_parent));
  __Pyx_GOTREF(__pyx_v_self->parent);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->parent));
  __pyx_v_self->parent = __pyx_v_parent;

  /* "iter_defs.pxi":332
 *     def __cinit__(self, Tube parent, list items, dict _name_lookups=None):
 *         self.parent = parent
 *         self.items = items             # <<<<<<<<<<<<<<
 *         self._name_lookups = _name_lookups
 * 
 */
  __Pyx_INCREF(__pyx_v_items);
  __Pyx_GIVEREF(__pyx_v_items);
  __Pyx_GOTREF(__pyx_v_self->items);
  __Pyx_DECREF(__pyx_v_self->items);
  __pyx_v_self->items = __pyx_v_items;

  /* "iter_defs.pxi":333
 *         self.parent = parent
 *         self.items = items
 *         self._name_lookups = _name_lookups             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_INCREF(__pyx_v__name_lookups);
  __Pyx_GIVEREF(__pyx_v__name_lookups);
  __Pyx_GOTREF(__pyx_v_self->_name_lookups);
  __Pyx_DECREF(__pyx_v_self->_name_lookups);
  __pyx_v_self->_name_lookups = __pyx_v__name_lookups;

  /* "iter_defs.pxi":330
 *     cdef public dict _name_lookups
 * 
 *     def __cinit__(self, Tube parent, list items, dict _name_lookups=None):             # <<<<<<<<<<<<<<
 *         self.parent = parent
 *         self.items = items
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "iter_defs.pxi":337
 * 
 * 
 *     cdef IterWrapper _make_iter(self, args):             # <<<<<<<<<<<<<<
 * 
 *         expected_args = len(self._inputs) + len(self._chains)
 */

static struct __pyx_obj_5tubes_IterWrapper *__pyx_f_5tubes_10NameLookup__make_iter(struct __pyx_obj_5tubes_NameLookup *__pyx_v_self, PyObject *__pyx_v_args) {
  Py_ssize_t __pyx_v_expected_args;
  CYTHON_UNUSED PyObject *__pyx_v_chains = NULL;
  PyObject *__pyx_v_iters = NULL;
  struct __pyx_obj_5tubes_IterWrapper *__pyx_v_parent = 0;
  std::vector<std::string>  __pyx_v_fields;
  ss::iter::Iter *__pyx_v_iter;
  PyObject *__pyx_8genexpr4__pyx_v_f = NULL;
  struct __pyx_obj_5tubes_IterWrapper *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  int __pyx_t_4;
  Py_UCS4 __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  std::vector<std::string>  __pyx_t_9;
  ss::iter::Iter *__pyx_t_10;
  __Pyx_RefNannySetupContext("_make_iter", 0);

  /* "iter_defs.pxi":339
 *     cdef IterWrapper _make_iter(self, args):
 * 
 *         expected_args = len(self._inputs) + len(self._chains)             # <<<<<<<<<<<<<<
 *         if len(args) != expected_args:
 *             raise ValueError(f"Expected {expected_args} inputs to _make_iter, got {len(args)}")
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_inputs); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 339, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Length(__pyx_t_1); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1))) __PYX_ERR(3, 339, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_chains); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 339, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyObject_Length(__pyx_t_1); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1))) __PYX_ERR(3, 339, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_expected_args = (__pyx_t_2 + __pyx_t_3);

  /* "iter_defs.pxi":340
 * 
 *         expected_args = len(self._inputs) + len(self._chains)
 *         if len(args) != expected_args:             # <<<<<<<<<<<<<<
 *             raise ValueError(f"Expected {expected_args} inputs to _make_iter, got {len(args)}")
 * 
 */
  __pyx_t_3 = PyObject_Length(__pyx_v_args); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1))) __PYX_ERR(3, 340, __pyx_L1_error)
  __pyx_t_4 = ((__pyx_t_3 != __pyx_v_expected_args) != 0);
  if (__pyx_t_4) {

    /* "iter_defs.pxi":341
 *         expected_args = len(self._inputs) + len(self._chains)
 *         if len(args) != expected_args:
 *             raise ValueError(f"Expected {expected_args} inputs to _make_iter, got {len(args)}")             # <<<<<<<<<<<<<<
 * 
 *         chains = args[:len(self._chains)]
 */
    __pyx_t_1 = PyTuple_New(4); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 341, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = 0;
    __pyx_t_5 = 127;
    __Pyx_INCREF(__pyx_kp_u_Expected);
    __pyx_t_3 += 9;
    __Pyx_GIVEREF(__pyx_kp_u_Expected);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_kp_u_Expected);
    __pyx_t_6 = __Pyx_PyUnicode_From_Py_ssize_t(__pyx_v_expected_args, 0, ' ', 'd'); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 341, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_3 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_6);
    __pyx_t_6 = 0;
    __Pyx_INCREF(__pyx_kp_u_inputs_to__make_iter_got);
    __pyx_t_3 += 27;
    __Pyx_GIVEREF(__pyx_kp_u_inputs_to__make_iter_got);
    PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_kp_u_inputs_to__make_iter_got);
    __pyx_t_2 = PyObject_Length(__pyx_v_args); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1))) __PYX_ERR(3, 341, __pyx_L1_error)
    __pyx_t_6 = __Pyx_PyUnicode_From_Py_ssize_t(__pyx_t_2, 0, ' ', 'd'); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 341, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_3 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_1, 3, __pyx_t_6);
    __pyx_t_6 = 0;
    __pyx_t_6 = __Pyx_PyUnicode_Join(__pyx_t_1, 4, __pyx_t_3, __pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 341, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 341, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_6);
    __pyx_t_6 = 0;
    __pyx_t_6 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_t_1, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 341, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_Raise(__pyx_t_6, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __PYX_ERR(3, 341, __pyx_L1_error)

    /* "iter_defs.pxi":340
 * 
 *         expected_args = len(self._inputs) + len(self._chains)
 *         if len(args) != expected_args:             # <<<<<<<<<<<<<<
 *             raise ValueError(f"Expected {expected_args} inputs to _make_iter, got {len(args)}")
 * 
 */
  }

  /* "iter_defs.pxi":343
 *             raise ValueError(f"Expected {expected_args} inputs to _make_iter, got {len(args)}")
 * 
 *         chains = args[:len(self._chains)]             # <<<<<<<<<<<<<<
 *         iters = args[len(self._chains):]
 *         cdef IterWrapper parent = iters[0]
 */
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_chains); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 343, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_3 = PyObject_Length(__pyx_t_6); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1))) __PYX_ERR(3, 343, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = __Pyx_PyObject_GetSlice(__pyx_v_args, 0, __pyx_t_3, NULL, NULL, NULL, 0, 1, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 343, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_v_chains = __pyx_t_6;
  __pyx_t_6 = 0;

  /* "iter_defs.pxi":344
 * 
 *         chains = args[:len(self._chains)]
 *         iters = args[len(self._chains):]             # <<<<<<<<<<<<<<
 *         cdef IterWrapper parent = iters[0]
 * 
 */
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_chains); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 344, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_3 = PyObject_Length(__pyx_t_6); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1))) __PYX_ERR(3, 344, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = __Pyx_PyObject_GetSlice(__pyx_v_args, __pyx_t_3, 0, NULL, NULL, NULL, 1, 0, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 344, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_v_iters = __pyx_t_6;
  __pyx_t_6 = 0;

  /* "iter_defs.pxi":345
 *         chains = args[:len(self._chains)]
 *         iters = args[len(self._chains):]
 *         cdef IterWrapper parent = iters[0]             # <<<<<<<<<<<<<<
 * 
 *         cdef vector[string] fields = [f.encode('utf-8') for f in self.items]
 */
  __pyx_t_6 = __Pyx_GetItemInt(__pyx_v_iters, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 345, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  if (!(likely(((__pyx_t_6) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_6, __pyx_ptype_5tubes_IterWrapper))))) __PYX_ERR(3, 345, __pyx_L1_error)
  __pyx_v_parent = ((struct __pyx_obj_5tubes_IterWrapper *)__pyx_t_6);
  __pyx_t_6 = 0;

  /* "iter_defs.pxi":347
 *         cdef IterWrapper parent = iters[0]
 * 
 *         cdef vector[string] fields = [f.encode('utf-8') for f in self.items]             # <<<<<<<<<<<<<<
 *         cdef Iter *iter = name_lookup_from_dtype(parent.iter, fields)
 * 
 */
  { /* enter inner scope */
    __pyx_t_6 = PyList_New(0); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 347, __pyx_L6_error)
    __Pyx_GOTREF(__pyx_t_6);
    if (unlikely(__pyx_v_self->items == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
      __PYX_ERR(3, 347, __pyx_L6_error)
    }
    __pyx_t_1 = __pyx_v_self->items; __Pyx_INCREF(__pyx_t_1); __pyx_t_3 = 0;
    for (;;) {
      if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_1)) break;
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      __pyx_t_7 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_3); __Pyx_INCREF(__pyx_t_7); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(3, 347, __pyx_L6_error)
      #else
      __pyx_t_7 = PySequence_ITEM(__pyx_t_1, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_7)) __PYX_ERR(3, 347, __pyx_L6_error)
      __Pyx_GOTREF(__pyx_t_7);
      #endif
      __Pyx_XDECREF_SET(__pyx_8genexpr4__pyx_v_f, __pyx_t_7);
      __pyx_t_7 = 0;
      __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_8genexpr4__pyx_v_f, __pyx_n_s_encode); if (unlikely(!__pyx_t_7)) __PYX_ERR(3, 347, __pyx_L6_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_tuple__35, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(3, 347, __pyx_L6_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      if (unlikely(__Pyx_ListComp_Append(__pyx_t_6, (PyObject*)__pyx_t_8))) __PYX_ERR(3, 347, __pyx_L6_error)
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_8genexpr4__pyx_v_f); __pyx_8genexpr4__pyx_v_f = 0;
    goto __pyx_L9_exit_scope;
    __pyx_L6_error:;
    __Pyx_XDECREF(__pyx_8genexpr4__pyx_v_f); __pyx_8genexpr4__pyx_v_f = 0;
    goto __pyx_L1_error;
    __pyx_L9_exit_scope:;
  } /* exit inner scope */
  __pyx_t_9 = __pyx_convert_vector_from_py_std_3a__3a_string(__pyx_t_6); if (unlikely(PyErr_Occurred())) __PYX_ERR(3, 347, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_v_fields = __pyx_t_9;

  /* "iter_defs.pxi":348
 * 
 *         cdef vector[string] fields = [f.encode('utf-8') for f in self.items]
 *         cdef Iter *iter = name_lookup_from_dtype(parent.iter, fields)             # <<<<<<<<<<<<<<
 * 
 *         return wrap(to_any(iter))
 */
  try {
    __pyx_t_10 = ss::iter::name_lookup_from_dtype(__pyx_v_parent->iter, __pyx_v_fields);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(3, 348, __pyx_L1_error)
  }
  __pyx_v_iter = __pyx_t_10;

  /* "iter_defs.pxi":350
 *         cdef Iter *iter = name_lookup_from_dtype(parent.iter, fields)
 * 
 *         return wrap(to_any(iter))             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __pyx_t_6 = __pyx_f_5tubes_wrap(ss::iter::to_any<ss::iter::Iter>(__pyx_v_iter)); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 350, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  if (!(likely(((__pyx_t_6) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_6, __pyx_ptype_5tubes_IterWrapper))))) __PYX_ERR(3, 350, __pyx_L1_error)
  __pyx_r = ((struct __pyx_obj_5tubes_IterWrapper *)__pyx_t_6);
  __pyx_t_6 = 0;
  goto __pyx_L0;

  /* "iter_defs.pxi":337
 * 
 * 
 *     cdef IterWrapper _make_iter(self, args):             # <<<<<<<<<<<<<<
 * 
 *         expected_args = len(self._inputs) + len(self._chains)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("tubes.NameLookup._make_iter", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_chains);
  __Pyx_XDECREF(__pyx_v_iters);
  __Pyx_XDECREF((PyObject *)__pyx_v_parent);
  __Pyx_XDECREF(__pyx_8genexpr4__pyx_v_f);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "iter_defs.pxi":353
 * 
 *     @property
 *     def dtype(self):             # <<<<<<<<<<<<<<
 *         return (self.parent.dtype[0], ) * len(self.items)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5tubes_10NameLookup_5dtype_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5tubes_10NameLookup_5dtype_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5tubes_10NameLookup_5dtype___get__(((struct __pyx_obj_5tubes_NameLookup *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5tubes_10NameLookup_5dtype___get__(struct __pyx_obj_5tubes_NameLookup *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "iter_defs.pxi":354
 *     @property
 *     def dtype(self):
 *         return (self.parent.dtype[0], ) * len(self.items)             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self->parent), __pyx_n_s_dtype); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 354, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_t_1, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 354, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __pyx_v_self->items;
  __Pyx_INCREF(__pyx_t_1);
  if (unlikely(__pyx_t_1 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(3, 354, __pyx_L1_error)
  }
  __pyx_t_3 = PyList_GET_SIZE(__pyx_t_1); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1))) __PYX_ERR(3, 354, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyTuple_New(1 * ((__pyx_t_3<0) ? 0:__pyx_t_3)); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 354, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  { Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < __pyx_t_3; __pyx_temp++) {
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_GIVEREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_1, __pyx_temp, __pyx_t_2);
    }
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "iter_defs.pxi":353
 * 
 *     @property
 *     def dtype(self):             # <<<<<<<<<<<<<<
 *         return (self.parent.dtype[0], ) * len(self.items)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("tubes.NameLookup.dtype.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "iter_defs.pxi":357
 * 
 *     @property
 *     def _chains(self):             # <<<<<<<<<<<<<<
 *         return ()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5tubes_10NameLookup_7_chains_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5tubes_10NameLookup_7_chains_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5tubes_10NameLookup_7_chains___get__(((struct __pyx_obj_5tubes_NameLookup *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5tubes_10NameLookup_7_chains___get__(CYTHON_UNUSED struct __pyx_obj_5tubes_NameLookup *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "iter_defs.pxi":358
 *     @property
 *     def _chains(self):
 *         return ()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_empty_tuple);
  __pyx_r = __pyx_empty_tuple;
  goto __pyx_L0;

  /* "iter_defs.pxi":357
 * 
 *     @property
 *     def _chains(self):             # <<<<<<<<<<<<<<
 *         return ()
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "iter_defs.pxi":362
 * 
 *     @property
 *     def _inputs(self):             # <<<<<<<<<<<<<<
 *         return (self.parent, )
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5tubes_10NameLookup_7_inputs_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5tubes_10NameLookup_7_inputs_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5tubes_10NameLookup_7_inputs___get__(((struct __pyx_obj_5tubes_NameLookup *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5tubes_10NameLookup_7_inputs___get__(struct __pyx_obj_5tubes_NameLookup *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "iter_defs.pxi":363
 *     @property
 *     def _inputs(self):
 *         return (self.parent, )             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 363, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->parent));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self->parent));
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_v_self->parent));
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "iter_defs.pxi":362
 * 
 *     @property
 *     def _inputs(self):             # <<<<<<<<<<<<<<
 *         return (self.parent, )
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("tubes.NameLookup._inputs.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "iter_defs.pxi":367
 * 
 * 
 *     cpdef _describe_self(self):             # <<<<<<<<<<<<<<
 *         return f"NameLookup({repr(self.items)})"
 * 
 */

static PyObject *__pyx_pw_5tubes_10NameLookup_3_describe_self(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_f_5tubes_10NameLookup__describe_self(struct __pyx_obj_5tubes_NameLookup *__pyx_v_self, CYTHON_UNUSED int __pyx_skip_dispatch) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  Py_UCS4 __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("_describe_self", 0);

  /* "iter_defs.pxi":368
 * 
 *     cpdef _describe_self(self):
 *         return f"NameLookup({repr(self.items)})"             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 368, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = 0;
  __pyx_t_3 = 127;
  __Pyx_INCREF(__pyx_kp_u_NameLookup);
  __pyx_t_2 += 11;
  __Pyx_GIVEREF(__pyx_kp_u_NameLookup);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_kp_u_NameLookup);
  __pyx_t_4 = __pyx_v_self->items;
  __Pyx_INCREF(__pyx_t_4);
  __pyx_t_5 = PyObject_Repr(__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 368, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_FormatSimple(__pyx_t_5, __pyx_empty_unicode); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 368, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_3 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) > __pyx_t_3) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) : __pyx_t_3;
  __pyx_t_2 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_4);
  __pyx_t_4 = 0;
  __Pyx_INCREF(__pyx_kp_u__27);
  __pyx_t_2 += 1;
  __Pyx_GIVEREF(__pyx_kp_u__27);
  PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_kp_u__27);
  __pyx_t_4 = __Pyx_PyUnicode_Join(__pyx_t_1, 3, __pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 368, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "iter_defs.pxi":367
 * 
 * 
 *     cpdef _describe_self(self):             # <<<<<<<<<<<<<<
 *         return f"NameLookup({repr(self.items)})"
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("tubes.NameLookup._describe_self", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5tubes_10NameLookup_3_describe_self(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5tubes_10NameLookup_2_describe_self[] = "NameLookup._describe_self(self)";
static PyObject *__pyx_pw_5tubes_10NameLookup_3_describe_self(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_describe_self (wrapper)", 0);
  __pyx_r = __pyx_pf_5tubes_10NameLookup_2_describe_self(((struct __pyx_obj_5tubes_NameLookup *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5tubes_10NameLookup_2_describe_self(struct __pyx_obj_5tubes_NameLookup *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("_describe_self", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_5tubes_10NameLookup__describe_self(__pyx_v_self, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 367, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("tubes.NameLookup._describe_self", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "iter_defs.pxi":371
 * 
 * 
 *     cdef lookup_name(self, str name, default):             # <<<<<<<<<<<<<<
 *         try:
 *             index = self.items.index(name)
 */

static PyObject *__pyx_f_5tubes_10NameLookup_lookup_name(struct __pyx_obj_5tubes_NameLookup *__pyx_v_self, PyObject *__pyx_v_name, PyObject *__pyx_v_default) {
  PyObject *__pyx_v_index = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  int __pyx_t_9;
  Py_ssize_t __pyx_t_10;
  size_t __pyx_t_11;
  __Pyx_RefNannySetupContext("lookup_name", 0);

  /* "iter_defs.pxi":372
 * 
 *     cdef lookup_name(self, str name, default):
 *         try:             # <<<<<<<<<<<<<<
 *             index = self.items.index(name)
 *         except ValueError:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "iter_defs.pxi":373
 *     cdef lookup_name(self, str name, default):
 *         try:
 *             index = self.items.index(name)             # <<<<<<<<<<<<<<
 *         except ValueError:
 *             self.items.append(name)
 */
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->items, __pyx_n_s_index); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 373, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
        __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
        if (likely(__pyx_t_6)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
          __Pyx_INCREF(__pyx_t_6);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_5, function);
        }
      }
      if (!__pyx_t_6) {
        __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_v_name); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 373, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_4);
      } else {
        #if CYTHON_FAST_PYCALL
        if (PyFunction_Check(__pyx_t_5)) {
          PyObject *__pyx_temp[2] = {__pyx_t_6, __pyx_v_name};
          __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 373, __pyx_L3_error)
          __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
          __Pyx_GOTREF(__pyx_t_4);
        } else
        #endif
        #if CYTHON_FAST_PYCCALL
        if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
          PyObject *__pyx_temp[2] = {__pyx_t_6, __pyx_v_name};
          __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 373, __pyx_L3_error)
          __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
          __Pyx_GOTREF(__pyx_t_4);
        } else
        #endif
        {
          __pyx_t_7 = PyTuple_New(1+1); if (unlikely(!__pyx_t_7)) __PYX_ERR(3, 373, __pyx_L3_error)
          __Pyx_GOTREF(__pyx_t_7);
          __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_6); __pyx_t_6 = NULL;
          __Pyx_INCREF(__pyx_v_name);
          __Pyx_GIVEREF(__pyx_v_name);
          PyTuple_SET_ITEM(__pyx_t_7, 0+1, __pyx_v_name);
          __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_7, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 373, __pyx_L3_error)
          __Pyx_GOTREF(__pyx_t_4);
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        }
      }
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_v_index = __pyx_t_4;
      __pyx_t_4 = 0;

      /* "iter_defs.pxi":372
 * 
 *     cdef lookup_name(self, str name, default):
 *         try:             # <<<<<<<<<<<<<<
 *             index = self.items.index(name)
 *         except ValueError:
 */
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L8_try_end;
    __pyx_L3_error:;
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "iter_defs.pxi":374
 *         try:
 *             index = self.items.index(name)
 *         except ValueError:             # <<<<<<<<<<<<<<
 *             self.items.append(name)
 *             index = len(self.items) - 1
 */
    __pyx_t_8 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_ValueError);
    if (__pyx_t_8) {
      __Pyx_AddTraceback("tubes.NameLookup.lookup_name", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_4, &__pyx_t_5, &__pyx_t_7) < 0) __PYX_ERR(3, 374, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GOTREF(__pyx_t_7);

      /* "iter_defs.pxi":375
 *             index = self.items.index(name)
 *         except ValueError:
 *             self.items.append(name)             # <<<<<<<<<<<<<<
 *             index = len(self.items) - 1
 *         return self.get_slot_shared(index, default)
 */
      if (unlikely(__pyx_v_self->items == Py_None)) {
        PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "append");
        __PYX_ERR(3, 375, __pyx_L5_except_error)
      }
      __pyx_t_9 = __Pyx_PyList_Append(__pyx_v_self->items, __pyx_v_name); if (unlikely(__pyx_t_9 == ((int)-1))) __PYX_ERR(3, 375, __pyx_L5_except_error)

      /* "iter_defs.pxi":376
 *         except ValueError:
 *             self.items.append(name)
 *             index = len(self.items) - 1             # <<<<<<<<<<<<<<
 *         return self.get_slot_shared(index, default)
 * 
 */
      __pyx_t_6 = __pyx_v_self->items;
      __Pyx_INCREF(__pyx_t_6);
      if (unlikely(__pyx_t_6 == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
        __PYX_ERR(3, 376, __pyx_L5_except_error)
      }
      __pyx_t_10 = PyList_GET_SIZE(__pyx_t_6); if (unlikely(__pyx_t_10 == ((Py_ssize_t)-1))) __PYX_ERR(3, 376, __pyx_L5_except_error)
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_6 = PyInt_FromSsize_t((__pyx_t_10 - 1)); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 376, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_XDECREF_SET(__pyx_v_index, __pyx_t_6);
      __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      goto __pyx_L4_exception_handled;
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "iter_defs.pxi":372
 * 
 *     cdef lookup_name(self, str name, default):
 *         try:             # <<<<<<<<<<<<<<
 *             index = self.items.index(name)
 *         except ValueError:
 */
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L4_exception_handled:;
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    __pyx_L8_try_end:;
  }

  /* "iter_defs.pxi":377
 *             self.items.append(name)
 *             index = len(self.items) - 1
 *         return self.get_slot_shared(index, default)             # <<<<<<<<<<<<<<
 * 
 *     cdef get_slot_shared(self, size_t index, default):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_11 = __Pyx_PyInt_As_size_t(__pyx_v_index); if (unlikely((__pyx_t_11 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(3, 377, __pyx_L1_error)
  __pyx_t_7 = __pyx_f_5tubes_10NameLookup_get_slot_shared(__pyx_v_self, __pyx_t_11, __pyx_v_default); if (unlikely(!__pyx_t_7)) __PYX_ERR(3, 377, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_r = __pyx_t_7;
  __pyx_t_7 = 0;
  goto __pyx_L0;

  /* "iter_defs.pxi":371
 * 
 * 
 *     cdef lookup_name(self, str name, default):             # <<<<<<<<<<<<<<
 *         try:
 *             index = self.items.index(name)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("tubes.NameLookup.lookup_name", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_index);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "iter_defs.pxi":379
 *         return self.get_slot_shared(index, default)
 * 
 *     cdef get_slot_shared(self, size_t index, default):             # <<<<<<<<<<<<<<
 *         cdef Tube tube = SlotGet(self, index, default)
 *         if self._name_lookups is None:
 */

static PyObject *__pyx_f_5tubes_10NameLookup_get_slot_shared(struct __pyx_obj_5tubes_NameLookup *__pyx_v_self, size_t __pyx_v_index, PyObject *__pyx_v_default) {
  struct __pyx_obj_5tubes_Tube *__pyx_v_tube = 0;
  struct __pyx_obj_5tubes_SlotGet *__pyx_v_shared_index_get = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  __Pyx_RefNannySetupContext("get_slot_shared", 0);

  /* "iter_defs.pxi":380
 * 
 *     cdef get_slot_shared(self, size_t index, default):
 *         cdef Tube tube = SlotGet(self, index, default)             # <<<<<<<<<<<<<<
 *         if self._name_lookups is None:
 *             self._name_lookups = {}
 */
  __pyx_t_1 = __Pyx_PyInt_FromSize_t(__pyx_v_index); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 380, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(3); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 380, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_1);
  __Pyx_INCREF(__pyx_v_default);
  __Pyx_GIVEREF(__pyx_v_default);
  PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_v_default);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_5tubes_SlotGet), __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 380, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_tube = ((struct __pyx_obj_5tubes_Tube *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "iter_defs.pxi":381
 *     cdef get_slot_shared(self, size_t index, default):
 *         cdef Tube tube = SlotGet(self, index, default)
 *         if self._name_lookups is None:             # <<<<<<<<<<<<<<
 *             self._name_lookups = {}
 *         if index not in self._name_lookups:
 */
  __pyx_t_3 = (__pyx_v_self->_name_lookups == ((PyObject*)Py_None));
  __pyx_t_4 = (__pyx_t_3 != 0);
  if (__pyx_t_4) {

    /* "iter_defs.pxi":382
 *         cdef Tube tube = SlotGet(self, index, default)
 *         if self._name_lookups is None:
 *             self._name_lookups = {}             # <<<<<<<<<<<<<<
 *         if index not in self._name_lookups:
 *             shared_index_get = SlotGet(self, index, b"")
 */
    __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 382, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_1);
    __Pyx_GOTREF(__pyx_v_self->_name_lookups);
    __Pyx_DECREF(__pyx_v_self->_name_lookups);
    __pyx_v_self->_name_lookups = ((PyObject*)__pyx_t_1);
    __pyx_t_1 = 0;

    /* "iter_defs.pxi":381
 *     cdef get_slot_shared(self, size_t index, default):
 *         cdef Tube tube = SlotGet(self, index, default)
 *         if self._name_lookups is None:             # <<<<<<<<<<<<<<
 *             self._name_lookups = {}
 *         if index not in self._name_lookups:
 */
  }

  /* "iter_defs.pxi":383
 *         if self._name_lookups is None:
 *             self._name_lookups = {}
 *         if index not in self._name_lookups:             # <<<<<<<<<<<<<<
 *             shared_index_get = SlotGet(self, index, b"")
 *             self._name_lookups[index] = NameLookup(shared_index_get, [])
 */
  __pyx_t_1 = __Pyx_PyInt_FromSize_t(__pyx_v_index); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 383, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(__pyx_v_self->_name_lookups == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(3, 383, __pyx_L1_error)
  }
  __pyx_t_4 = (__Pyx_PyDict_ContainsTF(__pyx_t_1, __pyx_v_self->_name_lookups, Py_NE)); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(3, 383, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = (__pyx_t_4 != 0);
  if (__pyx_t_3) {

    /* "iter_defs.pxi":384
 *             self._name_lookups = {}
 *         if index not in self._name_lookups:
 *             shared_index_get = SlotGet(self, index, b"")             # <<<<<<<<<<<<<<
 *             self._name_lookups[index] = NameLookup(shared_index_get, [])
 *         tube._set_name_lookup(self._name_lookups[index])
 */
    __pyx_t_1 = __Pyx_PyInt_FromSize_t(__pyx_v_index); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 384, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PyTuple_New(3); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 384, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(((PyObject *)__pyx_v_self));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
    PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_v_self));
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_1);
    __Pyx_INCREF(__pyx_kp_b__36);
    __Pyx_GIVEREF(__pyx_kp_b__36);
    PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_kp_b__36);
    __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_5tubes_SlotGet), __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 384, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_v_shared_index_get = ((struct __pyx_obj_5tubes_SlotGet *)__pyx_t_1);
    __pyx_t_1 = 0;

    /* "iter_defs.pxi":385
 *         if index not in self._name_lookups:
 *             shared_index_get = SlotGet(self, index, b"")
 *             self._name_lookups[index] = NameLookup(shared_index_get, [])             # <<<<<<<<<<<<<<
 *         tube._set_name_lookup(self._name_lookups[index])
 *         return tube
 */
    __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 385, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 385, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(((PyObject *)__pyx_v_shared_index_get));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_shared_index_get));
    PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_v_shared_index_get));
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_1);
    __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_5tubes_NameLookup), __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 385, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(__pyx_v_self->_name_lookups == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(3, 385, __pyx_L1_error)
    }
    __pyx_t_2 = __Pyx_PyInt_FromSize_t(__pyx_v_index); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 385, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    if (unlikely(PyDict_SetItem(__pyx_v_self->_name_lookups, __pyx_t_2, __pyx_t_1) < 0)) __PYX_ERR(3, 385, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "iter_defs.pxi":383
 *         if self._name_lookups is None:
 *             self._name_lookups = {}
 *         if index not in self._name_lookups:             # <<<<<<<<<<<<<<
 *             shared_index_get = SlotGet(self, index, b"")
 *             self._name_lookups[index] = NameLookup(shared_index_get, [])
 */
  }

  /* "iter_defs.pxi":386
 *             shared_index_get = SlotGet(self, index, b"")
 *             self._name_lookups[index] = NameLookup(shared_index_get, [])
 *         tube._set_name_lookup(self._name_lookups[index])             # <<<<<<<<<<<<<<
 *         return tube
 * 
 */
  if (unlikely(__pyx_v_self->_name_lookups == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(3, 386, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyInt_FromSize_t(__pyx_v_index); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 386, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyDict_GetItem(__pyx_v_self->_name_lookups, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 386, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_ptype_5tubes_NameLookup))))) __PYX_ERR(3, 386, __pyx_L1_error)
  __pyx_t_1 = ((struct __pyx_vtabstruct_5tubes_Tube *)__pyx_v_tube->__pyx_vtab)->_set_name_lookup(__pyx_v_tube, ((struct __pyx_obj_5tubes_NameLookup *)__pyx_t_2)); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 386, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "iter_defs.pxi":387
 *             self._name_lookups[index] = NameLookup(shared_index_get, [])
 *         tube._set_name_lookup(self._name_lookups[index])
 *         return tube             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_tube));
  __pyx_r = ((PyObject *)__pyx_v_tube);
  goto __pyx_L0;

  /* "iter_defs.pxi":379
 *         return self.get_slot_shared(index, default)
 * 
 *     cdef get_slot_shared(self, size_t index, default):             # <<<<<<<<<<<<<<
 *         cdef Tube tube = SlotGet(self, index, default)
 *         if self._name_lookups is None:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("tubes.NameLookup.get_slot_shared", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_tube);
  __Pyx_XDECREF((PyObject *)__pyx_v_shared_index_get);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "iter_defs.pxi":326
 * cdef class NameLookup(Tube):  # AUTO GENERATED FROM tools/defn2.tmpl
 * 
 *     cdef public Tube parent             # <<<<<<<<<<<<<<
 *     cdef public list items
 *     cdef public dict _name_lookups
 */

/* Python wrapper */
static PyObject *__pyx_pw_5tubes_10NameLookup_6parent_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5tubes_10NameLookup_6parent_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5tubes_10NameLookup_6parent___get__(((struct __pyx_obj_5tubes_NameLookup *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5tubes_10NameLookup_6parent___get__(struct __pyx_obj_5tubes_NameLookup *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->parent));
  __pyx_r = ((PyObject *)__pyx_v_self->parent);
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_5tubes_10NameLookup_6parent_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_5tubes_10NameLookup_6parent_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5tubes_10NameLookup_6parent_2__set__(((struct __pyx_obj_5tubes_NameLookup *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5tubes_10NameLookup_6parent_2__set__(struct __pyx_obj_5tubes_NameLookup *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__set__", 0);
  if (!(likely(((__pyx_v_value) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_value, __pyx_ptype_5tubes_Tube))))) __PYX_ERR(3, 326, __pyx_L1_error)
  __pyx_t_1 = __pyx_v_value;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->parent);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->parent));
  __pyx_v_self->parent = ((struct __pyx_obj_5tubes_Tube *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("tubes.NameLookup.parent.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_5tubes_10NameLookup_6parent_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_5tubes_10NameLookup_6parent_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5tubes_10NameLookup_6parent_4__del__(((struct __pyx_obj_5tubes_NameLookup *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5tubes_10NameLookup_6parent_4__del__(struct __pyx_obj_5tubes_NameLookup *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->parent);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->parent));
  __pyx_v_self->parent = ((struct __pyx_obj_5tubes_Tube *)Py_None);

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "iter_defs.pxi":327
 * 
 *     cdef public Tube parent
 *     cdef public list items             # <<<<<<<<<<<<<<
 *     cdef public dict _name_lookups
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5tubes_10NameLookup_5items_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5tubes_10NameLookup_5items_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5tubes_10NameLookup_5items___get__(((struct __pyx_obj_5tubes_NameLookup *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5tubes_10NameLookup_5items___get__(struct __pyx_obj_5tubes_NameLookup *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->items);
  __pyx_r = __pyx_v_self->items;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_5tubes_10NameLookup_5items_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_5tubes_10NameLookup_5items_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5tubes_10NameLookup_5items_2__set__(((struct __pyx_obj_5tubes_NameLookup *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5tubes_10NameLookup_5items_2__set__(struct __pyx_obj_5tubes_NameLookup *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__set__", 0);
  if (!(likely(PyList_CheckExact(__pyx_v_value))||((__pyx_v_value) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(__pyx_v_value)->tp_name), 0))) __PYX_ERR(3, 327, __pyx_L1_error)
  __pyx_t_1 = __pyx_v_value;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->items);
  __Pyx_DECREF(__pyx_v_self->items);
  __pyx_v_self->items = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("tubes.NameLookup.items.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_5tubes_10NameLookup_5items_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_5tubes_10NameLookup_5items_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5tubes_10NameLookup_5items_4__del__(((struct __pyx_obj_5tubes_NameLookup *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5tubes_10NameLookup_5items_4__del__(struct __pyx_obj_5tubes_NameLookup *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->items);
  __Pyx_DECREF(__pyx_v_self->items);
  __pyx_v_self->items = ((PyObject*)Py_None);

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "iter_defs.pxi":328
 *     cdef public Tube parent
 *     cdef public list items
 *     cdef public dict _name_lookups             # <<<<<<<<<<<<<<
 * 
 *     def __cinit__(self, Tube parent, list items, dict _name_lookups=None):
 */

/* Python wrapper */
static PyObject *__pyx_pw_5tubes_10NameLookup_13_name_lookups_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5tubes_10NameLookup_13_name_lookups_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5tubes_10NameLookup_13_name_lookups___get__(((struct __pyx_obj_5tubes_NameLookup *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5tubes_10NameLookup_13_name_lookups___get__(struct __pyx_obj_5tubes_NameLookup *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->_name_lookups);
  __pyx_r = __pyx_v_self->_name_lookups;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_5tubes_10NameLookup_13_name_lookups_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_5tubes_10NameLookup_13_name_lookups_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5tubes_10NameLookup_13_name_lookups_2__set__(((struct __pyx_obj_5tubes_NameLookup *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5tubes_10NameLookup_13_name_lookups_2__set__(struct __pyx_obj_5tubes_NameLookup *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__set__", 0);
  if (!(likely(PyDict_CheckExact(__pyx_v_value))||((__pyx_v_value) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "dict", Py_TYPE(__pyx_v_value)->tp_name), 0))) __PYX_ERR(3, 328, __pyx_L1_error)
  __pyx_t_1 = __pyx_v_value;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->_name_lookups);
  __Pyx_DECREF(__pyx_v_self->_name_lookups);
  __pyx_v_self->_name_lookups = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("tubes.NameLookup._name_lookups.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_5tubes_10NameLookup_13_name_lookups_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_5tubes_10NameLookup_13_name_lookups_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5tubes_10NameLookup_13_name_lookups_4__del__(((struct __pyx_obj_5tubes_NameLookup *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5tubes_10NameLookup_13_name_lookups_4__del__(struct __pyx_obj_5tubes_NameLookup *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->_name_lookups);
  __Pyx_DECREF(__pyx_v_self->_name_lookups);
  __pyx_v_self->_name_lookups = ((PyObject*)Py_None);

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_5tubes_10NameLookup_5__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5tubes_10NameLookup_4__reduce_cython__[] = "NameLookup.__reduce_cython__(self)";
static PyObject *__pyx_pw_5tubes_10NameLookup_5__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5tubes_10NameLookup_4__reduce_cython__(((struct __pyx_obj_5tubes_NameLookup *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5tubes_10NameLookup_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5tubes_NameLookup *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__37, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("tubes.NameLookup.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_5tubes_10NameLookup_7__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static char __pyx_doc_5tubes_10NameLookup_6__setstate_cython__[] = "NameLookup.__setstate_cython__(self, __pyx_state)";
static PyObject *__pyx_pw_5tubes_10NameLookup_7__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5tubes_10NameLookup_6__setstate_cython__(((struct __pyx_obj_5tubes_NameLookup *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5tubes_10NameLookup_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5tubes_NameLookup *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__38, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("tubes.NameLookup.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "iter_defs.pxi":397
 *     cdef public list inputs
 * 
 *     def __cinit__(self, Tube parent, list inputs):             # <<<<<<<<<<<<<<
 *         self.parent = parent
 *         self.inputs = inputs
 */

/* Python wrapper */
static int __pyx_pw_5tubes_5Multi_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_5tubes_5Multi_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_5tubes_Tube *__pyx_v_parent = 0;
  PyObject *__pyx_v_inputs = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_parent,&__pyx_n_s_inputs_2,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_parent)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_inputs_2)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 2, 2, 1); __PYX_ERR(3, 397, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(3, 397, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_parent = ((struct __pyx_obj_5tubes_Tube *)values[0]);
    __pyx_v_inputs = ((PyObject*)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(3, 397, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("tubes.Multi.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_parent), __pyx_ptype_5tubes_Tube, 1, "parent", 0))) __PYX_ERR(3, 397, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_inputs), (&PyList_Type), 1, "inputs", 1))) __PYX_ERR(3, 397, __pyx_L1_error)
  __pyx_r = __pyx_pf_5tubes_5Multi___cinit__(((struct __pyx_obj_5tubes_Multi *)__pyx_v_self), __pyx_v_parent, __pyx_v_inputs);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5tubes_5Multi___cinit__(struct __pyx_obj_5tubes_Multi *__pyx_v_self, struct __pyx_obj_5tubes_Tube *__pyx_v_parent, PyObject *__pyx_v_inputs) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "iter_defs.pxi":398
 * 
 *     def __cinit__(self, Tube parent, list inputs):
 *         self.parent = parent             # <<<<<<<<<<<<<<
 *         self.inputs = inputs
 * 
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_parent));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_parent));
  __Pyx_GOTREF(__pyx_v_self->parent);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->parent));
  __pyx_v_self->parent = __pyx_v_parent;

  /* "iter_defs.pxi":399
 *     def __cinit__(self, Tube parent, list inputs):
 *         self.parent = parent
 *         self.inputs = inputs             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_INCREF(__pyx_v_inputs);
  __Pyx_GIVEREF(__pyx_v_inputs);
  __Pyx_GOTREF(__pyx_v_self->inputs);
  __Pyx_DECREF(__pyx_v_self->inputs);
  __pyx_v_self->inputs = __pyx_v_inputs;

  /* "iter_defs.pxi":397
 *     cdef public list inputs
 * 
 *     def __cinit__(self, Tube parent, list inputs):             # <<<<<<<<<<<<<<
 *         self.parent = parent
 *         self.inputs = inputs
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "iter_defs.pxi":403
 * 
 * 
 *     cdef IterWrapper _make_iter(self, args):             # <<<<<<<<<<<<<<
 * 
 *         expected_args = len(self._inputs) + len(self._chains)
 */

static struct __pyx_obj_5tubes_IterWrapper *__pyx_f_5tubes_5Multi__make_iter(struct __pyx_obj_5tubes_Multi *__pyx_v_self, PyObject *__pyx_v_args) {
  Py_ssize_t __pyx_v_expected_args;
  CYTHON_UNUSED PyObject *__pyx_v_chains = NULL;
  PyObject *__pyx_v_iters = NULL;
  CYTHON_UNUSED struct __pyx_obj_5tubes_IterWrapper *__pyx_v_parent = 0;
  ss::iter::MultiIter *__pyx_v_iter;
  struct __pyx_obj_5tubes_IterWrapper *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  int __pyx_t_4;
  Py_UCS4 __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  ss::iter::MultiIter *__pyx_t_7;
  __Pyx_RefNannySetupContext("_make_iter", 0);

  /* "iter_defs.pxi":405
 *     cdef IterWrapper _make_iter(self, args):
 * 
 *         expected_args = len(self._inputs) + len(self._chains)             # <<<<<<<<<<<<<<
 *         if len(args) != expected_args:
 *             raise ValueError(f"Expected {expected_args} inputs to _make_iter, got {len(args)}")
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_inputs); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 405, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Length(__pyx_t_1); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1))) __PYX_ERR(3, 405, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_chains); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 405, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyObject_Length(__pyx_t_1); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1))) __PYX_ERR(3, 405, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_expected_args = (__pyx_t_2 + __pyx_t_3);

  /* "iter_defs.pxi":406
 * 
 *         expected_args = len(self._inputs) + len(self._chains)
 *         if len(args) != expected_args:             # <<<<<<<<<<<<<<
 *             raise ValueError(f"Expected {expected_args} inputs to _make_iter, got {len(args)}")
 * 
 */
  __pyx_t_3 = PyObject_Length(__pyx_v_args); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1))) __PYX_ERR(3, 406, __pyx_L1_error)
  __pyx_t_4 = ((__pyx_t_3 != __pyx_v_expected_args) != 0);
  if (__pyx_t_4) {

    /* "iter_defs.pxi":407
 *         expected_args = len(self._inputs) + len(self._chains)
 *         if len(args) != expected_args:
 *             raise ValueError(f"Expected {expected_args} inputs to _make_iter, got {len(args)}")             # <<<<<<<<<<<<<<
 * 
 *         chains = args[:len(self._chains)]
 */
    __pyx_t_1 = PyTuple_New(4); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 407, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = 0;
    __pyx_t_5 = 127;
    __Pyx_INCREF(__pyx_kp_u_Expected);
    __pyx_t_3 += 9;
    __Pyx_GIVEREF(__pyx_kp_u_Expected);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_kp_u_Expected);
    __pyx_t_6 = __Pyx_PyUnicode_From_Py_ssize_t(__pyx_v_expected_args, 0, ' ', 'd'); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 407, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_3 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_6);
    __pyx_t_6 = 0;
    __Pyx_INCREF(__pyx_kp_u_inputs_to__make_iter_got);
    __pyx_t_3 += 27;
    __Pyx_GIVEREF(__pyx_kp_u_inputs_to__make_iter_got);
    PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_kp_u_inputs_to__make_iter_got);
    __pyx_t_2 = PyObject_Length(__pyx_v_args); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1))) __PYX_ERR(3, 407, __pyx_L1_error)
    __pyx_t_6 = __Pyx_PyUnicode_From_Py_ssize_t(__pyx_t_2, 0, ' ', 'd'); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 407, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_3 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_1, 3, __pyx_t_6);
    __pyx_t_6 = 0;
    __pyx_t_6 = __Pyx_PyUnicode_Join(__pyx_t_1, 4, __pyx_t_3, __pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 407, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 407, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_6);
    __pyx_t_6 = 0;
    __pyx_t_6 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_t_1, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 407, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_Raise(__pyx_t_6, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __PYX_ERR(3, 407, __pyx_L1_error)

    /* "iter_defs.pxi":406
 * 
 *         expected_args = len(self._inputs) + len(self._chains)
 *         if len(args) != expected_args:             # <<<<<<<<<<<<<<
 *             raise ValueError(f"Expected {expected_args} inputs to _make_iter, got {len(args)}")
 * 
 */
  }

  /* "iter_defs.pxi":409
 *             raise ValueError(f"Expected {expected_args} inputs to _make_iter, got {len(args)}")
 * 
 *         chains = args[:len(self._chains)]             # <<<<<<<<<<<<<<
 *         iters = args[len(self._chains):]
 *         cdef IterWrapper parent = iters[0]
 */
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_chains); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 409, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_3 = PyObject_Length(__pyx_t_6); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1))) __PYX_ERR(3, 409, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = __Pyx_PyObject_GetSlice(__pyx_v_args, 0, __pyx_t_3, NULL, NULL, NULL, 0, 1, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 409, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_v_chains = __pyx_t_6;
  __pyx_t_6 = 0;

  /* "iter_defs.pxi":410
 * 
 *         chains = args[:len(self._chains)]
 *         iters = args[len(self._chains):]             # <<<<<<<<<<<<<<
 *         cdef IterWrapper parent = iters[0]
 * 
 */
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_chains); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 410, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_3 = PyObject_Length(__pyx_t_6); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1))) __PYX_ERR(3, 410, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = __Pyx_PyObject_GetSlice(__pyx_v_args, __pyx_t_3, 0, NULL, NULL, NULL, 1, 0, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 410, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_v_iters = __pyx_t_6;
  __pyx_t_6 = 0;

  /* "iter_defs.pxi":411
 *         chains = args[:len(self._chains)]
 *         iters = args[len(self._chains):]
 *         cdef IterWrapper parent = iters[0]             # <<<<<<<<<<<<<<
 * 
 *         cdef MultiIter *iter = new MultiIter(self._make_iters(args))
 */
  __pyx_t_6 = __Pyx_GetItemInt(__pyx_v_iters, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 411, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  if (!(likely(((__pyx_t_6) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_6, __pyx_ptype_5tubes_IterWrapper))))) __PYX_ERR(3, 411, __pyx_L1_error)
  __pyx_v_parent = ((struct __pyx_obj_5tubes_IterWrapper *)__pyx_t_6);
  __pyx_t_6 = 0;

  /* "iter_defs.pxi":413
 *         cdef IterWrapper parent = iters[0]
 * 
 *         cdef MultiIter *iter = new MultiIter(self._make_iters(args))             # <<<<<<<<<<<<<<
 * 
 *         return wrap(to_any(iter))
 */
  if (!(likely(PyList_CheckExact(__pyx_v_args))||((__pyx_v_args) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(__pyx_v_args)->tp_name), 0))) __PYX_ERR(3, 413, __pyx_L1_error)
  try {
    __pyx_t_7 = new ss::iter::MultiIter(__pyx_f_5tubes_5Multi__make_iters(__pyx_v_self, ((PyObject*)__pyx_v_args)));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(3, 413, __pyx_L1_error)
  }
  __pyx_v_iter = __pyx_t_7;

  /* "iter_defs.pxi":415
 *         cdef MultiIter *iter = new MultiIter(self._make_iters(args))
 * 
 *         return wrap(to_any(iter))             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __pyx_t_6 = __pyx_f_5tubes_wrap(ss::iter::to_any<ss::iter::MultiIter>(__pyx_v_iter)); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 415, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  if (!(likely(((__pyx_t_6) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_6, __pyx_ptype_5tubes_IterWrapper))))) __PYX_ERR(3, 415, __pyx_L1_error)
  __pyx_r = ((struct __pyx_obj_5tubes_IterWrapper *)__pyx_t_6);
  __pyx_t_6 = 0;
  goto __pyx_L0;

  /* "iter_defs.pxi":403
 * 
 * 
 *     cdef IterWrapper _make_iter(self, args):             # <<<<<<<<<<<<<<
 * 
 *         expected_args = len(self._inputs) + len(self._chains)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("tubes.Multi._make_iter", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_chains);
  __Pyx_XDECREF(__pyx_v_iters);
  __Pyx_XDECREF((PyObject *)__pyx_v_parent);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "iter_defs.pxi":418
 * 
 *     @property
 *     def dtype(self):             # <<<<<<<<<<<<<<
 *         return tuple(d for t in self._inputs[1:] for d in t.dtype)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5tubes_5Multi_5dtype_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5tubes_5Multi_5dtype_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5tubes_5Multi_5dtype___get__(((struct __pyx_obj_5tubes_Multi *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_5tubes_5Multi_5dtype_7__get___2generator4(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "iter_defs.pxi":419
 *     @property
 *     def dtype(self):
 *         return tuple(d for t in self._inputs[1:] for d in t.dtype)             # <<<<<<<<<<<<<<
 * 
 *     @property
 */

static PyObject *__pyx_pf_5tubes_5Multi_5dtype_7__get___genexpr(PyObject *__pyx_self) {
  struct __pyx_obj_5tubes___pyx_scope_struct_8_genexpr *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("genexpr", 0);
  __pyx_cur_scope = (struct __pyx_obj_5tubes___pyx_scope_struct_8_genexpr *)__pyx_tp_new_5tubes___pyx_scope_struct_8_genexpr(__pyx_ptype_5tubes___pyx_scope_struct_8_genexpr, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_5tubes___pyx_scope_struct_8_genexpr *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(3, 419, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_outer_scope = (struct __pyx_obj_5tubes___pyx_scope_struct_7___get__ *) __pyx_self;
  __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_outer_scope));
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_outer_scope);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_5tubes_5Multi_5dtype_7__get___2generator4, (PyObject *) __pyx_cur_scope, __pyx_n_s_genexpr, __pyx_n_s_Multi___get___locals_genexpr, __pyx_n_s_tubes); if (unlikely(!gen)) __PYX_ERR(3, 419, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("tubes.Multi.dtype.__get__.genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_5tubes_5Multi_5dtype_7__get___2generator4(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_5tubes___pyx_scope_struct_8_genexpr *__pyx_cur_scope = ((struct __pyx_obj_5tubes___pyx_scope_struct_8_genexpr *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *(*__pyx_t_4)(PyObject *);
  PyObject *__pyx_t_5 = NULL;
  Py_ssize_t __pyx_t_6;
  PyObject *(*__pyx_t_7)(PyObject *);
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("genexpr", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L8_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(3, 419, __pyx_L1_error)
  if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_self)) { __Pyx_RaiseClosureNameError("self"); __PYX_ERR(3, 419, __pyx_L1_error) }
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_outer_scope->__pyx_v_self), __pyx_n_s_inputs); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 419, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetSlice(__pyx_t_1, 1, 0, NULL, NULL, &__pyx_slice__39, 1, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 419, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (likely(PyList_CheckExact(__pyx_t_2)) || PyTuple_CheckExact(__pyx_t_2)) {
    __pyx_t_1 = __pyx_t_2; __Pyx_INCREF(__pyx_t_1); __pyx_t_3 = 0;
    __pyx_t_4 = NULL;
  } else {
    __pyx_t_3 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 419, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 419, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  for (;;) {
    if (likely(!__pyx_t_4)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_2 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_3); __Pyx_INCREF(__pyx_t_2); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(3, 419, __pyx_L1_error)
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_1, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 419, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      } else {
        if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_3); __Pyx_INCREF(__pyx_t_2); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(3, 419, __pyx_L1_error)
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_1, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 419, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      }
    } else {
      __pyx_t_2 = __pyx_t_4(__pyx_t_1);
      if (unlikely(!__pyx_t_2)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(3, 419, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_2);
    }
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_t);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_t, __pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_2);
    __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_t, __pyx_n_s_dtype); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 419, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    if (likely(PyList_CheckExact(__pyx_t_2)) || PyTuple_CheckExact(__pyx_t_2)) {
      __pyx_t_5 = __pyx_t_2; __Pyx_INCREF(__pyx_t_5); __pyx_t_6 = 0;
      __pyx_t_7 = NULL;
    } else {
      __pyx_t_6 = -1; __pyx_t_5 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 419, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_7 = Py_TYPE(__pyx_t_5)->tp_iternext; if (unlikely(!__pyx_t_7)) __PYX_ERR(3, 419, __pyx_L1_error)
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    for (;;) {
      if (likely(!__pyx_t_7)) {
        if (likely(PyList_CheckExact(__pyx_t_5))) {
          if (__pyx_t_6 >= PyList_GET_SIZE(__pyx_t_5)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_2 = PyList_GET_ITEM(__pyx_t_5, __pyx_t_6); __Pyx_INCREF(__pyx_t_2); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(3, 419, __pyx_L1_error)
          #else
          __pyx_t_2 = PySequence_ITEM(__pyx_t_5, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 419, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          #endif
        } else {
          if (__pyx_t_6 >= PyTuple_GET_SIZE(__pyx_t_5)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_5, __pyx_t_6); __Pyx_INCREF(__pyx_t_2); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(3, 419, __pyx_L1_error)
          #else
          __pyx_t_2 = PySequence_ITEM(__pyx_t_5, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 419, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          #endif
        }
      } else {
        __pyx_t_2 = __pyx_t_7(__pyx_t_5);
        if (unlikely(!__pyx_t_2)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(3, 419, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_2);
      }
      __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_d);
      __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_d, __pyx_t_2);
      __Pyx_GIVEREF(__pyx_t_2);
      __pyx_t_2 = 0;
      __Pyx_INCREF(__pyx_cur_scope->__pyx_v_d);
      __pyx_r = __pyx_cur_scope->__pyx_v_d;
      __Pyx_XGIVEREF(__pyx_t_1);
      __pyx_cur_scope->__pyx_t_0 = __pyx_t_1;
      __pyx_cur_scope->__pyx_t_1 = __pyx_t_3;
      __pyx_cur_scope->__pyx_t_2 = __pyx_t_4;
      __Pyx_XGIVEREF(__pyx_t_5);
      __pyx_cur_scope->__pyx_t_3 = __pyx_t_5;
      __pyx_cur_scope->__pyx_t_4 = __pyx_t_6;
      __pyx_cur_scope->__pyx_t_5 = __pyx_t_7;
      __Pyx_XGIVEREF(__pyx_r);
      __Pyx_RefNannyFinishContext();
      __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
      /* return from generator, yielding value */
      __pyx_generator->resume_label = 1;
      return __pyx_r;
      __pyx_L8_resume_from_yield:;
      __pyx_t_1 = __pyx_cur_scope->__pyx_t_0;
      __pyx_cur_scope->__pyx_t_0 = 0;
      __Pyx_XGOTREF(__pyx_t_1);
      __pyx_t_3 = __pyx_cur_scope->__pyx_t_1;
      __pyx_t_4 = __pyx_cur_scope->__pyx_t_2;
      __pyx_t_5 = __pyx_cur_scope->__pyx_t_3;
      __pyx_cur_scope->__pyx_t_3 = 0;
      __Pyx_XGOTREF(__pyx_t_5);
      __pyx_t_6 = __pyx_cur_scope->__pyx_t_4;
      __pyx_t_7 = __pyx_cur_scope->__pyx_t_5;
      if (unlikely(!__pyx_sent_value)) __PYX_ERR(3, 419, __pyx_L1_error)
    }
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "iter_defs.pxi":418
 * 
 *     @property
 *     def dtype(self):             # <<<<<<<<<<<<<<
 *         return tuple(d for t in self._inputs[1:] for d in t.dtype)
 * 
 */

static PyObject *__pyx_pf_5tubes_5Multi_5dtype___get__(struct __pyx_obj_5tubes_Multi *__pyx_v_self) {
  struct __pyx_obj_5tubes___pyx_scope_struct_7___get__ *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);
  __pyx_cur_scope = (struct __pyx_obj_5tubes___pyx_scope_struct_7___get__ *)__pyx_tp_new_5tubes___pyx_scope_struct_7___get__(__pyx_ptype_5tubes___pyx_scope_struct_7___get__, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_5tubes___pyx_scope_struct_7___get__ *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(3, 418, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_self = __pyx_v_self;
  __Pyx_INCREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __Pyx_GIVEREF((PyObject *)__pyx_cur_scope->__pyx_v_self);

  /* "iter_defs.pxi":419
 *     @property
 *     def dtype(self):
 *         return tuple(d for t in self._inputs[1:] for d in t.dtype)             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_pf_5tubes_5Multi_5dtype_7__get___genexpr(((PyObject*)__pyx_cur_scope)); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 419, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PySequence_Tuple(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 419, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "iter_defs.pxi":418
 * 
 *     @property
 *     def dtype(self):             # <<<<<<<<<<<<<<
 *         return tuple(d for t in self._inputs[1:] for d in t.dtype)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("tubes.Multi.dtype.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "iter_defs.pxi":422
 * 
 *     @property
 *     def _chains(self):             # <<<<<<<<<<<<<<
 *         return ()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5tubes_5Multi_7_chains_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5tubes_5Multi_7_chains_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5tubes_5Multi_7_chains___get__(((struct __pyx_obj_5tubes_Multi *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5tubes_5Multi_7_chains___get__(CYTHON_UNUSED struct __pyx_obj_5tubes_Multi *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "iter_defs.pxi":423
 *     @property
 *     def _chains(self):
 *         return ()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_empty_tuple);
  __pyx_r = __pyx_empty_tuple;
  goto __pyx_L0;

  /* "iter_defs.pxi":422
 * 
 *     @property
 *     def _chains(self):             # <<<<<<<<<<<<<<
 *         return ()
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "iter_defs.pxi":430
 * 
 *     @property
 *     def _inputs(self):             # <<<<<<<<<<<<<<
 *         return (self.parent, ) + tuple(self.inputs)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5tubes_5Multi_7_inputs_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5tubes_5Multi_7_inputs_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5tubes_5Multi_7_inputs___get__(((struct __pyx_obj_5tubes_Multi *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5tubes_5Multi_7_inputs___get__(struct __pyx_obj_5tubes_Multi *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "iter_defs.pxi":431
 *     @property
 *     def _inputs(self):
 *         return (self.parent, ) + tuple(self.inputs)             # <<<<<<<<<<<<<<
 * 
 *     cdef vector[AnyIter] _make_iters(self, list args):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 431, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->parent));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self->parent));
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_v_self->parent));
  if (unlikely(__pyx_v_self->inputs == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(3, 431, __pyx_L1_error)
  }
  __pyx_t_2 = PyList_AsTuple(__pyx_v_self->inputs); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 431, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyNumber_Add(__pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 431, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "iter_defs.pxi":430
 * 
 *     @property
 *     def _inputs(self):             # <<<<<<<<<<<<<<
 *         return (self.parent, ) + tuple(self.inputs)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("tubes.Multi._inputs.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "iter_defs.pxi":433
 *         return (self.parent, ) + tuple(self.inputs)
 * 
 *     cdef vector[AnyIter] _make_iters(self, list args):             # <<<<<<<<<<<<<<
 *         cdef IterWrapper arg
 *         cdef vector[AnyIter] its
 */

static std::vector<ss::iter::AnyIter>  __pyx_f_5tubes_5Multi__make_iters(CYTHON_UNUSED struct __pyx_obj_5tubes_Multi *__pyx_v_self, PyObject *__pyx_v_args) {
  struct __pyx_obj_5tubes_IterWrapper *__pyx_v_arg = 0;
  std::vector<ss::iter::AnyIter>  __pyx_v_its;
  std::vector<ss::iter::AnyIter>  __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  __Pyx_RefNannySetupContext("_make_iters", 0);

  /* "iter_defs.pxi":436
 *         cdef IterWrapper arg
 *         cdef vector[AnyIter] its
 *         for arg in args[1:]:             # <<<<<<<<<<<<<<
 *             its.push_back(arg.iter)
 *         return its
 */
  if (unlikely(__pyx_v_args == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(3, 436, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyList_GetSlice(__pyx_v_args, 1, PY_SSIZE_T_MAX); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 436, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_t_1; __Pyx_INCREF(__pyx_t_2); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (;;) {
    if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_2)) break;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_1 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(3, 436, __pyx_L1_error)
    #else
    __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 436, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    #endif
    if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5tubes_IterWrapper))))) __PYX_ERR(3, 436, __pyx_L1_error)
    __Pyx_XDECREF_SET(__pyx_v_arg, ((struct __pyx_obj_5tubes_IterWrapper *)__pyx_t_1));
    __pyx_t_1 = 0;

    /* "iter_defs.pxi":437
 *         cdef vector[AnyIter] its
 *         for arg in args[1:]:
 *             its.push_back(arg.iter)             # <<<<<<<<<<<<<<
 *         return its
 * 
 */
    try {
      __pyx_v_its.push_back(__pyx_v_arg->iter);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(3, 437, __pyx_L1_error)
    }

    /* "iter_defs.pxi":436
 *         cdef IterWrapper arg
 *         cdef vector[AnyIter] its
 *         for arg in args[1:]:             # <<<<<<<<<<<<<<
 *             its.push_back(arg.iter)
 *         return its
 */
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "iter_defs.pxi":438
 *         for arg in args[1:]:
 *             its.push_back(arg.iter)
 *         return its             # <<<<<<<<<<<<<<
 * 
 *     cpdef _describe_self(self):
 */
  __pyx_r = __pyx_v_its;
  goto __pyx_L0;

  /* "iter_defs.pxi":433
 *         return (self.parent, ) + tuple(self.inputs)
 * 
 *     cdef vector[AnyIter] _make_iters(self, list args):             # <<<<<<<<<<<<<<
 *         cdef IterWrapper arg
 *         cdef vector[AnyIter] its
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_WriteUnraisable("tubes.Multi._make_iters", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_arg);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "iter_defs.pxi":440
 *         return its
 * 
 *     cpdef _describe_self(self):             # <<<<<<<<<<<<<<
 *         cdef Tube i
 *         input_reprs = [i._repr(stop=self.parent) for i in self.inputs]
 */

static PyObject *__pyx_pw_5tubes_5Multi_3_describe_self(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_f_5tubes_5Multi__describe_self(struct __pyx_obj_5tubes_Multi *__pyx_v_self, CYTHON_UNUSED int __pyx_skip_dispatch) {
  PyObject *__pyx_v_input_reprs = NULL;
  struct __pyx_obj_5tubes_Tube *__pyx_8genexpr6__pyx_v_i = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  struct __pyx_opt_args_5tubes_4Tube__repr __pyx_t_6;
  Py_UCS4 __pyx_t_7;
  __Pyx_RefNannySetupContext("_describe_self", 0);

  /* "iter_defs.pxi":442
 *     cpdef _describe_self(self):
 *         cdef Tube i
 *         input_reprs = [i._repr(stop=self.parent) for i in self.inputs]             # <<<<<<<<<<<<<<
 *         return f"Multi({input_reprs})"
 * 
 */
  { /* enter inner scope */
    __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 442, __pyx_L5_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (unlikely(__pyx_v_self->inputs == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
      __PYX_ERR(3, 442, __pyx_L5_error)
    }
    __pyx_t_2 = __pyx_v_self->inputs; __Pyx_INCREF(__pyx_t_2); __pyx_t_3 = 0;
    for (;;) {
      if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_2)) break;
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      __pyx_t_4 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_4); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(3, 442, __pyx_L5_error)
      #else
      __pyx_t_4 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 442, __pyx_L5_error)
      __Pyx_GOTREF(__pyx_t_4);
      #endif
      if (!(likely(((__pyx_t_4) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_4, __pyx_ptype_5tubes_Tube))))) __PYX_ERR(3, 442, __pyx_L5_error)
      __Pyx_XDECREF_SET(__pyx_8genexpr6__pyx_v_i, ((struct __pyx_obj_5tubes_Tube *)__pyx_t_4));
      __pyx_t_4 = 0;
      __pyx_t_4 = ((PyObject *)__pyx_v_self->parent);
      __Pyx_INCREF(__pyx_t_4);
      __pyx_t_6.__pyx_n = 1;
      __pyx_t_6.stop = __pyx_t_4;
      __pyx_t_5 = ((struct __pyx_vtabstruct_5tubes_Tube *)__pyx_8genexpr6__pyx_v_i->__pyx_vtab)->_repr(__pyx_8genexpr6__pyx_v_i, &__pyx_t_6); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 442, __pyx_L5_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_5))) __PYX_ERR(3, 442, __pyx_L5_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF((PyObject *)__pyx_8genexpr6__pyx_v_i); __pyx_8genexpr6__pyx_v_i = 0;
    goto __pyx_L8_exit_scope;
    __pyx_L5_error:;
    __Pyx_XDECREF((PyObject *)__pyx_8genexpr6__pyx_v_i); __pyx_8genexpr6__pyx_v_i = 0;
    goto __pyx_L1_error;
    __pyx_L8_exit_scope:;
  } /* exit inner scope */
  __pyx_v_input_reprs = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "iter_defs.pxi":443
 *         cdef Tube i
 *         input_reprs = [i._repr(stop=self.parent) for i in self.inputs]
 *         return f"Multi({input_reprs})"             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 443, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = 0;
  __pyx_t_7 = 127;
  __Pyx_INCREF(__pyx_kp_u_Multi);
  __pyx_t_3 += 6;
  __Pyx_GIVEREF(__pyx_kp_u_Multi);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_kp_u_Multi);
  __pyx_t_2 = __Pyx_PyObject_FormatSimple(__pyx_v_input_reprs, __pyx_empty_unicode); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 443, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_7 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_2) > __pyx_t_7) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_2) : __pyx_t_7;
  __pyx_t_3 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_2);
  __pyx_t_2 = 0;
  __Pyx_INCREF(__pyx_kp_u__27);
  __pyx_t_3 += 1;
  __Pyx_GIVEREF(__pyx_kp_u__27);
  PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_kp_u__27);
  __pyx_t_2 = __Pyx_PyUnicode_Join(__pyx_t_1, 3, __pyx_t_3, __pyx_t_7); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 443, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "iter_defs.pxi":440
 *         return its
 * 
 *     cpdef _describe_self(self):             # <<<<<<<<<<<<<<
 *         cdef Tube i
 *         input_reprs = [i._repr(stop=self.parent) for i in self.inputs]
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("tubes.Multi._describe_self", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_input_reprs);
  __Pyx_XDECREF((PyObject *)__pyx_8genexpr6__pyx_v_i);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5tubes_5Multi_3_describe_self(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5tubes_5Multi_2_describe_self[] = "Multi._describe_self(self)";
static PyObject *__pyx_pw_5tubes_5Multi_3_describe_self(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_describe_self (wrapper)", 0);
  __pyx_r = __pyx_pf_5tubes_5Multi_2_describe_self(((struct __pyx_obj_5tubes_Multi *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5tubes_5Multi_2_describe_self(struct __pyx_obj_5tubes_Multi *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("_describe_self", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_5tubes_5Multi__describe_self(__pyx_v_self, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 440, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("tubes.Multi._describe_self", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "iter_defs.pxi":394
 * cdef class Multi(Tube):  # AUTO GENERATED FROM tools/defn2.tmpl
 * 
 *     cdef public Tube parent             # <<<<<<<<<<<<<<
 *     cdef public list inputs
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5tubes_5Multi_6parent_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5tubes_5Multi_6parent_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5tubes_5Multi_6parent___get__(((struct __pyx_obj_5tubes_Multi *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5tubes_5Multi_6parent___get__(struct __pyx_obj_5tubes_Multi *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->parent));
  __pyx_r = ((PyObject *)__pyx_v_self->parent);
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_5tubes_5Multi_6parent_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_5tubes_5Multi_6parent_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5tubes_5Multi_6parent_2__set__(((struct __pyx_obj_5tubes_Multi *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5tubes_5Multi_6parent_2__set__(struct __pyx_obj_5tubes_Multi *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__set__", 0);
  if (!(likely(((__pyx_v_value) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_value, __pyx_ptype_5tubes_Tube))))) __PYX_ERR(3, 394, __pyx_L1_error)
  __pyx_t_1 = __pyx_v_value;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->parent);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->parent));
  __pyx_v_self->parent = ((struct __pyx_obj_5tubes_Tube *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("tubes.Multi.parent.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_5tubes_5Multi_6parent_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_5tubes_5Multi_6parent_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5tubes_5Multi_6parent_4__del__(((struct __pyx_obj_5tubes_Multi *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5tubes_5Multi_6parent_4__del__(struct __pyx_obj_5tubes_Multi *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->parent);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->parent));
  __pyx_v_self->parent = ((struct __pyx_obj_5tubes_Tube *)Py_None);

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "iter_defs.pxi":395
 * 
 *     cdef public Tube parent
 *     cdef public list inputs             # <<<<<<<<<<<<<<
 * 
 *     def __cinit__(self, Tube parent, list inputs):
 */

/* Python wrapper */
static PyObject *__pyx_pw_5tubes_5Multi_6inputs_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5tubes_5Multi_6inputs_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5tubes_5Multi_6inputs___get__(((struct __pyx_obj_5tubes_Multi *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5tubes_5Multi_6inputs___get__(struct __pyx_obj_5tubes_Multi *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->inputs);
  __pyx_r = __pyx_v_self->inputs;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_5tubes_5Multi_6inputs_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_5tubes_5Multi_6inputs_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5tubes_5Multi_6inputs_2__set__(((struct __pyx_obj_5tubes_Multi *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5tubes_5Multi_6inputs_2__set__(struct __pyx_obj_5tubes_Multi *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__set__", 0);
  if (!(likely(PyList_CheckExact(__pyx_v_value))||((__pyx_v_value) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(__pyx_v_value)->tp_name), 0))) __PYX_ERR(3, 395, __pyx_L1_error)
  __pyx_t_1 = __pyx_v_value;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->inputs);
  __Pyx_DECREF(__pyx_v_self->inputs);
  __pyx_v_self->inputs = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("tubes.Multi.inputs.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_5tubes_5Multi_6inputs_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_5tubes_5Multi_6inputs_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5tubes_5Multi_6inputs_4__del__(((struct __pyx_obj_5tubes_Multi *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5tubes_5Multi_6inputs_4__del__(struct __pyx_obj_5tubes_Multi *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->inputs);
  __Pyx_DECREF(__pyx_v_self->inputs);
  __pyx_v_self->inputs = ((PyObject*)Py_None);

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_5tubes_5Multi_5__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5tubes_5Multi_4__reduce_cython__[] = "Multi.__reduce_cython__(self)";
static PyObject *__pyx_pw_5tubes_5Multi_5__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5tubes_5Multi_4__reduce_cython__(((struct __pyx_obj_5tubes_Multi *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5tubes_5Multi_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5tubes_Multi *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__40, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("tubes.Multi.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_5tubes_5Multi_7__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static char __pyx_doc_5tubes_5Multi_6__setstate_cython__[] = "Multi.__setstate_cython__(self, __pyx_state)";
static PyObject *__pyx_pw_5tubes_5Multi_7__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5tubes_5Multi_6__setstate_cython__(((struct __pyx_obj_5tubes_Multi *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5tubes_5Multi_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5tubes_Multi *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__41, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("tubes.Multi.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "iter_defs.pxi":453
 *     cdef public Tube parent
 * 
 *     def __cinit__(self, Tube parent):             # <<<<<<<<<<<<<<
 * 
 *         if parent.dtype[0] not in (Utf8,):
 */

/* Python wrapper */
static int __pyx_pw_5tubes_9JsonParse_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_5tubes_9JsonParse_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_5tubes_Tube *__pyx_v_parent = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_parent,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_parent)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(3, 453, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_parent = ((struct __pyx_obj_5tubes_Tube *)values[0]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(3, 453, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("tubes.JsonParse.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_parent), __pyx_ptype_5tubes_Tube, 1, "parent", 0))) __PYX_ERR(3, 453, __pyx_L1_error)
  __pyx_r = __pyx_pf_5tubes_9JsonParse___cinit__(((struct __pyx_obj_5tubes_JsonParse *)__pyx_v_self), __pyx_v_parent);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5tubes_9JsonParse___cinit__(struct __pyx_obj_5tubes_JsonParse *__pyx_v_self, struct __pyx_obj_5tubes_Tube *__pyx_v_parent) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "iter_defs.pxi":455
 *     def __cinit__(self, Tube parent):
 * 
 *         if parent.dtype[0] not in (Utf8,):             # <<<<<<<<<<<<<<
 *             raise ValueError(f"Cannot make a JsonParse Tube with 'parent' tube of type { parent.dtype[0] }")
 *         self.parent = parent
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_parent), __pyx_n_s_dtype); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 455, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_t_1, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 455, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_Utf8); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 455, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyObject_RichCompare(__pyx_t_2, __pyx_t_1, Py_NE); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 455, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(3, 455, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_5 = (__pyx_t_4 != 0);
  if (__pyx_t_5) {

    /* "iter_defs.pxi":456
 * 
 *         if parent.dtype[0] not in (Utf8,):
 *             raise ValueError(f"Cannot make a JsonParse Tube with 'parent' tube of type { parent.dtype[0] }")             # <<<<<<<<<<<<<<
 *         self.parent = parent
 * 
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_parent), __pyx_n_s_dtype); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 456, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_GetItemInt(__pyx_t_2, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 456, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyObject_FormatSimple(__pyx_t_3, __pyx_empty_unicode); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 456, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyUnicode_Concat(__pyx_kp_u_Cannot_make_a_JsonParse_Tube_wit, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 456, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 456, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_3);
    __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 456, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(3, 456, __pyx_L1_error)

    /* "iter_defs.pxi":455
 *     def __cinit__(self, Tube parent):
 * 
 *         if parent.dtype[0] not in (Utf8,):             # <<<<<<<<<<<<<<
 *             raise ValueError(f"Cannot make a JsonParse Tube with 'parent' tube of type { parent.dtype[0] }")
 *         self.parent = parent
 */
  }

  /* "iter_defs.pxi":457
 *         if parent.dtype[0] not in (Utf8,):
 *             raise ValueError(f"Cannot make a JsonParse Tube with 'parent' tube of type { parent.dtype[0] }")
 *         self.parent = parent             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_parent));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_parent));
  __Pyx_GOTREF(__pyx_v_self->parent);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->parent));
  __pyx_v_self->parent = __pyx_v_parent;

  /* "iter_defs.pxi":453
 *     cdef public Tube parent
 * 
 *     def __cinit__(self, Tube parent):             # <<<<<<<<<<<<<<
 * 
 *         if parent.dtype[0] not in (Utf8,):
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("tubes.JsonParse.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "iter_defs.pxi":461
 * 
 * 
 *     cdef IterWrapper _make_iter(self, args):             # <<<<<<<<<<<<<<
 * 
 *         expected_args = len(self._inputs) + len(self._chains)
 */

static struct __pyx_obj_5tubes_IterWrapper *__pyx_f_5tubes_9JsonParse__make_iter(struct __pyx_obj_5tubes_JsonParse *__pyx_v_self, PyObject *__pyx_v_args) {
  Py_ssize_t __pyx_v_expected_args;
  CYTHON_UNUSED PyObject *__pyx_v_chains = NULL;
  PyObject *__pyx_v_iters = NULL;
  struct __pyx_obj_5tubes_IterWrapper *__pyx_v_parent = 0;
  ss::iter::JsonParseIter *__pyx_v_iter;
  struct __pyx_obj_5tubes_IterWrapper *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  int __pyx_t_4;
  Py_UCS4 __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  ss::iter::JsonParseIter *__pyx_t_7;
  __Pyx_RefNannySetupContext("_make_iter", 0);

  /* "iter_defs.pxi":463
 *     cdef IterWrapper _make_iter(self, args):
 * 
 *         expected_args = len(self._inputs) + len(self._chains)             # <<<<<<<<<<<<<<
 *         if len(args) != expected_args:
 *             raise ValueError(f"Expected {expected_args} inputs to _make_iter, got {len(args)}")
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_inputs); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 463, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Length(__pyx_t_1); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1))) __PYX_ERR(3, 463, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_chains); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 463, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyObject_Length(__pyx_t_1); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1))) __PYX_ERR(3, 463, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_expected_args = (__pyx_t_2 + __pyx_t_3);

  /* "iter_defs.pxi":464
 * 
 *         expected_args = len(self._inputs) + len(self._chains)
 *         if len(args) != expected_args:             # <<<<<<<<<<<<<<
 *             raise ValueError(f"Expected {expected_args} inputs to _make_iter, got {len(args)}")
 * 
 */
  __pyx_t_3 = PyObject_Length(__pyx_v_args); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1))) __PYX_ERR(3, 464, __pyx_L1_error)
  __pyx_t_4 = ((__pyx_t_3 != __pyx_v_expected_args) != 0);
  if (__pyx_t_4) {

    /* "iter_defs.pxi":465
 *         expected_args = len(self._inputs) + len(self._chains)
 *         if len(args) != expected_args:
 *             raise ValueError(f"Expected {expected_args} inputs to _make_iter, got {len(args)}")             # <<<<<<<<<<<<<<
 * 
 *         chains = args[:len(self._chains)]
 */
    __pyx_t_1 = PyTuple_New(4); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 465, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = 0;
    __pyx_t_5 = 127;
    __Pyx_INCREF(__pyx_kp_u_Expected);
    __pyx_t_3 += 9;
    __Pyx_GIVEREF(__pyx_kp_u_Expected);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_kp_u_Expected);
    __pyx_t_6 = __Pyx_PyUnicode_From_Py_ssize_t(__pyx_v_expected_args, 0, ' ', 'd'); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 465, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_3 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_6);
    __pyx_t_6 = 0;
    __Pyx_INCREF(__pyx_kp_u_inputs_to__make_iter_got);
    __pyx_t_3 += 27;
    __Pyx_GIVEREF(__pyx_kp_u_inputs_to__make_iter_got);
    PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_kp_u_inputs_to__make_iter_got);
    __pyx_t_2 = PyObject_Length(__pyx_v_args); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1))) __PYX_ERR(3, 465, __pyx_L1_error)
    __pyx_t_6 = __Pyx_PyUnicode_From_Py_ssize_t(__pyx_t_2, 0, ' ', 'd'); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 465, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_3 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_1, 3, __pyx_t_6);
    __pyx_t_6 = 0;
    __pyx_t_6 = __Pyx_PyUnicode_Join(__pyx_t_1, 4, __pyx_t_3, __pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 465, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 465, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_6);
    __pyx_t_6 = 0;
    __pyx_t_6 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_t_1, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 465, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_Raise(__pyx_t_6, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __PYX_ERR(3, 465, __pyx_L1_error)

    /* "iter_defs.pxi":464
 * 
 *         expected_args = len(self._inputs) + len(self._chains)
 *         if len(args) != expected_args:             # <<<<<<<<<<<<<<
 *             raise ValueError(f"Expected {expected_args} inputs to _make_iter, got {len(args)}")
 * 
 */
  }

  /* "iter_defs.pxi":467
 *             raise ValueError(f"Expected {expected_args} inputs to _make_iter, got {len(args)}")
 * 
 *         chains = args[:len(self._chains)]             # <<<<<<<<<<<<<<
 *         iters = args[len(self._chains):]
 *         cdef IterWrapper parent = iters[0]
 */
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_chains); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 467, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_3 = PyObject_Length(__pyx_t_6); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1))) __PYX_ERR(3, 467, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = __Pyx_PyObject_GetSlice(__pyx_v_args, 0, __pyx_t_3, NULL, NULL, NULL, 0, 1, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 467, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_v_chains = __pyx_t_6;
  __pyx_t_6 = 0;

  /* "iter_defs.pxi":468
 * 
 *         chains = args[:len(self._chains)]
 *         iters = args[len(self._chains):]             # <<<<<<<<<<<<<<
 *         cdef IterWrapper parent = iters[0]
 *         cdef JsonParseIter *iter = new JsonParseIter(parent.iter)
 */
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_chains); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 468, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_3 = PyObject_Length(__pyx_t_6); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1))) __PYX_ERR(3, 468, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = __Pyx_PyObject_GetSlice(__pyx_v_args, __pyx_t_3, 0, NULL, NULL, NULL, 1, 0, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 468, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_v_iters = __pyx_t_6;
  __pyx_t_6 = 0;

  /* "iter_defs.pxi":469
 *         chains = args[:len(self._chains)]
 *         iters = args[len(self._chains):]
 *         cdef IterWrapper parent = iters[0]             # <<<<<<<<<<<<<<
 *         cdef JsonParseIter *iter = new JsonParseIter(parent.iter)
 * 
 */
  __pyx_t_6 = __Pyx_GetItemInt(__pyx_v_iters, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 469, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  if (!(likely(((__pyx_t_6) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_6, __pyx_ptype_5tubes_IterWrapper))))) __PYX_ERR(3, 469, __pyx_L1_error)
  __pyx_v_parent = ((struct __pyx_obj_5tubes_IterWrapper *)__pyx_t_6);
  __pyx_t_6 = 0;

  /* "iter_defs.pxi":470
 *         iters = args[len(self._chains):]
 *         cdef IterWrapper parent = iters[0]
 *         cdef JsonParseIter *iter = new JsonParseIter(parent.iter)             # <<<<<<<<<<<<<<
 * 
 *         return wrap(to_any(iter))
 */
  try {
    __pyx_t_7 = new ss::iter::JsonParseIter(__pyx_v_parent->iter);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(3, 470, __pyx_L1_error)
  }
  __pyx_v_iter = __pyx_t_7;

  /* "iter_defs.pxi":472
 *         cdef JsonParseIter *iter = new JsonParseIter(parent.iter)
 * 
 *         return wrap(to_any(iter))             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __pyx_t_6 = __pyx_f_5tubes_wrap(ss::iter::to_any<ss::iter::JsonParseIter>(__pyx_v_iter)); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 472, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  if (!(likely(((__pyx_t_6) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_6, __pyx_ptype_5tubes_IterWrapper))))) __PYX_ERR(3, 472, __pyx_L1_error)
  __pyx_r = ((struct __pyx_obj_5tubes_IterWrapper *)__pyx_t_6);
  __pyx_t_6 = 0;
  goto __pyx_L0;

  /* "iter_defs.pxi":461
 * 
 * 
 *     cdef IterWrapper _make_iter(self, args):             # <<<<<<<<<<<<<<
 * 
 *         expected_args = len(self._inputs) + len(self._chains)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("tubes.JsonParse._make_iter", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_chains);
  __Pyx_XDECREF(__pyx_v_iters);
  __Pyx_XDECREF((PyObject *)__pyx_v_parent);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "iter_defs.pxi":475
 * 
 *     @property
 *     def dtype(self):             # <<<<<<<<<<<<<<
 *         return (JsonUtf8,)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5tubes_9JsonParse_5dtype_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5tubes_9JsonParse_5dtype_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5tubes_9JsonParse_5dtype___get__(((struct __pyx_obj_5tubes_JsonParse *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5tubes_9JsonParse_5dtype___get__(CYTHON_UNUSED struct __pyx_obj_5tubes_JsonParse *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "iter_defs.pxi":476
 *     @property
 *     def dtype(self):
 *         return (JsonUtf8,)             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_JsonUtf8); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 476, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 476, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "iter_defs.pxi":475
 * 
 *     @property
 *     def dtype(self):             # <<<<<<<<<<<<<<
 *         return (JsonUtf8,)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("tubes.JsonParse.dtype.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "iter_defs.pxi":479
 * 
 *     @property
 *     def _chains(self):             # <<<<<<<<<<<<<<
 *         return ()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5tubes_9JsonParse_7_chains_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5tubes_9JsonParse_7_chains_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5tubes_9JsonParse_7_chains___get__(((struct __pyx_obj_5tubes_JsonParse *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5tubes_9JsonParse_7_chains___get__(CYTHON_UNUSED struct __pyx_obj_5tubes_JsonParse *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "iter_defs.pxi":480
 *     @property
 *     def _chains(self):
 *         return ()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_empty_tuple);
  __pyx_r = __pyx_empty_tuple;
  goto __pyx_L0;

  /* "iter_defs.pxi":479
 * 
 *     @property
 *     def _chains(self):             # <<<<<<<<<<<<<<
 *         return ()
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "iter_defs.pxi":484
 * 
 *     @property
 *     def _inputs(self):             # <<<<<<<<<<<<<<
 *         return (self.parent, )
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5tubes_9JsonParse_7_inputs_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5tubes_9JsonParse_7_inputs_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5tubes_9JsonParse_7_inputs___get__(((struct __pyx_obj_5tubes_JsonParse *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5tubes_9JsonParse_7_inputs___get__(struct __pyx_obj_5tubes_JsonParse *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "iter_defs.pxi":485
 *     @property
 *     def _inputs(self):
 *         return (self.parent, )             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 485, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->parent));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self->parent));
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_v_self->parent));
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "iter_defs.pxi":484
 * 
 *     @property
 *     def _inputs(self):             # <<<<<<<<<<<<<<
 *         return (self.parent, )
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("tubes.JsonParse._inputs.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "iter_defs.pxi":489
 * 
 * 
 *     cpdef _describe_self(self):             # <<<<<<<<<<<<<<
 *         return f"JsonParse()"
 * 
 */

static PyObject *__pyx_pw_5tubes_9JsonParse_3_describe_self(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_f_5tubes_9JsonParse__describe_self(CYTHON_UNUSED struct __pyx_obj_5tubes_JsonParse *__pyx_v_self, CYTHON_UNUSED int __pyx_skip_dispatch) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_describe_self", 0);

  /* "iter_defs.pxi":490
 * 
 *     cpdef _describe_self(self):
 *         return f"JsonParse()"             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_kp_u_JsonParse);
  __pyx_r = __pyx_kp_u_JsonParse;
  goto __pyx_L0;

  /* "iter_defs.pxi":489
 * 
 * 
 *     cpdef _describe_self(self):             # <<<<<<<<<<<<<<
 *         return f"JsonParse()"
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5tubes_9JsonParse_3_describe_self(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5tubes_9JsonParse_2_describe_self[] = "JsonParse._describe_self(self)";
static PyObject *__pyx_pw_5tubes_9JsonParse_3_describe_self(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_describe_self (wrapper)", 0);
  __pyx_r = __pyx_pf_5tubes_9JsonParse_2_describe_self(((struct __pyx_obj_5tubes_JsonParse *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5tubes_9JsonParse_2_describe_self(struct __pyx_obj_5tubes_JsonParse *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("_describe_self", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_5tubes_9JsonParse__describe_self(__pyx_v_self, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 489, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("tubes.JsonParse._describe_self", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "iter_defs.pxi":451
 * cdef class JsonParse(Tube):  # AUTO GENERATED FROM tools/defn2.tmpl
 * 
 *     cdef public Tube parent             # <<<<<<<<<<<<<<
 * 
 *     def __cinit__(self, Tube parent):
 */

/* Python wrapper */
static PyObject *__pyx_pw_5tubes_9JsonParse_6parent_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5tubes_9JsonParse_6parent_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5tubes_9JsonParse_6parent___get__(((struct __pyx_obj_5tubes_JsonParse *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5tubes_9JsonParse_6parent___get__(struct __pyx_obj_5tubes_JsonParse *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->parent));
  __pyx_r = ((PyObject *)__pyx_v_self->parent);
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_5tubes_9JsonParse_6parent_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_5tubes_9JsonParse_6parent_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5tubes_9JsonParse_6parent_2__set__(((struct __pyx_obj_5tubes_JsonParse *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5tubes_9JsonParse_6parent_2__set__(struct __pyx_obj_5tubes_JsonParse *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__set__", 0);
  if (!(likely(((__pyx_v_value) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_value, __pyx_ptype_5tubes_Tube))))) __PYX_ERR(3, 451, __pyx_L1_error)
  __pyx_t_1 = __pyx_v_value;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->parent);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->parent));
  __pyx_v_self->parent = ((struct __pyx_obj_5tubes_Tube *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("tubes.JsonParse.parent.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_5tubes_9JsonParse_6parent_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_5tubes_9JsonParse_6parent_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5tubes_9JsonParse_6parent_4__del__(((struct __pyx_obj_5tubes_JsonParse *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5tubes_9JsonParse_6parent_4__del__(struct __pyx_obj_5tubes_JsonParse *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->parent);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->parent));
  __pyx_v_self->parent = ((struct __pyx_obj_5tubes_Tube *)Py_None);

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_5tubes_9JsonParse_5__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5tubes_9JsonParse_4__reduce_cython__[] = "JsonParse.__reduce_cython__(self)";
static PyObject *__pyx_pw_5tubes_9JsonParse_5__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5tubes_9JsonParse_4__reduce_cython__(((struct __pyx_obj_5tubes_JsonParse *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5tubes_9JsonParse_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5tubes_JsonParse *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__42, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("tubes.JsonParse.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_5tubes_9JsonParse_7__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static char __pyx_doc_5tubes_9JsonParse_6__setstate_cython__[] = "JsonParse.__setstate_cython__(self, __pyx_state)";
static PyObject *__pyx_pw_5tubes_9JsonParse_7__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5tubes_9JsonParse_6__setstate_cython__(((struct __pyx_obj_5tubes_JsonParse *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5tubes_9JsonParse_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5tubes_JsonParse *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__43, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("tubes.JsonParse.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "iter_defs.pxi":500
 *     cdef public Tube parent
 * 
 *     def __cinit__(self, Tube parent):             # <<<<<<<<<<<<<<
 *         self.parent = parent
 * 
 */

/* Python wrapper */
static int __pyx_pw_5tubes_4ToPy_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_5tubes_4ToPy_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_5tubes_Tube *__pyx_v_parent = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_parent,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_parent)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(3, 500, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_parent = ((struct __pyx_obj_5tubes_Tube *)values[0]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(3, 500, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("tubes.ToPy.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_parent), __pyx_ptype_5tubes_Tube, 1, "parent", 0))) __PYX_ERR(3, 500, __pyx_L1_error)
  __pyx_r = __pyx_pf_5tubes_4ToPy___cinit__(((struct __pyx_obj_5tubes_ToPy *)__pyx_v_self), __pyx_v_parent);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5tubes_4ToPy___cinit__(struct __pyx_obj_5tubes_ToPy *__pyx_v_self, struct __pyx_obj_5tubes_Tube *__pyx_v_parent) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "iter_defs.pxi":501
 * 
 *     def __cinit__(self, Tube parent):
 *         self.parent = parent             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_parent));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_parent));
  __Pyx_GOTREF(__pyx_v_self->parent);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->parent));
  __pyx_v_self->parent = __pyx_v_parent;

  /* "iter_defs.pxi":500
 *     cdef public Tube parent
 * 
 *     def __cinit__(self, Tube parent):             # <<<<<<<<<<<<<<
 *         self.parent = parent
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "iter_defs.pxi":505
 * 
 * 
 *     cdef IterWrapper _make_iter(self, args):             # <<<<<<<<<<<<<<
 * 
 *         expected_args = len(self._inputs) + len(self._chains)
 */

static struct __pyx_obj_5tubes_IterWrapper *__pyx_f_5tubes_4ToPy__make_iter(struct __pyx_obj_5tubes_ToPy *__pyx_v_self, PyObject *__pyx_v_args) {
  Py_ssize_t __pyx_v_expected_args;
  CYTHON_UNUSED PyObject *__pyx_v_chains = NULL;
  PyObject *__pyx_v_iters = NULL;
  struct __pyx_obj_5tubes_IterWrapper *__pyx_v_parent = 0;
  ss::iter::ToPyIter *__pyx_v_iter;
  struct __pyx_obj_5tubes_IterWrapper *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  int __pyx_t_4;
  Py_UCS4 __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  ss::iter::ToPyIter *__pyx_t_7;
  __Pyx_RefNannySetupContext("_make_iter", 0);

  /* "iter_defs.pxi":507
 *     cdef IterWrapper _make_iter(self, args):
 * 
 *         expected_args = len(self._inputs) + len(self._chains)             # <<<<<<<<<<<<<<
 *         if len(args) != expected_args:
 *             raise ValueError(f"Expected {expected_args} inputs to _make_iter, got {len(args)}")
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_inputs); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 507, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Length(__pyx_t_1); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1))) __PYX_ERR(3, 507, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_chains); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 507, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyObject_Length(__pyx_t_1); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1))) __PYX_ERR(3, 507, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_expected_args = (__pyx_t_2 + __pyx_t_3);

  /* "iter_defs.pxi":508
 * 
 *         expected_args = len(self._inputs) + len(self._chains)
 *         if len(args) != expected_args:             # <<<<<<<<<<<<<<
 *             raise ValueError(f"Expected {expected_args} inputs to _make_iter, got {len(args)}")
 * 
 */
  __pyx_t_3 = PyObject_Length(__pyx_v_args); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1))) __PYX_ERR(3, 508, __pyx_L1_error)
  __pyx_t_4 = ((__pyx_t_3 != __pyx_v_expected_args) != 0);
  if (__pyx_t_4) {

    /* "iter_defs.pxi":509
 *         expected_args = len(self._inputs) + len(self._chains)
 *         if len(args) != expected_args:
 *             raise ValueError(f"Expected {expected_args} inputs to _make_iter, got {len(args)}")             # <<<<<<<<<<<<<<
 * 
 *         chains = args[:len(self._chains)]
 */
    __pyx_t_1 = PyTuple_New(4); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 509, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = 0;
    __pyx_t_5 = 127;
    __Pyx_INCREF(__pyx_kp_u_Expected);
    __pyx_t_3 += 9;
    __Pyx_GIVEREF(__pyx_kp_u_Expected);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_kp_u_Expected);
    __pyx_t_6 = __Pyx_PyUnicode_From_Py_ssize_t(__pyx_v_expected_args, 0, ' ', 'd'); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 509, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_3 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_6);
    __pyx_t_6 = 0;
    __Pyx_INCREF(__pyx_kp_u_inputs_to__make_iter_got);
    __pyx_t_3 += 27;
    __Pyx_GIVEREF(__pyx_kp_u_inputs_to__make_iter_got);
    PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_kp_u_inputs_to__make_iter_got);
    __pyx_t_2 = PyObject_Length(__pyx_v_args); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1))) __PYX_ERR(3, 509, __pyx_L1_error)
    __pyx_t_6 = __Pyx_PyUnicode_From_Py_ssize_t(__pyx_t_2, 0, ' ', 'd'); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 509, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_3 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_1, 3, __pyx_t_6);
    __pyx_t_6 = 0;
    __pyx_t_6 = __Pyx_PyUnicode_Join(__pyx_t_1, 4, __pyx_t_3, __pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 509, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 509, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_6);
    __pyx_t_6 = 0;
    __pyx_t_6 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_t_1, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 509, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_Raise(__pyx_t_6, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __PYX_ERR(3, 509, __pyx_L1_error)

    /* "iter_defs.pxi":508
 * 
 *         expected_args = len(self._inputs) + len(self._chains)
 *         if len(args) != expected_args:             # <<<<<<<<<<<<<<
 *             raise ValueError(f"Expected {expected_args} inputs to _make_iter, got {len(args)}")
 * 
 */
  }

  /* "iter_defs.pxi":511
 *             raise ValueError(f"Expected {expected_args} inputs to _make_iter, got {len(args)}")
 * 
 *         chains = args[:len(self._chains)]             # <<<<<<<<<<<<<<
 *         iters = args[len(self._chains):]
 *         cdef IterWrapper parent = iters[0]
 */
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_chains); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 511, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_3 = PyObject_Length(__pyx_t_6); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1))) __PYX_ERR(3, 511, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = __Pyx_PyObject_GetSlice(__pyx_v_args, 0, __pyx_t_3, NULL, NULL, NULL, 0, 1, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 511, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_v_chains = __pyx_t_6;
  __pyx_t_6 = 0;

  /* "iter_defs.pxi":512
 * 
 *         chains = args[:len(self._chains)]
 *         iters = args[len(self._chains):]             # <<<<<<<<<<<<<<
 *         cdef IterWrapper parent = iters[0]
 *         cdef ToPyIter *iter = new ToPyIter(parent.iter)
 */
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_chains); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 512, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_3 = PyObject_Length(__pyx_t_6); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1))) __PYX_ERR(3, 512, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = __Pyx_PyObject_GetSlice(__pyx_v_args, __pyx_t_3, 0, NULL, NULL, NULL, 1, 0, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 512, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_v_iters = __pyx_t_6;
  __pyx_t_6 = 0;

  /* "iter_defs.pxi":513
 *         chains = args[:len(self._chains)]
 *         iters = args[len(self._chains):]
 *         cdef IterWrapper parent = iters[0]             # <<<<<<<<<<<<<<
 *         cdef ToPyIter *iter = new ToPyIter(parent.iter)
 * 
 */
  __pyx_t_6 = __Pyx_GetItemInt(__pyx_v_iters, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 513, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  if (!(likely(((__pyx_t_6) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_6, __pyx_ptype_5tubes_IterWrapper))))) __PYX_ERR(3, 513, __pyx_L1_error)
  __pyx_v_parent = ((struct __pyx_obj_5tubes_IterWrapper *)__pyx_t_6);
  __pyx_t_6 = 0;

  /* "iter_defs.pxi":514
 *         iters = args[len(self._chains):]
 *         cdef IterWrapper parent = iters[0]
 *         cdef ToPyIter *iter = new ToPyIter(parent.iter)             # <<<<<<<<<<<<<<
 * 
 *         return wrap(to_any(iter))
 */
  try {
    __pyx_t_7 = new ss::iter::ToPyIter(__pyx_v_parent->iter);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(3, 514, __pyx_L1_error)
  }
  __pyx_v_iter = __pyx_t_7;

  /* "iter_defs.pxi":516
 *         cdef ToPyIter *iter = new ToPyIter(parent.iter)
 * 
 *         return wrap(to_any(iter))             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __pyx_t_6 = __pyx_f_5tubes_wrap(ss::iter::to_any<ss::iter::ToPyIter>(__pyx_v_iter)); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 516, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  if (!(likely(((__pyx_t_6) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_6, __pyx_ptype_5tubes_IterWrapper))))) __PYX_ERR(3, 516, __pyx_L1_error)
  __pyx_r = ((struct __pyx_obj_5tubes_IterWrapper *)__pyx_t_6);
  __pyx_t_6 = 0;
  goto __pyx_L0;

  /* "iter_defs.pxi":505
 * 
 * 
 *     cdef IterWrapper _make_iter(self, args):             # <<<<<<<<<<<<<<
 * 
 *         expected_args = len(self._inputs) + len(self._chains)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("tubes.ToPy._make_iter", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_chains);
  __Pyx_XDECREF(__pyx_v_iters);
  __Pyx_XDECREF((PyObject *)__pyx_v_parent);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "iter_defs.pxi":519
 * 
 *     @property
 *     def dtype(self):             # <<<<<<<<<<<<<<
 *         return (Object, ) * len(self.parent.dtype)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5tubes_4ToPy_5dtype_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5tubes_4ToPy_5dtype_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5tubes_4ToPy_5dtype___get__(((struct __pyx_obj_5tubes_ToPy *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5tubes_4ToPy_5dtype___get__(struct __pyx_obj_5tubes_ToPy *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "iter_defs.pxi":520
 *     @property
 *     def dtype(self):
 *         return (Object, ) * len(self.parent.dtype)             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_Object); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 520, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self->parent), __pyx_n_s_dtype); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 520, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyObject_Length(__pyx_t_2); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1))) __PYX_ERR(3, 520, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyTuple_New(1 * ((__pyx_t_3<0) ? 0:__pyx_t_3)); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 520, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  { Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < __pyx_t_3; __pyx_temp++) {
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_GIVEREF(__pyx_t_1);
      PyTuple_SET_ITEM(__pyx_t_2, __pyx_temp, __pyx_t_1);
    }
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "iter_defs.pxi":519
 * 
 *     @property
 *     def dtype(self):             # <<<<<<<<<<<<<<
 *         return (Object, ) * len(self.parent.dtype)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("tubes.ToPy.dtype.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "iter_defs.pxi":523
 * 
 *     @property
 *     def _chains(self):             # <<<<<<<<<<<<<<
 *         return ()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5tubes_4ToPy_7_chains_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5tubes_4ToPy_7_chains_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5tubes_4ToPy_7_chains___get__(((struct __pyx_obj_5tubes_ToPy *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5tubes_4ToPy_7_chains___get__(CYTHON_UNUSED struct __pyx_obj_5tubes_ToPy *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "iter_defs.pxi":524
 *     @property
 *     def _chains(self):
 *         return ()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_empty_tuple);
  __pyx_r = __pyx_empty_tuple;
  goto __pyx_L0;

  /* "iter_defs.pxi":523
 * 
 *     @property
 *     def _chains(self):             # <<<<<<<<<<<<<<
 *         return ()
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "iter_defs.pxi":528
 * 
 *     @property
 *     def _inputs(self):             # <<<<<<<<<<<<<<
 *         return (self.parent, )
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5tubes_4ToPy_7_inputs_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5tubes_4ToPy_7_inputs_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5tubes_4ToPy_7_inputs___get__(((struct __pyx_obj_5tubes_ToPy *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5tubes_4ToPy_7_inputs___get__(struct __pyx_obj_5tubes_ToPy *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "iter_defs.pxi":529
 *     @property
 *     def _inputs(self):
 *         return (self.parent, )             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 529, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->parent));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self->parent));
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_v_self->parent));
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "iter_defs.pxi":528
 * 
 *     @property
 *     def _inputs(self):             # <<<<<<<<<<<<<<
 *         return (self.parent, )
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("tubes.ToPy._inputs.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "iter_defs.pxi":533
 * 
 * 
 *     cpdef _describe_self(self):             # <<<<<<<<<<<<<<
 *         return f"ToPy()"
 * 
 */

static PyObject *__pyx_pw_5tubes_4ToPy_3_describe_self(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_f_5tubes_4ToPy__describe_self(CYTHON_UNUSED struct __pyx_obj_5tubes_ToPy *__pyx_v_self, CYTHON_UNUSED int __pyx_skip_dispatch) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_describe_self", 0);

  /* "iter_defs.pxi":534
 * 
 *     cpdef _describe_self(self):
 *         return f"ToPy()"             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_kp_u_ToPy);
  __pyx_r = __pyx_kp_u_ToPy;
  goto __pyx_L0;

  /* "iter_defs.pxi":533
 * 
 * 
 *     cpdef _describe_self(self):             # <<<<<<<<<<<<<<
 *         return f"ToPy()"
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5tubes_4ToPy_3_describe_self(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5tubes_4ToPy_2_describe_self[] = "ToPy._describe_self(self)";
static PyObject *__pyx_pw_5tubes_4ToPy_3_describe_self(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_describe_self (wrapper)", 0);
  __pyx_r = __pyx_pf_5tubes_4ToPy_2_describe_self(((struct __pyx_obj_5tubes_ToPy *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5tubes_4ToPy_2_describe_self(struct __pyx_obj_5tubes_ToPy *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("_describe_self", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_5tubes_4ToPy__describe_self(__pyx_v_self, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 533, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("tubes.ToPy._describe_self", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "iter_defs.pxi":498
 * cdef class ToPy(Tube):  # AUTO GENERATED FROM tools/defn2.tmpl
 * 
 *     cdef public Tube parent             # <<<<<<<<<<<<<<
 * 
 *     def __cinit__(self, Tube parent):
 */

/* Python wrapper */
static PyObject *__pyx_pw_5tubes_4ToPy_6parent_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5tubes_4ToPy_6parent_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5tubes_4ToPy_6parent___get__(((struct __pyx_obj_5tubes_ToPy *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5tubes_4ToPy_6parent___get__(struct __pyx_obj_5tubes_ToPy *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->parent));
  __pyx_r = ((PyObject *)__pyx_v_self->parent);
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_5tubes_4ToPy_6parent_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_5tubes_4ToPy_6parent_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5tubes_4ToPy_6parent_2__set__(((struct __pyx_obj_5tubes_ToPy *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5tubes_4ToPy_6parent_2__set__(struct __pyx_obj_5tubes_ToPy *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__set__", 0);
  if (!(likely(((__pyx_v_value) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_value, __pyx_ptype_5tubes_Tube))))) __PYX_ERR(3, 498, __pyx_L1_error)
  __pyx_t_1 = __pyx_v_value;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->parent);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->parent));
  __pyx_v_self->parent = ((struct __pyx_obj_5tubes_Tube *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("tubes.ToPy.parent.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_5tubes_4ToPy_6parent_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_5tubes_4ToPy_6parent_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5tubes_4ToPy_6parent_4__del__(((struct __pyx_obj_5tubes_ToPy *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5tubes_4ToPy_6parent_4__del__(struct __pyx_obj_5tubes_ToPy *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->parent);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->parent));
  __pyx_v_self->parent = ((struct __pyx_obj_5tubes_Tube *)Py_None);

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_5tubes_4ToPy_5__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5tubes_4ToPy_4__reduce_cython__[] = "ToPy.__reduce_cython__(self)";
static PyObject *__pyx_pw_5tubes_4ToPy_5__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5tubes_4ToPy_4__reduce_cython__(((struct __pyx_obj_5tubes_ToPy *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5tubes_4ToPy_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5tubes_ToPy *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__44, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("tubes.ToPy.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_5tubes_4ToPy_7__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static char __pyx_doc_5tubes_4ToPy_6__setstate_cython__[] = "ToPy.__setstate_cython__(self, __pyx_state)";
static PyObject *__pyx_pw_5tubes_4ToPy_7__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5tubes_4ToPy_6__setstate_cython__(((struct __pyx_obj_5tubes_ToPy *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5tubes_4ToPy_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5tubes_ToPy *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__45, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("tubes.ToPy.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "iter_defs.pxi":545
 *     cdef public Tube conditional
 * 
 *     def __cinit__(self, Tube parent, Tube conditional):             # <<<<<<<<<<<<<<
 *         self.parent = parent
 * 
 */

/* Python wrapper */
static int __pyx_pw_5tubes_10SkipUnless_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_5tubes_10SkipUnless_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_5tubes_Tube *__pyx_v_parent = 0;
  struct __pyx_obj_5tubes_Tube *__pyx_v_conditional = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_parent,&__pyx_n_s_conditional,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_parent)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_conditional)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 2, 2, 1); __PYX_ERR(3, 545, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(3, 545, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_parent = ((struct __pyx_obj_5tubes_Tube *)values[0]);
    __pyx_v_conditional = ((struct __pyx_obj_5tubes_Tube *)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(3, 545, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("tubes.SkipUnless.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_parent), __pyx_ptype_5tubes_Tube, 1, "parent", 0))) __PYX_ERR(3, 545, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_conditional), __pyx_ptype_5tubes_Tube, 1, "conditional", 0))) __PYX_ERR(3, 545, __pyx_L1_error)
  __pyx_r = __pyx_pf_5tubes_10SkipUnless___cinit__(((struct __pyx_obj_5tubes_SkipUnless *)__pyx_v_self), __pyx_v_parent, __pyx_v_conditional);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5tubes_10SkipUnless___cinit__(struct __pyx_obj_5tubes_SkipUnless *__pyx_v_self, struct __pyx_obj_5tubes_Tube *__pyx_v_parent, struct __pyx_obj_5tubes_Tube *__pyx_v_conditional) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "iter_defs.pxi":546
 * 
 *     def __cinit__(self, Tube parent, Tube conditional):
 *         self.parent = parent             # <<<<<<<<<<<<<<
 * 
 *         if conditional.dtype[0] not in (Bool,):
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_parent));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_parent));
  __Pyx_GOTREF(__pyx_v_self->parent);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->parent));
  __pyx_v_self->parent = __pyx_v_parent;

  /* "iter_defs.pxi":548
 *         self.parent = parent
 * 
 *         if conditional.dtype[0] not in (Bool,):             # <<<<<<<<<<<<<<
 *             raise ValueError(f"Cannot make a SkipUnless Tube with 'conditional' tube of type { conditional.dtype[0] }")
 *         self.conditional = conditional
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_conditional), __pyx_n_s_dtype); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 548, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_t_1, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 548, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_Bool); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 548, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyObject_RichCompare(__pyx_t_2, __pyx_t_1, Py_NE); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 548, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(3, 548, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_5 = (__pyx_t_4 != 0);
  if (__pyx_t_5) {

    /* "iter_defs.pxi":549
 * 
 *         if conditional.dtype[0] not in (Bool,):
 *             raise ValueError(f"Cannot make a SkipUnless Tube with 'conditional' tube of type { conditional.dtype[0] }")             # <<<<<<<<<<<<<<
 *         self.conditional = conditional
 * 
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_conditional), __pyx_n_s_dtype); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 549, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_GetItemInt(__pyx_t_2, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 549, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyObject_FormatSimple(__pyx_t_3, __pyx_empty_unicode); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 549, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyUnicode_Concat(__pyx_kp_u_Cannot_make_a_SkipUnless_Tube_wi, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 549, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 549, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_3);
    __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 549, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(3, 549, __pyx_L1_error)

    /* "iter_defs.pxi":548
 *         self.parent = parent
 * 
 *         if conditional.dtype[0] not in (Bool,):             # <<<<<<<<<<<<<<
 *             raise ValueError(f"Cannot make a SkipUnless Tube with 'conditional' tube of type { conditional.dtype[0] }")
 *         self.conditional = conditional
 */
  }

  /* "iter_defs.pxi":550
 *         if conditional.dtype[0] not in (Bool,):
 *             raise ValueError(f"Cannot make a SkipUnless Tube with 'conditional' tube of type { conditional.dtype[0] }")
 *         self.conditional = conditional             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_conditional));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_conditional));
  __Pyx_GOTREF(__pyx_v_self->conditional);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->conditional));
  __pyx_v_self->conditional = __pyx_v_conditional;

  /* "iter_defs.pxi":545
 *     cdef public Tube conditional
 * 
 *     def __cinit__(self, Tube parent, Tube conditional):             # <<<<<<<<<<<<<<
 *         self.parent = parent
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("tubes.SkipUnless.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "iter_defs.pxi":554
 * 
 * 
 *     cdef IterWrapper _make_iter(self, args):             # <<<<<<<<<<<<<<
 * 
 *         expected_args = len(self._inputs) + len(self._chains)
 */

static struct __pyx_obj_5tubes_IterWrapper *__pyx_f_5tubes_10SkipUnless__make_iter(struct __pyx_obj_5tubes_SkipUnless *__pyx_v_self, PyObject *__pyx_v_args) {
  Py_ssize_t __pyx_v_expected_args;
  PyObject *__pyx_v_chains = NULL;
  PyObject *__pyx_v_iters = NULL;
  struct __pyx_obj_5tubes_IterWrapper *__pyx_v_parent = 0;
  struct __pyx_obj_5tubes_IterWrapper *__pyx_v_conditional = 0;
  ss::iter::SkipUnlessIter *__pyx_v_iter;
  struct __pyx_obj_5tubes_IterWrapper *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  int __pyx_t_4;
  Py_UCS4 __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  ss::iter::SkipUnlessIter *__pyx_t_7;
  __Pyx_RefNannySetupContext("_make_iter", 0);

  /* "iter_defs.pxi":556
 *     cdef IterWrapper _make_iter(self, args):
 * 
 *         expected_args = len(self._inputs) + len(self._chains)             # <<<<<<<<<<<<<<
 *         if len(args) != expected_args:
 *             raise ValueError(f"Expected {expected_args} inputs to _make_iter, got {len(args)}")
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_inputs); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 556, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Length(__pyx_t_1); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1))) __PYX_ERR(3, 556, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_chains); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 556, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyObject_Length(__pyx_t_1); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1))) __PYX_ERR(3, 556, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_expected_args = (__pyx_t_2 + __pyx_t_3);

  /* "iter_defs.pxi":557
 * 
 *         expected_args = len(self._inputs) + len(self._chains)
 *         if len(args) != expected_args:             # <<<<<<<<<<<<<<
 *             raise ValueError(f"Expected {expected_args} inputs to _make_iter, got {len(args)}")
 * 
 */
  __pyx_t_3 = PyObject_Length(__pyx_v_args); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1))) __PYX_ERR(3, 557, __pyx_L1_error)
  __pyx_t_4 = ((__pyx_t_3 != __pyx_v_expected_args) != 0);
  if (__pyx_t_4) {

    /* "iter_defs.pxi":558
 *         expected_args = len(self._inputs) + len(self._chains)
 *         if len(args) != expected_args:
 *             raise ValueError(f"Expected {expected_args} inputs to _make_iter, got {len(args)}")             # <<<<<<<<<<<<<<
 * 
 *         chains = args[:len(self._chains)]
 */
    __pyx_t_1 = PyTuple_New(4); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 558, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = 0;
    __pyx_t_5 = 127;
    __Pyx_INCREF(__pyx_kp_u_Expected);
    __pyx_t_3 += 9;
    __Pyx_GIVEREF(__pyx_kp_u_Expected);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_kp_u_Expected);
    __pyx_t_6 = __Pyx_PyUnicode_From_Py_ssize_t(__pyx_v_expected_args, 0, ' ', 'd'); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 558, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_3 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_6);
    __pyx_t_6 = 0;
    __Pyx_INCREF(__pyx_kp_u_inputs_to__make_iter_got);
    __pyx_t_3 += 27;
    __Pyx_GIVEREF(__pyx_kp_u_inputs_to__make_iter_got);
    PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_kp_u_inputs_to__make_iter_got);
    __pyx_t_2 = PyObject_Length(__pyx_v_args); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1))) __PYX_ERR(3, 558, __pyx_L1_error)
    __pyx_t_6 = __Pyx_PyUnicode_From_Py_ssize_t(__pyx_t_2, 0, ' ', 'd'); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 558, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_3 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_1, 3, __pyx_t_6);
    __pyx_t_6 = 0;
    __pyx_t_6 = __Pyx_PyUnicode_Join(__pyx_t_1, 4, __pyx_t_3, __pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 558, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 558, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_6);
    __pyx_t_6 = 0;
    __pyx_t_6 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_t_1, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 558, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_Raise(__pyx_t_6, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __PYX_ERR(3, 558, __pyx_L1_error)

    /* "iter_defs.pxi":557
 * 
 *         expected_args = len(self._inputs) + len(self._chains)
 *         if len(args) != expected_args:             # <<<<<<<<<<<<<<
 *             raise ValueError(f"Expected {expected_args} inputs to _make_iter, got {len(args)}")
 * 
 */
  }

  /* "iter_defs.pxi":560
 *             raise ValueError(f"Expected {expected_args} inputs to _make_iter, got {len(args)}")
 * 
 *         chains = args[:len(self._chains)]             # <<<<<<<<<<<<<<
 *         iters = args[len(self._chains):]
 *         cdef IterWrapper parent = iters[0]
 */
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_chains); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 560, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_3 = PyObject_Length(__pyx_t_6); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1))) __PYX_ERR(3, 560, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = __Pyx_PyObject_GetSlice(__pyx_v_args, 0, __pyx_t_3, NULL, NULL, NULL, 0, 1, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 560, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_v_chains = __pyx_t_6;
  __pyx_t_6 = 0;

  /* "iter_defs.pxi":561
 * 
 *         chains = args[:len(self._chains)]
 *         iters = args[len(self._chains):]             # <<<<<<<<<<<<<<
 *         cdef IterWrapper parent = iters[0]
 *         cdef IterWrapper conditional = iters[1]
 */
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_chains); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 561, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_3 = PyObject_Length(__pyx_t_6); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1))) __PYX_ERR(3, 561, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = __Pyx_PyObject_GetSlice(__pyx_v_args, __pyx_t_3, 0, NULL, NULL, NULL, 1, 0, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 561, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_v_iters = __pyx_t_6;
  __pyx_t_6 = 0;

  /* "iter_defs.pxi":562
 *         chains = args[:len(self._chains)]
 *         iters = args[len(self._chains):]
 *         cdef IterWrapper parent = iters[0]             # <<<<<<<<<<<<<<
 *         cdef IterWrapper conditional = iters[1]
 *         cdef SkipUnlessIter *iter = new SkipUnlessIter(iters_to_c_chain(chains[0]), parent.iter, conditional.iter)
 */
  __pyx_t_6 = __Pyx_GetItemInt(__pyx_v_iters, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 562, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  if (!(likely(((__pyx_t_6) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_6, __pyx_ptype_5tubes_IterWrapper))))) __PYX_ERR(3, 562, __pyx_L1_error)
  __pyx_v_parent = ((struct __pyx_obj_5tubes_IterWrapper *)__pyx_t_6);
  __pyx_t_6 = 0;

  /* "iter_defs.pxi":563
 *         iters = args[len(self._chains):]
 *         cdef IterWrapper parent = iters[0]
 *         cdef IterWrapper conditional = iters[1]             # <<<<<<<<<<<<<<
 *         cdef SkipUnlessIter *iter = new SkipUnlessIter(iters_to_c_chain(chains[0]), parent.iter, conditional.iter)
 * 
 */
  __pyx_t_6 = __Pyx_GetItemInt(__pyx_v_iters, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 563, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  if (!(likely(((__pyx_t_6) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_6, __pyx_ptype_5tubes_IterWrapper))))) __PYX_ERR(3, 563, __pyx_L1_error)
  __pyx_v_conditional = ((struct __pyx_obj_5tubes_IterWrapper *)__pyx_t_6);
  __pyx_t_6 = 0;

  /* "iter_defs.pxi":564
 *         cdef IterWrapper parent = iters[0]
 *         cdef IterWrapper conditional = iters[1]
 *         cdef SkipUnlessIter *iter = new SkipUnlessIter(iters_to_c_chain(chains[0]), parent.iter, conditional.iter)             # <<<<<<<<<<<<<<
 * 
 *         return wrap(to_any(iter))
 */
  __pyx_t_6 = __Pyx_GetItemInt(__pyx_v_chains, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 564, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  if (!(likely(PyList_CheckExact(__pyx_t_6))||((__pyx_t_6) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(__pyx_t_6)->tp_name), 0))) __PYX_ERR(3, 564, __pyx_L1_error)
  try {
    __pyx_t_7 = new ss::iter::SkipUnlessIter(__pyx_f_5tubes_iters_to_c_chain(((PyObject*)__pyx_t_6)), __pyx_v_parent->iter, __pyx_v_conditional->iter);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(3, 564, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_v_iter = __pyx_t_7;

  /* "iter_defs.pxi":566
 *         cdef SkipUnlessIter *iter = new SkipUnlessIter(iters_to_c_chain(chains[0]), parent.iter, conditional.iter)
 * 
 *         return wrap(to_any(iter))             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __pyx_t_6 = __pyx_f_5tubes_wrap(ss::iter::to_any<ss::iter::SkipUnlessIter>(__pyx_v_iter)); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 566, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  if (!(likely(((__pyx_t_6) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_6, __pyx_ptype_5tubes_IterWrapper))))) __PYX_ERR(3, 566, __pyx_L1_error)
  __pyx_r = ((struct __pyx_obj_5tubes_IterWrapper *)__pyx_t_6);
  __pyx_t_6 = 0;
  goto __pyx_L0;

  /* "iter_defs.pxi":554
 * 
 * 
 *     cdef IterWrapper _make_iter(self, args):             # <<<<<<<<<<<<<<
 * 
 *         expected_args = len(self._inputs) + len(self._chains)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("tubes.SkipUnless._make_iter", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_chains);
  __Pyx_XDECREF(__pyx_v_iters);
  __Pyx_XDECREF((PyObject *)__pyx_v_parent);
  __Pyx_XDECREF((PyObject *)__pyx_v_conditional);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "iter_defs.pxi":569
 * 
 *     @property
 *     def dtype(self):             # <<<<<<<<<<<<<<
 *         return self.parent.dtype
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5tubes_10SkipUnless_5dtype_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5tubes_10SkipUnless_5dtype_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5tubes_10SkipUnless_5dtype___get__(((struct __pyx_obj_5tubes_SkipUnless *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5tubes_10SkipUnless_5dtype___get__(struct __pyx_obj_5tubes_SkipUnless *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "iter_defs.pxi":570
 *     @property
 *     def dtype(self):
 *         return self.parent.dtype             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self->parent), __pyx_n_s_dtype); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 570, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "iter_defs.pxi":569
 * 
 *     @property
 *     def dtype(self):             # <<<<<<<<<<<<<<
 *         return self.parent.dtype
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("tubes.SkipUnless.dtype.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "iter_defs.pxi":573
 * 
 *     @property
 *     def _chains(self):             # <<<<<<<<<<<<<<
 *         return ((self.parent, self.conditional), )
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5tubes_10SkipUnless_7_chains_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5tubes_10SkipUnless_7_chains_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5tubes_10SkipUnless_7_chains___get__(((struct __pyx_obj_5tubes_SkipUnless *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5tubes_10SkipUnless_7_chains___get__(struct __pyx_obj_5tubes_SkipUnless *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "iter_defs.pxi":574
 *     @property
 *     def _chains(self):
 *         return ((self.parent, self.conditional), )             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 574, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->parent));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self->parent));
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_v_self->parent));
  __Pyx_INCREF(((PyObject *)__pyx_v_self->conditional));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self->conditional));
  PyTuple_SET_ITEM(__pyx_t_1, 1, ((PyObject *)__pyx_v_self->conditional));
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 574, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "iter_defs.pxi":573
 * 
 *     @property
 *     def _chains(self):             # <<<<<<<<<<<<<<
 *         return ((self.parent, self.conditional), )
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("tubes.SkipUnless._chains.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "iter_defs.pxi":578
 * 
 *     @property
 *     def _inputs(self):             # <<<<<<<<<<<<<<
 *         return (self.parent, self.conditional, )
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5tubes_10SkipUnless_7_inputs_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5tubes_10SkipUnless_7_inputs_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5tubes_10SkipUnless_7_inputs___get__(((struct __pyx_obj_5tubes_SkipUnless *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5tubes_10SkipUnless_7_inputs___get__(struct __pyx_obj_5tubes_SkipUnless *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "iter_defs.pxi":579
 *     @property
 *     def _inputs(self):
 *         return (self.parent, self.conditional, )             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 579, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->parent));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self->parent));
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_v_self->parent));
  __Pyx_INCREF(((PyObject *)__pyx_v_self->conditional));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self->conditional));
  PyTuple_SET_ITEM(__pyx_t_1, 1, ((PyObject *)__pyx_v_self->conditional));
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "iter_defs.pxi":578
 * 
 *     @property
 *     def _inputs(self):             # <<<<<<<<<<<<<<
 *         return (self.parent, self.conditional, )
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("tubes.SkipUnless._inputs.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "iter_defs.pxi":584
 * 
 * 
 *     cpdef _describe_self(self):             # <<<<<<<<<<<<<<
 *         return f"SkipUnless({self.conditional._repr(self.parent)})"
 * 
 */

static PyObject *__pyx_pw_5tubes_10SkipUnless_3_describe_self(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_f_5tubes_10SkipUnless__describe_self(struct __pyx_obj_5tubes_SkipUnless *__pyx_v_self, CYTHON_UNUSED int __pyx_skip_dispatch) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  Py_UCS4 __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  struct __pyx_opt_args_5tubes_4Tube__repr __pyx_t_6;
  __Pyx_RefNannySetupContext("_describe_self", 0);

  /* "iter_defs.pxi":585
 * 
 *     cpdef _describe_self(self):
 *         return f"SkipUnless({self.conditional._repr(self.parent)})"             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 585, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = 0;
  __pyx_t_3 = 127;
  __Pyx_INCREF(__pyx_kp_u_SkipUnless);
  __pyx_t_2 += 11;
  __Pyx_GIVEREF(__pyx_kp_u_SkipUnless);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_kp_u_SkipUnless);
  __pyx_t_4 = ((PyObject *)__pyx_v_self->parent);
  __Pyx_INCREF(__pyx_t_4);
  __pyx_t_6.__pyx_n = 1;
  __pyx_t_6.stop = __pyx_t_4;
  __pyx_t_5 = ((struct __pyx_vtabstruct_5tubes_Tube *)__pyx_v_self->conditional->__pyx_vtab)->_repr(__pyx_v_self->conditional, &__pyx_t_6); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 585, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_FormatSimple(__pyx_t_5, __pyx_empty_unicode); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 585, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_3 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) > __pyx_t_3) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) : __pyx_t_3;
  __pyx_t_2 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_4);
  __pyx_t_4 = 0;
  __Pyx_INCREF(__pyx_kp_u__27);
  __pyx_t_2 += 1;
  __Pyx_GIVEREF(__pyx_kp_u__27);
  PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_kp_u__27);
  __pyx_t_4 = __Pyx_PyUnicode_Join(__pyx_t_1, 3, __pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 585, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "iter_defs.pxi":584
 * 
 * 
 *     cpdef _describe_self(self):             # <<<<<<<<<<<<<<
 *         return f"SkipUnless({self.conditional._repr(self.parent)})"
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("tubes.SkipUnless._describe_self", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5tubes_10SkipUnless_3_describe_self(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5tubes_10SkipUnless_2_describe_self[] = "SkipUnless._describe_self(self)";
static PyObject *__pyx_pw_5tubes_10SkipUnless_3_describe_self(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_describe_self (wrapper)", 0);
  __pyx_r = __pyx_pf_5tubes_10SkipUnless_2_describe_self(((struct __pyx_obj_5tubes_SkipUnless *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5tubes_10SkipUnless_2_describe_self(struct __pyx_obj_5tubes_SkipUnless *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("_describe_self", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_5tubes_10SkipUnless__describe_self(__pyx_v_self, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 584, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("tubes.SkipUnless._describe_self", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "iter_defs.pxi":542
 * cdef class SkipUnless(Tube):  # AUTO GENERATED FROM tools/defn2.tmpl
 * 
 *     cdef public Tube parent             # <<<<<<<<<<<<<<
 *     cdef public Tube conditional
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5tubes_10SkipUnless_6parent_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5tubes_10SkipUnless_6parent_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5tubes_10SkipUnless_6parent___get__(((struct __pyx_obj_5tubes_SkipUnless *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5tubes_10SkipUnless_6parent___get__(struct __pyx_obj_5tubes_SkipUnless *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->parent));
  __pyx_r = ((PyObject *)__pyx_v_self->parent);
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_5tubes_10SkipUnless_6parent_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_5tubes_10SkipUnless_6parent_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5tubes_10SkipUnless_6parent_2__set__(((struct __pyx_obj_5tubes_SkipUnless *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5tubes_10SkipUnless_6parent_2__set__(struct __pyx_obj_5tubes_SkipUnless *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__set__", 0);
  if (!(likely(((__pyx_v_value) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_value, __pyx_ptype_5tubes_Tube))))) __PYX_ERR(3, 542, __pyx_L1_error)
  __pyx_t_1 = __pyx_v_value;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->parent);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->parent));
  __pyx_v_self->parent = ((struct __pyx_obj_5tubes_Tube *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("tubes.SkipUnless.parent.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_5tubes_10SkipUnless_6parent_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_5tubes_10SkipUnless_6parent_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5tubes_10SkipUnless_6parent_4__del__(((struct __pyx_obj_5tubes_SkipUnless *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5tubes_10SkipUnless_6parent_4__del__(struct __pyx_obj_5tubes_SkipUnless *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->parent);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->parent));
  __pyx_v_self->parent = ((struct __pyx_obj_5tubes_Tube *)Py_None);

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "iter_defs.pxi":543
 * 
 *     cdef public Tube parent
 *     cdef public Tube conditional             # <<<<<<<<<<<<<<
 * 
 *     def __cinit__(self, Tube parent, Tube conditional):
 */

/* Python wrapper */
static PyObject *__pyx_pw_5tubes_10SkipUnless_11conditional_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5tubes_10SkipUnless_11conditional_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5tubes_10SkipUnless_11conditional___get__(((struct __pyx_obj_5tubes_SkipUnless *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5tubes_10SkipUnless_11conditional___get__(struct __pyx_obj_5tubes_SkipUnless *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->conditional));
  __pyx_r = ((PyObject *)__pyx_v_self->conditional);
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_5tubes_10SkipUnless_11conditional_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_5tubes_10SkipUnless_11conditional_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5tubes_10SkipUnless_11conditional_2__set__(((struct __pyx_obj_5tubes_SkipUnless *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5tubes_10SkipUnless_11conditional_2__set__(struct __pyx_obj_5tubes_SkipUnless *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__set__", 0);
  if (!(likely(((__pyx_v_value) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_value, __pyx_ptype_5tubes_Tube))))) __PYX_ERR(3, 543, __pyx_L1_error)
  __pyx_t_1 = __pyx_v_value;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->conditional);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->conditional));
  __pyx_v_self->conditional = ((struct __pyx_obj_5tubes_Tube *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("tubes.SkipUnless.conditional.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_5tubes_10SkipUnless_11conditional_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_5tubes_10SkipUnless_11conditional_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5tubes_10SkipUnless_11conditional_4__del__(((struct __pyx_obj_5tubes_SkipUnless *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5tubes_10SkipUnless_11conditional_4__del__(struct __pyx_obj_5tubes_SkipUnless *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->conditional);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->conditional));
  __pyx_v_self->conditional = ((struct __pyx_obj_5tubes_Tube *)Py_None);

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_5tubes_10SkipUnless_5__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5tubes_10SkipUnless_4__reduce_cython__[] = "SkipUnless.__reduce_cython__(self)";
static PyObject *__pyx_pw_5tubes_10SkipUnless_5__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5tubes_10SkipUnless_4__reduce_cython__(((struct __pyx_obj_5tubes_SkipUnless *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5tubes_10SkipUnless_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5tubes_SkipUnless *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__46, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("tubes.SkipUnless.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_5tubes_10SkipUnless_7__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static char __pyx_doc_5tubes_10SkipUnless_6__setstate_cython__[] = "SkipUnless.__setstate_cython__(self, __pyx_state)";
static PyObject *__pyx_pw_5tubes_10SkipUnless_7__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5tubes_10SkipUnless_6__setstate_cython__(((struct __pyx_obj_5tubes_SkipUnless *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5tubes_10SkipUnless_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5tubes_SkipUnless *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__47, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("tubes.SkipUnless.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "iter_defs.pxi":593
 *     cdef public Tube parent
 * 
 *     def __cinit__(self, Tube parent):             # <<<<<<<<<<<<<<
 * 
 *         if parent.dtype[0] not in (ByteSlice,):
 */

/* Python wrapper */
static int __pyx_pw_5tubes_8ReadFile_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_5tubes_8ReadFile_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_5tubes_Tube *__pyx_v_parent = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_parent,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_parent)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(3, 593, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_parent = ((struct __pyx_obj_5tubes_Tube *)values[0]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(3, 593, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("tubes.ReadFile.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_parent), __pyx_ptype_5tubes_Tube, 1, "parent", 0))) __PYX_ERR(3, 593, __pyx_L1_error)
  __pyx_r = __pyx_pf_5tubes_8ReadFile___cinit__(((struct __pyx_obj_5tubes_ReadFile *)__pyx_v_self), __pyx_v_parent);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5tubes_8ReadFile___cinit__(struct __pyx_obj_5tubes_ReadFile *__pyx_v_self, struct __pyx_obj_5tubes_Tube *__pyx_v_parent) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "iter_defs.pxi":595
 *     def __cinit__(self, Tube parent):
 * 
 *         if parent.dtype[0] not in (ByteSlice,):             # <<<<<<<<<<<<<<
 *             raise ValueError(f"Cannot make a ReadFile Tube with 'parent' tube of type { parent.dtype[0] }")
 *         self.parent = parent
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_parent), __pyx_n_s_dtype); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 595, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_t_1, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 595, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_ByteSlice); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 595, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyObject_RichCompare(__pyx_t_2, __pyx_t_1, Py_NE); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 595, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(3, 595, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_5 = (__pyx_t_4 != 0);
  if (__pyx_t_5) {

    /* "iter_defs.pxi":596
 * 
 *         if parent.dtype[0] not in (ByteSlice,):
 *             raise ValueError(f"Cannot make a ReadFile Tube with 'parent' tube of type { parent.dtype[0] }")             # <<<<<<<<<<<<<<
 *         self.parent = parent
 * 
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_parent), __pyx_n_s_dtype); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 596, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_GetItemInt(__pyx_t_2, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 596, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyObject_FormatSimple(__pyx_t_3, __pyx_empty_unicode); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 596, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyUnicode_Concat(__pyx_kp_u_Cannot_make_a_ReadFile_Tube_with, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 596, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 596, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_3);
    __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 596, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(3, 596, __pyx_L1_error)

    /* "iter_defs.pxi":595
 *     def __cinit__(self, Tube parent):
 * 
 *         if parent.dtype[0] not in (ByteSlice,):             # <<<<<<<<<<<<<<
 *             raise ValueError(f"Cannot make a ReadFile Tube with 'parent' tube of type { parent.dtype[0] }")
 *         self.parent = parent
 */
  }

  /* "iter_defs.pxi":597
 *         if parent.dtype[0] not in (ByteSlice,):
 *             raise ValueError(f"Cannot make a ReadFile Tube with 'parent' tube of type { parent.dtype[0] }")
 *         self.parent = parent             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_parent));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_parent));
  __Pyx_GOTREF(__pyx_v_self->parent);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->parent));
  __pyx_v_self->parent = __pyx_v_parent;

  /* "iter_defs.pxi":593
 *     cdef public Tube parent
 * 
 *     def __cinit__(self, Tube parent):             # <<<<<<<<<<<<<<
 * 
 *         if parent.dtype[0] not in (ByteSlice,):
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("tubes.ReadFile.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "iter_defs.pxi":601
 * 
 * 
 *     cdef IterWrapper _make_iter(self, args):             # <<<<<<<<<<<<<<
 * 
 *         expected_args = len(self._inputs) + len(self._chains)
 */

static struct __pyx_obj_5tubes_IterWrapper *__pyx_f_5tubes_8ReadFile__make_iter(struct __pyx_obj_5tubes_ReadFile *__pyx_v_self, PyObject *__pyx_v_args) {
  Py_ssize_t __pyx_v_expected_args;
  PyObject *__pyx_v_chains = NULL;
  PyObject *__pyx_v_iters = NULL;
  struct __pyx_obj_5tubes_IterWrapper *__pyx_v_parent = 0;
  ss::iter::ReadFileIter *__pyx_v_iter;
  struct __pyx_obj_5tubes_IterWrapper *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  int __pyx_t_4;
  Py_UCS4 __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  ss::iter::ReadFileIter *__pyx_t_7;
  __Pyx_RefNannySetupContext("_make_iter", 0);

  /* "iter_defs.pxi":603
 *     cdef IterWrapper _make_iter(self, args):
 * 
 *         expected_args = len(self._inputs) + len(self._chains)             # <<<<<<<<<<<<<<
 *         if len(args) != expected_args:
 *             raise ValueError(f"Expected {expected_args} inputs to _make_iter, got {len(args)}")
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_inputs); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 603, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Length(__pyx_t_1); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1))) __PYX_ERR(3, 603, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_chains); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 603, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyObject_Length(__pyx_t_1); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1))) __PYX_ERR(3, 603, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_expected_args = (__pyx_t_2 + __pyx_t_3);

  /* "iter_defs.pxi":604
 * 
 *         expected_args = len(self._inputs) + len(self._chains)
 *         if len(args) != expected_args:             # <<<<<<<<<<<<<<
 *             raise ValueError(f"Expected {expected_args} inputs to _make_iter, got {len(args)}")
 * 
 */
  __pyx_t_3 = PyObject_Length(__pyx_v_args); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1))) __PYX_ERR(3, 604, __pyx_L1_error)
  __pyx_t_4 = ((__pyx_t_3 != __pyx_v_expected_args) != 0);
  if (__pyx_t_4) {

    /* "iter_defs.pxi":605
 *         expected_args = len(self._inputs) + len(self._chains)
 *         if len(args) != expected_args:
 *             raise ValueError(f"Expected {expected_args} inputs to _make_iter, got {len(args)}")             # <<<<<<<<<<<<<<
 * 
 *         chains = args[:len(self._chains)]
 */
    __pyx_t_1 = PyTuple_New(4); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 605, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = 0;
    __pyx_t_5 = 127;
    __Pyx_INCREF(__pyx_kp_u_Expected);
    __pyx_t_3 += 9;
    __Pyx_GIVEREF(__pyx_kp_u_Expected);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_kp_u_Expected);
    __pyx_t_6 = __Pyx_PyUnicode_From_Py_ssize_t(__pyx_v_expected_args, 0, ' ', 'd'); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 605, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_3 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_6);
    __pyx_t_6 = 0;
    __Pyx_INCREF(__pyx_kp_u_inputs_to__make_iter_got);
    __pyx_t_3 += 27;
    __Pyx_GIVEREF(__pyx_kp_u_inputs_to__make_iter_got);
    PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_kp_u_inputs_to__make_iter_got);
    __pyx_t_2 = PyObject_Length(__pyx_v_args); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1))) __PYX_ERR(3, 605, __pyx_L1_error)
    __pyx_t_6 = __Pyx_PyUnicode_From_Py_ssize_t(__pyx_t_2, 0, ' ', 'd'); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 605, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_3 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_1, 3, __pyx_t_6);
    __pyx_t_6 = 0;
    __pyx_t_6 = __Pyx_PyUnicode_Join(__pyx_t_1, 4, __pyx_t_3, __pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 605, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 605, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_6);
    __pyx_t_6 = 0;
    __pyx_t_6 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_t_1, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 605, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_Raise(__pyx_t_6, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __PYX_ERR(3, 605, __pyx_L1_error)

    /* "iter_defs.pxi":604
 * 
 *         expected_args = len(self._inputs) + len(self._chains)
 *         if len(args) != expected_args:             # <<<<<<<<<<<<<<
 *             raise ValueError(f"Expected {expected_args} inputs to _make_iter, got {len(args)}")
 * 
 */
  }

  /* "iter_defs.pxi":607
 *             raise ValueError(f"Expected {expected_args} inputs to _make_iter, got {len(args)}")
 * 
 *         chains = args[:len(self._chains)]             # <<<<<<<<<<<<<<
 *         iters = args[len(self._chains):]
 *         cdef IterWrapper parent = iters[0]
 */
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_chains); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 607, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_3 = PyObject_Length(__pyx_t_6); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1))) __PYX_ERR(3, 607, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = __Pyx_PyObject_GetSlice(__pyx_v_args, 0, __pyx_t_3, NULL, NULL, NULL, 0, 1, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 607, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_v_chains = __pyx_t_6;
  __pyx_t_6 = 0;

  /* "iter_defs.pxi":608
 * 
 *         chains = args[:len(self._chains)]
 *         iters = args[len(self._chains):]             # <<<<<<<<<<<<<<
 *         cdef IterWrapper parent = iters[0]
 *         cdef ReadFileIter *iter = new ReadFileIter(iters_to_c_chain(chains[0]), parent.iter)
 */
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_chains); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 608, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_3 = PyObject_Length(__pyx_t_6); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1))) __PYX_ERR(3, 608, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = __Pyx_PyObject_GetSlice(__pyx_v_args, __pyx_t_3, 0, NULL, NULL, NULL, 1, 0, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 608, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_v_iters = __pyx_t_6;
  __pyx_t_6 = 0;

  /* "iter_defs.pxi":609
 *         chains = args[:len(self._chains)]
 *         iters = args[len(self._chains):]
 *         cdef IterWrapper parent = iters[0]             # <<<<<<<<<<<<<<
 *         cdef ReadFileIter *iter = new ReadFileIter(iters_to_c_chain(chains[0]), parent.iter)
 * 
 */
  __pyx_t_6 = __Pyx_GetItemInt(__pyx_v_iters, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 609, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  if (!(likely(((__pyx_t_6) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_6, __pyx_ptype_5tubes_IterWrapper))))) __PYX_ERR(3, 609, __pyx_L1_error)
  __pyx_v_parent = ((struct __pyx_obj_5tubes_IterWrapper *)__pyx_t_6);
  __pyx_t_6 = 0;

  /* "iter_defs.pxi":610
 *         iters = args[len(self._chains):]
 *         cdef IterWrapper parent = iters[0]
 *         cdef ReadFileIter *iter = new ReadFileIter(iters_to_c_chain(chains[0]), parent.iter)             # <<<<<<<<<<<<<<
 * 
 *         return wrap(to_any(iter))
 */
  __pyx_t_6 = __Pyx_GetItemInt(__pyx_v_chains, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 610, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  if (!(likely(PyList_CheckExact(__pyx_t_6))||((__pyx_t_6) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(__pyx_t_6)->tp_name), 0))) __PYX_ERR(3, 610, __pyx_L1_error)
  try {
    __pyx_t_7 = new ss::iter::ReadFileIter(__pyx_f_5tubes_iters_to_c_chain(((PyObject*)__pyx_t_6)), __pyx_v_parent->iter);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(3, 610, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_v_iter = __pyx_t_7;

  /* "iter_defs.pxi":612
 *         cdef ReadFileIter *iter = new ReadFileIter(iters_to_c_chain(chains[0]), parent.iter)
 * 
 *         return wrap(to_any(iter))             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __pyx_t_6 = __pyx_f_5tubes_wrap(ss::iter::to_any<ss::iter::ReadFileIter>(__pyx_v_iter)); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 612, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  if (!(likely(((__pyx_t_6) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_6, __pyx_ptype_5tubes_IterWrapper))))) __PYX_ERR(3, 612, __pyx_L1_error)
  __pyx_r = ((struct __pyx_obj_5tubes_IterWrapper *)__pyx_t_6);
  __pyx_t_6 = 0;
  goto __pyx_L0;

  /* "iter_defs.pxi":601
 * 
 * 
 *     cdef IterWrapper _make_iter(self, args):             # <<<<<<<<<<<<<<
 * 
 *         expected_args = len(self._inputs) + len(self._chains)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("tubes.ReadFile._make_iter", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_chains);
  __Pyx_XDECREF(__pyx_v_iters);
  __Pyx_XDECREF((PyObject *)__pyx_v_parent);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "iter_defs.pxi":615
 * 
 *     @property
 *     def dtype(self):             # <<<<<<<<<<<<<<
 *         return (ByteSlice, )
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5tubes_8ReadFile_5dtype_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5tubes_8ReadFile_5dtype_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5tubes_8ReadFile_5dtype___get__(((struct __pyx_obj_5tubes_ReadFile *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5tubes_8ReadFile_5dtype___get__(CYTHON_UNUSED struct __pyx_obj_5tubes_ReadFile *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "iter_defs.pxi":616
 *     @property
 *     def dtype(self):
 *         return (ByteSlice, )             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_ByteSlice); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 616, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 616, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "iter_defs.pxi":615
 * 
 *     @property
 *     def dtype(self):             # <<<<<<<<<<<<<<
 *         return (ByteSlice, )
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("tubes.ReadFile.dtype.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "iter_defs.pxi":619
 * 
 *     @property
 *     def _chains(self):             # <<<<<<<<<<<<<<
 *         return ((self.parent, ), )
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5tubes_8ReadFile_7_chains_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5tubes_8ReadFile_7_chains_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5tubes_8ReadFile_7_chains___get__(((struct __pyx_obj_5tubes_ReadFile *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5tubes_8ReadFile_7_chains___get__(struct __pyx_obj_5tubes_ReadFile *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "iter_defs.pxi":620
 *     @property
 *     def _chains(self):
 *         return ((self.parent, ), )             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 620, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->parent));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self->parent));
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_v_self->parent));
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 620, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "iter_defs.pxi":619
 * 
 *     @property
 *     def _chains(self):             # <<<<<<<<<<<<<<
 *         return ((self.parent, ), )
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("tubes.ReadFile._chains.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "iter_defs.pxi":624
 * 
 *     @property
 *     def _inputs(self):             # <<<<<<<<<<<<<<
 *         return (self.parent, )
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5tubes_8ReadFile_7_inputs_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5tubes_8ReadFile_7_inputs_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5tubes_8ReadFile_7_inputs___get__(((struct __pyx_obj_5tubes_ReadFile *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5tubes_8ReadFile_7_inputs___get__(struct __pyx_obj_5tubes_ReadFile *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "iter_defs.pxi":625
 *     @property
 *     def _inputs(self):
 *         return (self.parent, )             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 625, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->parent));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self->parent));
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_v_self->parent));
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "iter_defs.pxi":624
 * 
 *     @property
 *     def _inputs(self):             # <<<<<<<<<<<<<<
 *         return (self.parent, )
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("tubes.ReadFile._inputs.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "iter_defs.pxi":629
 * 
 * 
 *     cpdef _describe_self(self):             # <<<<<<<<<<<<<<
 *         return f"ReadFile()"
 * 
 */

static PyObject *__pyx_pw_5tubes_8ReadFile_3_describe_self(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_f_5tubes_8ReadFile__describe_self(CYTHON_UNUSED struct __pyx_obj_5tubes_ReadFile *__pyx_v_self, CYTHON_UNUSED int __pyx_skip_dispatch) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_describe_self", 0);

  /* "iter_defs.pxi":630
 * 
 *     cpdef _describe_self(self):
 *         return f"ReadFile()"             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_kp_u_ReadFile);
  __pyx_r = __pyx_kp_u_ReadFile;
  goto __pyx_L0;

  /* "iter_defs.pxi":629
 * 
 * 
 *     cpdef _describe_self(self):             # <<<<<<<<<<<<<<
 *         return f"ReadFile()"
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5tubes_8ReadFile_3_describe_self(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5tubes_8ReadFile_2_describe_self[] = "ReadFile._describe_self(self)";
static PyObject *__pyx_pw_5tubes_8ReadFile_3_describe_self(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_describe_self (wrapper)", 0);
  __pyx_r = __pyx_pf_5tubes_8ReadFile_2_describe_self(((struct __pyx_obj_5tubes_ReadFile *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5tubes_8ReadFile_2_describe_self(struct __pyx_obj_5tubes_ReadFile *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("_describe_self", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_5tubes_8ReadFile__describe_self(__pyx_v_self, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 629, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("tubes.ReadFile._describe_self", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "iter_defs.pxi":591
 * cdef class ReadFile(Tube):  # AUTO GENERATED FROM tools/defn2.tmpl
 * 
 *     cdef public Tube parent             # <<<<<<<<<<<<<<
 * 
 *     def __cinit__(self, Tube parent):
 */

/* Python wrapper */
static PyObject *__pyx_pw_5tubes_8ReadFile_6parent_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5tubes_8ReadFile_6parent_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5tubes_8ReadFile_6parent___get__(((struct __pyx_obj_5tubes_ReadFile *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5tubes_8ReadFile_6parent___get__(struct __pyx_obj_5tubes_ReadFile *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->parent));
  __pyx_r = ((PyObject *)__pyx_v_self->parent);
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_5tubes_8ReadFile_6parent_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_5tubes_8ReadFile_6parent_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5tubes_8ReadFile_6parent_2__set__(((struct __pyx_obj_5tubes_ReadFile *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5tubes_8ReadFile_6parent_2__set__(struct __pyx_obj_5tubes_ReadFile *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__set__", 0);
  if (!(likely(((__pyx_v_value) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_value, __pyx_ptype_5tubes_Tube))))) __PYX_ERR(3, 591, __pyx_L1_error)
  __pyx_t_1 = __pyx_v_value;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->parent);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->parent));
  __pyx_v_self->parent = ((struct __pyx_obj_5tubes_Tube *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("tubes.ReadFile.parent.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_5tubes_8ReadFile_6parent_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_5tubes_8ReadFile_6parent_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5tubes_8ReadFile_6parent_4__del__(((struct __pyx_obj_5tubes_ReadFile *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5tubes_8ReadFile_6parent_4__del__(struct __pyx_obj_5tubes_ReadFile *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->parent);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->parent));
  __pyx_v_self->parent = ((struct __pyx_obj_5tubes_Tube *)Py_None);

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_5tubes_8ReadFile_5__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5tubes_8ReadFile_4__reduce_cython__[] = "ReadFile.__reduce_cython__(self)";
static PyObject *__pyx_pw_5tubes_8ReadFile_5__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5tubes_8ReadFile_4__reduce_cython__(((struct __pyx_obj_5tubes_ReadFile *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5tubes_8ReadFile_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5tubes_ReadFile *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__48, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("tubes.ReadFile.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_5tubes_8ReadFile_7__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static char __pyx_doc_5tubes_8ReadFile_6__setstate_cython__[] = "ReadFile.__setstate_cython__(self, __pyx_state)";
static PyObject *__pyx_pw_5tubes_8ReadFile_7__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5tubes_8ReadFile_6__setstate_cython__(((struct __pyx_obj_5tubes_ReadFile *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5tubes_8ReadFile_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5tubes_ReadFile *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__49, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("tubes.ReadFile.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "iter_defs.pxi":640
 *     cdef public list parents
 * 
 *     def __cinit__(self, list parents):             # <<<<<<<<<<<<<<
 *         self.parents = parents
 * 
 */

/* Python wrapper */
static int __pyx_pw_5tubes_10ChainTubes_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_5tubes_10ChainTubes_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_parents = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_parents,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_parents)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(3, 640, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_parents = ((PyObject*)values[0]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(3, 640, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("tubes.ChainTubes.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_parents), (&PyList_Type), 1, "parents", 1))) __PYX_ERR(3, 640, __pyx_L1_error)
  __pyx_r = __pyx_pf_5tubes_10ChainTubes___cinit__(((struct __pyx_obj_5tubes_ChainTubes *)__pyx_v_self), __pyx_v_parents);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5tubes_10ChainTubes___cinit__(struct __pyx_obj_5tubes_ChainTubes *__pyx_v_self, PyObject *__pyx_v_parents) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "iter_defs.pxi":641
 * 
 *     def __cinit__(self, list parents):
 *         self.parents = parents             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_INCREF(__pyx_v_parents);
  __Pyx_GIVEREF(__pyx_v_parents);
  __Pyx_GOTREF(__pyx_v_self->parents);
  __Pyx_DECREF(__pyx_v_self->parents);
  __pyx_v_self->parents = __pyx_v_parents;

  /* "iter_defs.pxi":640
 *     cdef public list parents
 * 
 *     def __cinit__(self, list parents):             # <<<<<<<<<<<<<<
 *         self.parents = parents
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "iter_defs.pxi":645
 * 
 * 
 *     cdef IterWrapper _make_iter(self, args):             # <<<<<<<<<<<<<<
 * 
 *         expected_args = len(self._inputs) + len(self._chains)
 */

static struct __pyx_obj_5tubes_IterWrapper *__pyx_f_5tubes_10ChainTubes__make_iter(struct __pyx_obj_5tubes_ChainTubes *__pyx_v_self, PyObject *__pyx_v_args) {
  Py_ssize_t __pyx_v_expected_args;
  PyObject *__pyx_v_chains = NULL;
  PyObject *__pyx_v_iters = NULL;
  PyObject *__pyx_v_unique_inputs = NULL;
  PyObject *__pyx_v_p = NULL;
  ss::iter::ChainIter *__pyx_v_iter;
  struct __pyx_obj_5tubes_IterWrapper *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  int __pyx_t_4;
  Py_UCS4 __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *(*__pyx_t_7)(PyObject *);
  int __pyx_t_8;
  ss::iter::ChainIter *__pyx_t_9;
  __Pyx_RefNannySetupContext("_make_iter", 0);

  /* "iter_defs.pxi":647
 *     cdef IterWrapper _make_iter(self, args):
 * 
 *         expected_args = len(self._inputs) + len(self._chains)             # <<<<<<<<<<<<<<
 *         if len(args) != expected_args:
 *             raise ValueError(f"Expected {expected_args} inputs to _make_iter, got {len(args)}")
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_inputs); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 647, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Length(__pyx_t_1); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1))) __PYX_ERR(3, 647, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_chains); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 647, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyObject_Length(__pyx_t_1); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1))) __PYX_ERR(3, 647, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_expected_args = (__pyx_t_2 + __pyx_t_3);

  /* "iter_defs.pxi":648
 * 
 *         expected_args = len(self._inputs) + len(self._chains)
 *         if len(args) != expected_args:             # <<<<<<<<<<<<<<
 *             raise ValueError(f"Expected {expected_args} inputs to _make_iter, got {len(args)}")
 * 
 */
  __pyx_t_3 = PyObject_Length(__pyx_v_args); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1))) __PYX_ERR(3, 648, __pyx_L1_error)
  __pyx_t_4 = ((__pyx_t_3 != __pyx_v_expected_args) != 0);
  if (__pyx_t_4) {

    /* "iter_defs.pxi":649
 *         expected_args = len(self._inputs) + len(self._chains)
 *         if len(args) != expected_args:
 *             raise ValueError(f"Expected {expected_args} inputs to _make_iter, got {len(args)}")             # <<<<<<<<<<<<<<
 * 
 *         chains = args[:len(self._chains)]
 */
    __pyx_t_1 = PyTuple_New(4); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 649, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = 0;
    __pyx_t_5 = 127;
    __Pyx_INCREF(__pyx_kp_u_Expected);
    __pyx_t_3 += 9;
    __Pyx_GIVEREF(__pyx_kp_u_Expected);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_kp_u_Expected);
    __pyx_t_6 = __Pyx_PyUnicode_From_Py_ssize_t(__pyx_v_expected_args, 0, ' ', 'd'); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 649, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_3 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_6);
    __pyx_t_6 = 0;
    __Pyx_INCREF(__pyx_kp_u_inputs_to__make_iter_got);
    __pyx_t_3 += 27;
    __Pyx_GIVEREF(__pyx_kp_u_inputs_to__make_iter_got);
    PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_kp_u_inputs_to__make_iter_got);
    __pyx_t_2 = PyObject_Length(__pyx_v_args); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1))) __PYX_ERR(3, 649, __pyx_L1_error)
    __pyx_t_6 = __Pyx_PyUnicode_From_Py_ssize_t(__pyx_t_2, 0, ' ', 'd'); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 649, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_3 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_1, 3, __pyx_t_6);
    __pyx_t_6 = 0;
    __pyx_t_6 = __Pyx_PyUnicode_Join(__pyx_t_1, 4, __pyx_t_3, __pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 649, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 649, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_6);
    __pyx_t_6 = 0;
    __pyx_t_6 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_t_1, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 649, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_Raise(__pyx_t_6, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __PYX_ERR(3, 649, __pyx_L1_error)

    /* "iter_defs.pxi":648
 * 
 *         expected_args = len(self._inputs) + len(self._chains)
 *         if len(args) != expected_args:             # <<<<<<<<<<<<<<
 *             raise ValueError(f"Expected {expected_args} inputs to _make_iter, got {len(args)}")
 * 
 */
  }

  /* "iter_defs.pxi":651
 *             raise ValueError(f"Expected {expected_args} inputs to _make_iter, got {len(args)}")
 * 
 *         chains = args[:len(self._chains)]             # <<<<<<<<<<<<<<
 *         iters = args[len(self._chains):]
 * 
 */
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_chains); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 651, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_3 = PyObject_Length(__pyx_t_6); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1))) __PYX_ERR(3, 651, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = __Pyx_PyObject_GetSlice(__pyx_v_args, 0, __pyx_t_3, NULL, NULL, NULL, 0, 1, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 651, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_v_chains = __pyx_t_6;
  __pyx_t_6 = 0;

  /* "iter_defs.pxi":652
 * 
 *         chains = args[:len(self._chains)]
 *         iters = args[len(self._chains):]             # <<<<<<<<<<<<<<
 * 
 *         unique_inputs = set()
 */
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_chains); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 652, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_3 = PyObject_Length(__pyx_t_6); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1))) __PYX_ERR(3, 652, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = __Pyx_PyObject_GetSlice(__pyx_v_args, __pyx_t_3, 0, NULL, NULL, NULL, 1, 0, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 652, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_v_iters = __pyx_t_6;
  __pyx_t_6 = 0;

  /* "iter_defs.pxi":654
 *         iters = args[len(self._chains):]
 * 
 *         unique_inputs = set()             # <<<<<<<<<<<<<<
 *         for p in self.parent:
 *             unique_inputs.add(p.dtype)
 */
  __pyx_t_6 = PySet_New(0); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 654, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_v_unique_inputs = ((PyObject*)__pyx_t_6);
  __pyx_t_6 = 0;

  /* "iter_defs.pxi":655
 * 
 *         unique_inputs = set()
 *         for p in self.parent:             # <<<<<<<<<<<<<<
 *             unique_inputs.add(p.dtype)
 *         # This should work...
 */
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_parent); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 655, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  if (likely(PyList_CheckExact(__pyx_t_6)) || PyTuple_CheckExact(__pyx_t_6)) {
    __pyx_t_1 = __pyx_t_6; __Pyx_INCREF(__pyx_t_1); __pyx_t_3 = 0;
    __pyx_t_7 = NULL;
  } else {
    __pyx_t_3 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 655, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_7 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_7)) __PYX_ERR(3, 655, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  for (;;) {
    if (likely(!__pyx_t_7)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_6 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_3); __Pyx_INCREF(__pyx_t_6); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(3, 655, __pyx_L1_error)
        #else
        __pyx_t_6 = PySequence_ITEM(__pyx_t_1, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 655, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        #endif
      } else {
        if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_6 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_3); __Pyx_INCREF(__pyx_t_6); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(3, 655, __pyx_L1_error)
        #else
        __pyx_t_6 = PySequence_ITEM(__pyx_t_1, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 655, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        #endif
      }
    } else {
      __pyx_t_6 = __pyx_t_7(__pyx_t_1);
      if (unlikely(!__pyx_t_6)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(3, 655, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_6);
    }
    __Pyx_XDECREF_SET(__pyx_v_p, __pyx_t_6);
    __pyx_t_6 = 0;

    /* "iter_defs.pxi":656
 *         unique_inputs = set()
 *         for p in self.parent:
 *             unique_inputs.add(p.dtype)             # <<<<<<<<<<<<<<
 *         # This should work...
 *         # if len(set(p.dtype for p in self.parent)) > 1:
 */
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_p, __pyx_n_s_dtype); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 656, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_8 = PySet_Add(__pyx_v_unique_inputs, __pyx_t_6); if (unlikely(__pyx_t_8 == ((int)-1))) __PYX_ERR(3, 656, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

    /* "iter_defs.pxi":655
 * 
 *         unique_inputs = set()
 *         for p in self.parent:             # <<<<<<<<<<<<<<
 *             unique_inputs.add(p.dtype)
 *         # This should work...
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "iter_defs.pxi":660
 *         # if len(set(p.dtype for p in self.parent)) > 1:
 *         #     raise ValueError("Chain requires all inputs to have the same dtype")
 *         if len(unique_inputs) > 1:             # <<<<<<<<<<<<<<
 *             raise ValueError("Chain requires all inputs to have the same dtype")
 *         cdef ChainIter *iter = new ChainIter(self._make_chains(chains), self._make_iters(iters))
 */
  __pyx_t_3 = PySet_GET_SIZE(__pyx_v_unique_inputs); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1))) __PYX_ERR(3, 660, __pyx_L1_error)
  __pyx_t_4 = ((__pyx_t_3 > 1) != 0);
  if (__pyx_t_4) {

    /* "iter_defs.pxi":661
 *         #     raise ValueError("Chain requires all inputs to have the same dtype")
 *         if len(unique_inputs) > 1:
 *             raise ValueError("Chain requires all inputs to have the same dtype")             # <<<<<<<<<<<<<<
 *         cdef ChainIter *iter = new ChainIter(self._make_chains(chains), self._make_iters(iters))
 * 
 */
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__50, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 661, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(3, 661, __pyx_L1_error)

    /* "iter_defs.pxi":660
 *         # if len(set(p.dtype for p in self.parent)) > 1:
 *         #     raise ValueError("Chain requires all inputs to have the same dtype")
 *         if len(unique_inputs) > 1:             # <<<<<<<<<<<<<<
 *             raise ValueError("Chain requires all inputs to have the same dtype")
 *         cdef ChainIter *iter = new ChainIter(self._make_chains(chains), self._make_iters(iters))
 */
  }

  /* "iter_defs.pxi":662
 *         if len(unique_inputs) > 1:
 *             raise ValueError("Chain requires all inputs to have the same dtype")
 *         cdef ChainIter *iter = new ChainIter(self._make_chains(chains), self._make_iters(iters))             # <<<<<<<<<<<<<<
 * 
 *         return wrap(to_any(iter))
 */
  if (!(likely(PyList_CheckExact(__pyx_v_chains))||((__pyx_v_chains) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(__pyx_v_chains)->tp_name), 0))) __PYX_ERR(3, 662, __pyx_L1_error)
  if (!(likely(PyList_CheckExact(__pyx_v_iters))||((__pyx_v_iters) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(__pyx_v_iters)->tp_name), 0))) __PYX_ERR(3, 662, __pyx_L1_error)
  try {
    __pyx_t_9 = new ss::iter::ChainIter(__pyx_f_5tubes_10ChainTubes__make_chains(__pyx_v_self, ((PyObject*)__pyx_v_chains)), __pyx_f_5tubes_10ChainTubes__make_iters(__pyx_v_self, ((PyObject*)__pyx_v_iters)));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(3, 662, __pyx_L1_error)
  }
  __pyx_v_iter = __pyx_t_9;

  /* "iter_defs.pxi":664
 *         cdef ChainIter *iter = new ChainIter(self._make_chains(chains), self._make_iters(iters))
 * 
 *         return wrap(to_any(iter))             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __pyx_t_1 = __pyx_f_5tubes_wrap(ss::iter::to_any<ss::iter::ChainIter>(__pyx_v_iter)); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 664, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5tubes_IterWrapper))))) __PYX_ERR(3, 664, __pyx_L1_error)
  __pyx_r = ((struct __pyx_obj_5tubes_IterWrapper *)__pyx_t_1);
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "iter_defs.pxi":645
 * 
 * 
 *     cdef IterWrapper _make_iter(self, args):             # <<<<<<<<<<<<<<
 * 
 *         expected_args = len(self._inputs) + len(self._chains)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("tubes.ChainTubes._make_iter", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_chains);
  __Pyx_XDECREF(__pyx_v_iters);
  __Pyx_XDECREF(__pyx_v_unique_inputs);
  __Pyx_XDECREF(__pyx_v_p);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "iter_defs.pxi":667
 * 
 *     @property
 *     def dtype(self):             # <<<<<<<<<<<<<<
 *         return self.parents[0].dtype
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5tubes_10ChainTubes_5dtype_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5tubes_10ChainTubes_5dtype_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5tubes_10ChainTubes_5dtype___get__(((struct __pyx_obj_5tubes_ChainTubes *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5tubes_10ChainTubes_5dtype___get__(struct __pyx_obj_5tubes_ChainTubes *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "iter_defs.pxi":668
 *     @property
 *     def dtype(self):
 *         return self.parents[0].dtype             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  if (unlikely(__pyx_v_self->parents == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(3, 668, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_List(__pyx_v_self->parents, 0, long, 1, __Pyx_PyInt_From_long, 1, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 668, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_dtype); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 668, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "iter_defs.pxi":667
 * 
 *     @property
 *     def dtype(self):             # <<<<<<<<<<<<<<
 *         return self.parents[0].dtype
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("tubes.ChainTubes.dtype.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "iter_defs.pxi":671
 * 
 *     @property
 *     def _chains(self):             # <<<<<<<<<<<<<<
 *         return tuple((p, ) for p in self.parents)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5tubes_10ChainTubes_7_chains_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5tubes_10ChainTubes_7_chains_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5tubes_10ChainTubes_7_chains___get__(((struct __pyx_obj_5tubes_ChainTubes *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_5tubes_10ChainTubes_7_chains_7__get___2generator5(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "iter_defs.pxi":672
 *     @property
 *     def _chains(self):
 *         return tuple((p, ) for p in self.parents)             # <<<<<<<<<<<<<<
 * 
 * 
 */

static PyObject *__pyx_pf_5tubes_10ChainTubes_7_chains_7__get___genexpr(PyObject *__pyx_self) {
  struct __pyx_obj_5tubes___pyx_scope_struct_10_genexpr *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("genexpr", 0);
  __pyx_cur_scope = (struct __pyx_obj_5tubes___pyx_scope_struct_10_genexpr *)__pyx_tp_new_5tubes___pyx_scope_struct_10_genexpr(__pyx_ptype_5tubes___pyx_scope_struct_10_genexpr, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_5tubes___pyx_scope_struct_10_genexpr *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(3, 672, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_outer_scope = (struct __pyx_obj_5tubes___pyx_scope_struct_9___get__ *) __pyx_self;
  __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_outer_scope));
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_outer_scope);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_5tubes_10ChainTubes_7_chains_7__get___2generator5, (PyObject *) __pyx_cur_scope, __pyx_n_s_genexpr, __pyx_n_s_ChainTubes___get___locals_genexp, __pyx_n_s_tubes); if (unlikely(!gen)) __PYX_ERR(3, 672, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("tubes.ChainTubes._chains.__get__.genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_5tubes_10ChainTubes_7_chains_7__get___2generator5(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_5tubes___pyx_scope_struct_10_genexpr *__pyx_cur_scope = ((struct __pyx_obj_5tubes___pyx_scope_struct_10_genexpr *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("genexpr", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L6_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(3, 672, __pyx_L1_error)
  if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_self)) { __Pyx_RaiseClosureNameError("self"); __PYX_ERR(3, 672, __pyx_L1_error) }
  if (unlikely(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_self->parents == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(3, 672, __pyx_L1_error)
  }
  __pyx_t_1 = __pyx_cur_scope->__pyx_outer_scope->__pyx_v_self->parents; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
  for (;;) {
    if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_3 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_3); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(3, 672, __pyx_L1_error)
    #else
    __pyx_t_3 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 672, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    #endif
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_p);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_p, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_3);
    __pyx_t_3 = 0;
    __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 672, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_cur_scope->__pyx_v_p);
    __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_p);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_cur_scope->__pyx_v_p);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    __Pyx_XGIVEREF(__pyx_t_1);
    __pyx_cur_scope->__pyx_t_0 = __pyx_t_1;
    __pyx_cur_scope->__pyx_t_1 = __pyx_t_2;
    __Pyx_XGIVEREF(__pyx_r);
    __Pyx_RefNannyFinishContext();
    __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
    /* return from generator, yielding value */
    __pyx_generator->resume_label = 1;
    return __pyx_r;
    __pyx_L6_resume_from_yield:;
    __pyx_t_1 = __pyx_cur_scope->__pyx_t_0;
    __pyx_cur_scope->__pyx_t_0 = 0;
    __Pyx_XGOTREF(__pyx_t_1);
    __pyx_t_2 = __pyx_cur_scope->__pyx_t_1;
    if (unlikely(!__pyx_sent_value)) __PYX_ERR(3, 672, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "iter_defs.pxi":671
 * 
 *     @property
 *     def _chains(self):             # <<<<<<<<<<<<<<
 *         return tuple((p, ) for p in self.parents)
 * 
 */

static PyObject *__pyx_pf_5tubes_10ChainTubes_7_chains___get__(struct __pyx_obj_5tubes_ChainTubes *__pyx_v_self) {
  struct __pyx_obj_5tubes___pyx_scope_struct_9___get__ *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);
  __pyx_cur_scope = (struct __pyx_obj_5tubes___pyx_scope_struct_9___get__ *)__pyx_tp_new_5tubes___pyx_scope_struct_9___get__(__pyx_ptype_5tubes___pyx_scope_struct_9___get__, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_5tubes___pyx_scope_struct_9___get__ *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(3, 671, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_self = __pyx_v_self;
  __Pyx_INCREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __Pyx_GIVEREF((PyObject *)__pyx_cur_scope->__pyx_v_self);

  /* "iter_defs.pxi":672
 *     @property
 *     def _chains(self):
 *         return tuple((p, ) for p in self.parents)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_pf_5tubes_10ChainTubes_7_chains_7__get___genexpr(((PyObject*)__pyx_cur_scope)); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 672, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PySequence_Tuple(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 672, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "iter_defs.pxi":671
 * 
 *     @property
 *     def _chains(self):             # <<<<<<<<<<<<<<
 *         return tuple((p, ) for p in self.parents)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("tubes.ChainTubes._chains.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "iter_defs.pxi":677
 * 
 * 
 *     cpdef _describe_self(self):             # <<<<<<<<<<<<<<
 *         return f"ChainTubes({repr(self.parents)})"
 * 
 */

static PyObject *__pyx_pw_5tubes_10ChainTubes_3_describe_self(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_f_5tubes_10ChainTubes__describe_self(struct __pyx_obj_5tubes_ChainTubes *__pyx_v_self, CYTHON_UNUSED int __pyx_skip_dispatch) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  Py_UCS4 __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("_describe_self", 0);

  /* "iter_defs.pxi":678
 * 
 *     cpdef _describe_self(self):
 *         return f"ChainTubes({repr(self.parents)})"             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 678, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = 0;
  __pyx_t_3 = 127;
  __Pyx_INCREF(__pyx_kp_u_ChainTubes);
  __pyx_t_2 += 11;
  __Pyx_GIVEREF(__pyx_kp_u_ChainTubes);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_kp_u_ChainTubes);
  __pyx_t_4 = __pyx_v_self->parents;
  __Pyx_INCREF(__pyx_t_4);
  __pyx_t_5 = PyObject_Repr(__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 678, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_FormatSimple(__pyx_t_5, __pyx_empty_unicode); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 678, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_3 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) > __pyx_t_3) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) : __pyx_t_3;
  __pyx_t_2 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_4);
  __pyx_t_4 = 0;
  __Pyx_INCREF(__pyx_kp_u__27);
  __pyx_t_2 += 1;
  __Pyx_GIVEREF(__pyx_kp_u__27);
  PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_kp_u__27);
  __pyx_t_4 = __Pyx_PyUnicode_Join(__pyx_t_1, 3, __pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 678, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "iter_defs.pxi":677
 * 
 * 
 *     cpdef _describe_self(self):             # <<<<<<<<<<<<<<
 *         return f"ChainTubes({repr(self.parents)})"
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("tubes.ChainTubes._describe_self", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5tubes_10ChainTubes_3_describe_self(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5tubes_10ChainTubes_2_describe_self[] = "ChainTubes._describe_self(self)";
static PyObject *__pyx_pw_5tubes_10ChainTubes_3_describe_self(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_describe_self (wrapper)", 0);
  __pyx_r = __pyx_pf_5tubes_10ChainTubes_2_describe_self(((struct __pyx_obj_5tubes_ChainTubes *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5tubes_10ChainTubes_2_describe_self(struct __pyx_obj_5tubes_ChainTubes *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("_describe_self", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_5tubes_10ChainTubes__describe_self(__pyx_v_self, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 677, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("tubes.ChainTubes._describe_self", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "iter_defs.pxi":682
 * 
 *     @property
 *     def _inputs(self):             # <<<<<<<<<<<<<<
 *         return tuple(self.parents)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5tubes_10ChainTubes_7_inputs_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5tubes_10ChainTubes_7_inputs_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5tubes_10ChainTubes_7_inputs___get__(((struct __pyx_obj_5tubes_ChainTubes *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5tubes_10ChainTubes_7_inputs___get__(struct __pyx_obj_5tubes_ChainTubes *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "iter_defs.pxi":683
 *     @property
 *     def _inputs(self):
 *         return tuple(self.parents)             # <<<<<<<<<<<<<<
 * 
 *     cdef vector[AnyIter] _make_iters(self, list args):
 */
  __Pyx_XDECREF(__pyx_r);
  if (unlikely(__pyx_v_self->parents == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(3, 683, __pyx_L1_error)
  }
  __pyx_t_1 = PyList_AsTuple(__pyx_v_self->parents); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 683, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "iter_defs.pxi":682
 * 
 *     @property
 *     def _inputs(self):             # <<<<<<<<<<<<<<
 *         return tuple(self.parents)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("tubes.ChainTubes._inputs.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "iter_defs.pxi":685
 *         return tuple(self.parents)
 * 
 *     cdef vector[AnyIter] _make_iters(self, list args):             # <<<<<<<<<<<<<<
 *         cdef IterWrapper arg
 *         cdef vector[AnyIter] its
 */

static std::vector<ss::iter::AnyIter>  __pyx_f_5tubes_10ChainTubes__make_iters(CYTHON_UNUSED struct __pyx_obj_5tubes_ChainTubes *__pyx_v_self, PyObject *__pyx_v_args) {
  struct __pyx_obj_5tubes_IterWrapper *__pyx_v_arg = 0;
  std::vector<ss::iter::AnyIter>  __pyx_v_its;
  std::vector<ss::iter::AnyIter>  __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("_make_iters", 0);

  /* "iter_defs.pxi":688
 *         cdef IterWrapper arg
 *         cdef vector[AnyIter] its
 *         for arg in args:             # <<<<<<<<<<<<<<
 *             its.push_back(arg.iter)
 *         return its
 */
  if (unlikely(__pyx_v_args == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(3, 688, __pyx_L1_error)
  }
  __pyx_t_1 = __pyx_v_args; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
  for (;;) {
    if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_3 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_3); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(3, 688, __pyx_L1_error)
    #else
    __pyx_t_3 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 688, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    #endif
    if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_5tubes_IterWrapper))))) __PYX_ERR(3, 688, __pyx_L1_error)
    __Pyx_XDECREF_SET(__pyx_v_arg, ((struct __pyx_obj_5tubes_IterWrapper *)__pyx_t_3));
    __pyx_t_3 = 0;

    /* "iter_defs.pxi":689
 *         cdef vector[AnyIter] its
 *         for arg in args:
 *             its.push_back(arg.iter)             # <<<<<<<<<<<<<<
 *         return its
 * 
 */
    try {
      __pyx_v_its.push_back(__pyx_v_arg->iter);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(3, 689, __pyx_L1_error)
    }

    /* "iter_defs.pxi":688
 *         cdef IterWrapper arg
 *         cdef vector[AnyIter] its
 *         for arg in args:             # <<<<<<<<<<<<<<
 *             its.push_back(arg.iter)
 *         return its
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "iter_defs.pxi":690
 *         for arg in args:
 *             its.push_back(arg.iter)
 *         return its             # <<<<<<<<<<<<<<
 * 
 *     cdef vector[Chain] _make_chains(self, list args):
 */
  __pyx_r = __pyx_v_its;
  goto __pyx_L0;

  /* "iter_defs.pxi":685
 *         return tuple(self.parents)
 * 
 *     cdef vector[AnyIter] _make_iters(self, list args):             # <<<<<<<<<<<<<<
 *         cdef IterWrapper arg
 *         cdef vector[AnyIter] its
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_WriteUnraisable("tubes.ChainTubes._make_iters", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_arg);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "iter_defs.pxi":692
 *         return its
 * 
 *     cdef vector[Chain] _make_chains(self, list args):             # <<<<<<<<<<<<<<
 *         cdef list arg
 *         cdef Chain chain
 */

static std::vector<struct ss::iter::Chain>  __pyx_f_5tubes_10ChainTubes__make_chains(CYTHON_UNUSED struct __pyx_obj_5tubes_ChainTubes *__pyx_v_self, PyObject *__pyx_v_args) {
  PyObject *__pyx_v_arg = 0;
  struct ss::iter::Chain __pyx_v_chain;
  std::vector<struct ss::iter::Chain>  __pyx_v_chains;
  std::vector<struct ss::iter::Chain>  __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("_make_chains", 0);

  /* "iter_defs.pxi":696
 *         cdef Chain chain
 *         cdef vector[Chain] chains
 *         for arg in args:             # <<<<<<<<<<<<<<
 *             chain = iters_to_c_chain(arg)
 *             chains.push_back(chain)
 */
  if (unlikely(__pyx_v_args == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(3, 696, __pyx_L1_error)
  }
  __pyx_t_1 = __pyx_v_args; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
  for (;;) {
    if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_3 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_3); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(3, 696, __pyx_L1_error)
    #else
    __pyx_t_3 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 696, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    #endif
    if (!(likely(PyList_CheckExact(__pyx_t_3))||((__pyx_t_3) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(__pyx_t_3)->tp_name), 0))) __PYX_ERR(3, 696, __pyx_L1_error)
    __Pyx_XDECREF_SET(__pyx_v_arg, ((PyObject*)__pyx_t_3));
    __pyx_t_3 = 0;

    /* "iter_defs.pxi":697
 *         cdef vector[Chain] chains
 *         for arg in args:
 *             chain = iters_to_c_chain(arg)             # <<<<<<<<<<<<<<
 *             chains.push_back(chain)
 *         return chains
 */
    __pyx_v_chain = __pyx_f_5tubes_iters_to_c_chain(__pyx_v_arg);

    /* "iter_defs.pxi":698
 *         for arg in args:
 *             chain = iters_to_c_chain(arg)
 *             chains.push_back(chain)             # <<<<<<<<<<<<<<
 *         return chains
 * 
 */
    try {
      __pyx_v_chains.push_back(__pyx_v_chain);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(3, 698, __pyx_L1_error)
    }

    /* "iter_defs.pxi":696
 *         cdef Chain chain
 *         cdef vector[Chain] chains
 *         for arg in args:             # <<<<<<<<<<<<<<
 *             chain = iters_to_c_chain(arg)
 *             chains.push_back(chain)
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "iter_defs.pxi":699
 *             chain = iters_to_c_chain(arg)
 *             chains.push_back(chain)
 *         return chains             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_chains;
  goto __pyx_L0;

  /* "iter_defs.pxi":692
 *         return its
 * 
 *     cdef vector[Chain] _make_chains(self, list args):             # <<<<<<<<<<<<<<
 *         cdef list arg
 *         cdef Chain chain
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_WriteUnraisable("tubes.ChainTubes._make_chains", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_arg);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "iter_defs.pxi":638
 * cdef class ChainTubes(Tube):  # AUTO GENERATED FROM tools/defn2.tmpl
 * 
 *     cdef public list parents             # <<<<<<<<<<<<<<
 * 
 *     def __cinit__(self, list parents):
 */

/* Python wrapper */
static PyObject *__pyx_pw_5tubes_10ChainTubes_7parents_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5tubes_10ChainTubes_7parents_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5tubes_10ChainTubes_7parents___get__(((struct __pyx_obj_5tubes_ChainTubes *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5tubes_10ChainTubes_7parents___get__(struct __pyx_obj_5tubes_ChainTubes *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->parents);
  __pyx_r = __pyx_v_self->parents;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_5tubes_10ChainTubes_7parents_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_5tubes_10ChainTubes_7parents_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5tubes_10ChainTubes_7parents_2__set__(((struct __pyx_obj_5tubes_ChainTubes *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5tubes_10ChainTubes_7parents_2__set__(struct __pyx_obj_5tubes_ChainTubes *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__set__", 0);
  if (!(likely(PyList_CheckExact(__pyx_v_value))||((__pyx_v_value) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(__pyx_v_value)->tp_name), 0))) __PYX_ERR(3, 638, __pyx_L1_error)
  __pyx_t_1 = __pyx_v_value;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->parents);
  __Pyx_DECREF(__pyx_v_self->parents);
  __pyx_v_self->parents = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("tubes.ChainTubes.parents.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_5tubes_10ChainTubes_7parents_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_5tubes_10ChainTubes_7parents_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5tubes_10ChainTubes_7parents_4__del__(((struct __pyx_obj_5tubes_ChainTubes *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5tubes_10ChainTubes_7parents_4__del__(struct __pyx_obj_5tubes_ChainTubes *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->parents);
  __Pyx_DECREF(__pyx_v_self->parents);
  __pyx_v_self->parents = ((PyObject*)Py_None);

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_5tubes_10ChainTubes_5__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5tubes_10ChainTubes_4__reduce_cython__[] = "ChainTubes.__reduce_cython__(self)";
static PyObject *__pyx_pw_5tubes_10ChainTubes_5__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5tubes_10ChainTubes_4__reduce_cython__(((struct __pyx_obj_5tubes_ChainTubes *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5tubes_10ChainTubes_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5tubes_ChainTubes *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__51, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("tubes.ChainTubes.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_5tubes_10ChainTubes_7__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static char __pyx_doc_5tubes_10ChainTubes_6__setstate_cython__[] = "ChainTubes.__setstate_cython__(self, __pyx_state)";
static PyObject *__pyx_pw_5tubes_10ChainTubes_7__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5tubes_10ChainTubes_6__setstate_cython__(((struct __pyx_obj_5tubes_ChainTubes *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5tubes_10ChainTubes_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5tubes_ChainTubes *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__52, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("tubes.ChainTubes.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "iter_defs.pxi":708
 *     cdef public size_t num
 * 
 *     def __cinit__(self, Tube parent, size_t num):             # <<<<<<<<<<<<<<
 *         self.parent = parent
 *         self.num = num
 */

/* Python wrapper */
static int __pyx_pw_5tubes_4Skip_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_5tubes_4Skip_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_5tubes_Tube *__pyx_v_parent = 0;
  size_t __pyx_v_num;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_parent,&__pyx_n_s_num,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_parent)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_num)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 2, 2, 1); __PYX_ERR(3, 708, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(3, 708, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_parent = ((struct __pyx_obj_5tubes_Tube *)values[0]);
    __pyx_v_num = __Pyx_PyInt_As_size_t(values[1]); if (unlikely((__pyx_v_num == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(3, 708, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(3, 708, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("tubes.Skip.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_parent), __pyx_ptype_5tubes_Tube, 1, "parent", 0))) __PYX_ERR(3, 708, __pyx_L1_error)
  __pyx_r = __pyx_pf_5tubes_4Skip___cinit__(((struct __pyx_obj_5tubes_Skip *)__pyx_v_self), __pyx_v_parent, __pyx_v_num);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5tubes_4Skip___cinit__(struct __pyx_obj_5tubes_Skip *__pyx_v_self, struct __pyx_obj_5tubes_Tube *__pyx_v_parent, size_t __pyx_v_num) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "iter_defs.pxi":709
 * 
 *     def __cinit__(self, Tube parent, size_t num):
 *         self.parent = parent             # <<<<<<<<<<<<<<
 *         self.num = num
 * 
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_parent));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_parent));
  __Pyx_GOTREF(__pyx_v_self->parent);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->parent));
  __pyx_v_self->parent = __pyx_v_parent;

  /* "iter_defs.pxi":710
 *     def __cinit__(self, Tube parent, size_t num):
 *         self.parent = parent
 *         self.num = num             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_v_self->num = __pyx_v_num;

  /* "iter_defs.pxi":708
 *     cdef public size_t num
 * 
 *     def __cinit__(self, Tube parent, size_t num):             # <<<<<<<<<<<<<<
 *         self.parent = parent
 *         self.num = num
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "iter_defs.pxi":714
 * 
 * 
 *     cdef IterWrapper _make_iter(self, args):             # <<<<<<<<<<<<<<
 * 
 *         expected_args = len(self._inputs) + len(self._chains)
 */

static struct __pyx_obj_5tubes_IterWrapper *__pyx_f_5tubes_4Skip__make_iter(struct __pyx_obj_5tubes_Skip *__pyx_v_self, PyObject *__pyx_v_args) {
  Py_ssize_t __pyx_v_expected_args;
  PyObject *__pyx_v_chains = NULL;
  PyObject *__pyx_v_iters = NULL;
  struct __pyx_obj_5tubes_IterWrapper *__pyx_v_parent = 0;
  ss::iter::SkipIter *__pyx_v_iter;
  struct __pyx_obj_5tubes_IterWrapper *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  int __pyx_t_4;
  Py_UCS4 __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  ss::iter::SkipIter *__pyx_t_7;
  __Pyx_RefNannySetupContext("_make_iter", 0);

  /* "iter_defs.pxi":716
 *     cdef IterWrapper _make_iter(self, args):
 * 
 *         expected_args = len(self._inputs) + len(self._chains)             # <<<<<<<<<<<<<<
 *         if len(args) != expected_args:
 *             raise ValueError(f"Expected {expected_args} inputs to _make_iter, got {len(args)}")
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_inputs); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 716, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Length(__pyx_t_1); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1))) __PYX_ERR(3, 716, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_chains); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 716, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyObject_Length(__pyx_t_1); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1))) __PYX_ERR(3, 716, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_expected_args = (__pyx_t_2 + __pyx_t_3);

  /* "iter_defs.pxi":717
 * 
 *         expected_args = len(self._inputs) + len(self._chains)
 *         if len(args) != expected_args:             # <<<<<<<<<<<<<<
 *             raise ValueError(f"Expected {expected_args} inputs to _make_iter, got {len(args)}")
 * 
 */
  __pyx_t_3 = PyObject_Length(__pyx_v_args); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1))) __PYX_ERR(3, 717, __pyx_L1_error)
  __pyx_t_4 = ((__pyx_t_3 != __pyx_v_expected_args) != 0);
  if (__pyx_t_4) {

    /* "iter_defs.pxi":718
 *         expected_args = len(self._inputs) + len(self._chains)
 *         if len(args) != expected_args:
 *             raise ValueError(f"Expected {expected_args} inputs to _make_iter, got {len(args)}")             # <<<<<<<<<<<<<<
 * 
 *         chains = args[:len(self._chains)]
 */
    __pyx_t_1 = PyTuple_New(4); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 718, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = 0;
    __pyx_t_5 = 127;
    __Pyx_INCREF(__pyx_kp_u_Expected);
    __pyx_t_3 += 9;
    __Pyx_GIVEREF(__pyx_kp_u_Expected);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_kp_u_Expected);
    __pyx_t_6 = __Pyx_PyUnicode_From_Py_ssize_t(__pyx_v_expected_args, 0, ' ', 'd'); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 718, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_3 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_6);
    __pyx_t_6 = 0;
    __Pyx_INCREF(__pyx_kp_u_inputs_to__make_iter_got);
    __pyx_t_3 += 27;
    __Pyx_GIVEREF(__pyx_kp_u_inputs_to__make_iter_got);
    PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_kp_u_inputs_to__make_iter_got);
    __pyx_t_2 = PyObject_Length(__pyx_v_args); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1))) __PYX_ERR(3, 718, __pyx_L1_error)
    __pyx_t_6 = __Pyx_PyUnicode_From_Py_ssize_t(__pyx_t_2, 0, ' ', 'd'); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 718, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_3 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_1, 3, __pyx_t_6);
    __pyx_t_6 = 0;
    __pyx_t_6 = __Pyx_PyUnicode_Join(__pyx_t_1, 4, __pyx_t_3, __pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 718, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 718, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_6);
    __pyx_t_6 = 0;
    __pyx_t_6 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_t_1, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 718, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_Raise(__pyx_t_6, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __PYX_ERR(3, 718, __pyx_L1_error)

    /* "iter_defs.pxi":717
 * 
 *         expected_args = len(self._inputs) + len(self._chains)
 *         if len(args) != expected_args:             # <<<<<<<<<<<<<<
 *             raise ValueError(f"Expected {expected_args} inputs to _make_iter, got {len(args)}")
 * 
 */
  }

  /* "iter_defs.pxi":720
 *             raise ValueError(f"Expected {expected_args} inputs to _make_iter, got {len(args)}")
 * 
 *         chains = args[:len(self._chains)]             # <<<<<<<<<<<<<<
 *         iters = args[len(self._chains):]
 *         cdef IterWrapper parent = iters[0]
 */
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_chains); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 720, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_3 = PyObject_Length(__pyx_t_6); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1))) __PYX_ERR(3, 720, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = __Pyx_PyObject_GetSlice(__pyx_v_args, 0, __pyx_t_3, NULL, NULL, NULL, 0, 1, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 720, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_v_chains = __pyx_t_6;
  __pyx_t_6 = 0;

  /* "iter_defs.pxi":721
 * 
 *         chains = args[:len(self._chains)]
 *         iters = args[len(self._chains):]             # <<<<<<<<<<<<<<
 *         cdef IterWrapper parent = iters[0]
 *         cdef SkipIter *iter = new SkipIter(iters_to_c_chain(chains[0]), parent.iter, self.num)
 */
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_chains); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 721, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_3 = PyObject_Length(__pyx_t_6); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1))) __PYX_ERR(3, 721, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = __Pyx_PyObject_GetSlice(__pyx_v_args, __pyx_t_3, 0, NULL, NULL, NULL, 1, 0, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 721, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_v_iters = __pyx_t_6;
  __pyx_t_6 = 0;

  /* "iter_defs.pxi":722
 *         chains = args[:len(self._chains)]
 *         iters = args[len(self._chains):]
 *         cdef IterWrapper parent = iters[0]             # <<<<<<<<<<<<<<
 *         cdef SkipIter *iter = new SkipIter(iters_to_c_chain(chains[0]), parent.iter, self.num)
 * 
 */
  __pyx_t_6 = __Pyx_GetItemInt(__pyx_v_iters, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 722, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  if (!(likely(((__pyx_t_6) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_6, __pyx_ptype_5tubes_IterWrapper))))) __PYX_ERR(3, 722, __pyx_L1_error)
  __pyx_v_parent = ((struct __pyx_obj_5tubes_IterWrapper *)__pyx_t_6);
  __pyx_t_6 = 0;

  /* "iter_defs.pxi":723
 *         iters = args[len(self._chains):]
 *         cdef IterWrapper parent = iters[0]
 *         cdef SkipIter *iter = new SkipIter(iters_to_c_chain(chains[0]), parent.iter, self.num)             # <<<<<<<<<<<<<<
 * 
 *         return wrap(to_any(iter))
 */
  __pyx_t_6 = __Pyx_GetItemInt(__pyx_v_chains, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 723, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  if (!(likely(PyList_CheckExact(__pyx_t_6))||((__pyx_t_6) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(__pyx_t_6)->tp_name), 0))) __PYX_ERR(3, 723, __pyx_L1_error)
  try {
    __pyx_t_7 = new ss::iter::SkipIter(__pyx_f_5tubes_iters_to_c_chain(((PyObject*)__pyx_t_6)), __pyx_v_parent->iter, __pyx_v_self->num);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(3, 723, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_v_iter = __pyx_t_7;

  /* "iter_defs.pxi":725
 *         cdef SkipIter *iter = new SkipIter(iters_to_c_chain(chains[0]), parent.iter, self.num)
 * 
 *         return wrap(to_any(iter))             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __pyx_t_6 = __pyx_f_5tubes_wrap(ss::iter::to_any<ss::iter::SkipIter>(__pyx_v_iter)); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 725, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  if (!(likely(((__pyx_t_6) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_6, __pyx_ptype_5tubes_IterWrapper))))) __PYX_ERR(3, 725, __pyx_L1_error)
  __pyx_r = ((struct __pyx_obj_5tubes_IterWrapper *)__pyx_t_6);
  __pyx_t_6 = 0;
  goto __pyx_L0;

  /* "iter_defs.pxi":714
 * 
 * 
 *     cdef IterWrapper _make_iter(self, args):             # <<<<<<<<<<<<<<
 * 
 *         expected_args = len(self._inputs) + len(self._chains)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("tubes.Skip._make_iter", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_chains);
  __Pyx_XDECREF(__pyx_v_iters);
  __Pyx_XDECREF((PyObject *)__pyx_v_parent);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "iter_defs.pxi":728
 * 
 *     @property
 *     def dtype(self):             # <<<<<<<<<<<<<<
 *         return self.parent.dtype
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5tubes_4Skip_5dtype_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5tubes_4Skip_5dtype_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5tubes_4Skip_5dtype___get__(((struct __pyx_obj_5tubes_Skip *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5tubes_4Skip_5dtype___get__(struct __pyx_obj_5tubes_Skip *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "iter_defs.pxi":729
 *     @property
 *     def dtype(self):
 *         return self.parent.dtype             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self->parent), __pyx_n_s_dtype); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 729, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "iter_defs.pxi":728
 * 
 *     @property
 *     def dtype(self):             # <<<<<<<<<<<<<<
 *         return self.parent.dtype
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("tubes.Skip.dtype.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "iter_defs.pxi":732
 * 
 *     @property
 *     def _chains(self):             # <<<<<<<<<<<<<<
 *         return ((self.parent,), )
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5tubes_4Skip_7_chains_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5tubes_4Skip_7_chains_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5tubes_4Skip_7_chains___get__(((struct __pyx_obj_5tubes_Skip *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5tubes_4Skip_7_chains___get__(struct __pyx_obj_5tubes_Skip *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "iter_defs.pxi":733
 *     @property
 *     def _chains(self):
 *         return ((self.parent,), )             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 733, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->parent));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self->parent));
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_v_self->parent));
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 733, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "iter_defs.pxi":732
 * 
 *     @property
 *     def _chains(self):             # <<<<<<<<<<<<<<
 *         return ((self.parent,), )
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("tubes.Skip._chains.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "iter_defs.pxi":737
 * 
 *     @property
 *     def _inputs(self):             # <<<<<<<<<<<<<<
 *         return (self.parent, )
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5tubes_4Skip_7_inputs_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5tubes_4Skip_7_inputs_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5tubes_4Skip_7_inputs___get__(((struct __pyx_obj_5tubes_Skip *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5tubes_4Skip_7_inputs___get__(struct __pyx_obj_5tubes_Skip *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "iter_defs.pxi":738
 *     @property
 *     def _inputs(self):
 *         return (self.parent, )             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 738, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->parent));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self->parent));
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_v_self->parent));
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "iter_defs.pxi":737
 * 
 *     @property
 *     def _inputs(self):             # <<<<<<<<<<<<<<
 *         return (self.parent, )
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("tubes.Skip._inputs.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "iter_defs.pxi":742
 * 
 * 
 *     cpdef _describe_self(self):             # <<<<<<<<<<<<<<
 *         return f"Skip({repr(self.num)})"
 * 
 */

static PyObject *__pyx_pw_5tubes_4Skip_3_describe_self(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_f_5tubes_4Skip__describe_self(struct __pyx_obj_5tubes_Skip *__pyx_v_self, CYTHON_UNUSED int __pyx_skip_dispatch) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  Py_UCS4 __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("_describe_self", 0);

  /* "iter_defs.pxi":743
 * 
 *     cpdef _describe_self(self):
 *         return f"Skip({repr(self.num)})"             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 743, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = 0;
  __pyx_t_3 = 127;
  __Pyx_INCREF(__pyx_kp_u_Skip);
  __pyx_t_2 += 5;
  __Pyx_GIVEREF(__pyx_kp_u_Skip);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_kp_u_Skip);
  __pyx_t_4 = __Pyx_PyInt_FromSize_t(__pyx_v_self->num); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 743, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyObject_Repr(__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 743, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_FormatSimple(__pyx_t_5, __pyx_empty_unicode); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 743, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_3 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) > __pyx_t_3) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) : __pyx_t_3;
  __pyx_t_2 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_4);
  __pyx_t_4 = 0;
  __Pyx_INCREF(__pyx_kp_u__27);
  __pyx_t_2 += 1;
  __Pyx_GIVEREF(__pyx_kp_u__27);
  PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_kp_u__27);
  __pyx_t_4 = __Pyx_PyUnicode_Join(__pyx_t_1, 3, __pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 743, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "iter_defs.pxi":742
 * 
 * 
 *     cpdef _describe_self(self):             # <<<<<<<<<<<<<<
 *         return f"Skip({repr(self.num)})"
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("tubes.Skip._describe_self", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5tubes_4Skip_3_describe_self(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5tubes_4Skip_2_describe_self[] = "Skip._describe_self(self)";
static PyObject *__pyx_pw_5tubes_4Skip_3_describe_self(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_describe_self (wrapper)", 0);
  __pyx_r = __pyx_pf_5tubes_4Skip_2_describe_self(((struct __pyx_obj_5tubes_Skip *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5tubes_4Skip_2_describe_self(struct __pyx_obj_5tubes_Skip *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("_describe_self", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_5tubes_4Skip__describe_self(__pyx_v_self, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 742, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("tubes.Skip._describe_self", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "iter_defs.pxi":705
 * cdef class Skip(Tube):  # AUTO GENERATED FROM tools/defn2.tmpl
 * 
 *     cdef public Tube parent             # <<<<<<<<<<<<<<
 *     cdef public size_t num
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5tubes_4Skip_6parent_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5tubes_4Skip_6parent_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5tubes_4Skip_6parent___get__(((struct __pyx_obj_5tubes_Skip *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5tubes_4Skip_6parent___get__(struct __pyx_obj_5tubes_Skip *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->parent));
  __pyx_r = ((PyObject *)__pyx_v_self->parent);
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_5tubes_4Skip_6parent_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_5tubes_4Skip_6parent_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5tubes_4Skip_6parent_2__set__(((struct __pyx_obj_5tubes_Skip *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5tubes_4Skip_6parent_2__set__(struct __pyx_obj_5tubes_Skip *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__set__", 0);
  if (!(likely(((__pyx_v_value) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_value, __pyx_ptype_5tubes_Tube))))) __PYX_ERR(3, 705, __pyx_L1_error)
  __pyx_t_1 = __pyx_v_value;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->parent);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->parent));
  __pyx_v_self->parent = ((struct __pyx_obj_5tubes_Tube *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("tubes.Skip.parent.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_5tubes_4Skip_6parent_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_5tubes_4Skip_6parent_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5tubes_4Skip_6parent_4__del__(((struct __pyx_obj_5tubes_Skip *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5tubes_4Skip_6parent_4__del__(struct __pyx_obj_5tubes_Skip *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->parent);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->parent));
  __pyx_v_self->parent = ((struct __pyx_obj_5tubes_Tube *)Py_None);

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "iter_defs.pxi":706
 * 
 *     cdef public Tube parent
 *     cdef public size_t num             # <<<<<<<<<<<<<<
 * 
 *     def __cinit__(self, Tube parent, size_t num):
 */

/* Python wrapper */
static PyObject *__pyx_pw_5tubes_4Skip_3num_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5tubes_4Skip_3num_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5tubes_4Skip_3num___get__(((struct __pyx_obj_5tubes_Skip *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5tubes_4Skip_3num___get__(struct __pyx_obj_5tubes_Skip *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_FromSize_t(__pyx_v_self->num); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 706, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("tubes.Skip.num.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_5tubes_4Skip_3num_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_5tubes_4Skip_3num_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5tubes_4Skip_3num_2__set__(((struct __pyx_obj_5tubes_Skip *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5tubes_4Skip_3num_2__set__(struct __pyx_obj_5tubes_Skip *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  size_t __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_t_1 = __Pyx_PyInt_As_size_t(__pyx_v_value); if (unlikely((__pyx_t_1 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(3, 706, __pyx_L1_error)
  __pyx_v_self->num = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("tubes.Skip.num.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_5tubes_4Skip_5__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5tubes_4Skip_4__reduce_cython__[] = "Skip.__reduce_cython__(self)";
static PyObject *__pyx_pw_5tubes_4Skip_5__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5tubes_4Skip_4__reduce_cython__(((struct __pyx_obj_5tubes_Skip *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5tubes_4Skip_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5tubes_Skip *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__53, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("tubes.Skip.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_5tubes_4Skip_7__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static char __pyx_doc_5tubes_4Skip_6__setstate_cython__[] = "Skip.__setstate_cython__(self, __pyx_state)";
static PyObject *__pyx_pw_5tubes_4Skip_7__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5tubes_4Skip_6__setstate_cython__(((struct __pyx_obj_5tubes_Skip *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5tubes_4Skip_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5tubes_Skip *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__54, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("tubes.Skip.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "iter_defs.pxi":753
 *     cdef public Tube parent
 * 
 *     def __cinit__(self, Tube parent):             # <<<<<<<<<<<<<<
 * 
 *         if parent.dtype[0] not in (ByteSlice,):
 */

/* Python wrapper */
static int __pyx_pw_5tubes_7FileMap_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_5tubes_7FileMap_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_5tubes_Tube *__pyx_v_parent = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_parent,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_parent)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(3, 753, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_parent = ((struct __pyx_obj_5tubes_Tube *)values[0]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(3, 753, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("tubes.FileMap.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_parent), __pyx_ptype_5tubes_Tube, 1, "parent", 0))) __PYX_ERR(3, 753, __pyx_L1_error)
  __pyx_r = __pyx_pf_5tubes_7FileMap___cinit__(((struct __pyx_obj_5tubes_FileMap *)__pyx_v_self), __pyx_v_parent);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5tubes_7FileMap___cinit__(struct __pyx_obj_5tubes_FileMap *__pyx_v_self, struct __pyx_obj_5tubes_Tube *__pyx_v_parent) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "iter_defs.pxi":755
 *     def __cinit__(self, Tube parent):
 * 
 *         if parent.dtype[0] not in (ByteSlice,):             # <<<<<<<<<<<<<<
 *             raise ValueError(f"Cannot make a FileMap Tube with 'parent' tube of type { parent.dtype[0] }")
 *         self.parent = parent
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_parent), __pyx_n_s_dtype); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 755, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_t_1, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 755, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_ByteSlice); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 755, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyObject_RichCompare(__pyx_t_2, __pyx_t_1, Py_NE); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 755, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(3, 755, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_5 = (__pyx_t_4 != 0);
  if (__pyx_t_5) {

    /* "iter_defs.pxi":756
 * 
 *         if parent.dtype[0] not in (ByteSlice,):
 *             raise ValueError(f"Cannot make a FileMap Tube with 'parent' tube of type { parent.dtype[0] }")             # <<<<<<<<<<<<<<
 *         self.parent = parent
 * 
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_parent), __pyx_n_s_dtype); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 756, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_GetItemInt(__pyx_t_2, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 756, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyObject_FormatSimple(__pyx_t_3, __pyx_empty_unicode); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 756, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyUnicode_Concat(__pyx_kp_u_Cannot_make_a_FileMap_Tube_with, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 756, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 756, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_3);
    __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 756, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(3, 756, __pyx_L1_error)

    /* "iter_defs.pxi":755
 *     def __cinit__(self, Tube parent):
 * 
 *         if parent.dtype[0] not in (ByteSlice,):             # <<<<<<<<<<<<<<
 *             raise ValueError(f"Cannot make a FileMap Tube with 'parent' tube of type { parent.dtype[0] }")
 *         self.parent = parent
 */
  }

  /* "iter_defs.pxi":757
 *         if parent.dtype[0] not in (ByteSlice,):
 *             raise ValueError(f"Cannot make a FileMap Tube with 'parent' tube of type { parent.dtype[0] }")
 *         self.parent = parent             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_parent));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_parent));
  __Pyx_GOTREF(__pyx_v_self->parent);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->parent));
  __pyx_v_self->parent = __pyx_v_parent;

  /* "iter_defs.pxi":753
 *     cdef public Tube parent
 * 
 *     def __cinit__(self, Tube parent):             # <<<<<<<<<<<<<<
 * 
 *         if parent.dtype[0] not in (ByteSlice,):
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("tubes.FileMap.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "iter_defs.pxi":761
 * 
 * 
 *     cdef IterWrapper _make_iter(self, args):             # <<<<<<<<<<<<<<
 * 
 *         expected_args = len(self._inputs) + len(self._chains)
 */

static struct __pyx_obj_5tubes_IterWrapper *__pyx_f_5tubes_7FileMap__make_iter(struct __pyx_obj_5tubes_FileMap *__pyx_v_self, PyObject *__pyx_v_args) {
  Py_ssize_t __pyx_v_expected_args;
  CYTHON_UNUSED PyObject *__pyx_v_chains = NULL;
  PyObject *__pyx_v_iters = NULL;
  struct __pyx_obj_5tubes_IterWrapper *__pyx_v_parent = 0;
  ss::iter::FileMapIter *__pyx_v_iter;
  struct __pyx_obj_5tubes_IterWrapper *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  int __pyx_t_4;
  Py_UCS4 __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  ss::iter::FileMapIter *__pyx_t_7;
  __Pyx_RefNannySetupContext("_make_iter", 0);

  /* "iter_defs.pxi":763
 *     cdef IterWrapper _make_iter(self, args):
 * 
 *         expected_args = len(self._inputs) + len(self._chains)             # <<<<<<<<<<<<<<
 *         if len(args) != expected_args:
 *             raise ValueError(f"Expected {expected_args} inputs to _make_iter, got {len(args)}")
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_inputs); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 763, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Length(__pyx_t_1); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1))) __PYX_ERR(3, 763, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_chains); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 763, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyObject_Length(__pyx_t_1); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1))) __PYX_ERR(3, 763, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_expected_args = (__pyx_t_2 + __pyx_t_3);

  /* "iter_defs.pxi":764
 * 
 *         expected_args = len(self._inputs) + len(self._chains)
 *         if len(args) != expected_args:             # <<<<<<<<<<<<<<
 *             raise ValueError(f"Expected {expected_args} inputs to _make_iter, got {len(args)}")
 * 
 */
  __pyx_t_3 = PyObject_Length(__pyx_v_args); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1))) __PYX_ERR(3, 764, __pyx_L1_error)
  __pyx_t_4 = ((__pyx_t_3 != __pyx_v_expected_args) != 0);
  if (__pyx_t_4) {

    /* "iter_defs.pxi":765
 *         expected_args = len(self._inputs) + len(self._chains)
 *         if len(args) != expected_args:
 *             raise ValueError(f"Expected {expected_args} inputs to _make_iter, got {len(args)}")             # <<<<<<<<<<<<<<
 * 
 *         chains = args[:len(self._chains)]
 */
    __pyx_t_1 = PyTuple_New(4); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 765, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = 0;
    __pyx_t_5 = 127;
    __Pyx_INCREF(__pyx_kp_u_Expected);
    __pyx_t_3 += 9;
    __Pyx_GIVEREF(__pyx_kp_u_Expected);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_kp_u_Expected);
    __pyx_t_6 = __Pyx_PyUnicode_From_Py_ssize_t(__pyx_v_expected_args, 0, ' ', 'd'); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 765, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_3 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_6);
    __pyx_t_6 = 0;
    __Pyx_INCREF(__pyx_kp_u_inputs_to__make_iter_got);
    __pyx_t_3 += 27;
    __Pyx_GIVEREF(__pyx_kp_u_inputs_to__make_iter_got);
    PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_kp_u_inputs_to__make_iter_got);
    __pyx_t_2 = PyObject_Length(__pyx_v_args); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1))) __PYX_ERR(3, 765, __pyx_L1_error)
    __pyx_t_6 = __Pyx_PyUnicode_From_Py_ssize_t(__pyx_t_2, 0, ' ', 'd'); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 765, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_3 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_1, 3, __pyx_t_6);
    __pyx_t_6 = 0;
    __pyx_t_6 = __Pyx_PyUnicode_Join(__pyx_t_1, 4, __pyx_t_3, __pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 765, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 765, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_6);
    __pyx_t_6 = 0;
    __pyx_t_6 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_t_1, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 765, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_Raise(__pyx_t_6, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __PYX_ERR(3, 765, __pyx_L1_error)

    /* "iter_defs.pxi":764
 * 
 *         expected_args = len(self._inputs) + len(self._chains)
 *         if len(args) != expected_args:             # <<<<<<<<<<<<<<
 *             raise ValueError(f"Expected {expected_args} inputs to _make_iter, got {len(args)}")
 * 
 */
  }

  /* "iter_defs.pxi":767
 *             raise ValueError(f"Expected {expected_args} inputs to _make_iter, got {len(args)}")
 * 
 *         chains = args[:len(self._chains)]             # <<<<<<<<<<<<<<
 *         iters = args[len(self._chains):]
 *         cdef IterWrapper parent = iters[0]
 */
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_chains); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 767, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_3 = PyObject_Length(__pyx_t_6); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1))) __PYX_ERR(3, 767, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = __Pyx_PyObject_GetSlice(__pyx_v_args, 0, __pyx_t_3, NULL, NULL, NULL, 0, 1, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 767, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_v_chains = __pyx_t_6;
  __pyx_t_6 = 0;

  /* "iter_defs.pxi":768
 * 
 *         chains = args[:len(self._chains)]
 *         iters = args[len(self._chains):]             # <<<<<<<<<<<<<<
 *         cdef IterWrapper parent = iters[0]
 *         cdef FileMapIter *iter = new FileMapIter(parent.iter)
 */
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_chains); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 768, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_3 = PyObject_Length(__pyx_t_6); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1))) __PYX_ERR(3, 768, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = __Pyx_PyObject_GetSlice(__pyx_v_args, __pyx_t_3, 0, NULL, NULL, NULL, 1, 0, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 768, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_v_iters = __pyx_t_6;
  __pyx_t_6 = 0;

  /* "iter_defs.pxi":769
 *         chains = args[:len(self._chains)]
 *         iters = args[len(self._chains):]
 *         cdef IterWrapper parent = iters[0]             # <<<<<<<<<<<<<<
 *         cdef FileMapIter *iter = new FileMapIter(parent.iter)
 * 
 */
  __pyx_t_6 = __Pyx_GetItemInt(__pyx_v_iters, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 769, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  if (!(likely(((__pyx_t_6) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_6, __pyx_ptype_5tubes_IterWrapper))))) __PYX_ERR(3, 769, __pyx_L1_error)
  __pyx_v_parent = ((struct __pyx_obj_5tubes_IterWrapper *)__pyx_t_6);
  __pyx_t_6 = 0;

  /* "iter_defs.pxi":770
 *         iters = args[len(self._chains):]
 *         cdef IterWrapper parent = iters[0]
 *         cdef FileMapIter *iter = new FileMapIter(parent.iter)             # <<<<<<<<<<<<<<
 * 
 *         return wrap(to_any(iter))
 */
  try {
    __pyx_t_7 = new ss::iter::FileMapIter(__pyx_v_parent->iter);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(3, 770, __pyx_L1_error)
  }
  __pyx_v_iter = __pyx_t_7;

  /* "iter_defs.pxi":772
 *         cdef FileMapIter *iter = new FileMapIter(parent.iter)
 * 
 *         return wrap(to_any(iter))             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __pyx_t_6 = __pyx_f_5tubes_wrap(ss::iter::to_any<ss::iter::FileMapIter>(__pyx_v_iter)); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 772, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  if (!(likely(((__pyx_t_6) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_6, __pyx_ptype_5tubes_IterWrapper))))) __PYX_ERR(3, 772, __pyx_L1_error)
  __pyx_r = ((struct __pyx_obj_5tubes_IterWrapper *)__pyx_t_6);
  __pyx_t_6 = 0;
  goto __pyx_L0;

  /* "iter_defs.pxi":761
 * 
 * 
 *     cdef IterWrapper _make_iter(self, args):             # <<<<<<<<<<<<<<
 * 
 *         expected_args = len(self._inputs) + len(self._chains)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("tubes.FileMap._make_iter", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_chains);
  __Pyx_XDECREF(__pyx_v_iters);
  __Pyx_XDECREF((PyObject *)__pyx_v_parent);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "iter_defs.pxi":775
 * 
 *     @property
 *     def dtype(self):             # <<<<<<<<<<<<<<
 *         return (ByteSlice, )
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5tubes_7FileMap_5dtype_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5tubes_7FileMap_5dtype_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5tubes_7FileMap_5dtype___get__(((struct __pyx_obj_5tubes_FileMap *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5tubes_7FileMap_5dtype___get__(CYTHON_UNUSED struct __pyx_obj_5tubes_FileMap *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "iter_defs.pxi":776
 *     @property
 *     def dtype(self):
 *         return (ByteSlice, )             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_ByteSlice); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 776, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 776, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "iter_defs.pxi":775
 * 
 *     @property
 *     def dtype(self):             # <<<<<<<<<<<<<<
 *         return (ByteSlice, )
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("tubes.FileMap.dtype.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "iter_defs.pxi":779
 * 
 *     @property
 *     def _chains(self):             # <<<<<<<<<<<<<<
 *         return ()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5tubes_7FileMap_7_chains_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5tubes_7FileMap_7_chains_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5tubes_7FileMap_7_chains___get__(((struct __pyx_obj_5tubes_FileMap *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5tubes_7FileMap_7_chains___get__(CYTHON_UNUSED struct __pyx_obj_5tubes_FileMap *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "iter_defs.pxi":780
 *     @property
 *     def _chains(self):
 *         return ()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_empty_tuple);
  __pyx_r = __pyx_empty_tuple;
  goto __pyx_L0;

  /* "iter_defs.pxi":779
 * 
 *     @property
 *     def _chains(self):             # <<<<<<<<<<<<<<
 *         return ()
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "iter_defs.pxi":784
 * 
 *     @property
 *     def _inputs(self):             # <<<<<<<<<<<<<<
 *         return (self.parent, )
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5tubes_7FileMap_7_inputs_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5tubes_7FileMap_7_inputs_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5tubes_7FileMap_7_inputs___get__(((struct __pyx_obj_5tubes_FileMap *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5tubes_7FileMap_7_inputs___get__(struct __pyx_obj_5tubes_FileMap *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "iter_defs.pxi":785
 *     @property
 *     def _inputs(self):
 *         return (self.parent, )             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 785, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->parent));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self->parent));
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_v_self->parent));
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "iter_defs.pxi":784
 * 
 *     @property
 *     def _inputs(self):             # <<<<<<<<<<<<<<
 *         return (self.parent, )
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("tubes.FileMap._inputs.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "iter_defs.pxi":789
 * 
 * 
 *     cpdef _describe_self(self):             # <<<<<<<<<<<<<<
 *         return f"FileMap()"
 * 
 */

static PyObject *__pyx_pw_5tubes_7FileMap_3_describe_self(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_f_5tubes_7FileMap__describe_self(CYTHON_UNUSED struct __pyx_obj_5tubes_FileMap *__pyx_v_self, CYTHON_UNUSED int __pyx_skip_dispatch) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_describe_self", 0);

  /* "iter_defs.pxi":790
 * 
 *     cpdef _describe_self(self):
 *         return f"FileMap()"             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_kp_u_FileMap);
  __pyx_r = __pyx_kp_u_FileMap;
  goto __pyx_L0;

  /* "iter_defs.pxi":789
 * 
 * 
 *     cpdef _describe_self(self):             # <<<<<<<<<<<<<<
 *         return f"FileMap()"
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5tubes_7FileMap_3_describe_self(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5tubes_7FileMap_2_describe_self[] = "FileMap._describe_self(self)";
static PyObject *__pyx_pw_5tubes_7FileMap_3_describe_self(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_describe_self (wrapper)", 0);
  __pyx_r = __pyx_pf_5tubes_7FileMap_2_describe_self(((struct __pyx_obj_5tubes_FileMap *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5tubes_7FileMap_2_describe_self(struct __pyx_obj_5tubes_FileMap *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("_describe_self", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_5tubes_7FileMap__describe_self(__pyx_v_self, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 789, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("tubes.FileMap._describe_self", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "iter_defs.pxi":751
 * cdef class FileMap(Tube):  # AUTO GENERATED FROM tools/defn2.tmpl
 * 
 *     cdef public Tube parent             # <<<<<<<<<<<<<<
 * 
 *     def __cinit__(self, Tube parent):
 */

/* Python wrapper */
static PyObject *__pyx_pw_5tubes_7FileMap_6parent_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5tubes_7FileMap_6parent_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5tubes_7FileMap_6parent___get__(((struct __pyx_obj_5tubes_FileMap *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5tubes_7FileMap_6parent___get__(struct __pyx_obj_5tubes_FileMap *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->parent));
  __pyx_r = ((PyObject *)__pyx_v_self->parent);
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_5tubes_7FileMap_6parent_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_5tubes_7FileMap_6parent_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5tubes_7FileMap_6parent_2__set__(((struct __pyx_obj_5tubes_FileMap *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5tubes_7FileMap_6parent_2__set__(struct __pyx_obj_5tubes_FileMap *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__set__", 0);
  if (!(likely(((__pyx_v_value) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_value, __pyx_ptype_5tubes_Tube))))) __PYX_ERR(3, 751, __pyx_L1_error)
  __pyx_t_1 = __pyx_v_value;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->parent);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->parent));
  __pyx_v_self->parent = ((struct __pyx_obj_5tubes_Tube *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("tubes.FileMap.parent.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_5tubes_7FileMap_6parent_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_5tubes_7FileMap_6parent_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5tubes_7FileMap_6parent_4__del__(((struct __pyx_obj_5tubes_FileMap *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5tubes_7FileMap_6parent_4__del__(struct __pyx_obj_5tubes_FileMap *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->parent);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->parent));
  __pyx_v_self->parent = ((struct __pyx_obj_5tubes_Tube *)Py_None);

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_5tubes_7FileMap_5__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5tubes_7FileMap_4__reduce_cython__[] = "FileMap.__reduce_cython__(self)";
static PyObject *__pyx_pw_5tubes_7FileMap_5__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5tubes_7FileMap_4__reduce_cython__(((struct __pyx_obj_5tubes_FileMap *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5tubes_7FileMap_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5tubes_FileMap *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__55, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("tubes.FileMap.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_5tubes_7FileMap_7__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static char __pyx_doc_5tubes_7FileMap_6__setstate_cython__[] = "FileMap.__setstate_cython__(self, __pyx_state)";
static PyObject *__pyx_pw_5tubes_7FileMap_7__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5tubes_7FileMap_6__setstate_cython__(((struct __pyx_obj_5tubes_FileMap *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5tubes_7FileMap_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5tubes_FileMap *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__56, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("tubes.FileMap.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "iter_defs.pxi":801
 *     cdef public bint stream
 * 
 *     def __cinit__(self, Tube parent, bint stream):             # <<<<<<<<<<<<<<
 *         self.parent = parent
 *         self.stream = stream
 */

/* Python wrapper */
static int __pyx_pw_5tubes_6Gunzip_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_5tubes_6Gunzip_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_5tubes_Tube *__pyx_v_parent = 0;
  int __pyx_v_stream;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_parent,&__pyx_n_s_stream,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_parent)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_stream)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 2, 2, 1); __PYX_ERR(3, 801, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(3, 801, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_parent = ((struct __pyx_obj_5tubes_Tube *)values[0]);
    __pyx_v_stream = __Pyx_PyObject_IsTrue(values[1]); if (unlikely((__pyx_v_stream == (int)-1) && PyErr_Occurred())) __PYX_ERR(3, 801, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(3, 801, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("tubes.Gunzip.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_parent), __pyx_ptype_5tubes_Tube, 1, "parent", 0))) __PYX_ERR(3, 801, __pyx_L1_error)
  __pyx_r = __pyx_pf_5tubes_6Gunzip___cinit__(((struct __pyx_obj_5tubes_Gunzip *)__pyx_v_self), __pyx_v_parent, __pyx_v_stream);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5tubes_6Gunzip___cinit__(struct __pyx_obj_5tubes_Gunzip *__pyx_v_self, struct __pyx_obj_5tubes_Tube *__pyx_v_parent, int __pyx_v_stream) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "iter_defs.pxi":802
 * 
 *     def __cinit__(self, Tube parent, bint stream):
 *         self.parent = parent             # <<<<<<<<<<<<<<
 *         self.stream = stream
 * 
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_parent));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_parent));
  __Pyx_GOTREF(__pyx_v_self->parent);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->parent));
  __pyx_v_self->parent = __pyx_v_parent;

  /* "iter_defs.pxi":803
 *     def __cinit__(self, Tube parent, bint stream):
 *         self.parent = parent
 *         self.stream = stream             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_v_self->stream = __pyx_v_stream;

  /* "iter_defs.pxi":801
 *     cdef public bint stream
 * 
 *     def __cinit__(self, Tube parent, bint stream):             # <<<<<<<<<<<<<<
 *         self.parent = parent
 *         self.stream = stream
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "iter_defs.pxi":807
 * 
 * 
 *     cdef IterWrapper _make_iter(self, args):             # <<<<<<<<<<<<<<
 * 
 *         expected_args = len(self._inputs) + len(self._chains)
 */

static struct __pyx_obj_5tubes_IterWrapper *__pyx_f_5tubes_6Gunzip__make_iter(struct __pyx_obj_5tubes_Gunzip *__pyx_v_self, PyObject *__pyx_v_args) {
  Py_ssize_t __pyx_v_expected_args;
  PyObject *__pyx_v_chains = NULL;
  PyObject *__pyx_v_iters = NULL;
  struct __pyx_obj_5tubes_IterWrapper *__pyx_v_parent = 0;
  ss::iter::ZlibDecodeIter *__pyx_v_iter;
  struct __pyx_obj_5tubes_IterWrapper *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  int __pyx_t_4;
  Py_UCS4 __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  ss::iter::ZlibDecodeIter *__pyx_t_7;
  __Pyx_RefNannySetupContext("_make_iter", 0);

  /* "iter_defs.pxi":809
 *     cdef IterWrapper _make_iter(self, args):
 * 
 *         expected_args = len(self._inputs) + len(self._chains)             # <<<<<<<<<<<<<<
 *         if len(args) != expected_args:
 *             raise ValueError(f"Expected {expected_args} inputs to _make_iter, got {len(args)}")
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_inputs); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 809, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Length(__pyx_t_1); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1))) __PYX_ERR(3, 809, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_chains); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 809, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyObject_Length(__pyx_t_1); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1))) __PYX_ERR(3, 809, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_expected_args = (__pyx_t_2 + __pyx_t_3);

  /* "iter_defs.pxi":810
 * 
 *         expected_args = len(self._inputs) + len(self._chains)
 *         if len(args) != expected_args:             # <<<<<<<<<<<<<<
 *             raise ValueError(f"Expected {expected_args} inputs to _make_iter, got {len(args)}")
 * 
 */
  __pyx_t_3 = PyObject_Length(__pyx_v_args); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1))) __PYX_ERR(3, 810, __pyx_L1_error)
  __pyx_t_4 = ((__pyx_t_3 != __pyx_v_expected_args) != 0);
  if (__pyx_t_4) {

    /* "iter_defs.pxi":811
 *         expected_args = len(self._inputs) + len(self._chains)
 *         if len(args) != expected_args:
 *             raise ValueError(f"Expected {expected_args} inputs to _make_iter, got {len(args)}")             # <<<<<<<<<<<<<<
 * 
 *         chains = args[:len(self._chains)]
 */
    __pyx_t_1 = PyTuple_New(4); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 811, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = 0;
    __pyx_t_5 = 127;
    __Pyx_INCREF(__pyx_kp_u_Expected);
    __pyx_t_3 += 9;
    __Pyx_GIVEREF(__pyx_kp_u_Expected);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_kp_u_Expected);
    __pyx_t_6 = __Pyx_PyUnicode_From_Py_ssize_t(__pyx_v_expected_args, 0, ' ', 'd'); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 811, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_3 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_6);
    __pyx_t_6 = 0;
    __Pyx_INCREF(__pyx_kp_u_inputs_to__make_iter_got);
    __pyx_t_3 += 27;
    __Pyx_GIVEREF(__pyx_kp_u_inputs_to__make_iter_got);
    PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_kp_u_inputs_to__make_iter_got);
    __pyx_t_2 = PyObject_Length(__pyx_v_args); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1))) __PYX_ERR(3, 811, __pyx_L1_error)
    __pyx_t_6 = __Pyx_PyUnicode_From_Py_ssize_t(__pyx_t_2, 0, ' ', 'd'); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 811, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_3 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_1, 3, __pyx_t_6);
    __pyx_t_6 = 0;
    __pyx_t_6 = __Pyx_PyUnicode_Join(__pyx_t_1, 4, __pyx_t_3, __pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 811, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 811, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_6);
    __pyx_t_6 = 0;
    __pyx_t_6 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_t_1, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 811, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_Raise(__pyx_t_6, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __PYX_ERR(3, 811, __pyx_L1_error)

    /* "iter_defs.pxi":810
 * 
 *         expected_args = len(self._inputs) + len(self._chains)
 *         if len(args) != expected_args:             # <<<<<<<<<<<<<<
 *             raise ValueError(f"Expected {expected_args} inputs to _make_iter, got {len(args)}")
 * 
 */
  }

  /* "iter_defs.pxi":813
 *             raise ValueError(f"Expected {expected_args} inputs to _make_iter, got {len(args)}")
 * 
 *         chains = args[:len(self._chains)]             # <<<<<<<<<<<<<<
 *         iters = args[len(self._chains):]
 *         cdef IterWrapper parent = iters[0]
 */
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_chains); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 813, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_3 = PyObject_Length(__pyx_t_6); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1))) __PYX_ERR(3, 813, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = __Pyx_PyObject_GetSlice(__pyx_v_args, 0, __pyx_t_3, NULL, NULL, NULL, 0, 1, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 813, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_v_chains = __pyx_t_6;
  __pyx_t_6 = 0;

  /* "iter_defs.pxi":814
 * 
 *         chains = args[:len(self._chains)]
 *         iters = args[len(self._chains):]             # <<<<<<<<<<<<<<
 *         cdef IterWrapper parent = iters[0]
 *         cdef ZlibDecodeIter *iter = new ZlibDecodeIter(iters_to_c_chain(chains[0]), parent.iter, self.stream)
 */
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_chains); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 814, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_3 = PyObject_Length(__pyx_t_6); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1))) __PYX_ERR(3, 814, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = __Pyx_PyObject_GetSlice(__pyx_v_args, __pyx_t_3, 0, NULL, NULL, NULL, 1, 0, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 814, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_v_iters = __pyx_t_6;
  __pyx_t_6 = 0;

  /* "iter_defs.pxi":815
 *         chains = args[:len(self._chains)]
 *         iters = args[len(self._chains):]
 *         cdef IterWrapper parent = iters[0]             # <<<<<<<<<<<<<<
 *         cdef ZlibDecodeIter *iter = new ZlibDecodeIter(iters_to_c_chain(chains[0]), parent.iter, self.stream)
 * 
 */
  __pyx_t_6 = __Pyx_GetItemInt(__pyx_v_iters, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 815, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  if (!(likely(((__pyx_t_6) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_6, __pyx_ptype_5tubes_IterWrapper))))) __PYX_ERR(3, 815, __pyx_L1_error)
  __pyx_v_parent = ((struct __pyx_obj_5tubes_IterWrapper *)__pyx_t_6);
  __pyx_t_6 = 0;

  /* "iter_defs.pxi":816
 *         iters = args[len(self._chains):]
 *         cdef IterWrapper parent = iters[0]
 *         cdef ZlibDecodeIter *iter = new ZlibDecodeIter(iters_to_c_chain(chains[0]), parent.iter, self.stream)             # <<<<<<<<<<<<<<
 * 
 *         return wrap(to_any(iter))
 */
  __pyx_t_6 = __Pyx_GetItemInt(__pyx_v_chains, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 816, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  if (!(likely(PyList_CheckExact(__pyx_t_6))||((__pyx_t_6) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(__pyx_t_6)->tp_name), 0))) __PYX_ERR(3, 816, __pyx_L1_error)
  try {
    __pyx_t_7 = new ss::iter::ZlibDecodeIter(__pyx_f_5tubes_iters_to_c_chain(((PyObject*)__pyx_t_6)), __pyx_v_parent->iter, __pyx_v_self->stream);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(3, 816, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_v_iter = __pyx_t_7;

  /* "iter_defs.pxi":818
 *         cdef ZlibDecodeIter *iter = new ZlibDecodeIter(iters_to_c_chain(chains[0]), parent.iter, self.stream)
 * 
 *         return wrap(to_any(iter))             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __pyx_t_6 = __pyx_f_5tubes_wrap(ss::iter::to_any<ss::iter::ZlibDecodeIter>(__pyx_v_iter)); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 818, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  if (!(likely(((__pyx_t_6) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_6, __pyx_ptype_5tubes_IterWrapper))))) __PYX_ERR(3, 818, __pyx_L1_error)
  __pyx_r = ((struct __pyx_obj_5tubes_IterWrapper *)__pyx_t_6);
  __pyx_t_6 = 0;
  goto __pyx_L0;

  /* "iter_defs.pxi":807
 * 
 * 
 *     cdef IterWrapper _make_iter(self, args):             # <<<<<<<<<<<<<<
 * 
 *         expected_args = len(self._inputs) + len(self._chains)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("tubes.Gunzip._make_iter", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_chains);
  __Pyx_XDECREF(__pyx_v_iters);
  __Pyx_XDECREF((PyObject *)__pyx_v_parent);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "iter_defs.pxi":821
 * 
 *     @property
 *     def dtype(self):             # <<<<<<<<<<<<<<
 *         return (ByteSlice, )
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5tubes_6Gunzip_5dtype_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5tubes_6Gunzip_5dtype_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5tubes_6Gunzip_5dtype___get__(((struct __pyx_obj_5tubes_Gunzip *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5tubes_6Gunzip_5dtype___get__(CYTHON_UNUSED struct __pyx_obj_5tubes_Gunzip *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "iter_defs.pxi":822
 *     @property
 *     def dtype(self):
 *         return (ByteSlice, )             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_ByteSlice); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 822, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 822, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "iter_defs.pxi":821
 * 
 *     @property
 *     def dtype(self):             # <<<<<<<<<<<<<<
 *         return (ByteSlice, )
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("tubes.Gunzip.dtype.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "iter_defs.pxi":825
 * 
 *     @property
 *     def _chains(self):             # <<<<<<<<<<<<<<
 *         return ((self.parent,), )
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5tubes_6Gunzip_7_chains_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5tubes_6Gunzip_7_chains_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5tubes_6Gunzip_7_chains___get__(((struct __pyx_obj_5tubes_Gunzip *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5tubes_6Gunzip_7_chains___get__(struct __pyx_obj_5tubes_Gunzip *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "iter_defs.pxi":826
 *     @property
 *     def _chains(self):
 *         return ((self.parent,), )             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 826, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->parent));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self->parent));
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_v_self->parent));
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 826, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "iter_defs.pxi":825
 * 
 *     @property
 *     def _chains(self):             # <<<<<<<<<<<<<<
 *         return ((self.parent,), )
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("tubes.Gunzip._chains.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "iter_defs.pxi":830
 * 
 *     @property
 *     def _inputs(self):             # <<<<<<<<<<<<<<
 *         return (self.parent, )
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5tubes_6Gunzip_7_inputs_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5tubes_6Gunzip_7_inputs_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5tubes_6Gunzip_7_inputs___get__(((struct __pyx_obj_5tubes_Gunzip *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5tubes_6Gunzip_7_inputs___get__(struct __pyx_obj_5tubes_Gunzip *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "iter_defs.pxi":831
 *     @property
 *     def _inputs(self):
 *         return (self.parent, )             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 831, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->parent));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self->parent));
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_v_self->parent));
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "iter_defs.pxi":830
 * 
 *     @property
 *     def _inputs(self):             # <<<<<<<<<<<<<<
 *         return (self.parent, )
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("tubes.Gunzip._inputs.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "iter_defs.pxi":835
 * 
 * 
 *     cpdef _describe_self(self):             # <<<<<<<<<<<<<<
 *         return f"Gunzip({repr(self.stream)})"
 * 
 */

static PyObject *__pyx_pw_5tubes_6Gunzip_3_describe_self(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_f_5tubes_6Gunzip__describe_self(struct __pyx_obj_5tubes_Gunzip *__pyx_v_self, CYTHON_UNUSED int __pyx_skip_dispatch) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  Py_UCS4 __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("_describe_self", 0);

  /* "iter_defs.pxi":836
 * 
 *     cpdef _describe_self(self):
 *         return f"Gunzip({repr(self.stream)})"             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 836, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = 0;
  __pyx_t_3 = 127;
  __Pyx_INCREF(__pyx_kp_u_Gunzip);
  __pyx_t_2 += 7;
  __Pyx_GIVEREF(__pyx_kp_u_Gunzip);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_kp_u_Gunzip);
  __pyx_t_4 = __Pyx_PyBool_FromLong(__pyx_v_self->stream); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 836, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyObject_Repr(__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 836, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_FormatSimple(__pyx_t_5, __pyx_empty_unicode); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 836, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_3 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) > __pyx_t_3) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) : __pyx_t_3;
  __pyx_t_2 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_4);
  __pyx_t_4 = 0;
  __Pyx_INCREF(__pyx_kp_u__27);
  __pyx_t_2 += 1;
  __Pyx_GIVEREF(__pyx_kp_u__27);
  PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_kp_u__27);
  __pyx_t_4 = __Pyx_PyUnicode_Join(__pyx_t_1, 3, __pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 836, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "iter_defs.pxi":835
 * 
 * 
 *     cpdef _describe_self(self):             # <<<<<<<<<<<<<<
 *         return f"Gunzip({repr(self.stream)})"
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("tubes.Gunzip._describe_self", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5tubes_6Gunzip_3_describe_self(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5tubes_6Gunzip_2_describe_self[] = "Gunzip._describe_self(self)";
static PyObject *__pyx_pw_5tubes_6Gunzip_3_describe_self(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_describe_self (wrapper)", 0);
  __pyx_r = __pyx_pf_5tubes_6Gunzip_2_describe_self(((struct __pyx_obj_5tubes_Gunzip *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5tubes_6Gunzip_2_describe_self(struct __pyx_obj_5tubes_Gunzip *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("_describe_self", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_5tubes_6Gunzip__describe_self(__pyx_v_self, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 835, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("tubes.Gunzip._describe_self", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "iter_defs.pxi":798
 * cdef class Gunzip(Tube):  # AUTO GENERATED FROM tools/defn2.tmpl
 * 
 *     cdef public Tube parent             # <<<<<<<<<<<<<<
 *     cdef public bint stream
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5tubes_6Gunzip_6parent_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5tubes_6Gunzip_6parent_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5tubes_6Gunzip_6parent___get__(((struct __pyx_obj_5tubes_Gunzip *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5tubes_6Gunzip_6parent___get__(struct __pyx_obj_5tubes_Gunzip *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->parent));
  __pyx_r = ((PyObject *)__pyx_v_self->parent);
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_5tubes_6Gunzip_6parent_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_5tubes_6Gunzip_6parent_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5tubes_6Gunzip_6parent_2__set__(((struct __pyx_obj_5tubes_Gunzip *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5tubes_6Gunzip_6parent_2__set__(struct __pyx_obj_5tubes_Gunzip *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__set__", 0);
  if (!(likely(((__pyx_v_value) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_value, __pyx_ptype_5tubes_Tube))))) __PYX_ERR(3, 798, __pyx_L1_error)
  __pyx_t_1 = __pyx_v_value;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->parent);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->parent));
  __pyx_v_self->parent = ((struct __pyx_obj_5tubes_Tube *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("tubes.Gunzip.parent.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_5tubes_6Gunzip_6parent_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_5tubes_6Gunzip_6parent_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5tubes_6Gunzip_6parent_4__del__(((struct __pyx_obj_5tubes_Gunzip *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5tubes_6Gunzip_6parent_4__del__(struct __pyx_obj_5tubes_Gunzip *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->parent);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->parent));
  __pyx_v_self->parent = ((struct __pyx_obj_5tubes_Tube *)Py_None);

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "iter_defs.pxi":799
 * 
 *     cdef public Tube parent
 *     cdef public bint stream             # <<<<<<<<<<<<<<
 * 
 *     def __cinit__(self, Tube parent, bint stream):
 */

/* Python wrapper */
static PyObject *__pyx_pw_5tubes_6Gunzip_6stream_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5tubes_6Gunzip_6stream_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5tubes_6Gunzip_6stream___get__(((struct __pyx_obj_5tubes_Gunzip *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5tubes_6Gunzip_6stream___get__(struct __pyx_obj_5tubes_Gunzip *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->stream); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 799, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("tubes.Gunzip.stream.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_5tubes_6Gunzip_6stream_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_5tubes_6Gunzip_6stream_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5tubes_6Gunzip_6stream_2__set__(((struct __pyx_obj_5tubes_Gunzip *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5tubes_6Gunzip_6stream_2__set__(struct __pyx_obj_5tubes_Gunzip *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_value); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(3, 799, __pyx_L1_error)
  __pyx_v_self->stream = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("tubes.Gunzip.stream.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_5tubes_6Gunzip_5__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5tubes_6Gunzip_4__reduce_cython__[] = "Gunzip.__reduce_cython__(self)";
static PyObject *__pyx_pw_5tubes_6Gunzip_5__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5tubes_6Gunzip_4__reduce_cython__(((struct __pyx_obj_5tubes_Gunzip *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5tubes_6Gunzip_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5tubes_Gunzip *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__57, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("tubes.Gunzip.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_5tubes_6Gunzip_7__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static char __pyx_doc_5tubes_6Gunzip_6__setstate_cython__[] = "Gunzip.__setstate_cython__(self, __pyx_state)";
static PyObject *__pyx_pw_5tubes_6Gunzip_7__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5tubes_6Gunzip_6__setstate_cython__(((struct __pyx_obj_5tubes_Gunzip *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5tubes_6Gunzip_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5tubes_Gunzip *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__58, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("tubes.Gunzip.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "iter_defs.pxi":859
 *     cdef public size_t _start
 * 
 *     def __cinit__(self, size_t _start=0):             # <<<<<<<<<<<<<<
 *         self._start = _start
 * 
 */

/* Python wrapper */
static int __pyx_pw_5tubes_5Count_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_5tubes_5Count_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  size_t __pyx_v__start;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_start_2,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_start_2);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(3, 859, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    if (values[0]) {
      __pyx_v__start = __Pyx_PyInt_As_size_t(values[0]); if (unlikely((__pyx_v__start == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(3, 859, __pyx_L3_error)
    } else {
      __pyx_v__start = ((size_t)0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(3, 859, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("tubes.Count.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5tubes_5Count___cinit__(((struct __pyx_obj_5tubes_Count *)__pyx_v_self), __pyx_v__start);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5tubes_5Count___cinit__(struct __pyx_obj_5tubes_Count *__pyx_v_self, size_t __pyx_v__start) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "iter_defs.pxi":860
 * 
 *     def __cinit__(self, size_t _start=0):
 *         self._start = _start             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_v_self->_start = __pyx_v__start;

  /* "iter_defs.pxi":859
 *     cdef public size_t _start
 * 
 *     def __cinit__(self, size_t _start=0):             # <<<<<<<<<<<<<<
 *         self._start = _start
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "iter_defs.pxi":864
 * 
 * 
 *     cdef IterWrapper _make_iter(self, args):             # <<<<<<<<<<<<<<
 * 
 *         expected_args = len(self._inputs) + len(self._chains)
 */

static struct __pyx_obj_5tubes_IterWrapper *__pyx_f_5tubes_5Count__make_iter(struct __pyx_obj_5tubes_Count *__pyx_v_self, PyObject *__pyx_v_args) {
  Py_ssize_t __pyx_v_expected_args;
  CYTHON_UNUSED PyObject *__pyx_v_chains = NULL;
  CYTHON_UNUSED PyObject *__pyx_v_iters = NULL;
  ss::iter::CountIter *__pyx_v_iter;
  struct __pyx_obj_5tubes_IterWrapper *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  int __pyx_t_4;
  Py_UCS4 __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  ss::iter::CountIter *__pyx_t_7;
  __Pyx_RefNannySetupContext("_make_iter", 0);

  /* "iter_defs.pxi":866
 *     cdef IterWrapper _make_iter(self, args):
 * 
 *         expected_args = len(self._inputs) + len(self._chains)             # <<<<<<<<<<<<<<
 *         if len(args) != expected_args:
 *             raise ValueError(f"Expected {expected_args} inputs to _make_iter, got {len(args)}")
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_inputs); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 866, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Length(__pyx_t_1); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1))) __PYX_ERR(3, 866, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_chains); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 866, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyObject_Length(__pyx_t_1); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1))) __PYX_ERR(3, 866, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_expected_args = (__pyx_t_2 + __pyx_t_3);

  /* "iter_defs.pxi":867
 * 
 *         expected_args = len(self._inputs) + len(self._chains)
 *         if len(args) != expected_args:             # <<<<<<<<<<<<<<
 *             raise ValueError(f"Expected {expected_args} inputs to _make_iter, got {len(args)}")
 * 
 */
  __pyx_t_3 = PyObject_Length(__pyx_v_args); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1))) __PYX_ERR(3, 867, __pyx_L1_error)
  __pyx_t_4 = ((__pyx_t_3 != __pyx_v_expected_args) != 0);
  if (__pyx_t_4) {

    /* "iter_defs.pxi":868
 *         expected_args = len(self._inputs) + len(self._chains)
 *         if len(args) != expected_args:
 *             raise ValueError(f"Expected {expected_args} inputs to _make_iter, got {len(args)}")             # <<<<<<<<<<<<<<
 * 
 *         chains = args[:len(self._chains)]
 */
    __pyx_t_1 = PyTuple_New(4); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 868, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = 0;
    __pyx_t_5 = 127;
    __Pyx_INCREF(__pyx_kp_u_Expected);
    __pyx_t_3 += 9;
    __Pyx_GIVEREF(__pyx_kp_u_Expected);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_kp_u_Expected);
    __pyx_t_6 = __Pyx_PyUnicode_From_Py_ssize_t(__pyx_v_expected_args, 0, ' ', 'd'); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 868, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_3 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_6);
    __pyx_t_6 = 0;
    __Pyx_INCREF(__pyx_kp_u_inputs_to__make_iter_got);
    __pyx_t_3 += 27;
    __Pyx_GIVEREF(__pyx_kp_u_inputs_to__make_iter_got);
    PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_kp_u_inputs_to__make_iter_got);
    __pyx_t_2 = PyObject_Length(__pyx_v_args); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1))) __PYX_ERR(3, 868, __pyx_L1_error)
    __pyx_t_6 = __Pyx_PyUnicode_From_Py_ssize_t(__pyx_t_2, 0, ' ', 'd'); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 868, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_3 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_1, 3, __pyx_t_6);
    __pyx_t_6 = 0;
    __pyx_t_6 = __Pyx_PyUnicode_Join(__pyx_t_1, 4, __pyx_t_3, __pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 868, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 868, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_6);
    __pyx_t_6 = 0;
    __pyx_t_6 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_t_1, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 868, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_Raise(__pyx_t_6, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __PYX_ERR(3, 868, __pyx_L1_error)

    /* "iter_defs.pxi":867
 * 
 *         expected_args = len(self._inputs) + len(self._chains)
 *         if len(args) != expected_args:             # <<<<<<<<<<<<<<
 *             raise ValueError(f"Expected {expected_args} inputs to _make_iter, got {len(args)}")
 * 
 */
  }

  /* "iter_defs.pxi":870
 *             raise ValueError(f"Expected {expected_args} inputs to _make_iter, got {len(args)}")
 * 
 *         chains = args[:len(self._chains)]             # <<<<<<<<<<<<<<
 *         iters = args[len(self._chains):]
 *         cdef CountIter *iter = new CountIter(self._start)
 */
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_chains); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 870, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_3 = PyObject_Length(__pyx_t_6); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1))) __PYX_ERR(3, 870, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = __Pyx_PyObject_GetSlice(__pyx_v_args, 0, __pyx_t_3, NULL, NULL, NULL, 0, 1, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 870, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_v_chains = __pyx_t_6;
  __pyx_t_6 = 0;

  /* "iter_defs.pxi":871
 * 
 *         chains = args[:len(self._chains)]
 *         iters = args[len(self._chains):]             # <<<<<<<<<<<<<<
 *         cdef CountIter *iter = new CountIter(self._start)
 * 
 */
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_chains); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 871, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_3 = PyObject_Length(__pyx_t_6); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1))) __PYX_ERR(3, 871, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = __Pyx_PyObject_GetSlice(__pyx_v_args, __pyx_t_3, 0, NULL, NULL, NULL, 1, 0, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 871, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_v_iters = __pyx_t_6;
  __pyx_t_6 = 0;

  /* "iter_defs.pxi":872
 *         chains = args[:len(self._chains)]
 *         iters = args[len(self._chains):]
 *         cdef CountIter *iter = new CountIter(self._start)             # <<<<<<<<<<<<<<
 * 
 *         return wrap(to_any(iter))
 */
  try {
    __pyx_t_7 = new ss::iter::CountIter(__pyx_v_self->_start);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(3, 872, __pyx_L1_error)
  }
  __pyx_v_iter = __pyx_t_7;

  /* "iter_defs.pxi":874
 *         cdef CountIter *iter = new CountIter(self._start)
 * 
 *         return wrap(to_any(iter))             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __pyx_t_6 = __pyx_f_5tubes_wrap(ss::iter::to_any<ss::iter::CountIter>(__pyx_v_iter)); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 874, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  if (!(likely(((__pyx_t_6) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_6, __pyx_ptype_5tubes_IterWrapper))))) __PYX_ERR(3, 874, __pyx_L1_error)
  __pyx_r = ((struct __pyx_obj_5tubes_IterWrapper *)__pyx_t_6);
  __pyx_t_6 = 0;
  goto __pyx_L0;

  /* "iter_defs.pxi":864
 * 
 * 
 *     cdef IterWrapper _make_iter(self, args):             # <<<<<<<<<<<<<<
 * 
 *         expected_args = len(self._inputs) + len(self._chains)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("tubes.Count._make_iter", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_chains);
  __Pyx_XDECREF(__pyx_v_iters);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "iter_defs.pxi":877
 * 
 *     @property
 *     def dtype(self):             # <<<<<<<<<<<<<<
 *         return (Int64,)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5tubes_5Count_5dtype_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5tubes_5Count_5dtype_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5tubes_5Count_5dtype___get__(((struct __pyx_obj_5tubes_Count *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5tubes_5Count_5dtype___get__(CYTHON_UNUSED struct __pyx_obj_5tubes_Count *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "iter_defs.pxi":878
 *     @property
 *     def dtype(self):
 *         return (Int64,)             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_Int64); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 878, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 878, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "iter_defs.pxi":877
 * 
 *     @property
 *     def dtype(self):             # <<<<<<<<<<<<<<
 *         return (Int64,)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("tubes.Count.dtype.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "iter_defs.pxi":881
 * 
 *     @property
 *     def _chains(self):             # <<<<<<<<<<<<<<
 *         return ()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5tubes_5Count_7_chains_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5tubes_5Count_7_chains_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5tubes_5Count_7_chains___get__(((struct __pyx_obj_5tubes_Count *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5tubes_5Count_7_chains___get__(CYTHON_UNUSED struct __pyx_obj_5tubes_Count *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "iter_defs.pxi":882
 *     @property
 *     def _chains(self):
 *         return ()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_empty_tuple);
  __pyx_r = __pyx_empty_tuple;
  goto __pyx_L0;

  /* "iter_defs.pxi":881
 * 
 *     @property
 *     def _chains(self):             # <<<<<<<<<<<<<<
 *         return ()
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "iter_defs.pxi":886
 * 
 *     @property
 *     def _inputs(self):             # <<<<<<<<<<<<<<
 *         return ()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5tubes_5Count_7_inputs_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5tubes_5Count_7_inputs_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5tubes_5Count_7_inputs___get__(((struct __pyx_obj_5tubes_Count *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5tubes_5Count_7_inputs___get__(CYTHON_UNUSED struct __pyx_obj_5tubes_Count *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "iter_defs.pxi":887
 *     @property
 *     def _inputs(self):
 *         return ()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_empty_tuple);
  __pyx_r = __pyx_empty_tuple;
  goto __pyx_L0;

  /* "iter_defs.pxi":886
 * 
 *     @property
 *     def _inputs(self):             # <<<<<<<<<<<<<<
 *         return ()
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "iter_defs.pxi":891
 * 
 * 
 *     cpdef _describe_self(self):             # <<<<<<<<<<<<<<
 *         return f"Count({repr(self._start)})"
 * 
 */

static PyObject *__pyx_pw_5tubes_5Count_3_describe_self(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_f_5tubes_5Count__describe_self(struct __pyx_obj_5tubes_Count *__pyx_v_self, CYTHON_UNUSED int __pyx_skip_dispatch) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  Py_UCS4 __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("_describe_self", 0);

  /* "iter_defs.pxi":892
 * 
 *     cpdef _describe_self(self):
 *         return f"Count({repr(self._start)})"             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 892, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = 0;
  __pyx_t_3 = 127;
  __Pyx_INCREF(__pyx_kp_u_Count);
  __pyx_t_2 += 6;
  __Pyx_GIVEREF(__pyx_kp_u_Count);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_kp_u_Count);
  __pyx_t_4 = __Pyx_PyInt_FromSize_t(__pyx_v_self->_start); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 892, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyObject_Repr(__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 892, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_FormatSimple(__pyx_t_5, __pyx_empty_unicode); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 892, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_3 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) > __pyx_t_3) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) : __pyx_t_3;
  __pyx_t_2 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_4);
  __pyx_t_4 = 0;
  __Pyx_INCREF(__pyx_kp_u__27);
  __pyx_t_2 += 1;
  __Pyx_GIVEREF(__pyx_kp_u__27);
  PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_kp_u__27);
  __pyx_t_4 = __Pyx_PyUnicode_Join(__pyx_t_1, 3, __pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 892, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "iter_defs.pxi":891
 * 
 * 
 *     cpdef _describe_self(self):             # <<<<<<<<<<<<<<
 *         return f"Count({repr(self._start)})"
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("tubes.Count._describe_self", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5tubes_5Count_3_describe_self(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5tubes_5Count_2_describe_self[] = "Count._describe_self(self)";
static PyObject *__pyx_pw_5tubes_5Count_3_describe_self(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_describe_self (wrapper)", 0);
  __pyx_r = __pyx_pf_5tubes_5Count_2_describe_self(((struct __pyx_obj_5tubes_Count *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5tubes_5Count_2_describe_self(struct __pyx_obj_5tubes_Count *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("_describe_self", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_5tubes_5Count__describe_self(__pyx_v_self, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 891, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("tubes.Count._describe_self", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "iter_defs.pxi":857
 *     """
 * 
 *     cdef public size_t _start             # <<<<<<<<<<<<<<
 * 
 *     def __cinit__(self, size_t _start=0):
 */

/* Python wrapper */
static PyObject *__pyx_pw_5tubes_5Count_6_start_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5tubes_5Count_6_start_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5tubes_5Count_6_start___get__(((struct __pyx_obj_5tubes_Count *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5tubes_5Count_6_start___get__(struct __pyx_obj_5tubes_Count *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_FromSize_t(__pyx_v_self->_start); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 857, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("tubes.Count._start.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_5tubes_5Count_6_start_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_5tubes_5Count_6_start_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5tubes_5Count_6_start_2__set__(((struct __pyx_obj_5tubes_Count *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5tubes_5Count_6_start_2__set__(struct __pyx_obj_5tubes_Count *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  size_t __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_t_1 = __Pyx_PyInt_As_size_t(__pyx_v_value); if (unlikely((__pyx_t_1 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(3, 857, __pyx_L1_error)
  __pyx_v_self->_start = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("tubes.Count._start.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_5tubes_5Count_5__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5tubes_5Count_4__reduce_cython__[] = "Count.__reduce_cython__(self)";
static PyObject *__pyx_pw_5tubes_5Count_5__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5tubes_5Count_4__reduce_cython__(((struct __pyx_obj_5tubes_Count *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5tubes_5Count_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5tubes_Count *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__59, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("tubes.Count.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_5tubes_5Count_7__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static char __pyx_doc_5tubes_5Count_6__setstate_cython__[] = "Count.__setstate_cython__(self, __pyx_state)";
static PyObject *__pyx_pw_5tubes_5Count_7__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5tubes_5Count_6__setstate_cython__(((struct __pyx_obj_5tubes_Count *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5tubes_5Count_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5tubes_Count *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__60, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("tubes.Count.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "iter_defs.pxi":904
 *     cdef public object value
 * 
 *     def __cinit__(self, Tube parent, int op, object value):             # <<<<<<<<<<<<<<
 *         self.parent = parent
 *         self.op = op
 */

/* Python wrapper */
static int __pyx_pw_5tubes_7Compare_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_5tubes_7Compare_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_5tubes_Tube *__pyx_v_parent = 0;
  int __pyx_v_op;
  PyObject *__pyx_v_value = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_parent,&__pyx_n_s_op,&__pyx_n_s_value,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_parent)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_op)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 3, 3, 1); __PYX_ERR(3, 904, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_value)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 3, 3, 2); __PYX_ERR(3, 904, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(3, 904, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_parent = ((struct __pyx_obj_5tubes_Tube *)values[0]);
    __pyx_v_op = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_op == (int)-1) && PyErr_Occurred())) __PYX_ERR(3, 904, __pyx_L3_error)
    __pyx_v_value = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(3, 904, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("tubes.Compare.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_parent), __pyx_ptype_5tubes_Tube, 1, "parent", 0))) __PYX_ERR(3, 904, __pyx_L1_error)
  __pyx_r = __pyx_pf_5tubes_7Compare___cinit__(((struct __pyx_obj_5tubes_Compare *)__pyx_v_self), __pyx_v_parent, __pyx_v_op, __pyx_v_value);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5tubes_7Compare___cinit__(struct __pyx_obj_5tubes_Compare *__pyx_v_self, struct __pyx_obj_5tubes_Tube *__pyx_v_parent, int __pyx_v_op, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "iter_defs.pxi":905
 * 
 *     def __cinit__(self, Tube parent, int op, object value):
 *         self.parent = parent             # <<<<<<<<<<<<<<
 *         self.op = op
 *         self.value = value
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_parent));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_parent));
  __Pyx_GOTREF(__pyx_v_self->parent);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->parent));
  __pyx_v_self->parent = __pyx_v_parent;

  /* "iter_defs.pxi":906
 *     def __cinit__(self, Tube parent, int op, object value):
 *         self.parent = parent
 *         self.op = op             # <<<<<<<<<<<<<<
 *         self.value = value
 * 
 */
  __pyx_v_self->op = __pyx_v_op;

  /* "iter_defs.pxi":907
 *         self.parent = parent
 *         self.op = op
 *         self.value = value             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_INCREF(__pyx_v_value);
  __Pyx_GIVEREF(__pyx_v_value);
  __Pyx_GOTREF(__pyx_v_self->value);
  __Pyx_DECREF(__pyx_v_self->value);
  __pyx_v_self->value = __pyx_v_value;

  /* "iter_defs.pxi":904
 *     cdef public object value
 * 
 *     def __cinit__(self, Tube parent, int op, object value):             # <<<<<<<<<<<<<<
 *         self.parent = parent
 *         self.op = op
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "iter_defs.pxi":911
 * 
 * 
 *     cdef IterWrapper _make_iter(self, args):             # <<<<<<<<<<<<<<
 * 
 *         expected_args = len(self._inputs) + len(self._chains)
 */

static struct __pyx_obj_5tubes_IterWrapper *__pyx_f_5tubes_7Compare__make_iter(struct __pyx_obj_5tubes_Compare *__pyx_v_self, PyObject *__pyx_v_args) {
  Py_ssize_t __pyx_v_expected_args;
  CYTHON_UNUSED PyObject *__pyx_v_chains = NULL;
  PyObject *__pyx_v_iters = NULL;
  struct __pyx_obj_5tubes_IterWrapper *__pyx_v_parent = 0;
  ss::PyObj __pyx_v_value_ob;
  ss::iter::Iter *__pyx_v_iter;
  struct __pyx_obj_5tubes_IterWrapper *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  int __pyx_t_4;
  Py_UCS4 __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  ss::iter::Iter *__pyx_t_7;
  __Pyx_RefNannySetupContext("_make_iter", 0);

  /* "iter_defs.pxi":913
 *     cdef IterWrapper _make_iter(self, args):
 * 
 *         expected_args = len(self._inputs) + len(self._chains)             # <<<<<<<<<<<<<<
 *         if len(args) != expected_args:
 *             raise ValueError(f"Expected {expected_args} inputs to _make_iter, got {len(args)}")
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_inputs); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 913, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Length(__pyx_t_1); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1))) __PYX_ERR(3, 913, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_chains); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 913, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyObject_Length(__pyx_t_1); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1))) __PYX_ERR(3, 913, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_expected_args = (__pyx_t_2 + __pyx_t_3);

  /* "iter_defs.pxi":914
 * 
 *         expected_args = len(self._inputs) + len(self._chains)
 *         if len(args) != expected_args:             # <<<<<<<<<<<<<<
 *             raise ValueError(f"Expected {expected_args} inputs to _make_iter, got {len(args)}")
 * 
 */
  __pyx_t_3 = PyObject_Length(__pyx_v_args); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1))) __PYX_ERR(3, 914, __pyx_L1_error)
  __pyx_t_4 = ((__pyx_t_3 != __pyx_v_expected_args) != 0);
  if (__pyx_t_4) {

    /* "iter_defs.pxi":915
 *         expected_args = len(self._inputs) + len(self._chains)
 *         if len(args) != expected_args:
 *             raise ValueError(f"Expected {expected_args} inputs to _make_iter, got {len(args)}")             # <<<<<<<<<<<<<<
 * 
 *         chains = args[:len(self._chains)]
 */
    __pyx_t_1 = PyTuple_New(4); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 915, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = 0;
    __pyx_t_5 = 127;
    __Pyx_INCREF(__pyx_kp_u_Expected);
    __pyx_t_3 += 9;
    __Pyx_GIVEREF(__pyx_kp_u_Expected);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_kp_u_Expected);
    __pyx_t_6 = __Pyx_PyUnicode_From_Py_ssize_t(__pyx_v_expected_args, 0, ' ', 'd'); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 915, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_3 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_6);
    __pyx_t_6 = 0;
    __Pyx_INCREF(__pyx_kp_u_inputs_to__make_iter_got);
    __pyx_t_3 += 27;
    __Pyx_GIVEREF(__pyx_kp_u_inputs_to__make_iter_got);
    PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_kp_u_inputs_to__make_iter_got);
    __pyx_t_2 = PyObject_Length(__pyx_v_args); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1))) __PYX_ERR(3, 915, __pyx_L1_error)
    __pyx_t_6 = __Pyx_PyUnicode_From_Py_ssize_t(__pyx_t_2, 0, ' ', 'd'); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 915, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_3 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_1, 3, __pyx_t_6);
    __pyx_t_6 = 0;
    __pyx_t_6 = __Pyx_PyUnicode_Join(__pyx_t_1, 4, __pyx_t_3, __pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 915, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 915, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_6);
    __pyx_t_6 = 0;
    __pyx_t_6 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_t_1, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 915, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_Raise(__pyx_t_6, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __PYX_ERR(3, 915, __pyx_L1_error)

    /* "iter_defs.pxi":914
 * 
 *         expected_args = len(self._inputs) + len(self._chains)
 *         if len(args) != expected_args:             # <<<<<<<<<<<<<<
 *             raise ValueError(f"Expected {expected_args} inputs to _make_iter, got {len(args)}")
 * 
 */
  }

  /* "iter_defs.pxi":917
 *             raise ValueError(f"Expected {expected_args} inputs to _make_iter, got {len(args)}")
 * 
 *         chains = args[:len(self._chains)]             # <<<<<<<<<<<<<<
 *         iters = args[len(self._chains):]
 *         cdef IterWrapper parent = iters[0]
 */
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_chains); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 917, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_3 = PyObject_Length(__pyx_t_6); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1))) __PYX_ERR(3, 917, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = __Pyx_PyObject_GetSlice(__pyx_v_args, 0, __pyx_t_3, NULL, NULL, NULL, 0, 1, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 917, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_v_chains = __pyx_t_6;
  __pyx_t_6 = 0;

  /* "iter_defs.pxi":918
 * 
 *         chains = args[:len(self._chains)]
 *         iters = args[len(self._chains):]             # <<<<<<<<<<<<<<
 *         cdef IterWrapper parent = iters[0]
 * 
 */
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_chains); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 918, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_3 = PyObject_Length(__pyx_t_6); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1))) __PYX_ERR(3, 918, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = __Pyx_PyObject_GetSlice(__pyx_v_args, __pyx_t_3, 0, NULL, NULL, NULL, 1, 0, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 918, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_v_iters = __pyx_t_6;
  __pyx_t_6 = 0;

  /* "iter_defs.pxi":919
 *         chains = args[:len(self._chains)]
 *         iters = args[len(self._chains):]
 *         cdef IterWrapper parent = iters[0]             # <<<<<<<<<<<<<<
 * 
 *         cdef PyObj value_ob = PyObj(<PyObject*>self.value)
 */
  __pyx_t_6 = __Pyx_GetItemInt(__pyx_v_iters, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 919, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  if (!(likely(((__pyx_t_6) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_6, __pyx_ptype_5tubes_IterWrapper))))) __PYX_ERR(3, 919, __pyx_L1_error)
  __pyx_v_parent = ((struct __pyx_obj_5tubes_IterWrapper *)__pyx_t_6);
  __pyx_t_6 = 0;

  /* "iter_defs.pxi":921
 *         cdef IterWrapper parent = iters[0]
 * 
 *         cdef PyObj value_ob = PyObj(<PyObject*>self.value)             # <<<<<<<<<<<<<<
 *         cdef Iter *iter = compare_iter_from_cmp_dtype(parent.iter, self.op, value_ob)
 * 
 */
  __pyx_v_value_ob = ss::PyObj(((PyObject *)__pyx_v_self->value));

  /* "iter_defs.pxi":922
 * 
 *         cdef PyObj value_ob = PyObj(<PyObject*>self.value)
 *         cdef Iter *iter = compare_iter_from_cmp_dtype(parent.iter, self.op, value_ob)             # <<<<<<<<<<<<<<
 * 
 *         return wrap(to_any(iter))
 */
  try {
    __pyx_t_7 = ss::iter::compare_iter_from_cmp_dtype(__pyx_v_parent->iter, __pyx_v_self->op, __pyx_v_value_ob);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(3, 922, __pyx_L1_error)
  }
  __pyx_v_iter = __pyx_t_7;

  /* "iter_defs.pxi":924
 *         cdef Iter *iter = compare_iter_from_cmp_dtype(parent.iter, self.op, value_ob)
 * 
 *         return wrap(to_any(iter))             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __pyx_t_6 = __pyx_f_5tubes_wrap(ss::iter::to_any<ss::iter::Iter>(__pyx_v_iter)); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 924, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  if (!(likely(((__pyx_t_6) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_6, __pyx_ptype_5tubes_IterWrapper))))) __PYX_ERR(3, 924, __pyx_L1_error)
  __pyx_r = ((struct __pyx_obj_5tubes_IterWrapper *)__pyx_t_6);
  __pyx_t_6 = 0;
  goto __pyx_L0;

  /* "iter_defs.pxi":911
 * 
 * 
 *     cdef IterWrapper _make_iter(self, args):             # <<<<<<<<<<<<<<
 * 
 *         expected_args = len(self._inputs) + len(self._chains)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("tubes.Compare._make_iter", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_chains);
  __Pyx_XDECREF(__pyx_v_iters);
  __Pyx_XDECREF((PyObject *)__pyx_v_parent);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "iter_defs.pxi":927
 * 
 *     @property
 *     def dtype(self):             # <<<<<<<<<<<<<<
 *         return (Bool, )
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5tubes_7Compare_5dtype_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5tubes_7Compare_5dtype_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5tubes_7Compare_5dtype___get__(((struct __pyx_obj_5tubes_Compare *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5tubes_7Compare_5dtype___get__(CYTHON_UNUSED struct __pyx_obj_5tubes_Compare *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "iter_defs.pxi":928
 *     @property
 *     def dtype(self):
 *         return (Bool, )             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_Bool); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 928, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 928, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "iter_defs.pxi":927
 * 
 *     @property
 *     def dtype(self):             # <<<<<<<<<<<<<<
 *         return (Bool, )
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("tubes.Compare.dtype.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "iter_defs.pxi":931
 * 
 *     @property
 *     def _chains(self):             # <<<<<<<<<<<<<<
 *         return ()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5tubes_7Compare_7_chains_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5tubes_7Compare_7_chains_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5tubes_7Compare_7_chains___get__(((struct __pyx_obj_5tubes_Compare *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5tubes_7Compare_7_chains___get__(CYTHON_UNUSED struct __pyx_obj_5tubes_Compare *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "iter_defs.pxi":932
 *     @property
 *     def _chains(self):
 *         return ()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_empty_tuple);
  __pyx_r = __pyx_empty_tuple;
  goto __pyx_L0;

  /* "iter_defs.pxi":931
 * 
 *     @property
 *     def _chains(self):             # <<<<<<<<<<<<<<
 *         return ()
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "iter_defs.pxi":936
 * 
 *     @property
 *     def _inputs(self):             # <<<<<<<<<<<<<<
 *         return (self.parent, )
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5tubes_7Compare_7_inputs_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5tubes_7Compare_7_inputs_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5tubes_7Compare_7_inputs___get__(((struct __pyx_obj_5tubes_Compare *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5tubes_7Compare_7_inputs___get__(struct __pyx_obj_5tubes_Compare *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "iter_defs.pxi":937
 *     @property
 *     def _inputs(self):
 *         return (self.parent, )             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 937, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->parent));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self->parent));
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_v_self->parent));
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "iter_defs.pxi":936
 * 
 *     @property
 *     def _inputs(self):             # <<<<<<<<<<<<<<
 *         return (self.parent, )
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("tubes.Compare._inputs.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "iter_defs.pxi":941
 * 
 * 
 *     cpdef _describe_self(self):             # <<<<<<<<<<<<<<
 *         return f"Compare({repr(self.op)}, {repr(self.value)})"
 * 
 */

static PyObject *__pyx_pw_5tubes_7Compare_3_describe_self(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_f_5tubes_7Compare__describe_self(struct __pyx_obj_5tubes_Compare *__pyx_v_self, CYTHON_UNUSED int __pyx_skip_dispatch) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  Py_UCS4 __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("_describe_self", 0);

  /* "iter_defs.pxi":942
 * 
 *     cpdef _describe_self(self):
 *         return f"Compare({repr(self.op)}, {repr(self.value)})"             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyTuple_New(5); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 942, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = 0;
  __pyx_t_3 = 127;
  __Pyx_INCREF(__pyx_kp_u_Compare);
  __pyx_t_2 += 8;
  __Pyx_GIVEREF(__pyx_kp_u_Compare);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_kp_u_Compare);
  __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_self->op); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 942, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyObject_Repr(__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 942, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_FormatSimple(__pyx_t_5, __pyx_empty_unicode); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 942, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_3 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) > __pyx_t_3) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) : __pyx_t_3;
  __pyx_t_2 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_4);
  __pyx_t_4 = 0;
  __Pyx_INCREF(__pyx_kp_u__32);
  __pyx_t_2 += 2;
  __Pyx_GIVEREF(__pyx_kp_u__32);
  PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_kp_u__32);
  __pyx_t_4 = __pyx_v_self->value;
  __Pyx_INCREF(__pyx_t_4);
  __pyx_t_5 = PyObject_Repr(__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 942, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_FormatSimple(__pyx_t_5, __pyx_empty_unicode); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 942, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_3 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) > __pyx_t_3) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) : __pyx_t_3;
  __pyx_t_2 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_1, 3, __pyx_t_4);
  __pyx_t_4 = 0;
  __Pyx_INCREF(__pyx_kp_u__27);
  __pyx_t_2 += 1;
  __Pyx_GIVEREF(__pyx_kp_u__27);
  PyTuple_SET_ITEM(__pyx_t_1, 4, __pyx_kp_u__27);
  __pyx_t_4 = __Pyx_PyUnicode_Join(__pyx_t_1, 5, __pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 942, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "iter_defs.pxi":941
 * 
 * 
 *     cpdef _describe_self(self):             # <<<<<<<<<<<<<<
 *         return f"Compare({repr(self.op)}, {repr(self.value)})"
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("tubes.Compare._describe_self", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5tubes_7Compare_3_describe_self(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5tubes_7Compare_2_describe_self[] = "Compare._describe_self(self)";
static PyObject *__pyx_pw_5tubes_7Compare_3_describe_self(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_describe_self (wrapper)", 0);
  __pyx_r = __pyx_pf_5tubes_7Compare_2_describe_self(((struct __pyx_obj_5tubes_Compare *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5tubes_7Compare_2_describe_self(struct __pyx_obj_5tubes_Compare *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("_describe_self", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_5tubes_7Compare__describe_self(__pyx_v_self, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 941, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("tubes.Compare._describe_self", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "iter_defs.pxi":900
 * cdef class Compare(Tube):  # AUTO GENERATED FROM tools/defn2.tmpl
 * 
 *     cdef public Tube parent             # <<<<<<<<<<<<<<
 *     cdef public int op
 *     cdef public object value
 */

/* Python wrapper */
static PyObject *__pyx_pw_5tubes_7Compare_6parent_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5tubes_7Compare_6parent_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5tubes_7Compare_6parent___get__(((struct __pyx_obj_5tubes_Compare *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5tubes_7Compare_6parent___get__(struct __pyx_obj_5tubes_Compare *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->parent));
  __pyx_r = ((PyObject *)__pyx_v_self->parent);
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_5tubes_7Compare_6parent_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_5tubes_7Compare_6parent_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5tubes_7Compare_6parent_2__set__(((struct __pyx_obj_5tubes_Compare *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5tubes_7Compare_6parent_2__set__(struct __pyx_obj_5tubes_Compare *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__set__", 0);
  if (!(likely(((__pyx_v_value) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_value, __pyx_ptype_5tubes_Tube))))) __PYX_ERR(3, 900, __pyx_L1_error)
  __pyx_t_1 = __pyx_v_value;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->parent);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->parent));
  __pyx_v_self->parent = ((struct __pyx_obj_5tubes_Tube *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("tubes.Compare.parent.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_5tubes_7Compare_6parent_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_5tubes_7Compare_6parent_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5tubes_7Compare_6parent_4__del__(((struct __pyx_obj_5tubes_Compare *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5tubes_7Compare_6parent_4__del__(struct __pyx_obj_5tubes_Compare *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->parent);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->parent));
  __pyx_v_self->parent = ((struct __pyx_obj_5tubes_Tube *)Py_None);

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "iter_defs.pxi":901
 * 
 *     cdef public Tube parent
 *     cdef public int op             # <<<<<<<<<<<<<<
 *     cdef public object value
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5tubes_7Compare_2op_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5tubes_7Compare_2op_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5tubes_7Compare_2op___get__(((struct __pyx_obj_5tubes_Compare *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5tubes_7Compare_2op___get__(struct __pyx_obj_5tubes_Compare *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->op); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 901, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("tubes.Compare.op.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_5tubes_7Compare_2op_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_5tubes_7Compare_2op_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5tubes_7Compare_2op_2__set__(((struct __pyx_obj_5tubes_Compare *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5tubes_7Compare_2op_2__set__(struct __pyx_obj_5tubes_Compare *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_value); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(3, 901, __pyx_L1_error)
  __pyx_v_self->op = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("tubes.Compare.op.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "iter_defs.pxi":902
 *     cdef public Tube parent
 *     cdef public int op
 *     cdef public object value             # <<<<<<<<<<<<<<
 * 
 *     def __cinit__(self, Tube parent, int op, object value):
 */

/* Python wrapper */
static PyObject *__pyx_pw_5tubes_7Compare_5value_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5tubes_7Compare_5value_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5tubes_7Compare_5value___get__(((struct __pyx_obj_5tubes_Compare *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5tubes_7Compare_5value___get__(struct __pyx_obj_5tubes_Compare *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->value);
  __pyx_r = __pyx_v_self->value;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_5tubes_7Compare_5value_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_5tubes_7Compare_5value_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5tubes_7Compare_5value_2__set__(((struct __pyx_obj_5tubes_Compare *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5tubes_7Compare_5value_2__set__(struct __pyx_obj_5tubes_Compare *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_INCREF(__pyx_v_value);
  __Pyx_GIVEREF(__pyx_v_value);
  __Pyx_GOTREF(__pyx_v_self->value);
  __Pyx_DECREF(__pyx_v_self->value);
  __pyx_v_self->value = __pyx_v_value;

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_5tubes_7Compare_5value_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_5tubes_7Compare_5value_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5tubes_7Compare_5value_4__del__(((struct __pyx_obj_5tubes_Compare *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5tubes_7Compare_5value_4__del__(struct __pyx_obj_5tubes_Compare *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->value);
  __Pyx_DECREF(__pyx_v_self->value);
  __pyx_v_self->value = Py_None;

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_5tubes_7Compare_5__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5tubes_7Compare_4__reduce_cython__[] = "Compare.__reduce_cython__(self)";
static PyObject *__pyx_pw_5tubes_7Compare_5__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5tubes_7Compare_4__reduce_cython__(((struct __pyx_obj_5tubes_Compare *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5tubes_7Compare_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5tubes_Compare *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__61, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("tubes.Compare.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_5tubes_7Compare_7__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static char __pyx_doc_5tubes_7Compare_6__setstate_cython__[] = "Compare.__setstate_cython__(self, __pyx_state)";
static PyObject *__pyx_pw_5tubes_7Compare_7__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5tubes_7Compare_6__setstate_cython__(((struct __pyx_obj_5tubes_Compare *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5tubes_7Compare_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5tubes_Compare *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__62, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("tubes.Compare.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "iter_defs.pxi":953
 *     cdef public size_t num
 * 
 *     def __cinit__(self, Tube parent, size_t num):             # <<<<<<<<<<<<<<
 *         self.parent = parent
 *         self.num = num
 */

/* Python wrapper */
static int __pyx_pw_5tubes_5First_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_5tubes_5First_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_5tubes_Tube *__pyx_v_parent = 0;
  size_t __pyx_v_num;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_parent,&__pyx_n_s_num,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_parent)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_num)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 2, 2, 1); __PYX_ERR(3, 953, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(3, 953, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_parent = ((struct __pyx_obj_5tubes_Tube *)values[0]);
    __pyx_v_num = __Pyx_PyInt_As_size_t(values[1]); if (unlikely((__pyx_v_num == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(3, 953, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(3, 953, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("tubes.First.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_parent), __pyx_ptype_5tubes_Tube, 1, "parent", 0))) __PYX_ERR(3, 953, __pyx_L1_error)
  __pyx_r = __pyx_pf_5tubes_5First___cinit__(((struct __pyx_obj_5tubes_First *)__pyx_v_self), __pyx_v_parent, __pyx_v_num);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5tubes_5First___cinit__(struct __pyx_obj_5tubes_First *__pyx_v_self, struct __pyx_obj_5tubes_Tube *__pyx_v_parent, size_t __pyx_v_num) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "iter_defs.pxi":954
 * 
 *     def __cinit__(self, Tube parent, size_t num):
 *         self.parent = parent             # <<<<<<<<<<<<<<
 *         self.num = num
 * 
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_parent));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_parent));
  __Pyx_GOTREF(__pyx_v_self->parent);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->parent));
  __pyx_v_self->parent = __pyx_v_parent;

  /* "iter_defs.pxi":955
 *     def __cinit__(self, Tube parent, size_t num):
 *         self.parent = parent
 *         self.num = num             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_v_self->num = __pyx_v_num;

  /* "iter_defs.pxi":953
 *     cdef public size_t num
 * 
 *     def __cinit__(self, Tube parent, size_t num):             # <<<<<<<<<<<<<<
 *         self.parent = parent
 *         self.num = num
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "iter_defs.pxi":959
 * 
 * 
 *     cdef IterWrapper _make_iter(self, args):             # <<<<<<<<<<<<<<
 * 
 *         expected_args = len(self._inputs) + len(self._chains)
 */

static struct __pyx_obj_5tubes_IterWrapper *__pyx_f_5tubes_5First__make_iter(struct __pyx_obj_5tubes_First *__pyx_v_self, PyObject *__pyx_v_args) {
  Py_ssize_t __pyx_v_expected_args;
  CYTHON_UNUSED PyObject *__pyx_v_chains = NULL;
  PyObject *__pyx_v_iters = NULL;
  struct __pyx_obj_5tubes_IterWrapper *__pyx_v_parent = 0;
  ss::iter::FirstIter *__pyx_v_iter;
  struct __pyx_obj_5tubes_IterWrapper *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  int __pyx_t_4;
  Py_UCS4 __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  ss::iter::FirstIter *__pyx_t_7;
  __Pyx_RefNannySetupContext("_make_iter", 0);

  /* "iter_defs.pxi":961
 *     cdef IterWrapper _make_iter(self, args):
 * 
 *         expected_args = len(self._inputs) + len(self._chains)             # <<<<<<<<<<<<<<
 *         if len(args) != expected_args:
 *             raise ValueError(f"Expected {expected_args} inputs to _make_iter, got {len(args)}")
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_inputs); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 961, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Length(__pyx_t_1); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1))) __PYX_ERR(3, 961, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_chains); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 961, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyObject_Length(__pyx_t_1); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1))) __PYX_ERR(3, 961, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_expected_args = (__pyx_t_2 + __pyx_t_3);

  /* "iter_defs.pxi":962
 * 
 *         expected_args = len(self._inputs) + len(self._chains)
 *         if len(args) != expected_args:             # <<<<<<<<<<<<<<
 *             raise ValueError(f"Expected {expected_args} inputs to _make_iter, got {len(args)}")
 * 
 */
  __pyx_t_3 = PyObject_Length(__pyx_v_args); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1))) __PYX_ERR(3, 962, __pyx_L1_error)
  __pyx_t_4 = ((__pyx_t_3 != __pyx_v_expected_args) != 0);
  if (__pyx_t_4) {

    /* "iter_defs.pxi":963
 *         expected_args = len(self._inputs) + len(self._chains)
 *         if len(args) != expected_args:
 *             raise ValueError(f"Expected {expected_args} inputs to _make_iter, got {len(args)}")             # <<<<<<<<<<<<<<
 * 
 *         chains = args[:len(self._chains)]
 */
    __pyx_t_1 = PyTuple_New(4); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 963, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = 0;
    __pyx_t_5 = 127;
    __Pyx_INCREF(__pyx_kp_u_Expected);
    __pyx_t_3 += 9;
    __Pyx_GIVEREF(__pyx_kp_u_Expected);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_kp_u_Expected);
    __pyx_t_6 = __Pyx_PyUnicode_From_Py_ssize_t(__pyx_v_expected_args, 0, ' ', 'd'); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 963, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_3 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_6);
    __pyx_t_6 = 0;
    __Pyx_INCREF(__pyx_kp_u_inputs_to__make_iter_got);
    __pyx_t_3 += 27;
    __Pyx_GIVEREF(__pyx_kp_u_inputs_to__make_iter_got);
    PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_kp_u_inputs_to__make_iter_got);
    __pyx_t_2 = PyObject_Length(__pyx_v_args); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1))) __PYX_ERR(3, 963, __pyx_L1_error)
    __pyx_t_6 = __Pyx_PyUnicode_From_Py_ssize_t(__pyx_t_2, 0, ' ', 'd'); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 963, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_3 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_1, 3, __pyx_t_6);
    __pyx_t_6 = 0;
    __pyx_t_6 = __Pyx_PyUnicode_Join(__pyx_t_1, 4, __pyx_t_3, __pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 963, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 963, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_6);
    __pyx_t_6 = 0;
    __pyx_t_6 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_t_1, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 963, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_Raise(__pyx_t_6, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __PYX_ERR(3, 963, __pyx_L1_error)

    /* "iter_defs.pxi":962
 * 
 *         expected_args = len(self._inputs) + len(self._chains)
 *         if len(args) != expected_args:             # <<<<<<<<<<<<<<
 *             raise ValueError(f"Expected {expected_args} inputs to _make_iter, got {len(args)}")
 * 
 */
  }

  /* "iter_defs.pxi":965
 *             raise ValueError(f"Expected {expected_args} inputs to _make_iter, got {len(args)}")
 * 
 *         chains = args[:len(self._chains)]             # <<<<<<<<<<<<<<
 *         iters = args[len(self._chains):]
 *         cdef IterWrapper parent = iters[0]
 */
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_chains); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 965, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_3 = PyObject_Length(__pyx_t_6); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1))) __PYX_ERR(3, 965, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = __Pyx_PyObject_GetSlice(__pyx_v_args, 0, __pyx_t_3, NULL, NULL, NULL, 0, 1, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 965, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_v_chains = __pyx_t_6;
  __pyx_t_6 = 0;

  /* "iter_defs.pxi":966
 * 
 *         chains = args[:len(self._chains)]
 *         iters = args[len(self._chains):]             # <<<<<<<<<<<<<<
 *         cdef IterWrapper parent = iters[0]
 *         cdef FirstIter *iter = new FirstIter(parent.iter, self.num)
 */
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_chains); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 966, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_3 = PyObject_Length(__pyx_t_6); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1))) __PYX_ERR(3, 966, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = __Pyx_PyObject_GetSlice(__pyx_v_args, __pyx_t_3, 0, NULL, NULL, NULL, 1, 0, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 966, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_v_iters = __pyx_t_6;
  __pyx_t_6 = 0;

  /* "iter_defs.pxi":967
 *         chains = args[:len(self._chains)]
 *         iters = args[len(self._chains):]
 *         cdef IterWrapper parent = iters[0]             # <<<<<<<<<<<<<<
 *         cdef FirstIter *iter = new FirstIter(parent.iter, self.num)
 * 
 */
  __pyx_t_6 = __Pyx_GetItemInt(__pyx_v_iters, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 967, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  if (!(likely(((__pyx_t_6) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_6, __pyx_ptype_5tubes_IterWrapper))))) __PYX_ERR(3, 967, __pyx_L1_error)
  __pyx_v_parent = ((struct __pyx_obj_5tubes_IterWrapper *)__pyx_t_6);
  __pyx_t_6 = 0;

  /* "iter_defs.pxi":968
 *         iters = args[len(self._chains):]
 *         cdef IterWrapper parent = iters[0]
 *         cdef FirstIter *iter = new FirstIter(parent.iter, self.num)             # <<<<<<<<<<<<<<
 * 
 *         return wrap(to_any(iter))
 */
  try {
    __pyx_t_7 = new ss::iter::FirstIter(__pyx_v_parent->iter, __pyx_v_self->num);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(3, 968, __pyx_L1_error)
  }
  __pyx_v_iter = __pyx_t_7;

  /* "iter_defs.pxi":970
 *         cdef FirstIter *iter = new FirstIter(parent.iter, self.num)
 * 
 *         return wrap(to_any(iter))             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __pyx_t_6 = __pyx_f_5tubes_wrap(ss::iter::to_any<ss::iter::FirstIter>(__pyx_v_iter)); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 970, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  if (!(likely(((__pyx_t_6) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_6, __pyx_ptype_5tubes_IterWrapper))))) __PYX_ERR(3, 970, __pyx_L1_error)
  __pyx_r = ((struct __pyx_obj_5tubes_IterWrapper *)__pyx_t_6);
  __pyx_t_6 = 0;
  goto __pyx_L0;

  /* "iter_defs.pxi":959
 * 
 * 
 *     cdef IterWrapper _make_iter(self, args):             # <<<<<<<<<<<<<<
 * 
 *         expected_args = len(self._inputs) + len(self._chains)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("tubes.First._make_iter", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_chains);
  __Pyx_XDECREF(__pyx_v_iters);
  __Pyx_XDECREF((PyObject *)__pyx_v_parent);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "iter_defs.pxi":973
 * 
 *     @property
 *     def dtype(self):             # <<<<<<<<<<<<<<
 *         return self.parent.dtype
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5tubes_5First_5dtype_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5tubes_5First_5dtype_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5tubes_5First_5dtype___get__(((struct __pyx_obj_5tubes_First *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5tubes_5First_5dtype___get__(struct __pyx_obj_5tubes_First *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "iter_defs.pxi":974
 *     @property
 *     def dtype(self):
 *         return self.parent.dtype             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self->parent), __pyx_n_s_dtype); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 974, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "iter_defs.pxi":973
 * 
 *     @property
 *     def dtype(self):             # <<<<<<<<<<<<<<
 *         return self.parent.dtype
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("tubes.First.dtype.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "iter_defs.pxi":977
 * 
 *     @property
 *     def _chains(self):             # <<<<<<<<<<<<<<
 *         return ()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5tubes_5First_7_chains_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5tubes_5First_7_chains_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5tubes_5First_7_chains___get__(((struct __pyx_obj_5tubes_First *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5tubes_5First_7_chains___get__(CYTHON_UNUSED struct __pyx_obj_5tubes_First *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "iter_defs.pxi":978
 *     @property
 *     def _chains(self):
 *         return ()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_empty_tuple);
  __pyx_r = __pyx_empty_tuple;
  goto __pyx_L0;

  /* "iter_defs.pxi":977
 * 
 *     @property
 *     def _chains(self):             # <<<<<<<<<<<<<<
 *         return ()
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "iter_defs.pxi":982
 * 
 *     @property
 *     def _inputs(self):             # <<<<<<<<<<<<<<
 *         return (self.parent, )
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5tubes_5First_7_inputs_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5tubes_5First_7_inputs_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5tubes_5First_7_inputs___get__(((struct __pyx_obj_5tubes_First *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5tubes_5First_7_inputs___get__(struct __pyx_obj_5tubes_First *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "iter_defs.pxi":983
 *     @property
 *     def _inputs(self):
 *         return (self.parent, )             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 983, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->parent));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self->parent));
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_v_self->parent));
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "iter_defs.pxi":982
 * 
 *     @property
 *     def _inputs(self):             # <<<<<<<<<<<<<<
 *         return (self.parent, )
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("tubes.First._inputs.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "iter_defs.pxi":987
 * 
 * 
 *     cpdef _describe_self(self):             # <<<<<<<<<<<<<<
 *         return f"First({repr(self.num)})"
 * 
 */

static PyObject *__pyx_pw_5tubes_5First_3_describe_self(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_f_5tubes_5First__describe_self(struct __pyx_obj_5tubes_First *__pyx_v_self, CYTHON_UNUSED int __pyx_skip_dispatch) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  Py_UCS4 __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("_describe_self", 0);

  /* "iter_defs.pxi":988
 * 
 *     cpdef _describe_self(self):
 *         return f"First({repr(self.num)})"             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 988, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = 0;
  __pyx_t_3 = 127;
  __Pyx_INCREF(__pyx_kp_u_First);
  __pyx_t_2 += 6;
  __Pyx_GIVEREF(__pyx_kp_u_First);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_kp_u_First);
  __pyx_t_4 = __Pyx_PyInt_FromSize_t(__pyx_v_self->num); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 988, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyObject_Repr(__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 988, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_FormatSimple(__pyx_t_5, __pyx_empty_unicode); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 988, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_3 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) > __pyx_t_3) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) : __pyx_t_3;
  __pyx_t_2 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_4);
  __pyx_t_4 = 0;
  __Pyx_INCREF(__pyx_kp_u__27);
  __pyx_t_2 += 1;
  __Pyx_GIVEREF(__pyx_kp_u__27);
  PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_kp_u__27);
  __pyx_t_4 = __Pyx_PyUnicode_Join(__pyx_t_1, 3, __pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 988, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "iter_defs.pxi":987
 * 
 * 
 *     cpdef _describe_self(self):             # <<<<<<<<<<<<<<
 *         return f"First({repr(self.num)})"
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("tubes.First._describe_self", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5tubes_5First_3_describe_self(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5tubes_5First_2_describe_self[] = "First._describe_self(self)";
static PyObject *__pyx_pw_5tubes_5First_3_describe_self(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_describe_self (wrapper)", 0);
  __pyx_r = __pyx_pf_5tubes_5First_2_describe_self(((struct __pyx_obj_5tubes_First *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5tubes_5First_2_describe_self(struct __pyx_obj_5tubes_First *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("_describe_self", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_5tubes_5First__describe_self(__pyx_v_self, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 987, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("tubes.First._describe_self", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "iter_defs.pxi":950
 * cdef class First(Tube):  # AUTO GENERATED FROM tools/defn2.tmpl
 * 
 *     cdef public Tube parent             # <<<<<<<<<<<<<<
 *     cdef public size_t num
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5tubes_5First_6parent_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5tubes_5First_6parent_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5tubes_5First_6parent___get__(((struct __pyx_obj_5tubes_First *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5tubes_5First_6parent___get__(struct __pyx_obj_5tubes_First *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->parent));
  __pyx_r = ((PyObject *)__pyx_v_self->parent);
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_5tubes_5First_6parent_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_5tubes_5First_6parent_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5tubes_5First_6parent_2__set__(((struct __pyx_obj_5tubes_First *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5tubes_5First_6parent_2__set__(struct __pyx_obj_5tubes_First *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__set__", 0);
  if (!(likely(((__pyx_v_value) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_value, __pyx_ptype_5tubes_Tube))))) __PYX_ERR(3, 950, __pyx_L1_error)
  __pyx_t_1 = __pyx_v_value;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->parent);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->parent));
  __pyx_v_self->parent = ((struct __pyx_obj_5tubes_Tube *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("tubes.First.parent.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_5tubes_5First_6parent_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_5tubes_5First_6parent_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5tubes_5First_6parent_4__del__(((struct __pyx_obj_5tubes_First *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5tubes_5First_6parent_4__del__(struct __pyx_obj_5tubes_First *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->parent);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->parent));
  __pyx_v_self->parent = ((struct __pyx_obj_5tubes_Tube *)Py_None);

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "iter_defs.pxi":951
 * 
 *     cdef public Tube parent
 *     cdef public size_t num             # <<<<<<<<<<<<<<
 * 
 *     def __cinit__(self, Tube parent, size_t num):
 */

/* Python wrapper */
static PyObject *__pyx_pw_5tubes_5First_3num_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5tubes_5First_3num_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5tubes_5First_3num___get__(((struct __pyx_obj_5tubes_First *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5tubes_5First_3num___get__(struct __pyx_obj_5tubes_First *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_FromSize_t(__pyx_v_self->num); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 951, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("tubes.First.num.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_5tubes_5First_3num_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_5tubes_5First_3num_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5tubes_5First_3num_2__set__(((struct __pyx_obj_5tubes_First *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5tubes_5First_3num_2__set__(struct __pyx_obj_5tubes_First *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  size_t __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_t_1 = __Pyx_PyInt_As_size_t(__pyx_v_value); if (unlikely((__pyx_t_1 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(3, 951, __pyx_L1_error)
  __pyx_v_self->num = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("tubes.First.num.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_5tubes_5First_5__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5tubes_5First_4__reduce_cython__[] = "First.__reduce_cython__(self)";
static PyObject *__pyx_pw_5tubes_5First_5__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5tubes_5First_4__reduce_cython__(((struct __pyx_obj_5tubes_First *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5tubes_5First_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5tubes_First *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__63, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("tubes.First.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_5tubes_5First_7__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static char __pyx_doc_5tubes_5First_6__setstate_cython__[] = "First.__setstate_cython__(self, __pyx_state)";
static PyObject *__pyx_pw_5tubes_5First_7__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5tubes_5First_6__setstate_cython__(((struct __pyx_obj_5tubes_First *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5tubes_5First_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5tubes_First *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__64, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("tubes.First.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "iter_defs.pxi":999
 *     cdef public object sep
 * 
 *     def __cinit__(self, Tube parent, object sep):             # <<<<<<<<<<<<<<
 * 
 *         if parent.dtype[0] not in (ByteSlice, Utf8,):
 */

/* Python wrapper */
static int __pyx_pw_5tubes_5Split_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_5tubes_5Split_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_5tubes_Tube *__pyx_v_parent = 0;
  PyObject *__pyx_v_sep = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_parent,&__pyx_n_s_sep,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_parent)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_sep)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 2, 2, 1); __PYX_ERR(3, 999, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(3, 999, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_parent = ((struct __pyx_obj_5tubes_Tube *)values[0]);
    __pyx_v_sep = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(3, 999, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("tubes.Split.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_parent), __pyx_ptype_5tubes_Tube, 1, "parent", 0))) __PYX_ERR(3, 999, __pyx_L1_error)
  __pyx_r = __pyx_pf_5tubes_5Split___cinit__(((struct __pyx_obj_5tubes_Split *)__pyx_v_self), __pyx_v_parent, __pyx_v_sep);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5tubes_5Split___cinit__(struct __pyx_obj_5tubes_Split *__pyx_v_self, struct __pyx_obj_5tubes_Tube *__pyx_v_parent, PyObject *__pyx_v_sep) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "iter_defs.pxi":1001
 *     def __cinit__(self, Tube parent, object sep):
 * 
 *         if parent.dtype[0] not in (ByteSlice, Utf8,):             # <<<<<<<<<<<<<<
 *             raise ValueError(f"Cannot make a Split Tube with 'parent' tube of type { parent.dtype[0] }")
 *         self.parent = parent
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_parent), __pyx_n_s_dtype); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 1001, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_t_1, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 1001, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_ByteSlice); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 1001, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = PyObject_RichCompare(__pyx_t_2, __pyx_t_1, Py_NE); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 1001, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(3, 1001, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (__pyx_t_5) {
  } else {
    __pyx_t_3 = __pyx_t_5;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_Utf8); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 1001, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_1 = PyObject_RichCompare(__pyx_t_2, __pyx_t_4, Py_NE); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 1001, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(3, 1001, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __pyx_t_5;
  __pyx_L4_bool_binop_done:;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_5 = (__pyx_t_3 != 0);
  if (__pyx_t_5) {

    /* "iter_defs.pxi":1002
 * 
 *         if parent.dtype[0] not in (ByteSlice, Utf8,):
 *             raise ValueError(f"Cannot make a Split Tube with 'parent' tube of type { parent.dtype[0] }")             # <<<<<<<<<<<<<<
 *         self.parent = parent
 *         self.sep = sep
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_parent), __pyx_n_s_dtype); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 1002, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = __Pyx_GetItemInt(__pyx_t_2, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 1002, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyObject_FormatSimple(__pyx_t_1, __pyx_empty_unicode); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 1002, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyUnicode_Concat(__pyx_kp_u_Cannot_make_a_Split_Tube_with_pa, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 1002, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 1002, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
    __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 1002, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(3, 1002, __pyx_L1_error)

    /* "iter_defs.pxi":1001
 *     def __cinit__(self, Tube parent, object sep):
 * 
 *         if parent.dtype[0] not in (ByteSlice, Utf8,):             # <<<<<<<<<<<<<<
 *             raise ValueError(f"Cannot make a Split Tube with 'parent' tube of type { parent.dtype[0] }")
 *         self.parent = parent
 */
  }

  /* "iter_defs.pxi":1003
 *         if parent.dtype[0] not in (ByteSlice, Utf8,):
 *             raise ValueError(f"Cannot make a Split Tube with 'parent' tube of type { parent.dtype[0] }")
 *         self.parent = parent             # <<<<<<<<<<<<<<
 *         self.sep = sep
 * 
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_parent));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_parent));
  __Pyx_GOTREF(__pyx_v_self->parent);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->parent));
  __pyx_v_self->parent = __pyx_v_parent;

  /* "iter_defs.pxi":1004
 *             raise ValueError(f"Cannot make a Split Tube with 'parent' tube of type { parent.dtype[0] }")
 *         self.parent = parent
 *         self.sep = sep             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_INCREF(__pyx_v_sep);
  __Pyx_GIVEREF(__pyx_v_sep);
  __Pyx_GOTREF(__pyx_v_self->sep);
  __Pyx_DECREF(__pyx_v_self->sep);
  __pyx_v_self->sep = __pyx_v_sep;

  /* "iter_defs.pxi":999
 *     cdef public object sep
 * 
 *     def __cinit__(self, Tube parent, object sep):             # <<<<<<<<<<<<<<
 * 
 *         if parent.dtype[0] not in (ByteSlice, Utf8,):
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("tubes.Split.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "iter_defs.pxi":1008
 * 
 * 
 *     cdef IterWrapper _make_iter(self, args):             # <<<<<<<<<<<<<<
 * 
 *         expected_args = len(self._inputs) + len(self._chains)
 */

static struct __pyx_obj_5tubes_IterWrapper *__pyx_f_5tubes_5Split__make_iter(struct __pyx_obj_5tubes_Split *__pyx_v_self, PyObject *__pyx_v_args) {
  Py_ssize_t __pyx_v_expected_args;
  PyObject *__pyx_v_chains = NULL;
  PyObject *__pyx_v_iters = NULL;
  struct __pyx_obj_5tubes_IterWrapper *__pyx_v_parent = 0;
  ss::PyObj __pyx_v_sep_ob;
  ss::iter::Iter *__pyx_v_iter;
  struct __pyx_obj_5tubes_IterWrapper *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  int __pyx_t_4;
  Py_UCS4 __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  ss::iter::Iter *__pyx_t_7;
  __Pyx_RefNannySetupContext("_make_iter", 0);

  /* "iter_defs.pxi":1010
 *     cdef IterWrapper _make_iter(self, args):
 * 
 *         expected_args = len(self._inputs) + len(self._chains)             # <<<<<<<<<<<<<<
 *         if len(args) != expected_args:
 *             raise ValueError(f"Expected {expected_args} inputs to _make_iter, got {len(args)}")
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_inputs); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 1010, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Length(__pyx_t_1); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1))) __PYX_ERR(3, 1010, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_chains); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 1010, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyObject_Length(__pyx_t_1); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1))) __PYX_ERR(3, 1010, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_expected_args = (__pyx_t_2 + __pyx_t_3);

  /* "iter_defs.pxi":1011
 * 
 *         expected_args = len(self._inputs) + len(self._chains)
 *         if len(args) != expected_args:             # <<<<<<<<<<<<<<
 *             raise ValueError(f"Expected {expected_args} inputs to _make_iter, got {len(args)}")
 * 
 */
  __pyx_t_3 = PyObject_Length(__pyx_v_args); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1))) __PYX_ERR(3, 1011, __pyx_L1_error)
  __pyx_t_4 = ((__pyx_t_3 != __pyx_v_expected_args) != 0);
  if (__pyx_t_4) {

    /* "iter_defs.pxi":1012
 *         expected_args = len(self._inputs) + len(self._chains)
 *         if len(args) != expected_args:
 *             raise ValueError(f"Expected {expected_args} inputs to _make_iter, got {len(args)}")             # <<<<<<<<<<<<<<
 * 
 *         chains = args[:len(self._chains)]
 */
    __pyx_t_1 = PyTuple_New(4); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 1012, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = 0;
    __pyx_t_5 = 127;
    __Pyx_INCREF(__pyx_kp_u_Expected);
    __pyx_t_3 += 9;
    __Pyx_GIVEREF(__pyx_kp_u_Expected);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_kp_u_Expected);
    __pyx_t_6 = __Pyx_PyUnicode_From_Py_ssize_t(__pyx_v_expected_args, 0, ' ', 'd'); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 1012, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_3 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_6);
    __pyx_t_6 = 0;
    __Pyx_INCREF(__pyx_kp_u_inputs_to__make_iter_got);
    __pyx_t_3 += 27;
    __Pyx_GIVEREF(__pyx_kp_u_inputs_to__make_iter_got);
    PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_kp_u_inputs_to__make_iter_got);
    __pyx_t_2 = PyObject_Length(__pyx_v_args); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1))) __PYX_ERR(3, 1012, __pyx_L1_error)
    __pyx_t_6 = __Pyx_PyUnicode_From_Py_ssize_t(__pyx_t_2, 0, ' ', 'd'); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 1012, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_3 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_1, 3, __pyx_t_6);
    __pyx_t_6 = 0;
    __pyx_t_6 = __Pyx_PyUnicode_Join(__pyx_t_1, 4, __pyx_t_3, __pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 1012, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 1012, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_6);
    __pyx_t_6 = 0;
    __pyx_t_6 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_t_1, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 1012, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_Raise(__pyx_t_6, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __PYX_ERR(3, 1012, __pyx_L1_error)

    /* "iter_defs.pxi":1011
 * 
 *         expected_args = len(self._inputs) + len(self._chains)
 *         if len(args) != expected_args:             # <<<<<<<<<<<<<<
 *             raise ValueError(f"Expected {expected_args} inputs to _make_iter, got {len(args)}")
 * 
 */
  }

  /* "iter_defs.pxi":1014
 *             raise ValueError(f"Expected {expected_args} inputs to _make_iter, got {len(args)}")
 * 
 *         chains = args[:len(self._chains)]             # <<<<<<<<<<<<<<
 *         iters = args[len(self._chains):]
 *         cdef IterWrapper parent = iters[0]
 */
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_chains); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 1014, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_3 = PyObject_Length(__pyx_t_6); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1))) __PYX_ERR(3, 1014, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = __Pyx_PyObject_GetSlice(__pyx_v_args, 0, __pyx_t_3, NULL, NULL, NULL, 0, 1, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 1014, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_v_chains = __pyx_t_6;
  __pyx_t_6 = 0;

  /* "iter_defs.pxi":1015
 * 
 *         chains = args[:len(self._chains)]
 *         iters = args[len(self._chains):]             # <<<<<<<<<<<<<<
 *         cdef IterWrapper parent = iters[0]
 * 
 */
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_chains); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 1015, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_3 = PyObject_Length(__pyx_t_6); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1))) __PYX_ERR(3, 1015, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = __Pyx_PyObject_GetSlice(__pyx_v_args, __pyx_t_3, 0, NULL, NULL, NULL, 1, 0, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 1015, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_v_iters = __pyx_t_6;
  __pyx_t_6 = 0;

  /* "iter_defs.pxi":1016
 *         chains = args[:len(self._chains)]
 *         iters = args[len(self._chains):]
 *         cdef IterWrapper parent = iters[0]             # <<<<<<<<<<<<<<
 * 
 *         cdef PyObj sep_ob = PyObj(<PyObject*>self.sep)
 */
  __pyx_t_6 = __Pyx_GetItemInt(__pyx_v_iters, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 1016, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  if (!(likely(((__pyx_t_6) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_6, __pyx_ptype_5tubes_IterWrapper))))) __PYX_ERR(3, 1016, __pyx_L1_error)
  __pyx_v_parent = ((struct __pyx_obj_5tubes_IterWrapper *)__pyx_t_6);
  __pyx_t_6 = 0;

  /* "iter_defs.pxi":1018
 *         cdef IterWrapper parent = iters[0]
 * 
 *         cdef PyObj sep_ob = PyObj(<PyObject*>self.sep)             # <<<<<<<<<<<<<<
 *         cdef Iter *iter = split_iter_from_dtype(iters_to_c_chain(chains[0]), parent.iter, sep_ob)
 * 
 */
  __pyx_v_sep_ob = ss::PyObj(((PyObject *)__pyx_v_self->sep));

  /* "iter_defs.pxi":1019
 * 
 *         cdef PyObj sep_ob = PyObj(<PyObject*>self.sep)
 *         cdef Iter *iter = split_iter_from_dtype(iters_to_c_chain(chains[0]), parent.iter, sep_ob)             # <<<<<<<<<<<<<<
 * 
 *         return wrap(to_any(iter))
 */
  __pyx_t_6 = __Pyx_GetItemInt(__pyx_v_chains, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 1019, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  if (!(likely(PyList_CheckExact(__pyx_t_6))||((__pyx_t_6) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(__pyx_t_6)->tp_name), 0))) __PYX_ERR(3, 1019, __pyx_L1_error)
  try {
    __pyx_t_7 = ss::iter::split_iter_from_dtype(__pyx_f_5tubes_iters_to_c_chain(((PyObject*)__pyx_t_6)), __pyx_v_parent->iter, __pyx_v_sep_ob);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(3, 1019, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_v_iter = __pyx_t_7;

  /* "iter_defs.pxi":1021
 *         cdef Iter *iter = split_iter_from_dtype(iters_to_c_chain(chains[0]), parent.iter, sep_ob)
 * 
 *         return wrap(to_any(iter))             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __pyx_t_6 = __pyx_f_5tubes_wrap(ss::iter::to_any<ss::iter::Iter>(__pyx_v_iter)); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 1021, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  if (!(likely(((__pyx_t_6) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_6, __pyx_ptype_5tubes_IterWrapper))))) __PYX_ERR(3, 1021, __pyx_L1_error)
  __pyx_r = ((struct __pyx_obj_5tubes_IterWrapper *)__pyx_t_6);
  __pyx_t_6 = 0;
  goto __pyx_L0;

  /* "iter_defs.pxi":1008
 * 
 * 
 *     cdef IterWrapper _make_iter(self, args):             # <<<<<<<<<<<<<<
 * 
 *         expected_args = len(self._inputs) + len(self._chains)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("tubes.Split._make_iter", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_chains);
  __Pyx_XDECREF(__pyx_v_iters);
  __Pyx_XDECREF((PyObject *)__pyx_v_parent);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "iter_defs.pxi":1024
 * 
 *     @property
 *     def dtype(self):             # <<<<<<<<<<<<<<
 *         return self.parent.dtype
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5tubes_5Split_5dtype_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5tubes_5Split_5dtype_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5tubes_5Split_5dtype___get__(((struct __pyx_obj_5tubes_Split *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5tubes_5Split_5dtype___get__(struct __pyx_obj_5tubes_Split *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "iter_defs.pxi":1025
 *     @property
 *     def dtype(self):
 *         return self.parent.dtype             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self->parent), __pyx_n_s_dtype); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 1025, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "iter_defs.pxi":1024
 * 
 *     @property
 *     def dtype(self):             # <<<<<<<<<<<<<<
 *         return self.parent.dtype
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("tubes.Split.dtype.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "iter_defs.pxi":1028
 * 
 *     @property
 *     def _chains(self):             # <<<<<<<<<<<<<<
 *         return ((self.parent, ), )
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5tubes_5Split_7_chains_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5tubes_5Split_7_chains_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5tubes_5Split_7_chains___get__(((struct __pyx_obj_5tubes_Split *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5tubes_5Split_7_chains___get__(struct __pyx_obj_5tubes_Split *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "iter_defs.pxi":1029
 *     @property
 *     def _chains(self):
 *         return ((self.parent, ), )             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 1029, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->parent));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self->parent));
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_v_self->parent));
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 1029, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "iter_defs.pxi":1028
 * 
 *     @property
 *     def _chains(self):             # <<<<<<<<<<<<<<
 *         return ((self.parent, ), )
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("tubes.Split._chains.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "iter_defs.pxi":1033
 * 
 *     @property
 *     def _inputs(self):             # <<<<<<<<<<<<<<
 *         return (self.parent, )
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5tubes_5Split_7_inputs_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5tubes_5Split_7_inputs_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5tubes_5Split_7_inputs___get__(((struct __pyx_obj_5tubes_Split *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5tubes_5Split_7_inputs___get__(struct __pyx_obj_5tubes_Split *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "iter_defs.pxi":1034
 *     @property
 *     def _inputs(self):
 *         return (self.parent, )             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 1034, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->parent));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self->parent));
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_v_self->parent));
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "iter_defs.pxi":1033
 * 
 *     @property
 *     def _inputs(self):             # <<<<<<<<<<<<<<
 *         return (self.parent, )
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("tubes.Split._inputs.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "iter_defs.pxi":1038
 * 
 * 
 *     cpdef _describe_self(self):             # <<<<<<<<<<<<<<
 *         return f"Split({repr(self.sep)})"
 * 
 */

static PyObject *__pyx_pw_5tubes_5Split_3_describe_self(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_f_5tubes_5Split__describe_self(struct __pyx_obj_5tubes_Split *__pyx_v_self, CYTHON_UNUSED int __pyx_skip_dispatch) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  Py_UCS4 __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("_describe_self", 0);

  /* "iter_defs.pxi":1039
 * 
 *     cpdef _describe_self(self):
 *         return f"Split({repr(self.sep)})"             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 1039, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = 0;
  __pyx_t_3 = 127;
  __Pyx_INCREF(__pyx_kp_u_Split);
  __pyx_t_2 += 6;
  __Pyx_GIVEREF(__pyx_kp_u_Split);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_kp_u_Split);
  __pyx_t_4 = __pyx_v_self->sep;
  __Pyx_INCREF(__pyx_t_4);
  __pyx_t_5 = PyObject_Repr(__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 1039, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_FormatSimple(__pyx_t_5, __pyx_empty_unicode); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 1039, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_3 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) > __pyx_t_3) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) : __pyx_t_3;
  __pyx_t_2 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_4);
  __pyx_t_4 = 0;
  __Pyx_INCREF(__pyx_kp_u__27);
  __pyx_t_2 += 1;
  __Pyx_GIVEREF(__pyx_kp_u__27);
  PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_kp_u__27);
  __pyx_t_4 = __Pyx_PyUnicode_Join(__pyx_t_1, 3, __pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 1039, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "iter_defs.pxi":1038
 * 
 * 
 *     cpdef _describe_self(self):             # <<<<<<<<<<<<<<
 *         return f"Split({repr(self.sep)})"
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("tubes.Split._describe_self", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5tubes_5Split_3_describe_self(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5tubes_5Split_2_describe_self[] = "Split._describe_self(self)";
static PyObject *__pyx_pw_5tubes_5Split_3_describe_self(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_describe_self (wrapper)", 0);
  __pyx_r = __pyx_pf_5tubes_5Split_2_describe_self(((struct __pyx_obj_5tubes_Split *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5tubes_5Split_2_describe_self(struct __pyx_obj_5tubes_Split *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("_describe_self", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_5tubes_5Split__describe_self(__pyx_v_self, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 1038, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("tubes.Split._describe_self", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "iter_defs.pxi":996
 * cdef class Split(Tube):  # AUTO GENERATED FROM tools/defn2.tmpl
 * 
 *     cdef public Tube parent             # <<<<<<<<<<<<<<
 *     cdef public object sep
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5tubes_5Split_6parent_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5tubes_5Split_6parent_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5tubes_5Split_6parent___get__(((struct __pyx_obj_5tubes_Split *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5tubes_5Split_6parent___get__(struct __pyx_obj_5tubes_Split *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->parent));
  __pyx_r = ((PyObject *)__pyx_v_self->parent);
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_5tubes_5Split_6parent_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_5tubes_5Split_6parent_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5tubes_5Split_6parent_2__set__(((struct __pyx_obj_5tubes_Split *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5tubes_5Split_6parent_2__set__(struct __pyx_obj_5tubes_Split *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__set__", 0);
  if (!(likely(((__pyx_v_value) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_value, __pyx_ptype_5tubes_Tube))))) __PYX_ERR(3, 996, __pyx_L1_error)
  __pyx_t_1 = __pyx_v_value;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->parent);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->parent));
  __pyx_v_self->parent = ((struct __pyx_obj_5tubes_Tube *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("tubes.Split.parent.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_5tubes_5Split_6parent_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_5tubes_5Split_6parent_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5tubes_5Split_6parent_4__del__(((struct __pyx_obj_5tubes_Split *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5tubes_5Split_6parent_4__del__(struct __pyx_obj_5tubes_Split *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->parent);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->parent));
  __pyx_v_self->parent = ((struct __pyx_obj_5tubes_Tube *)Py_None);

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "iter_defs.pxi":997
 * 
 *     cdef public Tube parent
 *     cdef public object sep             # <<<<<<<<<<<<<<
 * 
 *     def __cinit__(self, Tube parent, object sep):
 */

/* Python wrapper */
static PyObject *__pyx_pw_5tubes_5Split_3sep_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5tubes_5Split_3sep_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5tubes_5Split_3sep___get__(((struct __pyx_obj_5tubes_Split *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5tubes_5Split_3sep___get__(struct __pyx_obj_5tubes_Split *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->sep);
  __pyx_r = __pyx_v_self->sep;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_5tubes_5Split_3sep_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_5tubes_5Split_3sep_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5tubes_5Split_3sep_2__set__(((struct __pyx_obj_5tubes_Split *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5tubes_5Split_3sep_2__set__(struct __pyx_obj_5tubes_Split *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_INCREF(__pyx_v_value);
  __Pyx_GIVEREF(__pyx_v_value);
  __Pyx_GOTREF(__pyx_v_self->sep);
  __Pyx_DECREF(__pyx_v_self->sep);
  __pyx_v_self->sep = __pyx_v_value;

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_5tubes_5Split_3sep_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_5tubes_5Split_3sep_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5tubes_5Split_3sep_4__del__(((struct __pyx_obj_5tubes_Split *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5tubes_5Split_3sep_4__del__(struct __pyx_obj_5tubes_Split *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->sep);
  __Pyx_DECREF(__pyx_v_self->sep);
  __pyx_v_self->sep = Py_None;

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_5tubes_5Split_5__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5tubes_5Split_4__reduce_cython__[] = "Split.__reduce_cython__(self)";
static PyObject *__pyx_pw_5tubes_5Split_5__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5tubes_5Split_4__reduce_cython__(((struct __pyx_obj_5tubes_Split *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5tubes_5Split_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5tubes_Split *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__65, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("tubes.Split.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_5tubes_5Split_7__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static char __pyx_doc_5tubes_5Split_6__setstate_cython__[] = "Split.__setstate_cython__(self, __pyx_state)";
static PyObject *__pyx_pw_5tubes_5Split_7__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5tubes_5Split_6__setstate_cython__(((struct __pyx_obj_5tubes_Split *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5tubes_5Split_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5tubes_Split *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__66, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("tubes.Split.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "iter_defs.pxi":1051
 *     cdef public bytes codec
 * 
 *     def __cinit__(self, Tube parent, list to_types, bytes codec=b"utf-8"):             # <<<<<<<<<<<<<<
 *         self.parent = parent
 *         self.to_types = to_types
 */

/* Python wrapper */
static int __pyx_pw_5tubes_7Convert_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_5tubes_7Convert_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_5tubes_Tube *__pyx_v_parent = 0;
  PyObject *__pyx_v_to_types = 0;
  PyObject *__pyx_v_codec = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_parent,&__pyx_n_s_to_types,&__pyx_n_s_codec,0};
    PyObject* values[3] = {0,0,0};
    values[2] = ((PyObject*)__pyx_kp_b_utf_8);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_parent)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_to_types)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 2, 3, 1); __PYX_ERR(3, 1051, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_codec);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(3, 1051, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_parent = ((struct __pyx_obj_5tubes_Tube *)values[0]);
    __pyx_v_to_types = ((PyObject*)values[1]);
    __pyx_v_codec = ((PyObject*)values[2]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 2, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(3, 1051, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("tubes.Convert.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_parent), __pyx_ptype_5tubes_Tube, 1, "parent", 0))) __PYX_ERR(3, 1051, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_to_types), (&PyList_Type), 1, "to_types", 1))) __PYX_ERR(3, 1051, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_codec), (&PyBytes_Type), 1, "codec", 1))) __PYX_ERR(3, 1051, __pyx_L1_error)
  __pyx_r = __pyx_pf_5tubes_7Convert___cinit__(((struct __pyx_obj_5tubes_Convert *)__pyx_v_self), __pyx_v_parent, __pyx_v_to_types, __pyx_v_codec);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5tubes_7Convert___cinit__(struct __pyx_obj_5tubes_Convert *__pyx_v_self, struct __pyx_obj_5tubes_Tube *__pyx_v_parent, PyObject *__pyx_v_to_types, PyObject *__pyx_v_codec) {
  struct __pyx_obj_5tubes_DType *__pyx_v_from_dtype = 0;
  struct __pyx_obj_5tubes_DType *__pyx_v_to_dtype = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *(*__pyx_t_7)(PyObject *);
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *(*__pyx_t_10)(PyObject *);
  std::string __pyx_t_11;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "iter_defs.pxi":1052
 * 
 *     def __cinit__(self, Tube parent, list to_types, bytes codec=b"utf-8"):
 *         self.parent = parent             # <<<<<<<<<<<<<<
 *         self.to_types = to_types
 *         self.codec = codec
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_parent));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_parent));
  __Pyx_GOTREF(__pyx_v_self->parent);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->parent));
  __pyx_v_self->parent = __pyx_v_parent;

  /* "iter_defs.pxi":1053
 *     def __cinit__(self, Tube parent, list to_types, bytes codec=b"utf-8"):
 *         self.parent = parent
 *         self.to_types = to_types             # <<<<<<<<<<<<<<
 *         self.codec = codec
 * 
 */
  __Pyx_INCREF(__pyx_v_to_types);
  __Pyx_GIVEREF(__pyx_v_to_types);
  __Pyx_GOTREF(__pyx_v_self->to_types);
  __Pyx_DECREF(__pyx_v_self->to_types);
  __pyx_v_self->to_types = __pyx_v_to_types;

  /* "iter_defs.pxi":1054
 *         self.parent = parent
 *         self.to_types = to_types
 *         self.codec = codec             # <<<<<<<<<<<<<<
 * 
 *         if len(parent.dtype) < len(self.dtype):
 */
  __Pyx_INCREF(__pyx_v_codec);
  __Pyx_GIVEREF(__pyx_v_codec);
  __Pyx_GOTREF(__pyx_v_self->codec);
  __Pyx_DECREF(__pyx_v_self->codec);
  __pyx_v_self->codec = __pyx_v_codec;

  /* "iter_defs.pxi":1056
 *         self.codec = codec
 * 
 *         if len(parent.dtype) < len(self.dtype):             # <<<<<<<<<<<<<<
 *             raise ValueError("Convert iter cannot have more elements than parent")
 *         cdef DType from_dtype
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_parent), __pyx_n_s_dtype); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 1056, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Length(__pyx_t_1); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1))) __PYX_ERR(3, 1056, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_dtype); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 1056, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyObject_Length(__pyx_t_1); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1))) __PYX_ERR(3, 1056, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_4 = ((__pyx_t_2 < __pyx_t_3) != 0);
  if (__pyx_t_4) {

    /* "iter_defs.pxi":1057
 * 
 *         if len(parent.dtype) < len(self.dtype):
 *             raise ValueError("Convert iter cannot have more elements than parent")             # <<<<<<<<<<<<<<
 *         cdef DType from_dtype
 *         cdef DType to_dtype
 */
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__67, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 1057, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(3, 1057, __pyx_L1_error)

    /* "iter_defs.pxi":1056
 *         self.codec = codec
 * 
 *         if len(parent.dtype) < len(self.dtype):             # <<<<<<<<<<<<<<
 *             raise ValueError("Convert iter cannot have more elements than parent")
 *         cdef DType from_dtype
 */
  }

  /* "iter_defs.pxi":1060
 *         cdef DType from_dtype
 *         cdef DType to_dtype
 *         for from_dtype, to_dtype in zip(parent.dtype, self.dtype):             # <<<<<<<<<<<<<<
 *             check_can_convert(from_dtype.type, to_dtype.type, codec)
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_parent), __pyx_n_s_dtype); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 1060, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_dtype); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 1060, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = PyTuple_New(2); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 1060, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_t_5);
  __pyx_t_1 = 0;
  __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_zip, __pyx_t_6, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 1060, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  if (likely(PyList_CheckExact(__pyx_t_5)) || PyTuple_CheckExact(__pyx_t_5)) {
    __pyx_t_6 = __pyx_t_5; __Pyx_INCREF(__pyx_t_6); __pyx_t_3 = 0;
    __pyx_t_7 = NULL;
  } else {
    __pyx_t_3 = -1; __pyx_t_6 = PyObject_GetIter(__pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 1060, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = Py_TYPE(__pyx_t_6)->tp_iternext; if (unlikely(!__pyx_t_7)) __PYX_ERR(3, 1060, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  for (;;) {
    if (likely(!__pyx_t_7)) {
      if (likely(PyList_CheckExact(__pyx_t_6))) {
        if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_6)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_5 = PyList_GET_ITEM(__pyx_t_6, __pyx_t_3); __Pyx_INCREF(__pyx_t_5); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(3, 1060, __pyx_L1_error)
        #else
        __pyx_t_5 = PySequence_ITEM(__pyx_t_6, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 1060, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        #endif
      } else {
        if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_6)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_5 = PyTuple_GET_ITEM(__pyx_t_6, __pyx_t_3); __Pyx_INCREF(__pyx_t_5); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(3, 1060, __pyx_L1_error)
        #else
        __pyx_t_5 = PySequence_ITEM(__pyx_t_6, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 1060, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        #endif
      }
    } else {
      __pyx_t_5 = __pyx_t_7(__pyx_t_6);
      if (unlikely(!__pyx_t_5)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(3, 1060, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_5);
    }
    if ((likely(PyTuple_CheckExact(__pyx_t_5))) || (PyList_CheckExact(__pyx_t_5))) {
      PyObject* sequence = __pyx_t_5;
      #if !CYTHON_COMPILING_IN_PYPY
      Py_ssize_t size = Py_SIZE(sequence);
      #else
      Py_ssize_t size = PySequence_Size(sequence);
      #endif
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(3, 1060, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_1 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_8 = PyTuple_GET_ITEM(sequence, 1); 
      } else {
        __pyx_t_1 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_8 = PyList_GET_ITEM(sequence, 1); 
      }
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_8);
      #else
      __pyx_t_1 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 1060, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_8 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_8)) __PYX_ERR(3, 1060, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      #endif
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } else {
      Py_ssize_t index = -1;
      __pyx_t_9 = PyObject_GetIter(__pyx_t_5); if (unlikely(!__pyx_t_9)) __PYX_ERR(3, 1060, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_10 = Py_TYPE(__pyx_t_9)->tp_iternext;
      index = 0; __pyx_t_1 = __pyx_t_10(__pyx_t_9); if (unlikely(!__pyx_t_1)) goto __pyx_L6_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_1);
      index = 1; __pyx_t_8 = __pyx_t_10(__pyx_t_9); if (unlikely(!__pyx_t_8)) goto __pyx_L6_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_8);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_10(__pyx_t_9), 2) < 0) __PYX_ERR(3, 1060, __pyx_L1_error)
      __pyx_t_10 = NULL;
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      goto __pyx_L7_unpacking_done;
      __pyx_L6_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __pyx_t_10 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(3, 1060, __pyx_L1_error)
      __pyx_L7_unpacking_done:;
    }
    if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5tubes_DType))))) __PYX_ERR(3, 1060, __pyx_L1_error)
    if (!(likely(((__pyx_t_8) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_8, __pyx_ptype_5tubes_DType))))) __PYX_ERR(3, 1060, __pyx_L1_error)
    __Pyx_XDECREF_SET(__pyx_v_from_dtype, ((struct __pyx_obj_5tubes_DType *)__pyx_t_1));
    __pyx_t_1 = 0;
    __Pyx_XDECREF_SET(__pyx_v_to_dtype, ((struct __pyx_obj_5tubes_DType *)__pyx_t_8));
    __pyx_t_8 = 0;

    /* "iter_defs.pxi":1061
 *         cdef DType to_dtype
 *         for from_dtype, to_dtype in zip(parent.dtype, self.dtype):
 *             check_can_convert(from_dtype.type, to_dtype.type, codec)             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_t_11 = __pyx_convert_string_from_py_std__in_string(__pyx_v_codec); if (unlikely(PyErr_Occurred())) __PYX_ERR(3, 1061, __pyx_L1_error)
    try {
      ss::iter::check_can_convert(__pyx_v_from_dtype->type, __pyx_v_to_dtype->type, __pyx_t_11);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(3, 1061, __pyx_L1_error)
    }

    /* "iter_defs.pxi":1060
 *         cdef DType from_dtype
 *         cdef DType to_dtype
 *         for from_dtype, to_dtype in zip(parent.dtype, self.dtype):             # <<<<<<<<<<<<<<
 *             check_can_convert(from_dtype.type, to_dtype.type, codec)
 * 
 */
  }
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "iter_defs.pxi":1051
 *     cdef public bytes codec
 * 
 *     def __cinit__(self, Tube parent, list to_types, bytes codec=b"utf-8"):             # <<<<<<<<<<<<<<
 *         self.parent = parent
 *         self.to_types = to_types
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("tubes.Convert.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_from_dtype);
  __Pyx_XDECREF((PyObject *)__pyx_v_to_dtype);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "iter_defs.pxi":1064
 * 
 * 
 *     cdef IterWrapper _make_iter(self, args):             # <<<<<<<<<<<<<<
 * 
 *         expected_args = len(self._inputs) + len(self._chains)
 */

static struct __pyx_obj_5tubes_IterWrapper *__pyx_f_5tubes_7Convert__make_iter(struct __pyx_obj_5tubes_Convert *__pyx_v_self, PyObject *__pyx_v_args) {
  Py_ssize_t __pyx_v_expected_args;
  CYTHON_UNUSED PyObject *__pyx_v_chains = NULL;
  PyObject *__pyx_v_iters = NULL;
  struct __pyx_obj_5tubes_IterWrapper *__pyx_v_parent = 0;
  ss::iter::ConvertIter *__pyx_v_iter;
  struct __pyx_obj_5tubes_IterWrapper *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  int __pyx_t_4;
  Py_UCS4 __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  std::string __pyx_t_7;
  ss::iter::ConvertIter *__pyx_t_8;
  __Pyx_RefNannySetupContext("_make_iter", 0);

  /* "iter_defs.pxi":1066
 *     cdef IterWrapper _make_iter(self, args):
 * 
 *         expected_args = len(self._inputs) + len(self._chains)             # <<<<<<<<<<<<<<
 *         if len(args) != expected_args:
 *             raise ValueError(f"Expected {expected_args} inputs to _make_iter, got {len(args)}")
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_inputs); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 1066, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Length(__pyx_t_1); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1))) __PYX_ERR(3, 1066, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_chains); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 1066, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyObject_Length(__pyx_t_1); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1))) __PYX_ERR(3, 1066, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_expected_args = (__pyx_t_2 + __pyx_t_3);

  /* "iter_defs.pxi":1067
 * 
 *         expected_args = len(self._inputs) + len(self._chains)
 *         if len(args) != expected_args:             # <<<<<<<<<<<<<<
 *             raise ValueError(f"Expected {expected_args} inputs to _make_iter, got {len(args)}")
 * 
 */
  __pyx_t_3 = PyObject_Length(__pyx_v_args); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1))) __PYX_ERR(3, 1067, __pyx_L1_error)
  __pyx_t_4 = ((__pyx_t_3 != __pyx_v_expected_args) != 0);
  if (__pyx_t_4) {

    /* "iter_defs.pxi":1068
 *         expected_args = len(self._inputs) + len(self._chains)
 *         if len(args) != expected_args:
 *             raise ValueError(f"Expected {expected_args} inputs to _make_iter, got {len(args)}")             # <<<<<<<<<<<<<<
 * 
 *         chains = args[:len(self._chains)]
 */
    __pyx_t_1 = PyTuple_New(4); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 1068, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = 0;
    __pyx_t_5 = 127;
    __Pyx_INCREF(__pyx_kp_u_Expected);
    __pyx_t_3 += 9;
    __Pyx_GIVEREF(__pyx_kp_u_Expected);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_kp_u_Expected);
    __pyx_t_6 = __Pyx_PyUnicode_From_Py_ssize_t(__pyx_v_expected_args, 0, ' ', 'd'); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 1068, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_3 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_6);
    __pyx_t_6 = 0;
    __Pyx_INCREF(__pyx_kp_u_inputs_to__make_iter_got);
    __pyx_t_3 += 27;
    __Pyx_GIVEREF(__pyx_kp_u_inputs_to__make_iter_got);
    PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_kp_u_inputs_to__make_iter_got);
    __pyx_t_2 = PyObject_Length(__pyx_v_args); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1))) __PYX_ERR(3, 1068, __pyx_L1_error)
    __pyx_t_6 = __Pyx_PyUnicode_From_Py_ssize_t(__pyx_t_2, 0, ' ', 'd'); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 1068, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_3 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_1, 3, __pyx_t_6);
    __pyx_t_6 = 0;
    __pyx_t_6 = __Pyx_PyUnicode_Join(__pyx_t_1, 4, __pyx_t_3, __pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 1068, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 1068, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_6);
    __pyx_t_6 = 0;
    __pyx_t_6 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_t_1, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 1068, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_Raise(__pyx_t_6, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __PYX_ERR(3, 1068, __pyx_L1_error)

    /* "iter_defs.pxi":1067
 * 
 *         expected_args = len(self._inputs) + len(self._chains)
 *         if len(args) != expected_args:             # <<<<<<<<<<<<<<
 *             raise ValueError(f"Expected {expected_args} inputs to _make_iter, got {len(args)}")
 * 
 */
  }

  /* "iter_defs.pxi":1070
 *             raise ValueError(f"Expected {expected_args} inputs to _make_iter, got {len(args)}")
 * 
 *         chains = args[:len(self._chains)]             # <<<<<<<<<<<<<<
 *         iters = args[len(self._chains):]
 *         cdef IterWrapper parent = iters[0]
 */
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_chains); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 1070, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_3 = PyObject_Length(__pyx_t_6); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1))) __PYX_ERR(3, 1070, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = __Pyx_PyObject_GetSlice(__pyx_v_args, 0, __pyx_t_3, NULL, NULL, NULL, 0, 1, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 1070, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_v_chains = __pyx_t_6;
  __pyx_t_6 = 0;

  /* "iter_defs.pxi":1071
 * 
 *         chains = args[:len(self._chains)]
 *         iters = args[len(self._chains):]             # <<<<<<<<<<<<<<
 *         cdef IterWrapper parent = iters[0]
 *         cdef ConvertIter *iter = new ConvertIter(parent.iter, self.dtype_vec(), self.codec)
 */
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_chains); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 1071, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_3 = PyObject_Length(__pyx_t_6); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1))) __PYX_ERR(3, 1071, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = __Pyx_PyObject_GetSlice(__pyx_v_args, __pyx_t_3, 0, NULL, NULL, NULL, 1, 0, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 1071, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_v_iters = __pyx_t_6;
  __pyx_t_6 = 0;

  /* "iter_defs.pxi":1072
 *         chains = args[:len(self._chains)]
 *         iters = args[len(self._chains):]
 *         cdef IterWrapper parent = iters[0]             # <<<<<<<<<<<<<<
 *         cdef ConvertIter *iter = new ConvertIter(parent.iter, self.dtype_vec(), self.codec)
 * 
 */
  __pyx_t_6 = __Pyx_GetItemInt(__pyx_v_iters, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 1072, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  if (!(likely(((__pyx_t_6) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_6, __pyx_ptype_5tubes_IterWrapper))))) __PYX_ERR(3, 1072, __pyx_L1_error)
  __pyx_v_parent = ((struct __pyx_obj_5tubes_IterWrapper *)__pyx_t_6);
  __pyx_t_6 = 0;

  /* "iter_defs.pxi":1073
 *         iters = args[len(self._chains):]
 *         cdef IterWrapper parent = iters[0]
 *         cdef ConvertIter *iter = new ConvertIter(parent.iter, self.dtype_vec(), self.codec)             # <<<<<<<<<<<<<<
 * 
 *         return wrap(to_any(iter))
 */
  __pyx_t_7 = __pyx_convert_string_from_py_std__in_string(__pyx_v_self->codec); if (unlikely(PyErr_Occurred())) __PYX_ERR(3, 1073, __pyx_L1_error)
  try {
    __pyx_t_8 = new ss::iter::ConvertIter(__pyx_v_parent->iter, __pyx_f_5tubes_7Convert_dtype_vec(__pyx_v_self), __pyx_t_7);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(3, 1073, __pyx_L1_error)
  }
  __pyx_v_iter = __pyx_t_8;

  /* "iter_defs.pxi":1075
 *         cdef ConvertIter *iter = new ConvertIter(parent.iter, self.dtype_vec(), self.codec)
 * 
 *         return wrap(to_any(iter))             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __pyx_t_6 = __pyx_f_5tubes_wrap(ss::iter::to_any<ss::iter::ConvertIter>(__pyx_v_iter)); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 1075, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  if (!(likely(((__pyx_t_6) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_6, __pyx_ptype_5tubes_IterWrapper))))) __PYX_ERR(3, 1075, __pyx_L1_error)
  __pyx_r = ((struct __pyx_obj_5tubes_IterWrapper *)__pyx_t_6);
  __pyx_t_6 = 0;
  goto __pyx_L0;

  /* "iter_defs.pxi":1064
 * 
 * 
 *     cdef IterWrapper _make_iter(self, args):             # <<<<<<<<<<<<<<
 * 
 *         expected_args = len(self._inputs) + len(self._chains)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("tubes.Convert._make_iter", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_chains);
  __Pyx_XDECREF(__pyx_v_iters);
  __Pyx_XDECREF((PyObject *)__pyx_v_parent);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "iter_defs.pxi":1078
 * 
 *     @property
 *     def dtype(self):             # <<<<<<<<<<<<<<
 *         return tuple(self.to_types)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5tubes_7Convert_5dtype_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5tubes_7Convert_5dtype_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5tubes_7Convert_5dtype___get__(((struct __pyx_obj_5tubes_Convert *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5tubes_7Convert_5dtype___get__(struct __pyx_obj_5tubes_Convert *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "iter_defs.pxi":1079
 *     @property
 *     def dtype(self):
 *         return tuple(self.to_types)             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  if (unlikely(__pyx_v_self->to_types == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(3, 1079, __pyx_L1_error)
  }
  __pyx_t_1 = PyList_AsTuple(__pyx_v_self->to_types); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 1079, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "iter_defs.pxi":1078
 * 
 *     @property
 *     def dtype(self):             # <<<<<<<<<<<<<<
 *         return tuple(self.to_types)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("tubes.Convert.dtype.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "iter_defs.pxi":1082
 * 
 *     @property
 *     def _chains(self):             # <<<<<<<<<<<<<<
 *         return ()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5tubes_7Convert_7_chains_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5tubes_7Convert_7_chains_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5tubes_7Convert_7_chains___get__(((struct __pyx_obj_5tubes_Convert *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5tubes_7Convert_7_chains___get__(CYTHON_UNUSED struct __pyx_obj_5tubes_Convert *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "iter_defs.pxi":1083
 *     @property
 *     def _chains(self):
 *         return ()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_empty_tuple);
  __pyx_r = __pyx_empty_tuple;
  goto __pyx_L0;

  /* "iter_defs.pxi":1082
 * 
 *     @property
 *     def _chains(self):             # <<<<<<<<<<<<<<
 *         return ()
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "iter_defs.pxi":1087
 * 
 *     @property
 *     def _inputs(self):             # <<<<<<<<<<<<<<
 *         return (self.parent, )
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5tubes_7Convert_7_inputs_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5tubes_7Convert_7_inputs_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5tubes_7Convert_7_inputs___get__(((struct __pyx_obj_5tubes_Convert *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5tubes_7Convert_7_inputs___get__(struct __pyx_obj_5tubes_Convert *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "iter_defs.pxi":1088
 *     @property
 *     def _inputs(self):
 *         return (self.parent, )             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 1088, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->parent));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self->parent));
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_v_self->parent));
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "iter_defs.pxi":1087
 * 
 *     @property
 *     def _inputs(self):             # <<<<<<<<<<<<<<
 *         return (self.parent, )
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("tubes.Convert._inputs.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "iter_defs.pxi":1092
 * 
 * 
 *     cpdef _describe_self(self):             # <<<<<<<<<<<<<<
 *         return f"Convert({repr(self.to_types)}, {repr(self.codec)})"
 * 
 */

static PyObject *__pyx_pw_5tubes_7Convert_3_describe_self(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_f_5tubes_7Convert__describe_self(struct __pyx_obj_5tubes_Convert *__pyx_v_self, CYTHON_UNUSED int __pyx_skip_dispatch) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  Py_UCS4 __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("_describe_self", 0);

  /* "iter_defs.pxi":1093
 * 
 *     cpdef _describe_self(self):
 *         return f"Convert({repr(self.to_types)}, {repr(self.codec)})"             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyTuple_New(5); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 1093, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = 0;
  __pyx_t_3 = 127;
  __Pyx_INCREF(__pyx_kp_u_Convert);
  __pyx_t_2 += 8;
  __Pyx_GIVEREF(__pyx_kp_u_Convert);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_kp_u_Convert);
  __pyx_t_4 = __pyx_v_self->to_types;
  __Pyx_INCREF(__pyx_t_4);
  __pyx_t_5 = PyObject_Repr(__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 1093, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_FormatSimple(__pyx_t_5, __pyx_empty_unicode); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 1093, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_3 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) > __pyx_t_3) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) : __pyx_t_3;
  __pyx_t_2 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_4);
  __pyx_t_4 = 0;
  __Pyx_INCREF(__pyx_kp_u__32);
  __pyx_t_2 += 2;
  __Pyx_GIVEREF(__pyx_kp_u__32);
  PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_kp_u__32);
  __pyx_t_4 = __pyx_v_self->codec;
  __Pyx_INCREF(__pyx_t_4);
  __pyx_t_5 = PyObject_Repr(__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 1093, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_FormatSimple(__pyx_t_5, __pyx_empty_unicode); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 1093, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_3 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) > __pyx_t_3) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) : __pyx_t_3;
  __pyx_t_2 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_1, 3, __pyx_t_4);
  __pyx_t_4 = 0;
  __Pyx_INCREF(__pyx_kp_u__27);
  __pyx_t_2 += 1;
  __Pyx_GIVEREF(__pyx_kp_u__27);
  PyTuple_SET_ITEM(__pyx_t_1, 4, __pyx_kp_u__27);
  __pyx_t_4 = __Pyx_PyUnicode_Join(__pyx_t_1, 5, __pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 1093, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "iter_defs.pxi":1092
 * 
 * 
 *     cpdef _describe_self(self):             # <<<<<<<<<<<<<<
 *         return f"Convert({repr(self.to_types)}, {repr(self.codec)})"
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("tubes.Convert._describe_self", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5tubes_7Convert_3_describe_self(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5tubes_7Convert_2_describe_self[] = "Convert._describe_self(self)";
static PyObject *__pyx_pw_5tubes_7Convert_3_describe_self(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_describe_self (wrapper)", 0);
  __pyx_r = __pyx_pf_5tubes_7Convert_2_describe_self(((struct __pyx_obj_5tubes_Convert *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5tubes_7Convert_2_describe_self(struct __pyx_obj_5tubes_Convert *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("_describe_self", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_5tubes_7Convert__describe_self(__pyx_v_self, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 1092, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("tubes.Convert._describe_self", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "iter_defs.pxi":1096
 * 
 * 
 *     cdef vector[scalar_type.ScalarType] dtype_vec(self):             # <<<<<<<<<<<<<<
 *         cdef DType dtype
 *         cdef vector[scalar_type.ScalarType] types
 */

static std::vector<ss::iter::ScalarType>  __pyx_f_5tubes_7Convert_dtype_vec(struct __pyx_obj_5tubes_Convert *__pyx_v_self) {
  struct __pyx_obj_5tubes_DType *__pyx_v_dtype = 0;
  std::vector<ss::iter::ScalarType>  __pyx_v_types;
  std::vector<ss::iter::ScalarType>  __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("dtype_vec", 0);

  /* "iter_defs.pxi":1099
 *         cdef DType dtype
 *         cdef vector[scalar_type.ScalarType] types
 *         for dtype in self.to_types:             # <<<<<<<<<<<<<<
 *             types.push_back(dtype.type)
 *         return types
 */
  if (unlikely(__pyx_v_self->to_types == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(3, 1099, __pyx_L1_error)
  }
  __pyx_t_1 = __pyx_v_self->to_types; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
  for (;;) {
    if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_3 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_3); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(3, 1099, __pyx_L1_error)
    #else
    __pyx_t_3 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 1099, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    #endif
    if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_5tubes_DType))))) __PYX_ERR(3, 1099, __pyx_L1_error)
    __Pyx_XDECREF_SET(__pyx_v_dtype, ((struct __pyx_obj_5tubes_DType *)__pyx_t_3));
    __pyx_t_3 = 0;

    /* "iter_defs.pxi":1100
 *         cdef vector[scalar_type.ScalarType] types
 *         for dtype in self.to_types:
 *             types.push_back(dtype.type)             # <<<<<<<<<<<<<<
 *         return types
 * 
 */
    try {
      __pyx_v_types.push_back(__pyx_v_dtype->type);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(3, 1100, __pyx_L1_error)
    }

    /* "iter_defs.pxi":1099
 *         cdef DType dtype
 *         cdef vector[scalar_type.ScalarType] types
 *         for dtype in self.to_types:             # <<<<<<<<<<<<<<
 *             types.push_back(dtype.type)
 *         return types
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "iter_defs.pxi":1101
 *         for dtype in self.to_types:
 *             types.push_back(dtype.type)
 *         return types             # <<<<<<<<<<<<<<
 * 
 */
  __pyx_r = __pyx_v_types;
  goto __pyx_L0;

  /* "iter_defs.pxi":1096
 * 
 * 
 *     cdef vector[scalar_type.ScalarType] dtype_vec(self):             # <<<<<<<<<<<<<<
 *         cdef DType dtype
 *         cdef vector[scalar_type.ScalarType] types
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_WriteUnraisable("tubes.Convert.dtype_vec", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_dtype);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "iter_defs.pxi":1047
 * cdef class Convert(Tube):  # AUTO GENERATED FROM tools/defn2.tmpl
 * 
 *     cdef public Tube parent             # <<<<<<<<<<<<<<
 *     cdef public list to_types
 *     cdef public bytes codec
 */

/* Python wrapper */
static PyObject *__pyx_pw_5tubes_7Convert_6parent_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5tubes_7Convert_6parent_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5tubes_7Convert_6parent___get__(((struct __pyx_obj_5tubes_Convert *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5tubes_7Convert_6parent___get__(struct __pyx_obj_5tubes_Convert *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->parent));
  __pyx_r = ((PyObject *)__pyx_v_self->parent);
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_5tubes_7Convert_6parent_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_5tubes_7Convert_6parent_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5tubes_7Convert_6parent_2__set__(((struct __pyx_obj_5tubes_Convert *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5tubes_7Convert_6parent_2__set__(struct __pyx_obj_5tubes_Convert *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__set__", 0);
  if (!(likely(((__pyx_v_value) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_value, __pyx_ptype_5tubes_Tube))))) __PYX_ERR(3, 1047, __pyx_L1_error)
  __pyx_t_1 = __pyx_v_value;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->parent);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->parent));
  __pyx_v_self->parent = ((struct __pyx_obj_5tubes_Tube *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("tubes.Convert.parent.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_5tubes_7Convert_6parent_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_5tubes_7Convert_6parent_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5tubes_7Convert_6parent_4__del__(((struct __pyx_obj_5tubes_Convert *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5tubes_7Convert_6parent_4__del__(struct __pyx_obj_5tubes_Convert *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->parent);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->parent));
  __pyx_v_self->parent = ((struct __pyx_obj_5tubes_Tube *)Py_None);

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "iter_defs.pxi":1048
 * 
 *     cdef public Tube parent
 *     cdef public list to_types             # <<<<<<<<<<<<<<
 *     cdef public bytes codec
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5tubes_7Convert_8to_types_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5tubes_7Convert_8to_types_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5tubes_7Convert_8to_types___get__(((struct __pyx_obj_5tubes_Convert *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5tubes_7Convert_8to_types___get__(struct __pyx_obj_5tubes_Convert *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->to_types);
  __pyx_r = __pyx_v_self->to_types;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_5tubes_7Convert_8to_types_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_5tubes_7Convert_8to_types_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5tubes_7Convert_8to_types_2__set__(((struct __pyx_obj_5tubes_Convert *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5tubes_7Convert_8to_types_2__set__(struct __pyx_obj_5tubes_Convert *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__set__", 0);
  if (!(likely(PyList_CheckExact(__pyx_v_value))||((__pyx_v_value) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(__pyx_v_value)->tp_name), 0))) __PYX_ERR(3, 1048, __pyx_L1_error)
  __pyx_t_1 = __pyx_v_value;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->to_types);
  __Pyx_DECREF(__pyx_v_self->to_types);
  __pyx_v_self->to_types = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("tubes.Convert.to_types.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_5tubes_7Convert_8to_types_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_5tubes_7Convert_8to_types_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5tubes_7Convert_8to_types_4__del__(((struct __pyx_obj_5tubes_Convert *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5tubes_7Convert_8to_types_4__del__(struct __pyx_obj_5tubes_Convert *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->to_types);
  __Pyx_DECREF(__pyx_v_self->to_types);
  __pyx_v_self->to_types = ((PyObject*)Py_None);

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "iter_defs.pxi":1049
 *     cdef public Tube parent
 *     cdef public list to_types
 *     cdef public bytes codec             # <<<<<<<<<<<<<<
 * 
 *     def __cinit__(self, Tube parent, list to_types, bytes codec=b"utf-8"):
 */

/* Python wrapper */
static PyObject *__pyx_pw_5tubes_7Convert_5codec_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5tubes_7Convert_5codec_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5tubes_7Convert_5codec___get__(((struct __pyx_obj_5tubes_Convert *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5tubes_7Convert_5codec___get__(struct __pyx_obj_5tubes_Convert *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->codec);
  __pyx_r = __pyx_v_self->codec;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_5tubes_7Convert_5codec_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_5tubes_7Convert_5codec_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5tubes_7Convert_5codec_2__set__(((struct __pyx_obj_5tubes_Convert *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5tubes_7Convert_5codec_2__set__(struct __pyx_obj_5tubes_Convert *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__set__", 0);
  if (!(likely(PyBytes_CheckExact(__pyx_v_value))||((__pyx_v_value) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "bytes", Py_TYPE(__pyx_v_value)->tp_name), 0))) __PYX_ERR(3, 1049, __pyx_L1_error)
  __pyx_t_1 = __pyx_v_value;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->codec);
  __Pyx_DECREF(__pyx_v_self->codec);
  __pyx_v_self->codec = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("tubes.Convert.codec.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_5tubes_7Convert_5codec_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_5tubes_7Convert_5codec_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5tubes_7Convert_5codec_4__del__(((struct __pyx_obj_5tubes_Convert *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5tubes_7Convert_5codec_4__del__(struct __pyx_obj_5tubes_Convert *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->codec);
  __Pyx_DECREF(__pyx_v_self->codec);
  __pyx_v_self->codec = ((PyObject*)Py_None);

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_5tubes_7Convert_5__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5tubes_7Convert_4__reduce_cython__[] = "Convert.__reduce_cython__(self)";
static PyObject *__pyx_pw_5tubes_7Convert_5__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5tubes_7Convert_4__reduce_cython__(((struct __pyx_obj_5tubes_Convert *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5tubes_7Convert_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5tubes_Convert *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__68, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("tubes.Convert.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_5tubes_7Convert_7__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static char __pyx_doc_5tubes_7Convert_6__setstate_cython__[] = "Convert.__setstate_cython__(self, __pyx_state)";
static PyObject *__pyx_pw_5tubes_7Convert_7__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5tubes_7Convert_6__setstate_cython__(((struct __pyx_obj_5tubes_Convert *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5tubes_7Convert_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5tubes_Convert *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__69, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("tubes.Convert.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "chunk.pxi":4
 * from functools import partial
 * 
 * def update_each_iter(object chunk, IterWrapper wrapped):             # <<<<<<<<<<<<<<
 *     cdef Iter *it = wrapped.iter.get()
 *     cdef EachIter *each = <EachIter*>it
 */

/* Python wrapper */
static PyObject *__pyx_pw_5tubes_1update_each_iter(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5tubes_update_each_iter[] = "update_each_iter(chunk, IterWrapper wrapped)";
static PyMethodDef __pyx_mdef_5tubes_1update_each_iter = {"update_each_iter", (PyCFunction)__pyx_pw_5tubes_1update_each_iter, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5tubes_update_each_iter};
static PyObject *__pyx_pw_5tubes_1update_each_iter(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_chunk = 0;
  struct __pyx_obj_5tubes_IterWrapper *__pyx_v_wrapped = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("update_each_iter (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_chunk,&__pyx_n_s_wrapped,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_chunk)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_wrapped)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("update_each_iter", 1, 2, 2, 1); __PYX_ERR(5, 4, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "update_each_iter") < 0)) __PYX_ERR(5, 4, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_chunk = values[0];
    __pyx_v_wrapped = ((struct __pyx_obj_5tubes_IterWrapper *)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("update_each_iter", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(5, 4, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("tubes.update_each_iter", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_wrapped), __pyx_ptype_5tubes_IterWrapper, 1, "wrapped", 0))) __PYX_ERR(5, 4, __pyx_L1_error)
  __pyx_r = __pyx_pf_5tubes_update_each_iter(__pyx_self, __pyx_v_chunk, __pyx_v_wrapped);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5tubes_update_each_iter(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_chunk, struct __pyx_obj_5tubes_IterWrapper *__pyx_v_wrapped) {
  ss::iter::Iter *__pyx_v_it;
  ss::iter::EachIter *__pyx_v_each;
  PyObject *__pyx_v_py_iter = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("update_each_iter", 0);

  /* "chunk.pxi":5
 * 
 * def update_each_iter(object chunk, IterWrapper wrapped):
 *     cdef Iter *it = wrapped.iter.get()             # <<<<<<<<<<<<<<
 *     cdef EachIter *each = <EachIter*>it
 *     py_iter = iter(chunk)
 */
  __pyx_v_it = __pyx_v_wrapped->iter.get();

  /* "chunk.pxi":6
 * def update_each_iter(object chunk, IterWrapper wrapped):
 *     cdef Iter *it = wrapped.iter.get()
 *     cdef EachIter *each = <EachIter*>it             # <<<<<<<<<<<<<<
 *     py_iter = iter(chunk)
 *     each.iter = PyObj(<PyObject *>py_iter)
 */
  __pyx_v_each = ((ss::iter::EachIter *)__pyx_v_it);

  /* "chunk.pxi":7
 *     cdef Iter *it = wrapped.iter.get()
 *     cdef EachIter *each = <EachIter*>it
 *     py_iter = iter(chunk)             # <<<<<<<<<<<<<<
 *     each.iter = PyObj(<PyObject *>py_iter)
 * 
 */
  __pyx_t_1 = PyObject_GetIter(__pyx_v_chunk); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_py_iter = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "chunk.pxi":8
 *     cdef EachIter *each = <EachIter*>it
 *     py_iter = iter(chunk)
 *     each.iter = PyObj(<PyObject *>py_iter)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_v_each->iter = ss::PyObj(((PyObject *)__pyx_v_py_iter));

  /* "chunk.pxi":4
 * from functools import partial
 * 
 * def update_each_iter(object chunk, IterWrapper wrapped):             # <<<<<<<<<<<<<<
 *     cdef Iter *it = wrapped.iter.get()
 *     cdef EachIter *each = <EachIter*>it
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("tubes.update_each_iter", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_py_iter);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "chunk.pxi":16
 *     cdef size_t chunk_size
 * 
 *     def __cinit__(self, Tube parent, size_t chunk_size=1):             # <<<<<<<<<<<<<<
 *         self.parent = parent
 *         self.chunk_size = chunk_size
 */

/* Python wrapper */
static int __pyx_pw_5tubes_5Chunk_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_5tubes_5Chunk_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_5tubes_Tube *__pyx_v_parent = 0;
  size_t __pyx_v_chunk_size;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_parent,&__pyx_n_s_chunk_size,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_parent)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_chunk_size);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(5, 16, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_parent = ((struct __pyx_obj_5tubes_Tube *)values[0]);
    if (values[1]) {
      __pyx_v_chunk_size = __Pyx_PyInt_As_size_t(values[1]); if (unlikely((__pyx_v_chunk_size == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(5, 16, __pyx_L3_error)
    } else {
      __pyx_v_chunk_size = ((size_t)1);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(5, 16, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("tubes.Chunk.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_parent), __pyx_ptype_5tubes_Tube, 1, "parent", 0))) __PYX_ERR(5, 16, __pyx_L1_error)
  __pyx_r = __pyx_pf_5tubes_5Chunk___cinit__(((struct __pyx_obj_5tubes_Chunk *)__pyx_v_self), __pyx_v_parent, __pyx_v_chunk_size);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5tubes_5Chunk___cinit__(struct __pyx_obj_5tubes_Chunk *__pyx_v_self, struct __pyx_obj_5tubes_Tube *__pyx_v_parent, size_t __pyx_v_chunk_size) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "chunk.pxi":17
 * 
 *     def __cinit__(self, Tube parent, size_t chunk_size=1):
 *         self.parent = parent             # <<<<<<<<<<<<<<
 *         self.chunk_size = chunk_size
 * 
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_parent));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_parent));
  __Pyx_GOTREF(__pyx_v_self->parent);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->parent));
  __pyx_v_self->parent = __pyx_v_parent;

  /* "chunk.pxi":18
 *     def __cinit__(self, Tube parent, size_t chunk_size=1):
 *         self.parent = parent
 *         self.chunk_size = chunk_size             # <<<<<<<<<<<<<<
 * 
 *     cdef IterWrapper _make_iter(self, args):
 */
  __pyx_v_self->chunk_size = __pyx_v_chunk_size;

  /* "chunk.pxi":16
 *     cdef size_t chunk_size
 * 
 *     def __cinit__(self, Tube parent, size_t chunk_size=1):             # <<<<<<<<<<<<<<
 *         self.parent = parent
 *         self.chunk_size = chunk_size
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "chunk.pxi":20
 *         self.chunk_size = chunk_size
 * 
 *     cdef IterWrapper _make_iter(self, args):             # <<<<<<<<<<<<<<
 *         cdef IterWrapper output_iter
 *         chains = Chains(self.parent)
 */

static struct __pyx_obj_5tubes_IterWrapper *__pyx_f_5tubes_5Chunk__make_iter(struct __pyx_obj_5tubes_Chunk *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_args) {
  struct __pyx_obj_5tubes_IterWrapper *__pyx_v_output_iter = 0;
  struct __pyx_obj_5tubes_Chains *__pyx_v_chains = NULL;
  PyObject *__pyx_v_each_inputs = NULL;
  struct __pyx_obj_5tubes_Each *__pyx_v_each_input = 0;
  Py_ssize_t __pyx_v_total_num;
  PyObject *__pyx_v_iters = NULL;
  std::vector<struct ss::iter::Chain>  __pyx_v_c_chains;
  int __pyx_v_stopped;
  PyObject *__pyx_v_i = NULL;
  PyObject *__pyx_v_chunk = NULL;
  PyObject *__pyx_v_made_chains = NULL;
  PyObject *__pyx_v_made_iters = NULL;
  ss::iter::ChainIter *__pyx_v_iter;
  PyObject *__pyx_8genexpr8__pyx_v_i = NULL;
  struct __pyx_obj_5tubes_IterWrapper *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_t_6;
  Py_ssize_t __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  int __pyx_t_11;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  PyObject *__pyx_t_14 = NULL;
  PyObject *__pyx_t_15 = NULL;
  struct __pyx_opt_args_5tubes_6Chains_make_chains_iters __pyx_t_16;
  PyObject *(*__pyx_t_17)(PyObject *);
  int __pyx_t_18;
  ss::iter::ChainIter *__pyx_t_19;
  __Pyx_RefNannySetupContext("_make_iter", 0);

  /* "chunk.pxi":22
 *     cdef IterWrapper _make_iter(self, args):
 *         cdef IterWrapper output_iter
 *         chains = Chains(self.parent)             # <<<<<<<<<<<<<<
 *         each_inputs = {i for i in chains.inputs if isinstance(i, Each)}
 *         if len(each_inputs) != 1:
 */
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 22, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->parent));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self->parent));
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_v_self->parent));
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_5tubes_Chains), __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(5, 22, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_chains = ((struct __pyx_obj_5tubes_Chains *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "chunk.pxi":23
 *         cdef IterWrapper output_iter
 *         chains = Chains(self.parent)
 *         each_inputs = {i for i in chains.inputs if isinstance(i, Each)}             # <<<<<<<<<<<<<<
 *         if len(each_inputs) != 1:
 *             raise ValueError("Cannot chunk tubes without a single fixed-sized Each input")
 */
  { /* enter inner scope */
    __pyx_t_2 = PySet_New(NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(5, 23, __pyx_L5_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = PyObject_GetIter(__pyx_v_chains->inputs); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 23, __pyx_L5_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) __PYX_ERR(5, 23, __pyx_L5_error)
    for (;;) {
      {
        __pyx_t_4 = __pyx_t_3(__pyx_t_1);
        if (unlikely(!__pyx_t_4)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(5, 23, __pyx_L5_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_4);
      }
      __Pyx_XDECREF_SET(__pyx_8genexpr8__pyx_v_i, __pyx_t_4);
      __pyx_t_4 = 0;
      __pyx_t_5 = __Pyx_TypeCheck(__pyx_8genexpr8__pyx_v_i, __pyx_ptype_5tubes_Each); 
      __pyx_t_6 = (__pyx_t_5 != 0);
      if (__pyx_t_6) {
        if (unlikely(PySet_Add(__pyx_t_2, (PyObject*)__pyx_8genexpr8__pyx_v_i))) __PYX_ERR(5, 23, __pyx_L5_error)
      }
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_8genexpr8__pyx_v_i); __pyx_8genexpr8__pyx_v_i = 0;
    goto __pyx_L9_exit_scope;
    __pyx_L5_error:;
    __Pyx_XDECREF(__pyx_8genexpr8__pyx_v_i); __pyx_8genexpr8__pyx_v_i = 0;
    goto __pyx_L1_error;
    __pyx_L9_exit_scope:;
  } /* exit inner scope */
  __pyx_v_each_inputs = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "chunk.pxi":24
 *         chains = Chains(self.parent)
 *         each_inputs = {i for i in chains.inputs if isinstance(i, Each)}
 *         if len(each_inputs) != 1:             # <<<<<<<<<<<<<<
 *             raise ValueError("Cannot chunk tubes without a single fixed-sized Each input")
 *         cdef Each each_input = each_inputs.pop()
 */
  __pyx_t_7 = PySet_GET_SIZE(__pyx_v_each_inputs); if (unlikely(__pyx_t_7 == ((Py_ssize_t)-1))) __PYX_ERR(5, 24, __pyx_L1_error)
  __pyx_t_6 = ((__pyx_t_7 != 1) != 0);
  if (__pyx_t_6) {

    /* "chunk.pxi":25
 *         each_inputs = {i for i in chains.inputs if isinstance(i, Each)}
 *         if len(each_inputs) != 1:
 *             raise ValueError("Cannot chunk tubes without a single fixed-sized Each input")             # <<<<<<<<<<<<<<
 *         cdef Each each_input = each_inputs.pop()
 *         try:
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__70, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(5, 25, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(5, 25, __pyx_L1_error)

    /* "chunk.pxi":24
 *         chains = Chains(self.parent)
 *         each_inputs = {i for i in chains.inputs if isinstance(i, Each)}
 *         if len(each_inputs) != 1:             # <<<<<<<<<<<<<<
 *             raise ValueError("Cannot chunk tubes without a single fixed-sized Each input")
 *         cdef Each each_input = each_inputs.pop()
 */
  }

  /* "chunk.pxi":26
 *         if len(each_inputs) != 1:
 *             raise ValueError("Cannot chunk tubes without a single fixed-sized Each input")
 *         cdef Each each_input = each_inputs.pop()             # <<<<<<<<<<<<<<
 *         try:
 *             total_num = len(each_input._iter)
 */
  __pyx_t_2 = PySet_Pop(__pyx_v_each_inputs); if (unlikely(!__pyx_t_2)) __PYX_ERR(5, 26, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_ptype_5tubes_Each))))) __PYX_ERR(5, 26, __pyx_L1_error)
  __pyx_v_each_input = ((struct __pyx_obj_5tubes_Each *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "chunk.pxi":27
 *             raise ValueError("Cannot chunk tubes without a single fixed-sized Each input")
 *         cdef Each each_input = each_inputs.pop()
 *         try:             # <<<<<<<<<<<<<<
 *             total_num = len(each_input._iter)
 *         except TypeError:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_8, &__pyx_t_9, &__pyx_t_10);
    __Pyx_XGOTREF(__pyx_t_8);
    __Pyx_XGOTREF(__pyx_t_9);
    __Pyx_XGOTREF(__pyx_t_10);
    /*try:*/ {

      /* "chunk.pxi":28
 *         cdef Each each_input = each_inputs.pop()
 *         try:
 *             total_num = len(each_input._iter)             # <<<<<<<<<<<<<<
 *         except TypeError:
 *             raise ValueError("Found an Each input, but cannot get len() of it")
 */
      __pyx_t_2 = __pyx_v_each_input->_iter;
      __Pyx_INCREF(__pyx_t_2);
      __pyx_t_7 = PyObject_Length(__pyx_t_2); if (unlikely(__pyx_t_7 == ((Py_ssize_t)-1))) __PYX_ERR(5, 28, __pyx_L11_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_v_total_num = __pyx_t_7;

      /* "chunk.pxi":27
 *             raise ValueError("Cannot chunk tubes without a single fixed-sized Each input")
 *         cdef Each each_input = each_inputs.pop()
 *         try:             # <<<<<<<<<<<<<<
 *             total_num = len(each_input._iter)
 *         except TypeError:
 */
    }
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
    goto __pyx_L16_try_end;
    __pyx_L11_error:;
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "chunk.pxi":29
 *         try:
 *             total_num = len(each_input._iter)
 *         except TypeError:             # <<<<<<<<<<<<<<
 *             raise ValueError("Found an Each input, but cannot get len() of it")
 *         iters = []
 */
    __pyx_t_11 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_TypeError);
    if (__pyx_t_11) {
      __Pyx_AddTraceback("tubes.Chunk._make_iter", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_2, &__pyx_t_1, &__pyx_t_4) < 0) __PYX_ERR(5, 29, __pyx_L13_except_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_GOTREF(__pyx_t_4);

      /* "chunk.pxi":30
 *             total_num = len(each_input._iter)
 *         except TypeError:
 *             raise ValueError("Found an Each input, but cannot get len() of it")             # <<<<<<<<<<<<<<
 *         iters = []
 *         cdef vector[Chain] c_chains
 */
      __pyx_t_12 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__71, NULL); if (unlikely(!__pyx_t_12)) __PYX_ERR(5, 30, __pyx_L13_except_error)
      __Pyx_GOTREF(__pyx_t_12);
      __Pyx_Raise(__pyx_t_12, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
      __PYX_ERR(5, 30, __pyx_L13_except_error)
    }
    goto __pyx_L13_except_error;
    __pyx_L13_except_error:;

    /* "chunk.pxi":27
 *             raise ValueError("Cannot chunk tubes without a single fixed-sized Each input")
 *         cdef Each each_input = each_inputs.pop()
 *         try:             # <<<<<<<<<<<<<<
 *             total_num = len(each_input._iter)
 *         except TypeError:
 */
    __Pyx_XGIVEREF(__pyx_t_8);
    __Pyx_XGIVEREF(__pyx_t_9);
    __Pyx_XGIVEREF(__pyx_t_10);
    __Pyx_ExceptionReset(__pyx_t_8, __pyx_t_9, __pyx_t_10);
    goto __pyx_L1_error;
    __pyx_L16_try_end:;
  }

  /* "chunk.pxi":31
 *         except TypeError:
 *             raise ValueError("Found an Each input, but cannot get len() of it")
 *         iters = []             # <<<<<<<<<<<<<<
 *         cdef vector[Chain] c_chains
 *         stopped = False
 */
  __pyx_t_4 = PyList_New(0); if (unlikely(!__pyx_t_4)) __PYX_ERR(5, 31, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_v_iters = ((PyObject*)__pyx_t_4);
  __pyx_t_4 = 0;

  /* "chunk.pxi":33
 *         iters = []
 *         cdef vector[Chain] c_chains
 *         stopped = False             # <<<<<<<<<<<<<<
 *         for i in range(0, total_num, self.chunk_size):
 *             chunk = each_input._iter[i:i+self.chunk_size]
 */
  __pyx_v_stopped = 0;

  /* "chunk.pxi":34
 *         cdef vector[Chain] c_chains
 *         stopped = False
 *         for i in range(0, total_num, self.chunk_size):             # <<<<<<<<<<<<<<
 *             chunk = each_input._iter[i:i+self.chunk_size]
 *             made_chains, made_iters = chains.make_chains_iters(modifiers={each_input: partial(update_each_iter, chunk)})
 */
  __pyx_t_4 = PyInt_FromSsize_t(__pyx_v_total_num); if (unlikely(!__pyx_t_4)) __PYX_ERR(5, 34, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_1 = __Pyx_PyInt_FromSize_t(__pyx_v_self->chunk_size); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 34, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(3); if (unlikely(!__pyx_t_2)) __PYX_ERR(5, 34, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_int_0);
  __Pyx_GIVEREF(__pyx_int_0);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_int_0);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_t_1);
  __pyx_t_4 = 0;
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_range, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 34, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
    __pyx_t_2 = __pyx_t_1; __Pyx_INCREF(__pyx_t_2); __pyx_t_7 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_7 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(5, 34, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_3)) __PYX_ERR(5, 34, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_7 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_7); __Pyx_INCREF(__pyx_t_1); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(5, 34, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 34, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      } else {
        if (__pyx_t_7 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_7); __Pyx_INCREF(__pyx_t_1); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(5, 34, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 34, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      }
    } else {
      __pyx_t_1 = __pyx_t_3(__pyx_t_2);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(5, 34, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "chunk.pxi":35
 *         stopped = False
 *         for i in range(0, total_num, self.chunk_size):
 *             chunk = each_input._iter[i:i+self.chunk_size]             # <<<<<<<<<<<<<<
 *             made_chains, made_iters = chains.make_chains_iters(modifiers={each_input: partial(update_each_iter, chunk)})
 *             output_iter = made_iters[self.parent]
 */
    __pyx_t_1 = __Pyx_PyInt_FromSize_t(__pyx_v_self->chunk_size); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 35, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = PyNumber_Add(__pyx_v_i, __pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(5, 35, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyObject_GetSlice(__pyx_v_each_input->_iter, 0, 0, &__pyx_v_i, &__pyx_t_4, NULL, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 35, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_XDECREF_SET(__pyx_v_chunk, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "chunk.pxi":36
 *         for i in range(0, total_num, self.chunk_size):
 *             chunk = each_input._iter[i:i+self.chunk_size]
 *             made_chains, made_iters = chains.make_chains_iters(modifiers={each_input: partial(update_each_iter, chunk)})             # <<<<<<<<<<<<<<
 *             output_iter = made_iters[self.parent]
 *             iters.append(output_iter)
 */
    __pyx_t_1 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 36, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_12 = __Pyx_GetModuleGlobalName(__pyx_n_s_partial); if (unlikely(!__pyx_t_12)) __PYX_ERR(5, 36, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_12);
    __pyx_t_13 = __Pyx_GetModuleGlobalName(__pyx_n_s_update_each_iter); if (unlikely(!__pyx_t_13)) __PYX_ERR(5, 36, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_13);
    __pyx_t_14 = NULL;
    __pyx_t_11 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_12))) {
      __pyx_t_14 = PyMethod_GET_SELF(__pyx_t_12);
      if (likely(__pyx_t_14)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_12);
        __Pyx_INCREF(__pyx_t_14);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_12, function);
        __pyx_t_11 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_12)) {
      PyObject *__pyx_temp[3] = {__pyx_t_14, __pyx_t_13, __pyx_v_chunk};
      __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_12, __pyx_temp+1-__pyx_t_11, 2+__pyx_t_11); if (unlikely(!__pyx_t_4)) __PYX_ERR(5, 36, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_12)) {
      PyObject *__pyx_temp[3] = {__pyx_t_14, __pyx_t_13, __pyx_v_chunk};
      __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_12, __pyx_temp+1-__pyx_t_11, 2+__pyx_t_11); if (unlikely(!__pyx_t_4)) __PYX_ERR(5, 36, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
    } else
    #endif
    {
      __pyx_t_15 = PyTuple_New(2+__pyx_t_11); if (unlikely(!__pyx_t_15)) __PYX_ERR(5, 36, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_15);
      if (__pyx_t_14) {
        __Pyx_GIVEREF(__pyx_t_14); PyTuple_SET_ITEM(__pyx_t_15, 0, __pyx_t_14); __pyx_t_14 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_13);
      PyTuple_SET_ITEM(__pyx_t_15, 0+__pyx_t_11, __pyx_t_13);
      __Pyx_INCREF(__pyx_v_chunk);
      __Pyx_GIVEREF(__pyx_v_chunk);
      PyTuple_SET_ITEM(__pyx_t_15, 1+__pyx_t_11, __pyx_v_chunk);
      __pyx_t_13 = 0;
      __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_12, __pyx_t_15, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(5, 36, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
    }
    __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
    if (PyDict_SetItem(__pyx_t_1, ((PyObject *)__pyx_v_each_input), __pyx_t_4) < 0) __PYX_ERR(5, 36, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_16.__pyx_n = 1;
    __pyx_t_16.modifiers = __pyx_t_1;
    __pyx_t_4 = ((struct __pyx_vtabstruct_5tubes_Chains *)__pyx_v_chains->__pyx_vtab)->make_chains_iters(__pyx_v_chains, &__pyx_t_16); if (unlikely(!__pyx_t_4)) __PYX_ERR(5, 36, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if ((likely(PyTuple_CheckExact(__pyx_t_4))) || (PyList_CheckExact(__pyx_t_4))) {
      PyObject* sequence = __pyx_t_4;
      #if !CYTHON_COMPILING_IN_PYPY
      Py_ssize_t size = Py_SIZE(sequence);
      #else
      Py_ssize_t size = PySequence_Size(sequence);
      #endif
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(5, 36, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_1 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_12 = PyTuple_GET_ITEM(sequence, 1); 
      } else {
        __pyx_t_1 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_12 = PyList_GET_ITEM(sequence, 1); 
      }
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_12);
      #else
      __pyx_t_1 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 36, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_12 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_12)) __PYX_ERR(5, 36, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_12);
      #endif
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    } else {
      Py_ssize_t index = -1;
      __pyx_t_15 = PyObject_GetIter(__pyx_t_4); if (unlikely(!__pyx_t_15)) __PYX_ERR(5, 36, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_15);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_17 = Py_TYPE(__pyx_t_15)->tp_iternext;
      index = 0; __pyx_t_1 = __pyx_t_17(__pyx_t_15); if (unlikely(!__pyx_t_1)) goto __pyx_L21_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_1);
      index = 1; __pyx_t_12 = __pyx_t_17(__pyx_t_15); if (unlikely(!__pyx_t_12)) goto __pyx_L21_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_12);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_17(__pyx_t_15), 2) < 0) __PYX_ERR(5, 36, __pyx_L1_error)
      __pyx_t_17 = NULL;
      __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
      goto __pyx_L22_unpacking_done;
      __pyx_L21_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
      __pyx_t_17 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(5, 36, __pyx_L1_error)
      __pyx_L22_unpacking_done:;
    }
    __Pyx_XDECREF_SET(__pyx_v_made_chains, __pyx_t_1);
    __pyx_t_1 = 0;
    __Pyx_XDECREF_SET(__pyx_v_made_iters, __pyx_t_12);
    __pyx_t_12 = 0;

    /* "chunk.pxi":37
 *             chunk = each_input._iter[i:i+self.chunk_size]
 *             made_chains, made_iters = chains.make_chains_iters(modifiers={each_input: partial(update_each_iter, chunk)})
 *             output_iter = made_iters[self.parent]             # <<<<<<<<<<<<<<
 *             iters.append(output_iter)
 *             if not stopped:
 */
    __pyx_t_4 = PyObject_GetItem(__pyx_v_made_iters, ((PyObject *)__pyx_v_self->parent)); if (unlikely(!__pyx_t_4)) __PYX_ERR(5, 37, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    if (!(likely(((__pyx_t_4) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_4, __pyx_ptype_5tubes_IterWrapper))))) __PYX_ERR(5, 37, __pyx_L1_error)
    __Pyx_XDECREF_SET(__pyx_v_output_iter, ((struct __pyx_obj_5tubes_IterWrapper *)__pyx_t_4));
    __pyx_t_4 = 0;

    /* "chunk.pxi":38
 *             made_chains, made_iters = chains.make_chains_iters(modifiers={each_input: partial(update_each_iter, chunk)})
 *             output_iter = made_iters[self.parent]
 *             iters.append(output_iter)             # <<<<<<<<<<<<<<
 *             if not stopped:
 *                 stopped = True
 */
    __pyx_t_18 = __Pyx_PyList_Append(__pyx_v_iters, ((PyObject *)__pyx_v_output_iter)); if (unlikely(__pyx_t_18 == ((int)-1))) __PYX_ERR(5, 38, __pyx_L1_error)

    /* "chunk.pxi":39
 *             output_iter = made_iters[self.parent]
 *             iters.append(output_iter)
 *             if not stopped:             # <<<<<<<<<<<<<<
 *                 stopped = True
 *             c_chains.push_back(iters_to_c_chain(made_chains[None, self.parent]))
 */
    __pyx_t_6 = ((!(__pyx_v_stopped != 0)) != 0);
    if (__pyx_t_6) {

      /* "chunk.pxi":40
 *             iters.append(output_iter)
 *             if not stopped:
 *                 stopped = True             # <<<<<<<<<<<<<<
 *             c_chains.push_back(iters_to_c_chain(made_chains[None, self.parent]))
 *         cdef ChainIter *iter = new ChainIter(c_chains, self._make_iters(iters))
 */
      __pyx_v_stopped = 1;

      /* "chunk.pxi":39
 *             output_iter = made_iters[self.parent]
 *             iters.append(output_iter)
 *             if not stopped:             # <<<<<<<<<<<<<<
 *                 stopped = True
 *             c_chains.push_back(iters_to_c_chain(made_chains[None, self.parent]))
 */
    }

    /* "chunk.pxi":41
 *             if not stopped:
 *                 stopped = True
 *             c_chains.push_back(iters_to_c_chain(made_chains[None, self.parent]))             # <<<<<<<<<<<<<<
 *         cdef ChainIter *iter = new ChainIter(c_chains, self._make_iters(iters))
 *         return wrap(to_any(iter))
 */
    __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(5, 41, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    PyTuple_SET_ITEM(__pyx_t_4, 0, Py_None);
    __Pyx_INCREF(((PyObject *)__pyx_v_self->parent));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_self->parent));
    PyTuple_SET_ITEM(__pyx_t_4, 1, ((PyObject *)__pyx_v_self->parent));
    __pyx_t_12 = PyObject_GetItem(__pyx_v_made_chains, __pyx_t_4); if (unlikely(!__pyx_t_12)) __PYX_ERR(5, 41, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_12);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (!(likely(PyList_CheckExact(__pyx_t_12))||((__pyx_t_12) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(__pyx_t_12)->tp_name), 0))) __PYX_ERR(5, 41, __pyx_L1_error)
    try {
      __pyx_v_c_chains.push_back(__pyx_f_5tubes_iters_to_c_chain(((PyObject*)__pyx_t_12)));
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(5, 41, __pyx_L1_error)
    }
    __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;

    /* "chunk.pxi":34
 *         cdef vector[Chain] c_chains
 *         stopped = False
 *         for i in range(0, total_num, self.chunk_size):             # <<<<<<<<<<<<<<
 *             chunk = each_input._iter[i:i+self.chunk_size]
 *             made_chains, made_iters = chains.make_chains_iters(modifiers={each_input: partial(update_each_iter, chunk)})
 */
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "chunk.pxi":42
 *                 stopped = True
 *             c_chains.push_back(iters_to_c_chain(made_chains[None, self.parent]))
 *         cdef ChainIter *iter = new ChainIter(c_chains, self._make_iters(iters))             # <<<<<<<<<<<<<<
 *         return wrap(to_any(iter))
 * 
 */
  try {
    __pyx_t_19 = new ss::iter::ChainIter(__pyx_v_c_chains, __pyx_f_5tubes_5Chunk__make_iters(__pyx_v_self, __pyx_v_iters));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(5, 42, __pyx_L1_error)
  }
  __pyx_v_iter = __pyx_t_19;

  /* "chunk.pxi":43
 *             c_chains.push_back(iters_to_c_chain(made_chains[None, self.parent]))
 *         cdef ChainIter *iter = new ChainIter(c_chains, self._make_iters(iters))
 *         return wrap(to_any(iter))             # <<<<<<<<<<<<<<
 * 
 *     cdef vector[AnyIter] _make_iters(self, list args):
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __pyx_t_2 = __pyx_f_5tubes_wrap(ss::iter::to_any<ss::iter::ChainIter>(__pyx_v_iter)); if (unlikely(!__pyx_t_2)) __PYX_ERR(5, 43, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_ptype_5tubes_IterWrapper))))) __PYX_ERR(5, 43, __pyx_L1_error)
  __pyx_r = ((struct __pyx_obj_5tubes_IterWrapper *)__pyx_t_2);
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "chunk.pxi":20
 *         self.chunk_size = chunk_size
 * 
 *     cdef IterWrapper _make_iter(self, args):             # <<<<<<<<<<<<<<
 *         cdef IterWrapper output_iter
 *         chains = Chains(self.parent)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_XDECREF(__pyx_t_13);
  __Pyx_XDECREF(__pyx_t_14);
  __Pyx_XDECREF(__pyx_t_15);
  __Pyx_AddTraceback("tubes.Chunk._make_iter", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_output_iter);
  __Pyx_XDECREF((PyObject *)__pyx_v_chains);
  __Pyx_XDECREF(__pyx_v_each_inputs);
  __Pyx_XDECREF((PyObject *)__pyx_v_each_input);
  __Pyx_XDECREF(__pyx_v_iters);
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XDECREF(__pyx_v_chunk);
  __Pyx_XDECREF(__pyx_v_made_chains);
  __Pyx_XDECREF(__pyx_v_made_iters);
  __Pyx_XDECREF(__pyx_8genexpr8__pyx_v_i);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "chunk.pxi":45
 *         return wrap(to_any(iter))
 * 
 *     cdef vector[AnyIter] _make_iters(self, list args):             # <<<<<<<<<<<<<<
 *         cdef IterWrapper arg
 *         cdef vector[AnyIter] its
 */

static std::vector<ss::iter::AnyIter>  __pyx_f_5tubes_5Chunk__make_iters(CYTHON_UNUSED struct __pyx_obj_5tubes_Chunk *__pyx_v_self, PyObject *__pyx_v_args) {
  struct __pyx_obj_5tubes_IterWrapper *__pyx_v_arg = 0;
  std::vector<ss::iter::AnyIter>  __pyx_v_its;
  std::vector<ss::iter::AnyIter>  __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("_make_iters", 0);

  /* "chunk.pxi":48
 *         cdef IterWrapper arg
 *         cdef vector[AnyIter] its
 *         for arg in args:             # <<<<<<<<<<<<<<
 *             its.push_back(arg.iter)
 *         return its
 */
  if (unlikely(__pyx_v_args == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(5, 48, __pyx_L1_error)
  }
  __pyx_t_1 = __pyx_v_args; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
  for (;;) {
    if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_3 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_3); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(5, 48, __pyx_L1_error)
    #else
    __pyx_t_3 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_3)) __PYX_ERR(5, 48, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    #endif
    if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_5tubes_IterWrapper))))) __PYX_ERR(5, 48, __pyx_L1_error)
    __Pyx_XDECREF_SET(__pyx_v_arg, ((struct __pyx_obj_5tubes_IterWrapper *)__pyx_t_3));
    __pyx_t_3 = 0;

    /* "chunk.pxi":49
 *         cdef vector[AnyIter] its
 *         for arg in args:
 *             its.push_back(arg.iter)             # <<<<<<<<<<<<<<
 *         return its
 * 
 */
    try {
      __pyx_v_its.push_back(__pyx_v_arg->iter);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(5, 49, __pyx_L1_error)
    }

    /* "chunk.pxi":48
 *         cdef IterWrapper arg
 *         cdef vector[AnyIter] its
 *         for arg in args:             # <<<<<<<<<<<<<<
 *             its.push_back(arg.iter)
 *         return its
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "chunk.pxi":50
 *         for arg in args:
 *             its.push_back(arg.iter)
 *         return its             # <<<<<<<<<<<<<<
 * 
 *     cpdef _describe_self(self):
 */
  __pyx_r = __pyx_v_its;
  goto __pyx_L0;

  /* "chunk.pxi":45
 *         return wrap(to_any(iter))
 * 
 *     cdef vector[AnyIter] _make_iters(self, list args):             # <<<<<<<<<<<<<<
 *         cdef IterWrapper arg
 *         cdef vector[AnyIter] its
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_WriteUnraisable("tubes.Chunk._make_iters", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_arg);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "chunk.pxi":52
 *         return its
 * 
 *     cpdef _describe_self(self):             # <<<<<<<<<<<<<<
 *         return f"Chunk({self.parent._repr()}, {self.chunk_size})"
 * 
 */

static PyObject *__pyx_pw_5tubes_5Chunk_3_describe_self(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_f_5tubes_5Chunk__describe_self(struct __pyx_obj_5tubes_Chunk *__pyx_v_self, CYTHON_UNUSED int __pyx_skip_dispatch) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  Py_UCS4 __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("_describe_self", 0);

  /* "chunk.pxi":53
 * 
 *     cpdef _describe_self(self):
 *         return f"Chunk({self.parent._repr()}, {self.chunk_size})"             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyTuple_New(5); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 53, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = 0;
  __pyx_t_3 = 127;
  __Pyx_INCREF(__pyx_kp_u_Chunk);
  __pyx_t_2 += 6;
  __Pyx_GIVEREF(__pyx_kp_u_Chunk);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_kp_u_Chunk);
  __pyx_t_4 = ((struct __pyx_vtabstruct_5tubes_Tube *)__pyx_v_self->parent->__pyx_vtab)->_repr(__pyx_v_self->parent, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(5, 53, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_FormatSimple(__pyx_t_4, __pyx_empty_unicode); if (unlikely(!__pyx_t_5)) __PYX_ERR(5, 53, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_3 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_5) > __pyx_t_3) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_5) : __pyx_t_3;
  __pyx_t_2 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_5);
  __pyx_t_5 = 0;
  __Pyx_INCREF(__pyx_kp_u__32);
  __pyx_t_2 += 2;
  __Pyx_GIVEREF(__pyx_kp_u__32);
  PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_kp_u__32);
  __pyx_t_5 = __Pyx_PyUnicode_From_size_t(__pyx_v_self->chunk_size, 0, ' ', 'd'); if (unlikely(!__pyx_t_5)) __PYX_ERR(5, 53, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_2 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_1, 3, __pyx_t_5);
  __pyx_t_5 = 0;
  __Pyx_INCREF(__pyx_kp_u__27);
  __pyx_t_2 += 1;
  __Pyx_GIVEREF(__pyx_kp_u__27);
  PyTuple_SET_ITEM(__pyx_t_1, 4, __pyx_kp_u__27);
  __pyx_t_5 = __Pyx_PyUnicode_Join(__pyx_t_1, 5, __pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(5, 53, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  /* "chunk.pxi":52
 *         return its
 * 
 *     cpdef _describe_self(self):             # <<<<<<<<<<<<<<
 *         return f"Chunk({self.parent._repr()}, {self.chunk_size})"
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("tubes.Chunk._describe_self", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5tubes_5Chunk_3_describe_self(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5tubes_5Chunk_2_describe_self[] = "Chunk._describe_self(self)";
static PyObject *__pyx_pw_5tubes_5Chunk_3_describe_self(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_describe_self (wrapper)", 0);
  __pyx_r = __pyx_pf_5tubes_5Chunk_2_describe_self(((struct __pyx_obj_5tubes_Chunk *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5tubes_5Chunk_2_describe_self(struct __pyx_obj_5tubes_Chunk *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("_describe_self", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_5tubes_5Chunk__describe_self(__pyx_v_self, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 52, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("tubes.Chunk._describe_self", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "chunk.pxi":56
 * 
 *     @property
 *     def dtype(self):             # <<<<<<<<<<<<<<
 *         return self.parent.dtype
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5tubes_5Chunk_5dtype_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5tubes_5Chunk_5dtype_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5tubes_5Chunk_5dtype___get__(((struct __pyx_obj_5tubes_Chunk *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5tubes_5Chunk_5dtype___get__(struct __pyx_obj_5tubes_Chunk *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "chunk.pxi":57
 *     @property
 *     def dtype(self):
 *         return self.parent.dtype             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self->parent), __pyx_n_s_dtype); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 57, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "chunk.pxi":56
 * 
 *     @property
 *     def dtype(self):             # <<<<<<<<<<<<<<
 *         return self.parent.dtype
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("tubes.Chunk.dtype.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "chunk.pxi":60
 * 
 *     @property
 *     def _chains(self):             # <<<<<<<<<<<<<<
 *         return ()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5tubes_5Chunk_7_chains_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5tubes_5Chunk_7_chains_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5tubes_5Chunk_7_chains___get__(((struct __pyx_obj_5tubes_Chunk *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5tubes_5Chunk_7_chains___get__(CYTHON_UNUSED struct __pyx_obj_5tubes_Chunk *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "chunk.pxi":61
 *     @property
 *     def _chains(self):
 *         return ()             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_empty_tuple);
  __pyx_r = __pyx_empty_tuple;
  goto __pyx_L0;

  /* "chunk.pxi":60
 * 
 *     @property
 *     def _chains(self):             # <<<<<<<<<<<<<<
 *         return ()
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "chunk.pxi":64
 * 
 *     @property
 *     def _inputs(self):             # <<<<<<<<<<<<<<
 *         return ()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5tubes_5Chunk_7_inputs_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5tubes_5Chunk_7_inputs_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5tubes_5Chunk_7_inputs___get__(((struct __pyx_obj_5tubes_Chunk *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5tubes_5Chunk_7_inputs___get__(CYTHON_UNUSED struct __pyx_obj_5tubes_Chunk *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "chunk.pxi":65
 *     @property
 *     def _inputs(self):
 *         return ()             # <<<<<<<<<<<<<<
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_empty_tuple);
  __pyx_r = __pyx_empty_tuple;
  goto __pyx_L0;

  /* "chunk.pxi":64
 * 
 *     @property
 *     def _inputs(self):             # <<<<<<<<<<<<<<
 *         return ()
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "chunk.pxi":13
 * @cython.final
 * cdef class Chunk(Tube):
 *     cdef public Tube parent             # <<<<<<<<<<<<<<
 *     cdef size_t chunk_size
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5tubes_5Chunk_6parent_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5tubes_5Chunk_6parent_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5tubes_5Chunk_6parent___get__(((struct __pyx_obj_5tubes_Chunk *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5tubes_5Chunk_6parent___get__(struct __pyx_obj_5tubes_Chunk *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->parent));
  __pyx_r = ((PyObject *)__pyx_v_self->parent);
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_5tubes_5Chunk_6parent_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_5tubes_5Chunk_6parent_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5tubes_5Chunk_6parent_2__set__(((struct __pyx_obj_5tubes_Chunk *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5tubes_5Chunk_6parent_2__set__(struct __pyx_obj_5tubes_Chunk *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__set__", 0);
  if (!(likely(((__pyx_v_value) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_value, __pyx_ptype_5tubes_Tube))))) __PYX_ERR(5, 13, __pyx_L1_error)
  __pyx_t_1 = __pyx_v_value;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->parent);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->parent));
  __pyx_v_self->parent = ((struct __pyx_obj_5tubes_Tube *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("tubes.Chunk.parent.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_5tubes_5Chunk_6parent_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_5tubes_5Chunk_6parent_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5tubes_5Chunk_6parent_4__del__(((struct __pyx_obj_5tubes_Chunk *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5tubes_5Chunk_6parent_4__del__(struct __pyx_obj_5tubes_Chunk *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->parent);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->parent));
  __pyx_v_self->parent = ((struct __pyx_obj_5tubes_Tube *)Py_None);

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_5tubes_5Chunk_5__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5tubes_5Chunk_4__reduce_cython__[] = "Chunk.__reduce_cython__(self)";
static PyObject *__pyx_pw_5tubes_5Chunk_5__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5tubes_5Chunk_4__reduce_cython__(((struct __pyx_obj_5tubes_Chunk *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5tubes_5Chunk_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5tubes_Chunk *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__72, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("tubes.Chunk.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_5tubes_5Chunk_7__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static char __pyx_doc_5tubes_5Chunk_6__setstate_cython__[] = "Chunk.__setstate_cython__(self, __pyx_state)";
static PyObject *__pyx_pw_5tubes_5Chunk_7__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5tubes_5Chunk_6__setstate_cython__(((struct __pyx_obj_5tubes_Chunk *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5tubes_5Chunk_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5tubes_Chunk *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__73, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("tubes.Chunk.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __pyx_unpickle_Tube(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     if __pyx_checksum != 0xdf446ce:
 *         from pickle import PickleError as __pyx_PickleError
 */

/* Python wrapper */
static PyObject *__pyx_pw_5tubes_3__pyx_unpickle_Tube(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5tubes_2__pyx_unpickle_Tube[] = "__pyx_unpickle_Tube(__pyx_type, long __pyx_checksum, __pyx_state)";
static PyMethodDef __pyx_mdef_5tubes_3__pyx_unpickle_Tube = {"__pyx_unpickle_Tube", (PyCFunction)__pyx_pw_5tubes_3__pyx_unpickle_Tube, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5tubes_2__pyx_unpickle_Tube};
static PyObject *__pyx_pw_5tubes_3__pyx_unpickle_Tube(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v___pyx_type = 0;
  long __pyx_v___pyx_checksum;
  PyObject *__pyx_v___pyx_state = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__pyx_unpickle_Tube (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_type,&__pyx_n_s_pyx_checksum,&__pyx_n_s_pyx_state,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_pyx_type)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_pyx_checksum)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_Tube", 1, 3, 3, 1); __PYX_ERR(1, 1, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_pyx_state)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_Tube", 1, 3, 3, 2); __PYX_ERR(1, 1, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__pyx_unpickle_Tube") < 0)) __PYX_ERR(1, 1, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v___pyx_type = values[0];
    __pyx_v___pyx_checksum = __Pyx_PyInt_As_long(values[1]); if (unlikely((__pyx_v___pyx_checksum == (long)-1) && PyErr_Occurred())) __PYX_ERR(1, 1, __pyx_L3_error)
    __pyx_v___pyx_state = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_Tube", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 1, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("tubes.__pyx_unpickle_Tube", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5tubes_2__pyx_unpickle_Tube(__pyx_self, __pyx_v___pyx_type, __pyx_v___pyx_checksum, __pyx_v___pyx_state);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5tubes_2__pyx_unpickle_Tube(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_v___pyx_PickleError = NULL;
  PyObject *__pyx_v___pyx_result = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  __Pyx_RefNannySetupContext("__pyx_unpickle_Tube", 0);

  /* "(tree fragment)":2
 * def __pyx_unpickle_Tube(__pyx_type, long __pyx_checksum, __pyx_state):
 *     if __pyx_checksum != 0xdf446ce:             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xdf446ce = (_name_lookup, _name_lookup_inited))" % __pyx_checksum)
 */
  __pyx_t_1 = ((__pyx_v___pyx_checksum != 0xdf446ce) != 0);
  if (__pyx_t_1) {

    /* "(tree fragment)":3
 * def __pyx_unpickle_Tube(__pyx_type, long __pyx_checksum, __pyx_state):
 *     if __pyx_checksum != 0xdf446ce:
 *         from pickle import PickleError as __pyx_PickleError             # <<<<<<<<<<<<<<
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xdf446ce = (_name_lookup, _name_lookup_inited))" % __pyx_checksum)
 *     __pyx_result = Tube.__new__(__pyx_type)
 */
    __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 3, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_n_s_PickleError);
    __Pyx_GIVEREF(__pyx_n_s_PickleError);
    PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_PickleError);
    __pyx_t_3 = __Pyx_Import(__pyx_n_s_pickle, __pyx_t_2, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 3, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_PickleError); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 3, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_t_2);
    __pyx_v___pyx_PickleError = __pyx_t_2;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "(tree fragment)":4
 *     if __pyx_checksum != 0xdf446ce:
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xdf446ce = (_name_lookup, _name_lookup_inited))" % __pyx_checksum)             # <<<<<<<<<<<<<<
 *     __pyx_result = Tube.__new__(__pyx_type)
 *     if __pyx_state is not None:
 */
    __pyx_t_2 = __Pyx_PyInt_From_long(__pyx_v___pyx_checksum); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 4, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = __Pyx_PyString_Format(__pyx_kp_s_Incompatible_checksums_s_vs_0xdf, __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 4, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_INCREF(__pyx_v___pyx_PickleError);
    __pyx_t_2 = __pyx_v___pyx_PickleError; __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    if (!__pyx_t_5) {
      __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 4, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_3);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_2)) {
        PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_t_4};
        __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 4, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
        PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_t_4};
        __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 4, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else
      #endif
      {
        __pyx_t_6 = PyTuple_New(1+1); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 4, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_5); __pyx_t_5 = NULL;
        __Pyx_GIVEREF(__pyx_t_4);
        PyTuple_SET_ITEM(__pyx_t_6, 0+1, __pyx_t_4);
        __pyx_t_4 = 0;
        __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_6, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 4, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(1, 4, __pyx_L1_error)

    /* "(tree fragment)":2
 * def __pyx_unpickle_Tube(__pyx_type, long __pyx_checksum, __pyx_state):
 *     if __pyx_checksum != 0xdf446ce:             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xdf446ce = (_name_lookup, _name_lookup_inited))" % __pyx_checksum)
 */
  }

  /* "(tree fragment)":5
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xdf446ce = (_name_lookup, _name_lookup_inited))" % __pyx_checksum)
 *     __pyx_result = Tube.__new__(__pyx_type)             # <<<<<<<<<<<<<<
 *     if __pyx_state is not None:
 *         __pyx_unpickle_Tube__set_state(<Tube> __pyx_result, __pyx_state)
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_5tubes_Tube), __pyx_n_s_new); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_6 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (!__pyx_t_6) {
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v___pyx_type); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_6, __pyx_v___pyx_type};
      __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 5, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_GOTREF(__pyx_t_3);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_6, __pyx_v___pyx_type};
      __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 5, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_GOTREF(__pyx_t_3);
    } else
    #endif
    {
      __pyx_t_4 = PyTuple_New(1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 5, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_6); __pyx_t_6 = NULL;
      __Pyx_INCREF(__pyx_v___pyx_type);
      __Pyx_GIVEREF(__pyx_v___pyx_type);
      PyTuple_SET_ITEM(__pyx_t_4, 0+1, __pyx_v___pyx_type);
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_4, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 5, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v___pyx_result = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "(tree fragment)":6
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xdf446ce = (_name_lookup, _name_lookup_inited))" % __pyx_checksum)
 *     __pyx_result = Tube.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_Tube__set_state(<Tube> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  __pyx_t_1 = (__pyx_v___pyx_state != Py_None);
  __pyx_t_7 = (__pyx_t_1 != 0);
  if (__pyx_t_7) {

    /* "(tree fragment)":7
 *     __pyx_result = Tube.__new__(__pyx_type)
 *     if __pyx_state is not None:
 *         __pyx_unpickle_Tube__set_state(<Tube> __pyx_result, __pyx_state)             # <<<<<<<<<<<<<<
 *     return __pyx_result
 * cdef __pyx_unpickle_Tube__set_state(Tube __pyx_result, tuple __pyx_state):
 */
    if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(1, 7, __pyx_L1_error)
    __pyx_t_3 = __pyx_f_5tubes___pyx_unpickle_Tube__set_state(((struct __pyx_obj_5tubes_Tube *)__pyx_v___pyx_result), ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 7, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "(tree fragment)":6
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xdf446ce = (_name_lookup, _name_lookup_inited))" % __pyx_checksum)
 *     __pyx_result = Tube.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_Tube__set_state(<Tube> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  }

  /* "(tree fragment)":8
 *     if __pyx_state is not None:
 *         __pyx_unpickle_Tube__set_state(<Tube> __pyx_result, __pyx_state)
 *     return __pyx_result             # <<<<<<<<<<<<<<
 * cdef __pyx_unpickle_Tube__set_state(Tube __pyx_result, tuple __pyx_state):
 *     __pyx_result._name_lookup = __pyx_state[0]; __pyx_result._name_lookup_inited = __pyx_state[1]
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v___pyx_result);
  __pyx_r = __pyx_v___pyx_result;
  goto __pyx_L0;

  /* "(tree fragment)":1
 * def __pyx_unpickle_Tube(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     if __pyx_checksum != 0xdf446ce:
 *         from pickle import PickleError as __pyx_PickleError
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("tubes.__pyx_unpickle_Tube", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v___pyx_PickleError);
  __Pyx_XDECREF(__pyx_v___pyx_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":9
 *         __pyx_unpickle_Tube__set_state(<Tube> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_Tube__set_state(Tube __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result._name_lookup = __pyx_state[0]; __pyx_result._name_lookup_inited = __pyx_state[1]
 *     if len(__pyx_state) > 2 and hasattr(__pyx_result, '__dict__'):
 */

static PyObject *__pyx_f_5tubes___pyx_unpickle_Tube__set_state(struct __pyx_obj_5tubes_Tube *__pyx_v___pyx_result, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  __Pyx_RefNannySetupContext("__pyx_unpickle_Tube__set_state", 0);

  /* "(tree fragment)":10
 *     return __pyx_result
 * cdef __pyx_unpickle_Tube__set_state(Tube __pyx_result, tuple __pyx_state):
 *     __pyx_result._name_lookup = __pyx_state[0]; __pyx_result._name_lookup_inited = __pyx_state[1]             # <<<<<<<<<<<<<<
 *     if len(__pyx_state) > 2 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[2])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 10, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 10, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->_name_lookup);
  __Pyx_DECREF(__pyx_v___pyx_result->_name_lookup);
  __pyx_v___pyx_result->_name_lookup = __pyx_t_1;
  __pyx_t_1 = 0;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 10, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 10, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 10, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->_name_lookup_inited = __pyx_t_2;

  /* "(tree fragment)":11
 * cdef __pyx_unpickle_Tube__set_state(Tube __pyx_result, tuple __pyx_state):
 *     __pyx_result._name_lookup = __pyx_state[0]; __pyx_result._name_lookup_inited = __pyx_state[1]
 *     if len(__pyx_state) > 2 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[2])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(1, 11, __pyx_L1_error)
  }
  __pyx_t_4 = PyTuple_GET_SIZE(__pyx_v___pyx_state); if (unlikely(__pyx_t_4 == ((Py_ssize_t)-1))) __PYX_ERR(1, 11, __pyx_L1_error)
  __pyx_t_5 = ((__pyx_t_4 > 2) != 0);
  if (__pyx_t_5) {
  } else {
    __pyx_t_3 = __pyx_t_5;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_5 = __Pyx_HasAttr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(__pyx_t_5 == ((int)-1))) __PYX_ERR(1, 11, __pyx_L1_error)
  __pyx_t_6 = (__pyx_t_5 != 0);
  __pyx_t_3 = __pyx_t_6;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_3) {

    /* "(tree fragment)":12
 *     __pyx_result._name_lookup = __pyx_state[0]; __pyx_result._name_lookup_inited = __pyx_state[1]
 *     if len(__pyx_state) > 2 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[2])             # <<<<<<<<<<<<<<
 */
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 12, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_update); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 12, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (unlikely(__pyx_v___pyx_state == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 12, __pyx_L1_error)
    }
    __pyx_t_7 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 12, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_9 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_8))) {
      __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_8);
      if (likely(__pyx_t_9)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
        __Pyx_INCREF(__pyx_t_9);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_8, function);
      }
    }
    if (!__pyx_t_9) {
      __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_t_7); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_8)) {
        PyObject *__pyx_temp[2] = {__pyx_t_9, __pyx_t_7};
        __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_8, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_8)) {
        PyObject *__pyx_temp[2] = {__pyx_t_9, __pyx_t_7};
        __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_8, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      } else
      #endif
      {
        __pyx_t_10 = PyTuple_New(1+1); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 12, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_GIVEREF(__pyx_t_9); PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_9); __pyx_t_9 = NULL;
        __Pyx_GIVEREF(__pyx_t_7);
        PyTuple_SET_ITEM(__pyx_t_10, 0+1, __pyx_t_7);
        __pyx_t_7 = 0;
        __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_8, __pyx_t_10, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "(tree fragment)":11
 * cdef __pyx_unpickle_Tube__set_state(Tube __pyx_result, tuple __pyx_state):
 *     __pyx_result._name_lookup = __pyx_state[0]; __pyx_result._name_lookup_inited = __pyx_state[1]
 *     if len(__pyx_state) > 2 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[2])
 */
  }

  /* "(tree fragment)":9
 *         __pyx_unpickle_Tube__set_state(<Tube> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_Tube__set_state(Tube __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result._name_lookup = __pyx_state[0]; __pyx_result._name_lookup_inited = __pyx_state[1]
 *     if len(__pyx_state) > 2 and hasattr(__pyx_result, '__dict__'):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("tubes.__pyx_unpickle_Tube__set_state", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.from_py":13
 * 
 * @cname("__pyx_convert_string_from_py_std__in_string")
 * cdef string __pyx_convert_string_from_py_std__in_string(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t length
 *     cdef const char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 */

static std::string __pyx_convert_string_from_py_std__in_string(PyObject *__pyx_v_o) {
  Py_ssize_t __pyx_v_length;
  char const *__pyx_v_data;
  std::string __pyx_r;
  __Pyx_RefNannyDeclarations
  char const *__pyx_t_1;
  __Pyx_RefNannySetupContext("__pyx_convert_string_from_py_std__in_string", 0);

  /* "string.from_py":15
 * cdef string __pyx_convert_string_from_py_std__in_string(object o) except *:
 *     cdef Py_ssize_t length
 *     cdef const char* data = __Pyx_PyObject_AsStringAndSize(o, &length)             # <<<<<<<<<<<<<<
 *     return string(data, length)
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_AsStringAndSize(__pyx_v_o, (&__pyx_v_length)); if (unlikely(__pyx_t_1 == ((char const *)NULL))) __PYX_ERR(1, 15, __pyx_L1_error)
  __pyx_v_data = __pyx_t_1;

  /* "string.from_py":16
 *     cdef Py_ssize_t length
 *     cdef const char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 *     return string(data, length)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = std::string(__pyx_v_data, __pyx_v_length);
  goto __pyx_L0;

  /* "string.from_py":13
 * 
 * @cname("__pyx_convert_string_from_py_std__in_string")
 * cdef string __pyx_convert_string_from_py_std__in_string(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t length
 *     cdef const char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("string.from_py.__pyx_convert_string_from_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vector.from_py":45
 * 
 * @cname("__pyx_convert_vector_from_py_std_3a__3a_string")
 * cdef vector[X] __pyx_convert_vector_from_py_std_3a__3a_string(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef vector[X] v
 *     for item in o:
 */

static std::vector<std::string>  __pyx_convert_vector_from_py_std_3a__3a_string(PyObject *__pyx_v_o) {
  std::vector<std::string>  __pyx_v_v;
  PyObject *__pyx_v_item = NULL;
  std::vector<std::string>  __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  std::string __pyx_t_5;
  __Pyx_RefNannySetupContext("__pyx_convert_vector_from_py_std_3a__3a_string", 0);

  /* "vector.from_py":47
 * cdef vector[X] __pyx_convert_vector_from_py_std_3a__3a_string(object o) except *:
 *     cdef vector[X] v
 *     for item in o:             # <<<<<<<<<<<<<<
 *         v.push_back(<X>item)
 *     return v
 */
  if (likely(PyList_CheckExact(__pyx_v_o)) || PyTuple_CheckExact(__pyx_v_o)) {
    __pyx_t_1 = __pyx_v_o; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_o); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 47, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 47, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(1, 47, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 47, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(1, 47, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 47, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(1, 47, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XDECREF_SET(__pyx_v_item, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "vector.from_py":48
 *     cdef vector[X] v
 *     for item in o:
 *         v.push_back(<X>item)             # <<<<<<<<<<<<<<
 *     return v
 * 
 */
    __pyx_t_5 = __pyx_convert_string_from_py_std__in_string(__pyx_v_item); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 48, __pyx_L1_error)
    __pyx_v_v.push_back(((std::string)__pyx_t_5));

    /* "vector.from_py":47
 * cdef vector[X] __pyx_convert_vector_from_py_std_3a__3a_string(object o) except *:
 *     cdef vector[X] v
 *     for item in o:             # <<<<<<<<<<<<<<
 *         v.push_back(<X>item)
 *     return v
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "vector.from_py":49
 *     for item in o:
 *         v.push_back(<X>item)
 *     return v             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_v;
  goto __pyx_L0;

  /* "vector.from_py":45
 * 
 * @cname("__pyx_convert_vector_from_py_std_3a__3a_string")
 * cdef vector[X] __pyx_convert_vector_from_py_std_3a__3a_string(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef vector[X] v
 *     for item in o:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("vector.from_py.__pyx_convert_vector_from_py_std_3a__3a_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_item);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_tp_new_5tubes_IterWrapper(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_5tubes_IterWrapper *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_5tubes_IterWrapper *)o);
  new((void*)&(p->iter)) ss::iter::AnyIter();
  return o;
}

static void __pyx_tp_dealloc_5tubes_IterWrapper(PyObject *o) {
  struct __pyx_obj_5tubes_IterWrapper *p = (struct __pyx_obj_5tubes_IterWrapper *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  __Pyx_call_destructor(p->iter);
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_5tubes_IterWrapper[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_5tubes_11IterWrapper_1__reduce_cython__, METH_NOARGS, __pyx_doc_5tubes_11IterWrapper___reduce_cython__},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_5tubes_11IterWrapper_3__setstate_cython__, METH_O, __pyx_doc_5tubes_11IterWrapper_2__setstate_cython__},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_5tubes_IterWrapper = {
  PyVarObject_HEAD_INIT(0, 0)
  "tubes.IterWrapper", /*tp_name*/
  sizeof(struct __pyx_obj_5tubes_IterWrapper), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5tubes_IterWrapper, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_5tubes_IterWrapper, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5tubes_IterWrapper, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_5tubes_DType(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_5tubes_DType *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_5tubes_DType *)o);
  new((void*)&(p->type)) ss::iter::ScalarType();
  p->name = ((PyObject*)Py_None); Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_5tubes_DType(PyObject *o) {
  struct __pyx_obj_5tubes_DType *p = (struct __pyx_obj_5tubes_DType *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  __Pyx_call_destructor(p->type);
  Py_CLEAR(p->name);
  (*Py_TYPE(o)->tp_free)(o);
}

static PyObject *__pyx_getprop_5tubes_5DType_name(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5tubes_5DType_4name_1__get__(o);
}

static PyMethodDef __pyx_methods_5tubes_DType[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_5tubes_5DType_3__reduce_cython__, METH_NOARGS, __pyx_doc_5tubes_5DType_2__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_5tubes_5DType_5__setstate_cython__, METH_O, __pyx_doc_5tubes_5DType_4__setstate_cython__},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_5tubes_DType[] = {
  {(char *)"name", __pyx_getprop_5tubes_5DType_name, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_5tubes_DType = {
  PyVarObject_HEAD_INIT(0, 0)
  "tubes.DType", /*tp_name*/
  sizeof(struct __pyx_obj_5tubes_DType), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5tubes_DType, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  __pyx_pw_5tubes_5DType_1__repr__, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_5tubes_DType, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_5tubes_DType, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5tubes_DType, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_5tubes_TubeIter(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_5tubes_TubeIter *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_5tubes_TubeIter *)o);
  p->iters = ((PyObject*)Py_None); Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_5tubes_8TubeIter_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_5tubes_TubeIter(PyObject *o) {
  struct __pyx_obj_5tubes_TubeIter *p = (struct __pyx_obj_5tubes_TubeIter *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->iters);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_5tubes_TubeIter(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_5tubes_TubeIter *p = (struct __pyx_obj_5tubes_TubeIter *)o;
  if (p->iters) {
    e = (*v)(p->iters, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_5tubes_TubeIter(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_5tubes_TubeIter *p = (struct __pyx_obj_5tubes_TubeIter *)o;
  tmp = ((PyObject*)p->iters);
  p->iters = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyMethodDef __pyx_methods_5tubes_TubeIter[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_5tubes_8TubeIter_3__reduce_cython__, METH_NOARGS, __pyx_doc_5tubes_8TubeIter_2__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_5tubes_8TubeIter_5__setstate_cython__, METH_O, __pyx_doc_5tubes_8TubeIter_4__setstate_cython__},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_5tubes_TubeIter = {
  PyVarObject_HEAD_INIT(0, 0)
  "tubes.TubeIter", /*tp_name*/
  sizeof(struct __pyx_obj_5tubes_TubeIter), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5tubes_TubeIter, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_5tubes_TubeIter, /*tp_traverse*/
  __pyx_tp_clear_5tubes_TubeIter, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_5tubes_TubeIter, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5tubes_TubeIter, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_5tubes_TubeSingleIter(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = __pyx_tp_new_5tubes_TubeIter(t, a, k);
  if (unlikely(!o)) return 0;
  return o;
}

static PyMethodDef __pyx_methods_5tubes_TubeSingleIter[] = {
  {"__next__", (PyCFunction)__pyx_pw_5tubes_14TubeSingleIter_1__next__, METH_NOARGS|METH_COEXIST, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_5tubes_14TubeSingleIter_3__reduce_cython__, METH_NOARGS, __pyx_doc_5tubes_14TubeSingleIter_2__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_5tubes_14TubeSingleIter_5__setstate_cython__, METH_O, __pyx_doc_5tubes_14TubeSingleIter_4__setstate_cython__},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_5tubes_TubeSingleIter = {
  PyVarObject_HEAD_INIT(0, 0)
  "tubes.TubeSingleIter", /*tp_name*/
  sizeof(struct __pyx_obj_5tubes_TubeSingleIter), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5tubes_TubeIter, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_5tubes_TubeIter, /*tp_traverse*/
  __pyx_tp_clear_5tubes_TubeIter, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  __pyx_pw_5tubes_14TubeSingleIter_1__next__, /*tp_iternext*/
  __pyx_methods_5tubes_TubeSingleIter, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5tubes_TubeSingleIter, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_5tubes_TubeMultiIter(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = __pyx_tp_new_5tubes_TubeIter(t, a, k);
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_5tubes_13TubeMultiIter_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static PyMethodDef __pyx_methods_5tubes_TubeMultiIter[] = {
  {"__next__", (PyCFunction)__pyx_pw_5tubes_13TubeMultiIter_3__next__, METH_NOARGS|METH_COEXIST, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_5tubes_13TubeMultiIter_5__reduce_cython__, METH_NOARGS, __pyx_doc_5tubes_13TubeMultiIter_4__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_5tubes_13TubeMultiIter_7__setstate_cython__, METH_O, __pyx_doc_5tubes_13TubeMultiIter_6__setstate_cython__},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_5tubes_TubeMultiIter = {
  PyVarObject_HEAD_INIT(0, 0)
  "tubes.TubeMultiIter", /*tp_name*/
  sizeof(struct __pyx_obj_5tubes_TubeMultiIter), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5tubes_TubeIter, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_5tubes_TubeIter, /*tp_traverse*/
  __pyx_tp_clear_5tubes_TubeIter, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  __pyx_pw_5tubes_13TubeMultiIter_3__next__, /*tp_iternext*/
  __pyx_methods_5tubes_TubeMultiIter, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5tubes_TubeMultiIter, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};
static struct __pyx_vtabstruct_5tubes_Chains __pyx_vtable_5tubes_Chains;

static PyObject *__pyx_tp_new_5tubes_Chains(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_5tubes_Chains *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_5tubes_Chains *)o);
  p->__pyx_vtab = __pyx_vtabptr_5tubes_Chains;
  p->output = ((struct __pyx_obj_5tubes_Tube *)Py_None); Py_INCREF(Py_None);
  p->chains = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->ordering = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->inputs = ((PyObject*)Py_None); Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_5tubes_6Chains_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_5tubes_Chains(PyObject *o) {
  struct __pyx_obj_5tubes_Chains *p = (struct __pyx_obj_5tubes_Chains *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->output);
  Py_CLEAR(p->chains);
  Py_CLEAR(p->ordering);
  Py_CLEAR(p->inputs);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_5tubes_Chains(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_5tubes_Chains *p = (struct __pyx_obj_5tubes_Chains *)o;
  if (p->output) {
    e = (*v)(((PyObject *)p->output), a); if (e) return e;
  }
  if (p->chains) {
    e = (*v)(p->chains, a); if (e) return e;
  }
  if (p->ordering) {
    e = (*v)(p->ordering, a); if (e) return e;
  }
  if (p->inputs) {
    e = (*v)(p->inputs, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_5tubes_Chains(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_5tubes_Chains *p = (struct __pyx_obj_5tubes_Chains *)o;
  tmp = ((PyObject*)p->output);
  p->output = ((struct __pyx_obj_5tubes_Tube *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->chains);
  p->chains = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->ordering);
  p->ordering = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->inputs);
  p->inputs = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_getprop_5tubes_6Chains_output(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5tubes_6Chains_6output_1__get__(o);
}

static int __pyx_setprop_5tubes_6Chains_output(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5tubes_6Chains_6output_3__set__(o, v);
  }
  else {
    return __pyx_pw_5tubes_6Chains_6output_5__del__(o);
  }
}

static PyObject *__pyx_getprop_5tubes_6Chains_chains(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5tubes_6Chains_6chains_1__get__(o);
}

static int __pyx_setprop_5tubes_6Chains_chains(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5tubes_6Chains_6chains_3__set__(o, v);
  }
  else {
    return __pyx_pw_5tubes_6Chains_6chains_5__del__(o);
  }
}

static PyObject *__pyx_getprop_5tubes_6Chains_ordering(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5tubes_6Chains_8ordering_1__get__(o);
}

static int __pyx_setprop_5tubes_6Chains_ordering(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5tubes_6Chains_8ordering_3__set__(o, v);
  }
  else {
    return __pyx_pw_5tubes_6Chains_8ordering_5__del__(o);
  }
}

static PyObject *__pyx_getprop_5tubes_6Chains_inputs(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5tubes_6Chains_6inputs_1__get__(o);
}

static int __pyx_setprop_5tubes_6Chains_inputs(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5tubes_6Chains_6inputs_3__set__(o, v);
  }
  else {
    return __pyx_pw_5tubes_6Chains_6inputs_5__del__(o);
  }
}

static PyMethodDef __pyx_methods_5tubes_Chains[] = {
  {"add", (PyCFunction)__pyx_pw_5tubes_6Chains_3add, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5tubes_6Chains_2add},
  {"ordered", (PyCFunction)__pyx_pw_5tubes_6Chains_5ordered, METH_NOARGS, __pyx_doc_5tubes_6Chains_4ordered},
  {"verify", (PyCFunction)__pyx_pw_5tubes_6Chains_8verify, METH_NOARGS, __pyx_doc_5tubes_6Chains_7verify},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_5tubes_6Chains_10__reduce_cython__, METH_NOARGS, __pyx_doc_5tubes_6Chains_9__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_5tubes_6Chains_12__setstate_cython__, METH_O, __pyx_doc_5tubes_6Chains_11__setstate_cython__},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_5tubes_Chains[] = {
  {(char *)"output", __pyx_getprop_5tubes_6Chains_output, __pyx_setprop_5tubes_6Chains_output, (char *)"output: tubes.Tube", 0},
  {(char *)"chains", __pyx_getprop_5tubes_6Chains_chains, __pyx_setprop_5tubes_6Chains_chains, (char *)"chains: dict", 0},
  {(char *)"ordering", __pyx_getprop_5tubes_6Chains_ordering, __pyx_setprop_5tubes_6Chains_ordering, (char *)"ordering: dict", 0},
  {(char *)"inputs", __pyx_getprop_5tubes_6Chains_inputs, __pyx_setprop_5tubes_6Chains_inputs, (char *)"inputs: set", 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_5tubes_Chains = {
  PyVarObject_HEAD_INIT(0, 0)
  "tubes.Chains", /*tp_name*/
  sizeof(struct __pyx_obj_5tubes_Chains), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5tubes_Chains, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_5tubes_Chains, /*tp_traverse*/
  __pyx_tp_clear_5tubes_Chains, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_5tubes_Chains, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_5tubes_Chains, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5tubes_Chains, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};
static struct __pyx_vtabstruct_5tubes_Tube __pyx_vtable_5tubes_Tube;

static PyObject *__pyx_tp_new_5tubes_Tube(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_5tubes_Tube *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_5tubes_Tube *)o);
  p->__pyx_vtab = __pyx_vtabptr_5tubes_Tube;
  p->_name_lookup = Py_None; Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_5tubes_Tube(PyObject *o) {
  struct __pyx_obj_5tubes_Tube *p = (struct __pyx_obj_5tubes_Tube *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->_name_lookup);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_5tubes_Tube(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_5tubes_Tube *p = (struct __pyx_obj_5tubes_Tube *)o;
  if (p->_name_lookup) {
    e = (*v)(p->_name_lookup, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_5tubes_Tube(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_5tubes_Tube *p = (struct __pyx_obj_5tubes_Tube *)o;
  tmp = ((PyObject*)p->_name_lookup);
  p->_name_lookup = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_getprop_5tubes_4Tube_dtype(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5tubes_4Tube_5dtype_1__get__(o);
}

static PyObject *__pyx_getprop_5tubes_4Tube__inputs(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5tubes_4Tube_7_inputs_1__get__(o);
}

static PyMethodDef __pyx_methods_5tubes_Tube[] = {
  {"_describe_self", (PyCFunction)__pyx_pw_5tubes_4Tube_1_describe_self, METH_NOARGS, __pyx_doc_5tubes_4Tube__describe_self},
  {"first", (PyCFunction)__pyx_pw_5tubes_4Tube_7first, METH_O, __pyx_doc_5tubes_4Tube_6first},
  {"skip", (PyCFunction)__pyx_pw_5tubes_4Tube_9skip, METH_O, __pyx_doc_5tubes_4Tube_8skip},
  {"to_py", (PyCFunction)__pyx_pw_5tubes_4Tube_11to_py, METH_NOARGS, __pyx_doc_5tubes_4Tube_10to_py},
  {"map_files", (PyCFunction)__pyx_pw_5tubes_4Tube_13map_files, METH_NOARGS, __pyx_doc_5tubes_4Tube_12map_files},
  {"read_files", (PyCFunction)__pyx_pw_5tubes_4Tube_15read_files, METH_NOARGS, __pyx_doc_5tubes_4Tube_14read_files},
  {"gunzip", (PyCFunction)__pyx_pw_5tubes_4Tube_17gunzip, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5tubes_4Tube_16gunzip},
  {"split", (PyCFunction)__pyx_pw_5tubes_4Tube_19split, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5tubes_4Tube_18split},
  {"json", (PyCFunction)__pyx_pw_5tubes_4Tube_21json, METH_NOARGS, __pyx_doc_5tubes_4Tube_20json},
  {"to", (PyCFunction)__pyx_pw_5tubes_4Tube_23to, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5tubes_4Tube_22to},
  {"multi", (PyCFunction)__pyx_pw_5tubes_4Tube_25multi, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5tubes_4Tube_24multi},
  {"get", (PyCFunction)__pyx_pw_5tubes_4Tube_27get, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5tubes_4Tube_26get},
  {"slot", (PyCFunction)__pyx_pw_5tubes_4Tube_29slot, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5tubes_4Tube_28slot},
  {"skip_unless", (PyCFunction)__pyx_pw_5tubes_4Tube_31skip_unless, METH_O, __pyx_doc_5tubes_4Tube_30skip_unless},
  {"enumerate", (PyCFunction)__pyx_pw_5tubes_4Tube_33enumerate, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5tubes_4Tube_32enumerate},
  {"zip", (PyCFunction)__pyx_pw_5tubes_4Tube_35zip, METH_O, __pyx_doc_5tubes_4Tube_34zip},
  {"equals", (PyCFunction)__pyx_pw_5tubes_4Tube_37equals, METH_O, __pyx_doc_5tubes_4Tube_36equals},
  {"gt", (PyCFunction)__pyx_pw_5tubes_4Tube_39gt, METH_O, __pyx_doc_5tubes_4Tube_38gt},
  {"lt", (PyCFunction)__pyx_pw_5tubes_4Tube_41lt, METH_O, __pyx_doc_5tubes_4Tube_40lt},
  {"chunk", (PyCFunction)__pyx_pw_5tubes_4Tube_43chunk, METH_O, __pyx_doc_5tubes_4Tube_42chunk},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_5tubes_4Tube_45__reduce_cython__, METH_NOARGS, __pyx_doc_5tubes_4Tube_44__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_5tubes_4Tube_47__setstate_cython__, METH_O, __pyx_doc_5tubes_4Tube_46__setstate_cython__},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_5tubes_Tube[] = {
  {(char *)"dtype", __pyx_getprop_5tubes_4Tube_dtype, 0, (char *)0, 0},
  {(char *)"_inputs", __pyx_getprop_5tubes_4Tube__inputs, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_5tubes_Tube = {
  PyVarObject_HEAD_INIT(0, 0)
  "tubes.Tube", /*tp_name*/
  sizeof(struct __pyx_obj_5tubes_Tube), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5tubes_Tube, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  __pyx_pw_5tubes_4Tube_5__repr__, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  "\n    The base class for all tubes.  Pipelines are typically built by calling\n    the methods defines on this class.\n    ", /*tp_doc*/
  __pyx_tp_traverse_5tubes_Tube, /*tp_traverse*/
  __pyx_tp_clear_5tubes_Tube, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  __pyx_pw_5tubes_4Tube_3__iter__, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_5tubes_Tube, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_5tubes_Tube, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5tubes_Tube, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};
static struct __pyx_vtabstruct_5tubes_Each __pyx_vtable_5tubes_Each;

static PyObject *__pyx_tp_new_5tubes_Each(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_5tubes_Each *p;
  PyObject *o = __pyx_tp_new_5tubes_Tube(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_5tubes_Each *)o);
  p->__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_5tubes_Tube*)__pyx_vtabptr_5tubes_Each;
  p->_iter = Py_None; Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_5tubes_4Each_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_5tubes_Each(PyObject *o) {
  struct __pyx_obj_5tubes_Each *p = (struct __pyx_obj_5tubes_Each *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->_iter);
  PyObject_GC_Track(o);
  __pyx_tp_dealloc_5tubes_Tube(o);
}

static int __pyx_tp_traverse_5tubes_Each(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_5tubes_Each *p = (struct __pyx_obj_5tubes_Each *)o;
  e = __pyx_tp_traverse_5tubes_Tube(o, v, a); if (e) return e;
  if (p->_iter) {
    e = (*v)(p->_iter, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_5tubes_Each(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_5tubes_Each *p = (struct __pyx_obj_5tubes_Each *)o;
  __pyx_tp_clear_5tubes_Tube(o);
  tmp = ((PyObject*)p->_iter);
  p->_iter = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_getprop_5tubes_4Each_dtype(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5tubes_4Each_5dtype_1__get__(o);
}

static PyObject *__pyx_getprop_5tubes_4Each__chains(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5tubes_4Each_7_chains_1__get__(o);
}

static PyObject *__pyx_getprop_5tubes_4Each__inputs(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5tubes_4Each_7_inputs_1__get__(o);
}

static PyObject *__pyx_getprop_5tubes_4Each__iter(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5tubes_4Each_5_iter_1__get__(o);
}

static int __pyx_setprop_5tubes_4Each__iter(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5tubes_4Each_5_iter_3__set__(o, v);
  }
  else {
    return __pyx_pw_5tubes_4Each_5_iter_5__del__(o);
  }
}

static PyMethodDef __pyx_methods_5tubes_Each[] = {
  {"_describe_self", (PyCFunction)__pyx_pw_5tubes_4Each_3_describe_self, METH_NOARGS, __pyx_doc_5tubes_4Each_2_describe_self},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_5tubes_4Each_5__reduce_cython__, METH_NOARGS, __pyx_doc_5tubes_4Each_4__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_5tubes_4Each_7__setstate_cython__, METH_O, __pyx_doc_5tubes_4Each_6__setstate_cython__},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_5tubes_Each[] = {
  {(char *)"dtype", __pyx_getprop_5tubes_4Each_dtype, 0, (char *)0, 0},
  {(char *)"_chains", __pyx_getprop_5tubes_4Each__chains, 0, (char *)0, 0},
  {(char *)"_inputs", __pyx_getprop_5tubes_4Each__inputs, 0, (char *)0, 0},
  {(char *)"_iter", __pyx_getprop_5tubes_4Each__iter, __pyx_setprop_5tubes_4Each__iter, (char *)"_iter: object", 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_5tubes_Each = {
  PyVarObject_HEAD_INIT(0, 0)
  "tubes.Each", /*tp_name*/
  sizeof(struct __pyx_obj_5tubes_Each), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5tubes_Each, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_pw_5tubes_4Tube_5__repr__, /*tp_repr*/
  #else
  0, /*tp_repr*/
  #endif
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  "\n    Iterate over the provided python object, as an input to a tube.\n    Takes one argument, which should either be a python iterator/generator,\n    or an iterable.\n\n    >>> list(Each([1, 2, 3]))\n    [1, 2, 3]\n    >>> list(Each(itertools.count()).first(5))\n    [0, 1, 2, 3, 4]\n    >>> list(Each(i*2 for i in range(5)))\n    [0, 2, 4, 6, 8]\n\n    ", /*tp_doc*/
  __pyx_tp_traverse_5tubes_Each, /*tp_traverse*/
  __pyx_tp_clear_5tubes_Each, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_pw_5tubes_4Tube_3__iter__, /*tp_iter*/
  #else
  0, /*tp_iter*/
  #endif
  0, /*tp_iternext*/
  __pyx_methods_5tubes_Each, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_5tubes_Each, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5tubes_Each, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};
static struct __pyx_vtabstruct_5tubes_Zip __pyx_vtable_5tubes_Zip;

static PyObject *__pyx_tp_new_5tubes_Zip(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_5tubes_Zip *p;
  PyObject *o = __pyx_tp_new_5tubes_Tube(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_5tubes_Zip *)o);
  p->__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_5tubes_Tube*)__pyx_vtabptr_5tubes_Zip;
  p->inputs = ((PyObject*)Py_None); Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_5tubes_3Zip_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_5tubes_Zip(PyObject *o) {
  struct __pyx_obj_5tubes_Zip *p = (struct __pyx_obj_5tubes_Zip *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->inputs);
  PyObject_GC_Track(o);
  __pyx_tp_dealloc_5tubes_Tube(o);
}

static int __pyx_tp_traverse_5tubes_Zip(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_5tubes_Zip *p = (struct __pyx_obj_5tubes_Zip *)o;
  e = __pyx_tp_traverse_5tubes_Tube(o, v, a); if (e) return e;
  if (p->inputs) {
    e = (*v)(p->inputs, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_5tubes_Zip(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_5tubes_Zip *p = (struct __pyx_obj_5tubes_Zip *)o;
  __pyx_tp_clear_5tubes_Tube(o);
  tmp = ((PyObject*)p->inputs);
  p->inputs = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_getprop_5tubes_3Zip_dtype(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5tubes_3Zip_5dtype_1__get__(o);
}

static PyObject *__pyx_getprop_5tubes_3Zip__chains(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5tubes_3Zip_7_chains_1__get__(o);
}

static PyObject *__pyx_getprop_5tubes_3Zip__inputs(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5tubes_3Zip_7_inputs_1__get__(o);
}

static PyObject *__pyx_getprop_5tubes_3Zip_inputs(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5tubes_3Zip_6inputs_1__get__(o);
}

static int __pyx_setprop_5tubes_3Zip_inputs(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5tubes_3Zip_6inputs_3__set__(o, v);
  }
  else {
    return __pyx_pw_5tubes_3Zip_6inputs_5__del__(o);
  }
}

static PyMethodDef __pyx_methods_5tubes_Zip[] = {
  {"_describe_self", (PyCFunction)__pyx_pw_5tubes_3Zip_3_describe_self, METH_NOARGS, __pyx_doc_5tubes_3Zip_2_describe_self},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_5tubes_3Zip_5__reduce_cython__, METH_NOARGS, __pyx_doc_5tubes_3Zip_4__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_5tubes_3Zip_7__setstate_cython__, METH_O, __pyx_doc_5tubes_3Zip_6__setstate_cython__},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_5tubes_Zip[] = {
  {(char *)"dtype", __pyx_getprop_5tubes_3Zip_dtype, 0, (char *)0, 0},
  {(char *)"_chains", __pyx_getprop_5tubes_3Zip__chains, 0, (char *)0, 0},
  {(char *)"_inputs", __pyx_getprop_5tubes_3Zip__inputs, 0, (char *)0, 0},
  {(char *)"inputs", __pyx_getprop_5tubes_3Zip_inputs, __pyx_setprop_5tubes_3Zip_inputs, (char *)"inputs: list", 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_5tubes_Zip = {
  PyVarObject_HEAD_INIT(0, 0)
  "tubes.Zip", /*tp_name*/
  sizeof(struct __pyx_obj_5tubes_Zip), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5tubes_Zip, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_pw_5tubes_4Tube_5__repr__, /*tp_repr*/
  #else
  0, /*tp_repr*/
  #endif
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_5tubes_Zip, /*tp_traverse*/
  __pyx_tp_clear_5tubes_Zip, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_pw_5tubes_4Tube_3__iter__, /*tp_iter*/
  #else
  0, /*tp_iter*/
  #endif
  0, /*tp_iternext*/
  __pyx_methods_5tubes_Zip, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_5tubes_Zip, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5tubes_Zip, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};
static struct __pyx_vtabstruct_5tubes_SlotGet __pyx_vtable_5tubes_SlotGet;

static PyObject *__pyx_tp_new_5tubes_SlotGet(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_5tubes_SlotGet *p;
  PyObject *o = __pyx_tp_new_5tubes_Tube(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_5tubes_SlotGet *)o);
  p->__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_5tubes_Tube*)__pyx_vtabptr_5tubes_SlotGet;
  p->parent = ((struct __pyx_obj_5tubes_Tube *)Py_None); Py_INCREF(Py_None);
  p->default_val = Py_None; Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_5tubes_7SlotGet_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_5tubes_SlotGet(PyObject *o) {
  struct __pyx_obj_5tubes_SlotGet *p = (struct __pyx_obj_5tubes_SlotGet *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->parent);
  Py_CLEAR(p->default_val);
  PyObject_GC_Track(o);
  __pyx_tp_dealloc_5tubes_Tube(o);
}

static int __pyx_tp_traverse_5tubes_SlotGet(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_5tubes_SlotGet *p = (struct __pyx_obj_5tubes_SlotGet *)o;
  e = __pyx_tp_traverse_5tubes_Tube(o, v, a); if (e) return e;
  if (p->parent) {
    e = (*v)(((PyObject *)p->parent), a); if (e) return e;
  }
  if (p->default_val) {
    e = (*v)(p->default_val, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_5tubes_SlotGet(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_5tubes_SlotGet *p = (struct __pyx_obj_5tubes_SlotGet *)o;
  __pyx_tp_clear_5tubes_Tube(o);
  tmp = ((PyObject*)p->parent);
  p->parent = ((struct __pyx_obj_5tubes_Tube *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->default_val);
  p->default_val = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_getprop_5tubes_7SlotGet_dtype(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5tubes_7SlotGet_5dtype_1__get__(o);
}

static PyObject *__pyx_getprop_5tubes_7SlotGet__chains(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5tubes_7SlotGet_7_chains_1__get__(o);
}

static PyObject *__pyx_getprop_5tubes_7SlotGet__inputs(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5tubes_7SlotGet_7_inputs_1__get__(o);
}

static PyObject *__pyx_getprop_5tubes_7SlotGet_parent(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5tubes_7SlotGet_6parent_1__get__(o);
}

static int __pyx_setprop_5tubes_7SlotGet_parent(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5tubes_7SlotGet_6parent_3__set__(o, v);
  }
  else {
    return __pyx_pw_5tubes_7SlotGet_6parent_5__del__(o);
  }
}

static PyObject *__pyx_getprop_5tubes_7SlotGet_index(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5tubes_7SlotGet_5index_1__get__(o);
}

static int __pyx_setprop_5tubes_7SlotGet_index(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5tubes_7SlotGet_5index_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5tubes_7SlotGet_default_val(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5tubes_7SlotGet_11default_val_1__get__(o);
}

static int __pyx_setprop_5tubes_7SlotGet_default_val(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5tubes_7SlotGet_11default_val_3__set__(o, v);
  }
  else {
    return __pyx_pw_5tubes_7SlotGet_11default_val_5__del__(o);
  }
}

static PyMethodDef __pyx_methods_5tubes_SlotGet[] = {
  {"_describe_self", (PyCFunction)__pyx_pw_5tubes_7SlotGet_3_describe_self, METH_NOARGS, __pyx_doc_5tubes_7SlotGet_2_describe_self},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_5tubes_7SlotGet_5__reduce_cython__, METH_NOARGS, __pyx_doc_5tubes_7SlotGet_4__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_5tubes_7SlotGet_7__setstate_cython__, METH_O, __pyx_doc_5tubes_7SlotGet_6__setstate_cython__},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_5tubes_SlotGet[] = {
  {(char *)"dtype", __pyx_getprop_5tubes_7SlotGet_dtype, 0, (char *)0, 0},
  {(char *)"_chains", __pyx_getprop_5tubes_7SlotGet__chains, 0, (char *)0, 0},
  {(char *)"_inputs", __pyx_getprop_5tubes_7SlotGet__inputs, 0, (char *)0, 0},
  {(char *)"parent", __pyx_getprop_5tubes_7SlotGet_parent, __pyx_setprop_5tubes_7SlotGet_parent, (char *)"parent: tubes.Tube", 0},
  {(char *)"index", __pyx_getprop_5tubes_7SlotGet_index, __pyx_setprop_5tubes_7SlotGet_index, (char *)"index: 'size_t'", 0},
  {(char *)"default_val", __pyx_getprop_5tubes_7SlotGet_default_val, __pyx_setprop_5tubes_7SlotGet_default_val, (char *)"default_val: object", 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_5tubes_SlotGet = {
  PyVarObject_HEAD_INIT(0, 0)
  "tubes.SlotGet", /*tp_name*/
  sizeof(struct __pyx_obj_5tubes_SlotGet), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5tubes_SlotGet, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_pw_5tubes_4Tube_5__repr__, /*tp_repr*/
  #else
  0, /*tp_repr*/
  #endif
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_5tubes_SlotGet, /*tp_traverse*/
  __pyx_tp_clear_5tubes_SlotGet, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_pw_5tubes_4Tube_3__iter__, /*tp_iter*/
  #else
  0, /*tp_iter*/
  #endif
  0, /*tp_iternext*/
  __pyx_methods_5tubes_SlotGet, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_5tubes_SlotGet, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5tubes_SlotGet, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};
static struct __pyx_vtabstruct_5tubes_NameLookup __pyx_vtable_5tubes_NameLookup;

static PyObject *__pyx_tp_new_5tubes_NameLookup(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_5tubes_NameLookup *p;
  PyObject *o = __pyx_tp_new_5tubes_Tube(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_5tubes_NameLookup *)o);
  p->__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_5tubes_Tube*)__pyx_vtabptr_5tubes_NameLookup;
  p->parent = ((struct __pyx_obj_5tubes_Tube *)Py_None); Py_INCREF(Py_None);
  p->items = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->_name_lookups = ((PyObject*)Py_None); Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_5tubes_10NameLookup_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_5tubes_NameLookup(PyObject *o) {
  struct __pyx_obj_5tubes_NameLookup *p = (struct __pyx_obj_5tubes_NameLookup *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->parent);
  Py_CLEAR(p->items);
  Py_CLEAR(p->_name_lookups);
  PyObject_GC_Track(o);
  __pyx_tp_dealloc_5tubes_Tube(o);
}

static int __pyx_tp_traverse_5tubes_NameLookup(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_5tubes_NameLookup *p = (struct __pyx_obj_5tubes_NameLookup *)o;
  e = __pyx_tp_traverse_5tubes_Tube(o, v, a); if (e) return e;
  if (p->parent) {
    e = (*v)(((PyObject *)p->parent), a); if (e) return e;
  }
  if (p->items) {
    e = (*v)(p->items, a); if (e) return e;
  }
  if (p->_name_lookups) {
    e = (*v)(p->_name_lookups, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_5tubes_NameLookup(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_5tubes_NameLookup *p = (struct __pyx_obj_5tubes_NameLookup *)o;
  __pyx_tp_clear_5tubes_Tube(o);
  tmp = ((PyObject*)p->parent);
  p->parent = ((struct __pyx_obj_5tubes_Tube *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->items);
  p->items = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_name_lookups);
  p->_name_lookups = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_getprop_5tubes_10NameLookup_dtype(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5tubes_10NameLookup_5dtype_1__get__(o);
}

static PyObject *__pyx_getprop_5tubes_10NameLookup__chains(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5tubes_10NameLookup_7_chains_1__get__(o);
}

static PyObject *__pyx_getprop_5tubes_10NameLookup__inputs(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5tubes_10NameLookup_7_inputs_1__get__(o);
}

static PyObject *__pyx_getprop_5tubes_10NameLookup_parent(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5tubes_10NameLookup_6parent_1__get__(o);
}

static int __pyx_setprop_5tubes_10NameLookup_parent(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5tubes_10NameLookup_6parent_3__set__(o, v);
  }
  else {
    return __pyx_pw_5tubes_10NameLookup_6parent_5__del__(o);
  }
}

static PyObject *__pyx_getprop_5tubes_10NameLookup_items(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5tubes_10NameLookup_5items_1__get__(o);
}

static int __pyx_setprop_5tubes_10NameLookup_items(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5tubes_10NameLookup_5items_3__set__(o, v);
  }
  else {
    return __pyx_pw_5tubes_10NameLookup_5items_5__del__(o);
  }
}

static PyObject *__pyx_getprop_5tubes_10NameLookup__name_lookups(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5tubes_10NameLookup_13_name_lookups_1__get__(o);
}

static int __pyx_setprop_5tubes_10NameLookup__name_lookups(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5tubes_10NameLookup_13_name_lookups_3__set__(o, v);
  }
  else {
    return __pyx_pw_5tubes_10NameLookup_13_name_lookups_5__del__(o);
  }
}

static PyMethodDef __pyx_methods_5tubes_NameLookup[] = {
  {"_describe_self", (PyCFunction)__pyx_pw_5tubes_10NameLookup_3_describe_self, METH_NOARGS, __pyx_doc_5tubes_10NameLookup_2_describe_self},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_5tubes_10NameLookup_5__reduce_cython__, METH_NOARGS, __pyx_doc_5tubes_10NameLookup_4__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_5tubes_10NameLookup_7__setstate_cython__, METH_O, __pyx_doc_5tubes_10NameLookup_6__setstate_cython__},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_5tubes_NameLookup[] = {
  {(char *)"dtype", __pyx_getprop_5tubes_10NameLookup_dtype, 0, (char *)0, 0},
  {(char *)"_chains", __pyx_getprop_5tubes_10NameLookup__chains, 0, (char *)0, 0},
  {(char *)"_inputs", __pyx_getprop_5tubes_10NameLookup__inputs, 0, (char *)0, 0},
  {(char *)"parent", __pyx_getprop_5tubes_10NameLookup_parent, __pyx_setprop_5tubes_10NameLookup_parent, (char *)"parent: tubes.Tube", 0},
  {(char *)"items", __pyx_getprop_5tubes_10NameLookup_items, __pyx_setprop_5tubes_10NameLookup_items, (char *)"items: list", 0},
  {(char *)"_name_lookups", __pyx_getprop_5tubes_10NameLookup__name_lookups, __pyx_setprop_5tubes_10NameLookup__name_lookups, (char *)"_name_lookups: dict", 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_5tubes_NameLookup = {
  PyVarObject_HEAD_INIT(0, 0)
  "tubes.NameLookup", /*tp_name*/
  sizeof(struct __pyx_obj_5tubes_NameLookup), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5tubes_NameLookup, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_pw_5tubes_4Tube_5__repr__, /*tp_repr*/
  #else
  0, /*tp_repr*/
  #endif
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_5tubes_NameLookup, /*tp_traverse*/
  __pyx_tp_clear_5tubes_NameLookup, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_pw_5tubes_4Tube_3__iter__, /*tp_iter*/
  #else
  0, /*tp_iter*/
  #endif
  0, /*tp_iternext*/
  __pyx_methods_5tubes_NameLookup, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_5tubes_NameLookup, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5tubes_NameLookup, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};
static struct __pyx_vtabstruct_5tubes_Multi __pyx_vtable_5tubes_Multi;

static PyObject *__pyx_tp_new_5tubes_Multi(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_5tubes_Multi *p;
  PyObject *o = __pyx_tp_new_5tubes_Tube(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_5tubes_Multi *)o);
  p->__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_5tubes_Tube*)__pyx_vtabptr_5tubes_Multi;
  p->parent = ((struct __pyx_obj_5tubes_Tube *)Py_None); Py_INCREF(Py_None);
  p->inputs = ((PyObject*)Py_None); Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_5tubes_5Multi_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_5tubes_Multi(PyObject *o) {
  struct __pyx_obj_5tubes_Multi *p = (struct __pyx_obj_5tubes_Multi *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->parent);
  Py_CLEAR(p->inputs);
  PyObject_GC_Track(o);
  __pyx_tp_dealloc_5tubes_Tube(o);
}

static int __pyx_tp_traverse_5tubes_Multi(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_5tubes_Multi *p = (struct __pyx_obj_5tubes_Multi *)o;
  e = __pyx_tp_traverse_5tubes_Tube(o, v, a); if (e) return e;
  if (p->parent) {
    e = (*v)(((PyObject *)p->parent), a); if (e) return e;
  }
  if (p->inputs) {
    e = (*v)(p->inputs, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_5tubes_Multi(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_5tubes_Multi *p = (struct __pyx_obj_5tubes_Multi *)o;
  __pyx_tp_clear_5tubes_Tube(o);
  tmp = ((PyObject*)p->parent);
  p->parent = ((struct __pyx_obj_5tubes_Tube *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->inputs);
  p->inputs = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_getprop_5tubes_5Multi_dtype(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5tubes_5Multi_5dtype_1__get__(o);
}

static PyObject *__pyx_getprop_5tubes_5Multi__chains(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5tubes_5Multi_7_chains_1__get__(o);
}

static PyObject *__pyx_getprop_5tubes_5Multi__inputs(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5tubes_5Multi_7_inputs_1__get__(o);
}

static PyObject *__pyx_getprop_5tubes_5Multi_parent(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5tubes_5Multi_6parent_1__get__(o);
}

static int __pyx_setprop_5tubes_5Multi_parent(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5tubes_5Multi_6parent_3__set__(o, v);
  }
  else {
    return __pyx_pw_5tubes_5Multi_6parent_5__del__(o);
  }
}

static PyObject *__pyx_getprop_5tubes_5Multi_inputs(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5tubes_5Multi_6inputs_1__get__(o);
}

static int __pyx_setprop_5tubes_5Multi_inputs(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5tubes_5Multi_6inputs_3__set__(o, v);
  }
  else {
    return __pyx_pw_5tubes_5Multi_6inputs_5__del__(o);
  }
}

static PyMethodDef __pyx_methods_5tubes_Multi[] = {
  {"_describe_self", (PyCFunction)__pyx_pw_5tubes_5Multi_3_describe_self, METH_NOARGS, __pyx_doc_5tubes_5Multi_2_describe_self},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_5tubes_5Multi_5__reduce_cython__, METH_NOARGS, __pyx_doc_5tubes_5Multi_4__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_5tubes_5Multi_7__setstate_cython__, METH_O, __pyx_doc_5tubes_5Multi_6__setstate_cython__},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_5tubes_Multi[] = {
  {(char *)"dtype", __pyx_getprop_5tubes_5Multi_dtype, 0, (char *)0, 0},
  {(char *)"_chains", __pyx_getprop_5tubes_5Multi__chains, 0, (char *)0, 0},
  {(char *)"_inputs", __pyx_getprop_5tubes_5Multi__inputs, 0, (char *)0, 0},
  {(char *)"parent", __pyx_getprop_5tubes_5Multi_parent, __pyx_setprop_5tubes_5Multi_parent, (char *)"parent: tubes.Tube", 0},
  {(char *)"inputs", __pyx_getprop_5tubes_5Multi_inputs, __pyx_setprop_5tubes_5Multi_inputs, (char *)"inputs: list", 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_5tubes_Multi = {
  PyVarObject_HEAD_INIT(0, 0)
  "tubes.Multi", /*tp_name*/
  sizeof(struct __pyx_obj_5tubes_Multi), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5tubes_Multi, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_pw_5tubes_4Tube_5__repr__, /*tp_repr*/
  #else
  0, /*tp_repr*/
  #endif
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_5tubes_Multi, /*tp_traverse*/
  __pyx_tp_clear_5tubes_Multi, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_pw_5tubes_4Tube_3__iter__, /*tp_iter*/
  #else
  0, /*tp_iter*/
  #endif
  0, /*tp_iternext*/
  __pyx_methods_5tubes_Multi, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_5tubes_Multi, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5tubes_Multi, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};
static struct __pyx_vtabstruct_5tubes_JsonParse __pyx_vtable_5tubes_JsonParse;

static PyObject *__pyx_tp_new_5tubes_JsonParse(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_5tubes_JsonParse *p;
  PyObject *o = __pyx_tp_new_5tubes_Tube(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_5tubes_JsonParse *)o);
  p->__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_5tubes_Tube*)__pyx_vtabptr_5tubes_JsonParse;
  p->parent = ((struct __pyx_obj_5tubes_Tube *)Py_None); Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_5tubes_9JsonParse_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_5tubes_JsonParse(PyObject *o) {
  struct __pyx_obj_5tubes_JsonParse *p = (struct __pyx_obj_5tubes_JsonParse *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->parent);
  PyObject_GC_Track(o);
  __pyx_tp_dealloc_5tubes_Tube(o);
}

static int __pyx_tp_traverse_5tubes_JsonParse(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_5tubes_JsonParse *p = (struct __pyx_obj_5tubes_JsonParse *)o;
  e = __pyx_tp_traverse_5tubes_Tube(o, v, a); if (e) return e;
  if (p->parent) {
    e = (*v)(((PyObject *)p->parent), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_5tubes_JsonParse(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_5tubes_JsonParse *p = (struct __pyx_obj_5tubes_JsonParse *)o;
  __pyx_tp_clear_5tubes_Tube(o);
  tmp = ((PyObject*)p->parent);
  p->parent = ((struct __pyx_obj_5tubes_Tube *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_getprop_5tubes_9JsonParse_dtype(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5tubes_9JsonParse_5dtype_1__get__(o);
}

static PyObject *__pyx_getprop_5tubes_9JsonParse__chains(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5tubes_9JsonParse_7_chains_1__get__(o);
}

static PyObject *__pyx_getprop_5tubes_9JsonParse__inputs(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5tubes_9JsonParse_7_inputs_1__get__(o);
}

static PyObject *__pyx_getprop_5tubes_9JsonParse_parent(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5tubes_9JsonParse_6parent_1__get__(o);
}

static int __pyx_setprop_5tubes_9JsonParse_parent(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5tubes_9JsonParse_6parent_3__set__(o, v);
  }
  else {
    return __pyx_pw_5tubes_9JsonParse_6parent_5__del__(o);
  }
}

static PyMethodDef __pyx_methods_5tubes_JsonParse[] = {
  {"_describe_self", (PyCFunction)__pyx_pw_5tubes_9JsonParse_3_describe_self, METH_NOARGS, __pyx_doc_5tubes_9JsonParse_2_describe_self},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_5tubes_9JsonParse_5__reduce_cython__, METH_NOARGS, __pyx_doc_5tubes_9JsonParse_4__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_5tubes_9JsonParse_7__setstate_cython__, METH_O, __pyx_doc_5tubes_9JsonParse_6__setstate_cython__},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_5tubes_JsonParse[] = {
  {(char *)"dtype", __pyx_getprop_5tubes_9JsonParse_dtype, 0, (char *)0, 0},
  {(char *)"_chains", __pyx_getprop_5tubes_9JsonParse__chains, 0, (char *)0, 0},
  {(char *)"_inputs", __pyx_getprop_5tubes_9JsonParse__inputs, 0, (char *)0, 0},
  {(char *)"parent", __pyx_getprop_5tubes_9JsonParse_parent, __pyx_setprop_5tubes_9JsonParse_parent, (char *)"parent: tubes.Tube", 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_5tubes_JsonParse = {
  PyVarObject_HEAD_INIT(0, 0)
  "tubes.JsonParse", /*tp_name*/
  sizeof(struct __pyx_obj_5tubes_JsonParse), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5tubes_JsonParse, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_pw_5tubes_4Tube_5__repr__, /*tp_repr*/
  #else
  0, /*tp_repr*/
  #endif
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_5tubes_JsonParse, /*tp_traverse*/
  __pyx_tp_clear_5tubes_JsonParse, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_pw_5tubes_4Tube_3__iter__, /*tp_iter*/
  #else
  0, /*tp_iter*/
  #endif
  0, /*tp_iternext*/
  __pyx_methods_5tubes_JsonParse, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_5tubes_JsonParse, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5tubes_JsonParse, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};
static struct __pyx_vtabstruct_5tubes_ToPy __pyx_vtable_5tubes_ToPy;

static PyObject *__pyx_tp_new_5tubes_ToPy(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_5tubes_ToPy *p;
  PyObject *o = __pyx_tp_new_5tubes_Tube(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_5tubes_ToPy *)o);
  p->__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_5tubes_Tube*)__pyx_vtabptr_5tubes_ToPy;
  p->parent = ((struct __pyx_obj_5tubes_Tube *)Py_None); Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_5tubes_4ToPy_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_5tubes_ToPy(PyObject *o) {
  struct __pyx_obj_5tubes_ToPy *p = (struct __pyx_obj_5tubes_ToPy *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->parent);
  PyObject_GC_Track(o);
  __pyx_tp_dealloc_5tubes_Tube(o);
}

static int __pyx_tp_traverse_5tubes_ToPy(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_5tubes_ToPy *p = (struct __pyx_obj_5tubes_ToPy *)o;
  e = __pyx_tp_traverse_5tubes_Tube(o, v, a); if (e) return e;
  if (p->parent) {
    e = (*v)(((PyObject *)p->parent), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_5tubes_ToPy(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_5tubes_ToPy *p = (struct __pyx_obj_5tubes_ToPy *)o;
  __pyx_tp_clear_5tubes_Tube(o);
  tmp = ((PyObject*)p->parent);
  p->parent = ((struct __pyx_obj_5tubes_Tube *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_getprop_5tubes_4ToPy_dtype(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5tubes_4ToPy_5dtype_1__get__(o);
}

static PyObject *__pyx_getprop_5tubes_4ToPy__chains(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5tubes_4ToPy_7_chains_1__get__(o);
}

static PyObject *__pyx_getprop_5tubes_4ToPy__inputs(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5tubes_4ToPy_7_inputs_1__get__(o);
}

static PyObject *__pyx_getprop_5tubes_4ToPy_parent(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5tubes_4ToPy_6parent_1__get__(o);
}

static int __pyx_setprop_5tubes_4ToPy_parent(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5tubes_4ToPy_6parent_3__set__(o, v);
  }
  else {
    return __pyx_pw_5tubes_4ToPy_6parent_5__del__(o);
  }
}

static PyMethodDef __pyx_methods_5tubes_ToPy[] = {
  {"_describe_self", (PyCFunction)__pyx_pw_5tubes_4ToPy_3_describe_self, METH_NOARGS, __pyx_doc_5tubes_4ToPy_2_describe_self},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_5tubes_4ToPy_5__reduce_cython__, METH_NOARGS, __pyx_doc_5tubes_4ToPy_4__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_5tubes_4ToPy_7__setstate_cython__, METH_O, __pyx_doc_5tubes_4ToPy_6__setstate_cython__},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_5tubes_ToPy[] = {
  {(char *)"dtype", __pyx_getprop_5tubes_4ToPy_dtype, 0, (char *)0, 0},
  {(char *)"_chains", __pyx_getprop_5tubes_4ToPy__chains, 0, (char *)0, 0},
  {(char *)"_inputs", __pyx_getprop_5tubes_4ToPy__inputs, 0, (char *)0, 0},
  {(char *)"parent", __pyx_getprop_5tubes_4ToPy_parent, __pyx_setprop_5tubes_4ToPy_parent, (char *)"parent: tubes.Tube", 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_5tubes_ToPy = {
  PyVarObject_HEAD_INIT(0, 0)
  "tubes.ToPy", /*tp_name*/
  sizeof(struct __pyx_obj_5tubes_ToPy), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5tubes_ToPy, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_pw_5tubes_4Tube_5__repr__, /*tp_repr*/
  #else
  0, /*tp_repr*/
  #endif
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_5tubes_ToPy, /*tp_traverse*/
  __pyx_tp_clear_5tubes_ToPy, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_pw_5tubes_4Tube_3__iter__, /*tp_iter*/
  #else
  0, /*tp_iter*/
  #endif
  0, /*tp_iternext*/
  __pyx_methods_5tubes_ToPy, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_5tubes_ToPy, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5tubes_ToPy, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};
static struct __pyx_vtabstruct_5tubes_SkipUnless __pyx_vtable_5tubes_SkipUnless;

static PyObject *__pyx_tp_new_5tubes_SkipUnless(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_5tubes_SkipUnless *p;
  PyObject *o = __pyx_tp_new_5tubes_Tube(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_5tubes_SkipUnless *)o);
  p->__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_5tubes_Tube*)__pyx_vtabptr_5tubes_SkipUnless;
  p->parent = ((struct __pyx_obj_5tubes_Tube *)Py_None); Py_INCREF(Py_None);
  p->conditional = ((struct __pyx_obj_5tubes_Tube *)Py_None); Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_5tubes_10SkipUnless_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_5tubes_SkipUnless(PyObject *o) {
  struct __pyx_obj_5tubes_SkipUnless *p = (struct __pyx_obj_5tubes_SkipUnless *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->parent);
  Py_CLEAR(p->conditional);
  PyObject_GC_Track(o);
  __pyx_tp_dealloc_5tubes_Tube(o);
}

static int __pyx_tp_traverse_5tubes_SkipUnless(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_5tubes_SkipUnless *p = (struct __pyx_obj_5tubes_SkipUnless *)o;
  e = __pyx_tp_traverse_5tubes_Tube(o, v, a); if (e) return e;
  if (p->parent) {
    e = (*v)(((PyObject *)p->parent), a); if (e) return e;
  }
  if (p->conditional) {
    e = (*v)(((PyObject *)p->conditional), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_5tubes_SkipUnless(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_5tubes_SkipUnless *p = (struct __pyx_obj_5tubes_SkipUnless *)o;
  __pyx_tp_clear_5tubes_Tube(o);
  tmp = ((PyObject*)p->parent);
  p->parent = ((struct __pyx_obj_5tubes_Tube *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->conditional);
  p->conditional = ((struct __pyx_obj_5tubes_Tube *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_getprop_5tubes_10SkipUnless_dtype(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5tubes_10SkipUnless_5dtype_1__get__(o);
}

static PyObject *__pyx_getprop_5tubes_10SkipUnless__chains(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5tubes_10SkipUnless_7_chains_1__get__(o);
}

static PyObject *__pyx_getprop_5tubes_10SkipUnless__inputs(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5tubes_10SkipUnless_7_inputs_1__get__(o);
}

static PyObject *__pyx_getprop_5tubes_10SkipUnless_parent(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5tubes_10SkipUnless_6parent_1__get__(o);
}

static int __pyx_setprop_5tubes_10SkipUnless_parent(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5tubes_10SkipUnless_6parent_3__set__(o, v);
  }
  else {
    return __pyx_pw_5tubes_10SkipUnless_6parent_5__del__(o);
  }
}

static PyObject *__pyx_getprop_5tubes_10SkipUnless_conditional(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5tubes_10SkipUnless_11conditional_1__get__(o);
}

static int __pyx_setprop_5tubes_10SkipUnless_conditional(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5tubes_10SkipUnless_11conditional_3__set__(o, v);
  }
  else {
    return __pyx_pw_5tubes_10SkipUnless_11conditional_5__del__(o);
  }
}

static PyMethodDef __pyx_methods_5tubes_SkipUnless[] = {
  {"_describe_self", (PyCFunction)__pyx_pw_5tubes_10SkipUnless_3_describe_self, METH_NOARGS, __pyx_doc_5tubes_10SkipUnless_2_describe_self},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_5tubes_10SkipUnless_5__reduce_cython__, METH_NOARGS, __pyx_doc_5tubes_10SkipUnless_4__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_5tubes_10SkipUnless_7__setstate_cython__, METH_O, __pyx_doc_5tubes_10SkipUnless_6__setstate_cython__},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_5tubes_SkipUnless[] = {
  {(char *)"dtype", __pyx_getprop_5tubes_10SkipUnless_dtype, 0, (char *)0, 0},
  {(char *)"_chains", __pyx_getprop_5tubes_10SkipUnless__chains, 0, (char *)0, 0},
  {(char *)"_inputs", __pyx_getprop_5tubes_10SkipUnless__inputs, 0, (char *)0, 0},
  {(char *)"parent", __pyx_getprop_5tubes_10SkipUnless_parent, __pyx_setprop_5tubes_10SkipUnless_parent, (char *)"parent: tubes.Tube", 0},
  {(char *)"conditional", __pyx_getprop_5tubes_10SkipUnless_conditional, __pyx_setprop_5tubes_10SkipUnless_conditional, (char *)"conditional: tubes.Tube", 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_5tubes_SkipUnless = {
  PyVarObject_HEAD_INIT(0, 0)
  "tubes.SkipUnless", /*tp_name*/
  sizeof(struct __pyx_obj_5tubes_SkipUnless), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5tubes_SkipUnless, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_pw_5tubes_4Tube_5__repr__, /*tp_repr*/
  #else
  0, /*tp_repr*/
  #endif
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_5tubes_SkipUnless, /*tp_traverse*/
  __pyx_tp_clear_5tubes_SkipUnless, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_pw_5tubes_4Tube_3__iter__, /*tp_iter*/
  #else
  0, /*tp_iter*/
  #endif
  0, /*tp_iternext*/
  __pyx_methods_5tubes_SkipUnless, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_5tubes_SkipUnless, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5tubes_SkipUnless, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};
static struct __pyx_vtabstruct_5tubes_ReadFile __pyx_vtable_5tubes_ReadFile;

static PyObject *__pyx_tp_new_5tubes_ReadFile(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_5tubes_ReadFile *p;
  PyObject *o = __pyx_tp_new_5tubes_Tube(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_5tubes_ReadFile *)o);
  p->__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_5tubes_Tube*)__pyx_vtabptr_5tubes_ReadFile;
  p->parent = ((struct __pyx_obj_5tubes_Tube *)Py_None); Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_5tubes_8ReadFile_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_5tubes_ReadFile(PyObject *o) {
  struct __pyx_obj_5tubes_ReadFile *p = (struct __pyx_obj_5tubes_ReadFile *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->parent);
  PyObject_GC_Track(o);
  __pyx_tp_dealloc_5tubes_Tube(o);
}

static int __pyx_tp_traverse_5tubes_ReadFile(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_5tubes_ReadFile *p = (struct __pyx_obj_5tubes_ReadFile *)o;
  e = __pyx_tp_traverse_5tubes_Tube(o, v, a); if (e) return e;
  if (p->parent) {
    e = (*v)(((PyObject *)p->parent), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_5tubes_ReadFile(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_5tubes_ReadFile *p = (struct __pyx_obj_5tubes_ReadFile *)o;
  __pyx_tp_clear_5tubes_Tube(o);
  tmp = ((PyObject*)p->parent);
  p->parent = ((struct __pyx_obj_5tubes_Tube *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_getprop_5tubes_8ReadFile_dtype(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5tubes_8ReadFile_5dtype_1__get__(o);
}

static PyObject *__pyx_getprop_5tubes_8ReadFile__chains(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5tubes_8ReadFile_7_chains_1__get__(o);
}

static PyObject *__pyx_getprop_5tubes_8ReadFile__inputs(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5tubes_8ReadFile_7_inputs_1__get__(o);
}

static PyObject *__pyx_getprop_5tubes_8ReadFile_parent(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5tubes_8ReadFile_6parent_1__get__(o);
}

static int __pyx_setprop_5tubes_8ReadFile_parent(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5tubes_8ReadFile_6parent_3__set__(o, v);
  }
  else {
    return __pyx_pw_5tubes_8ReadFile_6parent_5__del__(o);
  }
}

static PyMethodDef __pyx_methods_5tubes_ReadFile[] = {
  {"_describe_self", (PyCFunction)__pyx_pw_5tubes_8ReadFile_3_describe_self, METH_NOARGS, __pyx_doc_5tubes_8ReadFile_2_describe_self},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_5tubes_8ReadFile_5__reduce_cython__, METH_NOARGS, __pyx_doc_5tubes_8ReadFile_4__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_5tubes_8ReadFile_7__setstate_cython__, METH_O, __pyx_doc_5tubes_8ReadFile_6__setstate_cython__},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_5tubes_ReadFile[] = {
  {(char *)"dtype", __pyx_getprop_5tubes_8ReadFile_dtype, 0, (char *)0, 0},
  {(char *)"_chains", __pyx_getprop_5tubes_8ReadFile__chains, 0, (char *)0, 0},
  {(char *)"_inputs", __pyx_getprop_5tubes_8ReadFile__inputs, 0, (char *)0, 0},
  {(char *)"parent", __pyx_getprop_5tubes_8ReadFile_parent, __pyx_setprop_5tubes_8ReadFile_parent, (char *)"parent: tubes.Tube", 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_5tubes_ReadFile = {
  PyVarObject_HEAD_INIT(0, 0)
  "tubes.ReadFile", /*tp_name*/
  sizeof(struct __pyx_obj_5tubes_ReadFile), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5tubes_ReadFile, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_pw_5tubes_4Tube_5__repr__, /*tp_repr*/
  #else
  0, /*tp_repr*/
  #endif
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_5tubes_ReadFile, /*tp_traverse*/
  __pyx_tp_clear_5tubes_ReadFile, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_pw_5tubes_4Tube_3__iter__, /*tp_iter*/
  #else
  0, /*tp_iter*/
  #endif
  0, /*tp_iternext*/
  __pyx_methods_5tubes_ReadFile, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_5tubes_ReadFile, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5tubes_ReadFile, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};
static struct __pyx_vtabstruct_5tubes_ChainTubes __pyx_vtable_5tubes_ChainTubes;

static PyObject *__pyx_tp_new_5tubes_ChainTubes(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_5tubes_ChainTubes *p;
  PyObject *o = __pyx_tp_new_5tubes_Tube(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_5tubes_ChainTubes *)o);
  p->__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_5tubes_Tube*)__pyx_vtabptr_5tubes_ChainTubes;
  p->parents = ((PyObject*)Py_None); Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_5tubes_10ChainTubes_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_5tubes_ChainTubes(PyObject *o) {
  struct __pyx_obj_5tubes_ChainTubes *p = (struct __pyx_obj_5tubes_ChainTubes *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->parents);
  PyObject_GC_Track(o);
  __pyx_tp_dealloc_5tubes_Tube(o);
}

static int __pyx_tp_traverse_5tubes_ChainTubes(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_5tubes_ChainTubes *p = (struct __pyx_obj_5tubes_ChainTubes *)o;
  e = __pyx_tp_traverse_5tubes_Tube(o, v, a); if (e) return e;
  if (p->parents) {
    e = (*v)(p->parents, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_5tubes_ChainTubes(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_5tubes_ChainTubes *p = (struct __pyx_obj_5tubes_ChainTubes *)o;
  __pyx_tp_clear_5tubes_Tube(o);
  tmp = ((PyObject*)p->parents);
  p->parents = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_getprop_5tubes_10ChainTubes_dtype(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5tubes_10ChainTubes_5dtype_1__get__(o);
}

static PyObject *__pyx_getprop_5tubes_10ChainTubes__chains(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5tubes_10ChainTubes_7_chains_1__get__(o);
}

static PyObject *__pyx_getprop_5tubes_10ChainTubes__inputs(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5tubes_10ChainTubes_7_inputs_1__get__(o);
}

static PyObject *__pyx_getprop_5tubes_10ChainTubes_parents(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5tubes_10ChainTubes_7parents_1__get__(o);
}

static int __pyx_setprop_5tubes_10ChainTubes_parents(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5tubes_10ChainTubes_7parents_3__set__(o, v);
  }
  else {
    return __pyx_pw_5tubes_10ChainTubes_7parents_5__del__(o);
  }
}

static PyMethodDef __pyx_methods_5tubes_ChainTubes[] = {
  {"_describe_self", (PyCFunction)__pyx_pw_5tubes_10ChainTubes_3_describe_self, METH_NOARGS, __pyx_doc_5tubes_10ChainTubes_2_describe_self},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_5tubes_10ChainTubes_5__reduce_cython__, METH_NOARGS, __pyx_doc_5tubes_10ChainTubes_4__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_5tubes_10ChainTubes_7__setstate_cython__, METH_O, __pyx_doc_5tubes_10ChainTubes_6__setstate_cython__},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_5tubes_ChainTubes[] = {
  {(char *)"dtype", __pyx_getprop_5tubes_10ChainTubes_dtype, 0, (char *)0, 0},
  {(char *)"_chains", __pyx_getprop_5tubes_10ChainTubes__chains, 0, (char *)0, 0},
  {(char *)"_inputs", __pyx_getprop_5tubes_10ChainTubes__inputs, 0, (char *)0, 0},
  {(char *)"parents", __pyx_getprop_5tubes_10ChainTubes_parents, __pyx_setprop_5tubes_10ChainTubes_parents, (char *)"parents: list", 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_5tubes_ChainTubes = {
  PyVarObject_HEAD_INIT(0, 0)
  "tubes.ChainTubes", /*tp_name*/
  sizeof(struct __pyx_obj_5tubes_ChainTubes), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5tubes_ChainTubes, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_pw_5tubes_4Tube_5__repr__, /*tp_repr*/
  #else
  0, /*tp_repr*/
  #endif
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_5tubes_ChainTubes, /*tp_traverse*/
  __pyx_tp_clear_5tubes_ChainTubes, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_pw_5tubes_4Tube_3__iter__, /*tp_iter*/
  #else
  0, /*tp_iter*/
  #endif
  0, /*tp_iternext*/
  __pyx_methods_5tubes_ChainTubes, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_5tubes_ChainTubes, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5tubes_ChainTubes, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};
static struct __pyx_vtabstruct_5tubes_Skip __pyx_vtable_5tubes_Skip;

static PyObject *__pyx_tp_new_5tubes_Skip(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_5tubes_Skip *p;
  PyObject *o = __pyx_tp_new_5tubes_Tube(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_5tubes_Skip *)o);
  p->__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_5tubes_Tube*)__pyx_vtabptr_5tubes_Skip;
  p->parent = ((struct __pyx_obj_5tubes_Tube *)Py_None); Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_5tubes_4Skip_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_5tubes_Skip(PyObject *o) {
  struct __pyx_obj_5tubes_Skip *p = (struct __pyx_obj_5tubes_Skip *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->parent);
  PyObject_GC_Track(o);
  __pyx_tp_dealloc_5tubes_Tube(o);
}

static int __pyx_tp_traverse_5tubes_Skip(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_5tubes_Skip *p = (struct __pyx_obj_5tubes_Skip *)o;
  e = __pyx_tp_traverse_5tubes_Tube(o, v, a); if (e) return e;
  if (p->parent) {
    e = (*v)(((PyObject *)p->parent), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_5tubes_Skip(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_5tubes_Skip *p = (struct __pyx_obj_5tubes_Skip *)o;
  __pyx_tp_clear_5tubes_Tube(o);
  tmp = ((PyObject*)p->parent);
  p->parent = ((struct __pyx_obj_5tubes_Tube *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_getprop_5tubes_4Skip_dtype(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5tubes_4Skip_5dtype_1__get__(o);
}

static PyObject *__pyx_getprop_5tubes_4Skip__chains(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5tubes_4Skip_7_chains_1__get__(o);
}

static PyObject *__pyx_getprop_5tubes_4Skip__inputs(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5tubes_4Skip_7_inputs_1__get__(o);
}

static PyObject *__pyx_getprop_5tubes_4Skip_parent(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5tubes_4Skip_6parent_1__get__(o);
}

static int __pyx_setprop_5tubes_4Skip_parent(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5tubes_4Skip_6parent_3__set__(o, v);
  }
  else {
    return __pyx_pw_5tubes_4Skip_6parent_5__del__(o);
  }
}

static PyObject *__pyx_getprop_5tubes_4Skip_num(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5tubes_4Skip_3num_1__get__(o);
}

static int __pyx_setprop_5tubes_4Skip_num(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5tubes_4Skip_3num_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyMethodDef __pyx_methods_5tubes_Skip[] = {
  {"_describe_self", (PyCFunction)__pyx_pw_5tubes_4Skip_3_describe_self, METH_NOARGS, __pyx_doc_5tubes_4Skip_2_describe_self},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_5tubes_4Skip_5__reduce_cython__, METH_NOARGS, __pyx_doc_5tubes_4Skip_4__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_5tubes_4Skip_7__setstate_cython__, METH_O, __pyx_doc_5tubes_4Skip_6__setstate_cython__},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_5tubes_Skip[] = {
  {(char *)"dtype", __pyx_getprop_5tubes_4Skip_dtype, 0, (char *)0, 0},
  {(char *)"_chains", __pyx_getprop_5tubes_4Skip__chains, 0, (char *)0, 0},
  {(char *)"_inputs", __pyx_getprop_5tubes_4Skip__inputs, 0, (char *)0, 0},
  {(char *)"parent", __pyx_getprop_5tubes_4Skip_parent, __pyx_setprop_5tubes_4Skip_parent, (char *)"parent: tubes.Tube", 0},
  {(char *)"num", __pyx_getprop_5tubes_4Skip_num, __pyx_setprop_5tubes_4Skip_num, (char *)"num: 'size_t'", 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_5tubes_Skip = {
  PyVarObject_HEAD_INIT(0, 0)
  "tubes.Skip", /*tp_name*/
  sizeof(struct __pyx_obj_5tubes_Skip), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5tubes_Skip, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_pw_5tubes_4Tube_5__repr__, /*tp_repr*/
  #else
  0, /*tp_repr*/
  #endif
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_5tubes_Skip, /*tp_traverse*/
  __pyx_tp_clear_5tubes_Skip, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_pw_5tubes_4Tube_3__iter__, /*tp_iter*/
  #else
  0, /*tp_iter*/
  #endif
  0, /*tp_iternext*/
  __pyx_methods_5tubes_Skip, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_5tubes_Skip, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5tubes_Skip, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};
static struct __pyx_vtabstruct_5tubes_FileMap __pyx_vtable_5tubes_FileMap;

static PyObject *__pyx_tp_new_5tubes_FileMap(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_5tubes_FileMap *p;
  PyObject *o = __pyx_tp_new_5tubes_Tube(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_5tubes_FileMap *)o);
  p->__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_5tubes_Tube*)__pyx_vtabptr_5tubes_FileMap;
  p->parent = ((struct __pyx_obj_5tubes_Tube *)Py_None); Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_5tubes_7FileMap_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_5tubes_FileMap(PyObject *o) {
  struct __pyx_obj_5tubes_FileMap *p = (struct __pyx_obj_5tubes_FileMap *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->parent);
  PyObject_GC_Track(o);
  __pyx_tp_dealloc_5tubes_Tube(o);
}

static int __pyx_tp_traverse_5tubes_FileMap(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_5tubes_FileMap *p = (struct __pyx_obj_5tubes_FileMap *)o;
  e = __pyx_tp_traverse_5tubes_Tube(o, v, a); if (e) return e;
  if (p->parent) {
    e = (*v)(((PyObject *)p->parent), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_5tubes_FileMap(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_5tubes_FileMap *p = (struct __pyx_obj_5tubes_FileMap *)o;
  __pyx_tp_clear_5tubes_Tube(o);
  tmp = ((PyObject*)p->parent);
  p->parent = ((struct __pyx_obj_5tubes_Tube *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_getprop_5tubes_7FileMap_dtype(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5tubes_7FileMap_5dtype_1__get__(o);
}

static PyObject *__pyx_getprop_5tubes_7FileMap__chains(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5tubes_7FileMap_7_chains_1__get__(o);
}

static PyObject *__pyx_getprop_5tubes_7FileMap__inputs(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5tubes_7FileMap_7_inputs_1__get__(o);
}

static PyObject *__pyx_getprop_5tubes_7FileMap_parent(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5tubes_7FileMap_6parent_1__get__(o);
}

static int __pyx_setprop_5tubes_7FileMap_parent(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5tubes_7FileMap_6parent_3__set__(o, v);
  }
  else {
    return __pyx_pw_5tubes_7FileMap_6parent_5__del__(o);
  }
}

static PyMethodDef __pyx_methods_5tubes_FileMap[] = {
  {"_describe_self", (PyCFunction)__pyx_pw_5tubes_7FileMap_3_describe_self, METH_NOARGS, __pyx_doc_5tubes_7FileMap_2_describe_self},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_5tubes_7FileMap_5__reduce_cython__, METH_NOARGS, __pyx_doc_5tubes_7FileMap_4__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_5tubes_7FileMap_7__setstate_cython__, METH_O, __pyx_doc_5tubes_7FileMap_6__setstate_cython__},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_5tubes_FileMap[] = {
  {(char *)"dtype", __pyx_getprop_5tubes_7FileMap_dtype, 0, (char *)0, 0},
  {(char *)"_chains", __pyx_getprop_5tubes_7FileMap__chains, 0, (char *)0, 0},
  {(char *)"_inputs", __pyx_getprop_5tubes_7FileMap__inputs, 0, (char *)0, 0},
  {(char *)"parent", __pyx_getprop_5tubes_7FileMap_parent, __pyx_setprop_5tubes_7FileMap_parent, (char *)"parent: tubes.Tube", 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_5tubes_FileMap = {
  PyVarObject_HEAD_INIT(0, 0)
  "tubes.FileMap", /*tp_name*/
  sizeof(struct __pyx_obj_5tubes_FileMap), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5tubes_FileMap, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_pw_5tubes_4Tube_5__repr__, /*tp_repr*/
  #else
  0, /*tp_repr*/
  #endif
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_5tubes_FileMap, /*tp_traverse*/
  __pyx_tp_clear_5tubes_FileMap, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_pw_5tubes_4Tube_3__iter__, /*tp_iter*/
  #else
  0, /*tp_iter*/
  #endif
  0, /*tp_iternext*/
  __pyx_methods_5tubes_FileMap, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_5tubes_FileMap, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5tubes_FileMap, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};
static struct __pyx_vtabstruct_5tubes_Gunzip __pyx_vtable_5tubes_Gunzip;

static PyObject *__pyx_tp_new_5tubes_Gunzip(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_5tubes_Gunzip *p;
  PyObject *o = __pyx_tp_new_5tubes_Tube(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_5tubes_Gunzip *)o);
  p->__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_5tubes_Tube*)__pyx_vtabptr_5tubes_Gunzip;
  p->parent = ((struct __pyx_obj_5tubes_Tube *)Py_None); Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_5tubes_6Gunzip_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_5tubes_Gunzip(PyObject *o) {
  struct __pyx_obj_5tubes_Gunzip *p = (struct __pyx_obj_5tubes_Gunzip *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->parent);
  PyObject_GC_Track(o);
  __pyx_tp_dealloc_5tubes_Tube(o);
}

static int __pyx_tp_traverse_5tubes_Gunzip(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_5tubes_Gunzip *p = (struct __pyx_obj_5tubes_Gunzip *)o;
  e = __pyx_tp_traverse_5tubes_Tube(o, v, a); if (e) return e;
  if (p->parent) {
    e = (*v)(((PyObject *)p->parent), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_5tubes_Gunzip(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_5tubes_Gunzip *p = (struct __pyx_obj_5tubes_Gunzip *)o;
  __pyx_tp_clear_5tubes_Tube(o);
  tmp = ((PyObject*)p->parent);
  p->parent = ((struct __pyx_obj_5tubes_Tube *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_getprop_5tubes_6Gunzip_dtype(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5tubes_6Gunzip_5dtype_1__get__(o);
}

static PyObject *__pyx_getprop_5tubes_6Gunzip__chains(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5tubes_6Gunzip_7_chains_1__get__(o);
}

static PyObject *__pyx_getprop_5tubes_6Gunzip__inputs(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5tubes_6Gunzip_7_inputs_1__get__(o);
}

static PyObject *__pyx_getprop_5tubes_6Gunzip_parent(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5tubes_6Gunzip_6parent_1__get__(o);
}

static int __pyx_setprop_5tubes_6Gunzip_parent(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5tubes_6Gunzip_6parent_3__set__(o, v);
  }
  else {
    return __pyx_pw_5tubes_6Gunzip_6parent_5__del__(o);
  }
}

static PyObject *__pyx_getprop_5tubes_6Gunzip_stream(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5tubes_6Gunzip_6stream_1__get__(o);
}

static int __pyx_setprop_5tubes_6Gunzip_stream(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5tubes_6Gunzip_6stream_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyMethodDef __pyx_methods_5tubes_Gunzip[] = {
  {"_describe_self", (PyCFunction)__pyx_pw_5tubes_6Gunzip_3_describe_self, METH_NOARGS, __pyx_doc_5tubes_6Gunzip_2_describe_self},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_5tubes_6Gunzip_5__reduce_cython__, METH_NOARGS, __pyx_doc_5tubes_6Gunzip_4__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_5tubes_6Gunzip_7__setstate_cython__, METH_O, __pyx_doc_5tubes_6Gunzip_6__setstate_cython__},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_5tubes_Gunzip[] = {
  {(char *)"dtype", __pyx_getprop_5tubes_6Gunzip_dtype, 0, (char *)0, 0},
  {(char *)"_chains", __pyx_getprop_5tubes_6Gunzip__chains, 0, (char *)0, 0},
  {(char *)"_inputs", __pyx_getprop_5tubes_6Gunzip__inputs, 0, (char *)0, 0},
  {(char *)"parent", __pyx_getprop_5tubes_6Gunzip_parent, __pyx_setprop_5tubes_6Gunzip_parent, (char *)"parent: tubes.Tube", 0},
  {(char *)"stream", __pyx_getprop_5tubes_6Gunzip_stream, __pyx_setprop_5tubes_6Gunzip_stream, (char *)"stream: 'bool'", 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_5tubes_Gunzip = {
  PyVarObject_HEAD_INIT(0, 0)
  "tubes.Gunzip", /*tp_name*/
  sizeof(struct __pyx_obj_5tubes_Gunzip), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5tubes_Gunzip, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_pw_5tubes_4Tube_5__repr__, /*tp_repr*/
  #else
  0, /*tp_repr*/
  #endif
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_5tubes_Gunzip, /*tp_traverse*/
  __pyx_tp_clear_5tubes_Gunzip, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_pw_5tubes_4Tube_3__iter__, /*tp_iter*/
  #else
  0, /*tp_iter*/
  #endif
  0, /*tp_iternext*/
  __pyx_methods_5tubes_Gunzip, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_5tubes_Gunzip, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5tubes_Gunzip, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};
static struct __pyx_vtabstruct_5tubes_Count __pyx_vtable_5tubes_Count;

static PyObject *__pyx_tp_new_5tubes_Count(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_5tubes_Count *p;
  PyObject *o = __pyx_tp_new_5tubes_Tube(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_5tubes_Count *)o);
  p->__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_5tubes_Tube*)__pyx_vtabptr_5tubes_Count;
  if (unlikely(__pyx_pw_5tubes_5Count_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static PyObject *__pyx_getprop_5tubes_5Count_dtype(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5tubes_5Count_5dtype_1__get__(o);
}

static PyObject *__pyx_getprop_5tubes_5Count__chains(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5tubes_5Count_7_chains_1__get__(o);
}

static PyObject *__pyx_getprop_5tubes_5Count__inputs(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5tubes_5Count_7_inputs_1__get__(o);
}

static PyObject *__pyx_getprop_5tubes_5Count__start(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5tubes_5Count_6_start_1__get__(o);
}

static int __pyx_setprop_5tubes_5Count__start(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5tubes_5Count_6_start_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyMethodDef __pyx_methods_5tubes_Count[] = {
  {"_describe_self", (PyCFunction)__pyx_pw_5tubes_5Count_3_describe_self, METH_NOARGS, __pyx_doc_5tubes_5Count_2_describe_self},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_5tubes_5Count_5__reduce_cython__, METH_NOARGS, __pyx_doc_5tubes_5Count_4__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_5tubes_5Count_7__setstate_cython__, METH_O, __pyx_doc_5tubes_5Count_6__setstate_cython__},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_5tubes_Count[] = {
  {(char *)"dtype", __pyx_getprop_5tubes_5Count_dtype, 0, (char *)0, 0},
  {(char *)"_chains", __pyx_getprop_5tubes_5Count__chains, 0, (char *)0, 0},
  {(char *)"_inputs", __pyx_getprop_5tubes_5Count__inputs, 0, (char *)0, 0},
  {(char *)"_start", __pyx_getprop_5tubes_5Count__start, __pyx_setprop_5tubes_5Count__start, (char *)"_start: 'size_t'", 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_5tubes_Count = {
  PyVarObject_HEAD_INIT(0, 0)
  "tubes.Count", /*tp_name*/
  sizeof(struct __pyx_obj_5tubes_Count), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5tubes_Tube, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_pw_5tubes_4Tube_5__repr__, /*tp_repr*/
  #else
  0, /*tp_repr*/
  #endif
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  "\n    Iterator that behaves similarly to :func:`itertools.count`.\n\n    Takes an optional numeric argument ``start`` that sets the \n    first number returned by Count()  [default:0]\n\n    >>> list(Count().first(5))\n    [0, 1, 2, 3, 4]\n    >>> list(Count(10).first(5))\n    [10, 11, 12, 13, 14]\n\n    ", /*tp_doc*/
  __pyx_tp_traverse_5tubes_Tube, /*tp_traverse*/
  __pyx_tp_clear_5tubes_Tube, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_pw_5tubes_4Tube_3__iter__, /*tp_iter*/
  #else
  0, /*tp_iter*/
  #endif
  0, /*tp_iternext*/
  __pyx_methods_5tubes_Count, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_5tubes_Count, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5tubes_Count, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};
static struct __pyx_vtabstruct_5tubes_Compare __pyx_vtable_5tubes_Compare;

static PyObject *__pyx_tp_new_5tubes_Compare(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_5tubes_Compare *p;
  PyObject *o = __pyx_tp_new_5tubes_Tube(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_5tubes_Compare *)o);
  p->__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_5tubes_Tube*)__pyx_vtabptr_5tubes_Compare;
  p->parent = ((struct __pyx_obj_5tubes_Tube *)Py_None); Py_INCREF(Py_None);
  p->value = Py_None; Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_5tubes_7Compare_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_5tubes_Compare(PyObject *o) {
  struct __pyx_obj_5tubes_Compare *p = (struct __pyx_obj_5tubes_Compare *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->parent);
  Py_CLEAR(p->value);
  PyObject_GC_Track(o);
  __pyx_tp_dealloc_5tubes_Tube(o);
}

static int __pyx_tp_traverse_5tubes_Compare(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_5tubes_Compare *p = (struct __pyx_obj_5tubes_Compare *)o;
  e = __pyx_tp_traverse_5tubes_Tube(o, v, a); if (e) return e;
  if (p->parent) {
    e = (*v)(((PyObject *)p->parent), a); if (e) return e;
  }
  if (p->value) {
    e = (*v)(p->value, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_5tubes_Compare(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_5tubes_Compare *p = (struct __pyx_obj_5tubes_Compare *)o;
  __pyx_tp_clear_5tubes_Tube(o);
  tmp = ((PyObject*)p->parent);
  p->parent = ((struct __pyx_obj_5tubes_Tube *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->value);
  p->value = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_getprop_5tubes_7Compare_dtype(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5tubes_7Compare_5dtype_1__get__(o);
}

static PyObject *__pyx_getprop_5tubes_7Compare__chains(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5tubes_7Compare_7_chains_1__get__(o);
}

static PyObject *__pyx_getprop_5tubes_7Compare__inputs(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5tubes_7Compare_7_inputs_1__get__(o);
}

static PyObject *__pyx_getprop_5tubes_7Compare_parent(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5tubes_7Compare_6parent_1__get__(o);
}

static int __pyx_setprop_5tubes_7Compare_parent(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5tubes_7Compare_6parent_3__set__(o, v);
  }
  else {
    return __pyx_pw_5tubes_7Compare_6parent_5__del__(o);
  }
}

static PyObject *__pyx_getprop_5tubes_7Compare_op(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5tubes_7Compare_2op_1__get__(o);
}

static int __pyx_setprop_5tubes_7Compare_op(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5tubes_7Compare_2op_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_5tubes_7Compare_value(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5tubes_7Compare_5value_1__get__(o);
}

static int __pyx_setprop_5tubes_7Compare_value(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5tubes_7Compare_5value_3__set__(o, v);
  }
  else {
    return __pyx_pw_5tubes_7Compare_5value_5__del__(o);
  }
}

static PyMethodDef __pyx_methods_5tubes_Compare[] = {
  {"_describe_self", (PyCFunction)__pyx_pw_5tubes_7Compare_3_describe_self, METH_NOARGS, __pyx_doc_5tubes_7Compare_2_describe_self},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_5tubes_7Compare_5__reduce_cython__, METH_NOARGS, __pyx_doc_5tubes_7Compare_4__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_5tubes_7Compare_7__setstate_cython__, METH_O, __pyx_doc_5tubes_7Compare_6__setstate_cython__},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_5tubes_Compare[] = {
  {(char *)"dtype", __pyx_getprop_5tubes_7Compare_dtype, 0, (char *)0, 0},
  {(char *)"_chains", __pyx_getprop_5tubes_7Compare__chains, 0, (char *)0, 0},
  {(char *)"_inputs", __pyx_getprop_5tubes_7Compare__inputs, 0, (char *)0, 0},
  {(char *)"parent", __pyx_getprop_5tubes_7Compare_parent, __pyx_setprop_5tubes_7Compare_parent, (char *)"parent: tubes.Tube", 0},
  {(char *)"op", __pyx_getprop_5tubes_7Compare_op, __pyx_setprop_5tubes_7Compare_op, (char *)"op: 'int'", 0},
  {(char *)"value", __pyx_getprop_5tubes_7Compare_value, __pyx_setprop_5tubes_7Compare_value, (char *)"value: object", 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_5tubes_Compare = {
  PyVarObject_HEAD_INIT(0, 0)
  "tubes.Compare", /*tp_name*/
  sizeof(struct __pyx_obj_5tubes_Compare), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5tubes_Compare, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_pw_5tubes_4Tube_5__repr__, /*tp_repr*/
  #else
  0, /*tp_repr*/
  #endif
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_5tubes_Compare, /*tp_traverse*/
  __pyx_tp_clear_5tubes_Compare, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_pw_5tubes_4Tube_3__iter__, /*tp_iter*/
  #else
  0, /*tp_iter*/
  #endif
  0, /*tp_iternext*/
  __pyx_methods_5tubes_Compare, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_5tubes_Compare, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5tubes_Compare, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};
static struct __pyx_vtabstruct_5tubes_First __pyx_vtable_5tubes_First;

static PyObject *__pyx_tp_new_5tubes_First(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_5tubes_First *p;
  PyObject *o = __pyx_tp_new_5tubes_Tube(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_5tubes_First *)o);
  p->__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_5tubes_Tube*)__pyx_vtabptr_5tubes_First;
  p->parent = ((struct __pyx_obj_5tubes_Tube *)Py_None); Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_5tubes_5First_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_5tubes_First(PyObject *o) {
  struct __pyx_obj_5tubes_First *p = (struct __pyx_obj_5tubes_First *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->parent);
  PyObject_GC_Track(o);
  __pyx_tp_dealloc_5tubes_Tube(o);
}

static int __pyx_tp_traverse_5tubes_First(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_5tubes_First *p = (struct __pyx_obj_5tubes_First *)o;
  e = __pyx_tp_traverse_5tubes_Tube(o, v, a); if (e) return e;
  if (p->parent) {
    e = (*v)(((PyObject *)p->parent), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_5tubes_First(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_5tubes_First *p = (struct __pyx_obj_5tubes_First *)o;
  __pyx_tp_clear_5tubes_Tube(o);
  tmp = ((PyObject*)p->parent);
  p->parent = ((struct __pyx_obj_5tubes_Tube *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_getprop_5tubes_5First_dtype(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5tubes_5First_5dtype_1__get__(o);
}

static PyObject *__pyx_getprop_5tubes_5First__chains(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5tubes_5First_7_chains_1__get__(o);
}

static PyObject *__pyx_getprop_5tubes_5First__inputs(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5tubes_5First_7_inputs_1__get__(o);
}

static PyObject *__pyx_getprop_5tubes_5First_parent(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5tubes_5First_6parent_1__get__(o);
}

static int __pyx_setprop_5tubes_5First_parent(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5tubes_5First_6parent_3__set__(o, v);
  }
  else {
    return __pyx_pw_5tubes_5First_6parent_5__del__(o);
  }
}

static PyObject *__pyx_getprop_5tubes_5First_num(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5tubes_5First_3num_1__get__(o);
}

static int __pyx_setprop_5tubes_5First_num(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5tubes_5First_3num_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyMethodDef __pyx_methods_5tubes_First[] = {
  {"_describe_self", (PyCFunction)__pyx_pw_5tubes_5First_3_describe_self, METH_NOARGS, __pyx_doc_5tubes_5First_2_describe_self},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_5tubes_5First_5__reduce_cython__, METH_NOARGS, __pyx_doc_5tubes_5First_4__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_5tubes_5First_7__setstate_cython__, METH_O, __pyx_doc_5tubes_5First_6__setstate_cython__},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_5tubes_First[] = {
  {(char *)"dtype", __pyx_getprop_5tubes_5First_dtype, 0, (char *)0, 0},
  {(char *)"_chains", __pyx_getprop_5tubes_5First__chains, 0, (char *)0, 0},
  {(char *)"_inputs", __pyx_getprop_5tubes_5First__inputs, 0, (char *)0, 0},
  {(char *)"parent", __pyx_getprop_5tubes_5First_parent, __pyx_setprop_5tubes_5First_parent, (char *)"parent: tubes.Tube", 0},
  {(char *)"num", __pyx_getprop_5tubes_5First_num, __pyx_setprop_5tubes_5First_num, (char *)"num: 'size_t'", 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_5tubes_First = {
  PyVarObject_HEAD_INIT(0, 0)
  "tubes.First", /*tp_name*/
  sizeof(struct __pyx_obj_5tubes_First), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5tubes_First, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_pw_5tubes_4Tube_5__repr__, /*tp_repr*/
  #else
  0, /*tp_repr*/
  #endif
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_5tubes_First, /*tp_traverse*/
  __pyx_tp_clear_5tubes_First, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_pw_5tubes_4Tube_3__iter__, /*tp_iter*/
  #else
  0, /*tp_iter*/
  #endif
  0, /*tp_iternext*/
  __pyx_methods_5tubes_First, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_5tubes_First, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5tubes_First, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};
static struct __pyx_vtabstruct_5tubes_Split __pyx_vtable_5tubes_Split;

static PyObject *__pyx_tp_new_5tubes_Split(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_5tubes_Split *p;
  PyObject *o = __pyx_tp_new_5tubes_Tube(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_5tubes_Split *)o);
  p->__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_5tubes_Tube*)__pyx_vtabptr_5tubes_Split;
  p->parent = ((struct __pyx_obj_5tubes_Tube *)Py_None); Py_INCREF(Py_None);
  p->sep = Py_None; Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_5tubes_5Split_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_5tubes_Split(PyObject *o) {
  struct __pyx_obj_5tubes_Split *p = (struct __pyx_obj_5tubes_Split *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->parent);
  Py_CLEAR(p->sep);
  PyObject_GC_Track(o);
  __pyx_tp_dealloc_5tubes_Tube(o);
}

static int __pyx_tp_traverse_5tubes_Split(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_5tubes_Split *p = (struct __pyx_obj_5tubes_Split *)o;
  e = __pyx_tp_traverse_5tubes_Tube(o, v, a); if (e) return e;
  if (p->parent) {
    e = (*v)(((PyObject *)p->parent), a); if (e) return e;
  }
  if (p->sep) {
    e = (*v)(p->sep, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_5tubes_Split(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_5tubes_Split *p = (struct __pyx_obj_5tubes_Split *)o;
  __pyx_tp_clear_5tubes_Tube(o);
  tmp = ((PyObject*)p->parent);
  p->parent = ((struct __pyx_obj_5tubes_Tube *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->sep);
  p->sep = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_getprop_5tubes_5Split_dtype(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5tubes_5Split_5dtype_1__get__(o);
}

static PyObject *__pyx_getprop_5tubes_5Split__chains(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5tubes_5Split_7_chains_1__get__(o);
}

static PyObject *__pyx_getprop_5tubes_5Split__inputs(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5tubes_5Split_7_inputs_1__get__(o);
}

static PyObject *__pyx_getprop_5tubes_5Split_parent(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5tubes_5Split_6parent_1__get__(o);
}

static int __pyx_setprop_5tubes_5Split_parent(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5tubes_5Split_6parent_3__set__(o, v);
  }
  else {
    return __pyx_pw_5tubes_5Split_6parent_5__del__(o);
  }
}

static PyObject *__pyx_getprop_5tubes_5Split_sep(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5tubes_5Split_3sep_1__get__(o);
}

static int __pyx_setprop_5tubes_5Split_sep(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5tubes_5Split_3sep_3__set__(o, v);
  }
  else {
    return __pyx_pw_5tubes_5Split_3sep_5__del__(o);
  }
}

static PyMethodDef __pyx_methods_5tubes_Split[] = {
  {"_describe_self", (PyCFunction)__pyx_pw_5tubes_5Split_3_describe_self, METH_NOARGS, __pyx_doc_5tubes_5Split_2_describe_self},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_5tubes_5Split_5__reduce_cython__, METH_NOARGS, __pyx_doc_5tubes_5Split_4__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_5tubes_5Split_7__setstate_cython__, METH_O, __pyx_doc_5tubes_5Split_6__setstate_cython__},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_5tubes_Split[] = {
  {(char *)"dtype", __pyx_getprop_5tubes_5Split_dtype, 0, (char *)0, 0},
  {(char *)"_chains", __pyx_getprop_5tubes_5Split__chains, 0, (char *)0, 0},
  {(char *)"_inputs", __pyx_getprop_5tubes_5Split__inputs, 0, (char *)0, 0},
  {(char *)"parent", __pyx_getprop_5tubes_5Split_parent, __pyx_setprop_5tubes_5Split_parent, (char *)"parent: tubes.Tube", 0},
  {(char *)"sep", __pyx_getprop_5tubes_5Split_sep, __pyx_setprop_5tubes_5Split_sep, (char *)"sep: object", 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_5tubes_Split = {
  PyVarObject_HEAD_INIT(0, 0)
  "tubes.Split", /*tp_name*/
  sizeof(struct __pyx_obj_5tubes_Split), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5tubes_Split, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_pw_5tubes_4Tube_5__repr__, /*tp_repr*/
  #else
  0, /*tp_repr*/
  #endif
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_5tubes_Split, /*tp_traverse*/
  __pyx_tp_clear_5tubes_Split, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_pw_5tubes_4Tube_3__iter__, /*tp_iter*/
  #else
  0, /*tp_iter*/
  #endif
  0, /*tp_iternext*/
  __pyx_methods_5tubes_Split, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_5tubes_Split, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5tubes_Split, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};
static struct __pyx_vtabstruct_5tubes_Convert __pyx_vtable_5tubes_Convert;

static PyObject *__pyx_tp_new_5tubes_Convert(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_5tubes_Convert *p;
  PyObject *o = __pyx_tp_new_5tubes_Tube(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_5tubes_Convert *)o);
  p->__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_5tubes_Tube*)__pyx_vtabptr_5tubes_Convert;
  p->parent = ((struct __pyx_obj_5tubes_Tube *)Py_None); Py_INCREF(Py_None);
  p->to_types = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->codec = ((PyObject*)Py_None); Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_5tubes_7Convert_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_5tubes_Convert(PyObject *o) {
  struct __pyx_obj_5tubes_Convert *p = (struct __pyx_obj_5tubes_Convert *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->parent);
  Py_CLEAR(p->to_types);
  Py_CLEAR(p->codec);
  PyObject_GC_Track(o);
  __pyx_tp_dealloc_5tubes_Tube(o);
}

static int __pyx_tp_traverse_5tubes_Convert(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_5tubes_Convert *p = (struct __pyx_obj_5tubes_Convert *)o;
  e = __pyx_tp_traverse_5tubes_Tube(o, v, a); if (e) return e;
  if (p->parent) {
    e = (*v)(((PyObject *)p->parent), a); if (e) return e;
  }
  if (p->to_types) {
    e = (*v)(p->to_types, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_5tubes_Convert(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_5tubes_Convert *p = (struct __pyx_obj_5tubes_Convert *)o;
  __pyx_tp_clear_5tubes_Tube(o);
  tmp = ((PyObject*)p->parent);
  p->parent = ((struct __pyx_obj_5tubes_Tube *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->to_types);
  p->to_types = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_getprop_5tubes_7Convert_dtype(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5tubes_7Convert_5dtype_1__get__(o);
}

static PyObject *__pyx_getprop_5tubes_7Convert__chains(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5tubes_7Convert_7_chains_1__get__(o);
}

static PyObject *__pyx_getprop_5tubes_7Convert__inputs(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5tubes_7Convert_7_inputs_1__get__(o);
}

static PyObject *__pyx_getprop_5tubes_7Convert_parent(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5tubes_7Convert_6parent_1__get__(o);
}

static int __pyx_setprop_5tubes_7Convert_parent(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5tubes_7Convert_6parent_3__set__(o, v);
  }
  else {
    return __pyx_pw_5tubes_7Convert_6parent_5__del__(o);
  }
}

static PyObject *__pyx_getprop_5tubes_7Convert_to_types(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5tubes_7Convert_8to_types_1__get__(o);
}

static int __pyx_setprop_5tubes_7Convert_to_types(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5tubes_7Convert_8to_types_3__set__(o, v);
  }
  else {
    return __pyx_pw_5tubes_7Convert_8to_types_5__del__(o);
  }
}

static PyObject *__pyx_getprop_5tubes_7Convert_codec(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5tubes_7Convert_5codec_1__get__(o);
}

static int __pyx_setprop_5tubes_7Convert_codec(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5tubes_7Convert_5codec_3__set__(o, v);
  }
  else {
    return __pyx_pw_5tubes_7Convert_5codec_5__del__(o);
  }
}

static PyMethodDef __pyx_methods_5tubes_Convert[] = {
  {"_describe_self", (PyCFunction)__pyx_pw_5tubes_7Convert_3_describe_self, METH_NOARGS, __pyx_doc_5tubes_7Convert_2_describe_self},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_5tubes_7Convert_5__reduce_cython__, METH_NOARGS, __pyx_doc_5tubes_7Convert_4__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_5tubes_7Convert_7__setstate_cython__, METH_O, __pyx_doc_5tubes_7Convert_6__setstate_cython__},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_5tubes_Convert[] = {
  {(char *)"dtype", __pyx_getprop_5tubes_7Convert_dtype, 0, (char *)0, 0},
  {(char *)"_chains", __pyx_getprop_5tubes_7Convert__chains, 0, (char *)0, 0},
  {(char *)"_inputs", __pyx_getprop_5tubes_7Convert__inputs, 0, (char *)0, 0},
  {(char *)"parent", __pyx_getprop_5tubes_7Convert_parent, __pyx_setprop_5tubes_7Convert_parent, (char *)"parent: tubes.Tube", 0},
  {(char *)"to_types", __pyx_getprop_5tubes_7Convert_to_types, __pyx_setprop_5tubes_7Convert_to_types, (char *)"to_types: list", 0},
  {(char *)"codec", __pyx_getprop_5tubes_7Convert_codec, __pyx_setprop_5tubes_7Convert_codec, (char *)"codec: bytes", 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_5tubes_Convert = {
  PyVarObject_HEAD_INIT(0, 0)
  "tubes.Convert", /*tp_name*/
  sizeof(struct __pyx_obj_5tubes_Convert), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5tubes_Convert, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_pw_5tubes_4Tube_5__repr__, /*tp_repr*/
  #else
  0, /*tp_repr*/
  #endif
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_5tubes_Convert, /*tp_traverse*/
  __pyx_tp_clear_5tubes_Convert, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_pw_5tubes_4Tube_3__iter__, /*tp_iter*/
  #else
  0, /*tp_iter*/
  #endif
  0, /*tp_iternext*/
  __pyx_methods_5tubes_Convert, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_5tubes_Convert, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5tubes_Convert, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};
static struct __pyx_vtabstruct_5tubes_Chunk __pyx_vtable_5tubes_Chunk;

static PyObject *__pyx_tp_new_5tubes_Chunk(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_5tubes_Chunk *p;
  PyObject *o = __pyx_tp_new_5tubes_Tube(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_5tubes_Chunk *)o);
  p->__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_5tubes_Tube*)__pyx_vtabptr_5tubes_Chunk;
  p->parent = ((struct __pyx_obj_5tubes_Tube *)Py_None); Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_5tubes_5Chunk_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_5tubes_Chunk(PyObject *o) {
  struct __pyx_obj_5tubes_Chunk *p = (struct __pyx_obj_5tubes_Chunk *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->parent);
  PyObject_GC_Track(o);
  __pyx_tp_dealloc_5tubes_Tube(o);
}

static int __pyx_tp_traverse_5tubes_Chunk(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_5tubes_Chunk *p = (struct __pyx_obj_5tubes_Chunk *)o;
  e = __pyx_tp_traverse_5tubes_Tube(o, v, a); if (e) return e;
  if (p->parent) {
    e = (*v)(((PyObject *)p->parent), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_5tubes_Chunk(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_5tubes_Chunk *p = (struct __pyx_obj_5tubes_Chunk *)o;
  __pyx_tp_clear_5tubes_Tube(o);
  tmp = ((PyObject*)p->parent);
  p->parent = ((struct __pyx_obj_5tubes_Tube *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_getprop_5tubes_5Chunk_dtype(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5tubes_5Chunk_5dtype_1__get__(o);
}

static PyObject *__pyx_getprop_5tubes_5Chunk__chains(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5tubes_5Chunk_7_chains_1__get__(o);
}

static PyObject *__pyx_getprop_5tubes_5Chunk__inputs(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5tubes_5Chunk_7_inputs_1__get__(o);
}

static PyObject *__pyx_getprop_5tubes_5Chunk_parent(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5tubes_5Chunk_6parent_1__get__(o);
}

static int __pyx_setprop_5tubes_5Chunk_parent(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_5tubes_5Chunk_6parent_3__set__(o, v);
  }
  else {
    return __pyx_pw_5tubes_5Chunk_6parent_5__del__(o);
  }
}

static PyMethodDef __pyx_methods_5tubes_Chunk[] = {
  {"_describe_self", (PyCFunction)__pyx_pw_5tubes_5Chunk_3_describe_self, METH_NOARGS, __pyx_doc_5tubes_5Chunk_2_describe_self},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_5tubes_5Chunk_5__reduce_cython__, METH_NOARGS, __pyx_doc_5tubes_5Chunk_4__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_5tubes_5Chunk_7__setstate_cython__, METH_O, __pyx_doc_5tubes_5Chunk_6__setstate_cython__},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_5tubes_Chunk[] = {
  {(char *)"dtype", __pyx_getprop_5tubes_5Chunk_dtype, 0, (char *)0, 0},
  {(char *)"_chains", __pyx_getprop_5tubes_5Chunk__chains, 0, (char *)0, 0},
  {(char *)"_inputs", __pyx_getprop_5tubes_5Chunk__inputs, 0, (char *)0, 0},
  {(char *)"parent", __pyx_getprop_5tubes_5Chunk_parent, __pyx_setprop_5tubes_5Chunk_parent, (char *)"parent: tubes.Tube", 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_5tubes_Chunk = {
  PyVarObject_HEAD_INIT(0, 0)
  "tubes.Chunk", /*tp_name*/
  sizeof(struct __pyx_obj_5tubes_Chunk), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5tubes_Chunk, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_pw_5tubes_4Tube_5__repr__, /*tp_repr*/
  #else
  0, /*tp_repr*/
  #endif
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_5tubes_Chunk, /*tp_traverse*/
  __pyx_tp_clear_5tubes_Chunk, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_pw_5tubes_4Tube_3__iter__, /*tp_iter*/
  #else
  0, /*tp_iter*/
  #endif
  0, /*tp_iternext*/
  __pyx_methods_5tubes_Chunk, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_5tubes_Chunk, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5tubes_Chunk, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_5tubes___pyx_scope_struct____next__ *__pyx_freelist_5tubes___pyx_scope_struct____next__[8];
static int __pyx_freecount_5tubes___pyx_scope_struct____next__ = 0;

static PyObject *__pyx_tp_new_5tubes___pyx_scope_struct____next__(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_5tubes___pyx_scope_struct____next__ > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_5tubes___pyx_scope_struct____next__)))) {
    o = (PyObject*)__pyx_freelist_5tubes___pyx_scope_struct____next__[--__pyx_freecount_5tubes___pyx_scope_struct____next__];
    memset(o, 0, sizeof(struct __pyx_obj_5tubes___pyx_scope_struct____next__));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_5tubes___pyx_scope_struct____next__(PyObject *o) {
  struct __pyx_obj_5tubes___pyx_scope_struct____next__ *p = (struct __pyx_obj_5tubes___pyx_scope_struct____next__ *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_self);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_5tubes___pyx_scope_struct____next__ < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_5tubes___pyx_scope_struct____next__)))) {
    __pyx_freelist_5tubes___pyx_scope_struct____next__[__pyx_freecount_5tubes___pyx_scope_struct____next__++] = ((struct __pyx_obj_5tubes___pyx_scope_struct____next__ *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_5tubes___pyx_scope_struct____next__(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_5tubes___pyx_scope_struct____next__ *p = (struct __pyx_obj_5tubes___pyx_scope_struct____next__ *)o;
  if (p->__pyx_v_self) {
    e = (*v)(((PyObject *)p->__pyx_v_self), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_5tubes___pyx_scope_struct____next__(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_5tubes___pyx_scope_struct____next__ *p = (struct __pyx_obj_5tubes___pyx_scope_struct____next__ *)o;
  tmp = ((PyObject*)p->__pyx_v_self);
  p->__pyx_v_self = ((struct __pyx_obj_5tubes_TubeMultiIter *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_5tubes___pyx_scope_struct____next__ = {
  PyVarObject_HEAD_INIT(0, 0)
  "tubes.__pyx_scope_struct____next__", /*tp_name*/
  sizeof(struct __pyx_obj_5tubes___pyx_scope_struct____next__), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5tubes___pyx_scope_struct____next__, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_5tubes___pyx_scope_struct____next__, /*tp_traverse*/
  __pyx_tp_clear_5tubes___pyx_scope_struct____next__, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5tubes___pyx_scope_struct____next__, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_5tubes___pyx_scope_struct_1_genexpr *__pyx_freelist_5tubes___pyx_scope_struct_1_genexpr[8];
static int __pyx_freecount_5tubes___pyx_scope_struct_1_genexpr = 0;

static PyObject *__pyx_tp_new_5tubes___pyx_scope_struct_1_genexpr(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_5tubes___pyx_scope_struct_1_genexpr > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_5tubes___pyx_scope_struct_1_genexpr)))) {
    o = (PyObject*)__pyx_freelist_5tubes___pyx_scope_struct_1_genexpr[--__pyx_freecount_5tubes___pyx_scope_struct_1_genexpr];
    memset(o, 0, sizeof(struct __pyx_obj_5tubes___pyx_scope_struct_1_genexpr));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_5tubes___pyx_scope_struct_1_genexpr(PyObject *o) {
  struct __pyx_obj_5tubes___pyx_scope_struct_1_genexpr *p = (struct __pyx_obj_5tubes___pyx_scope_struct_1_genexpr *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_outer_scope);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_5tubes___pyx_scope_struct_1_genexpr < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_5tubes___pyx_scope_struct_1_genexpr)))) {
    __pyx_freelist_5tubes___pyx_scope_struct_1_genexpr[__pyx_freecount_5tubes___pyx_scope_struct_1_genexpr++] = ((struct __pyx_obj_5tubes___pyx_scope_struct_1_genexpr *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_5tubes___pyx_scope_struct_1_genexpr(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_5tubes___pyx_scope_struct_1_genexpr *p = (struct __pyx_obj_5tubes___pyx_scope_struct_1_genexpr *)o;
  if (p->__pyx_outer_scope) {
    e = (*v)(((PyObject *)p->__pyx_outer_scope), a); if (e) return e;
  }
  return 0;
}

static PyTypeObject __pyx_type_5tubes___pyx_scope_struct_1_genexpr = {
  PyVarObject_HEAD_INIT(0, 0)
  "tubes.__pyx_scope_struct_1_genexpr", /*tp_name*/
  sizeof(struct __pyx_obj_5tubes___pyx_scope_struct_1_genexpr), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5tubes___pyx_scope_struct_1_genexpr, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_5tubes___pyx_scope_struct_1_genexpr, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5tubes___pyx_scope_struct_1_genexpr, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_5tubes___pyx_scope_struct_2_ordered *__pyx_freelist_5tubes___pyx_scope_struct_2_ordered[8];
static int __pyx_freecount_5tubes___pyx_scope_struct_2_ordered = 0;

static PyObject *__pyx_tp_new_5tubes___pyx_scope_struct_2_ordered(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_5tubes___pyx_scope_struct_2_ordered > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_5tubes___pyx_scope_struct_2_ordered)))) {
    o = (PyObject*)__pyx_freelist_5tubes___pyx_scope_struct_2_ordered[--__pyx_freecount_5tubes___pyx_scope_struct_2_ordered];
    memset(o, 0, sizeof(struct __pyx_obj_5tubes___pyx_scope_struct_2_ordered));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_5tubes___pyx_scope_struct_2_ordered(PyObject *o) {
  struct __pyx_obj_5tubes___pyx_scope_struct_2_ordered *p = (struct __pyx_obj_5tubes___pyx_scope_struct_2_ordered *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_chain_order);
  Py_CLEAR(p->__pyx_v_key);
  Py_CLEAR(p->__pyx_v_ordered_chains);
  Py_CLEAR(p->__pyx_v_ordered_tubes);
  Py_CLEAR(p->__pyx_v_self);
  Py_CLEAR(p->__pyx_v_tubes);
  Py_CLEAR(p->__pyx_t_0);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_5tubes___pyx_scope_struct_2_ordered < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_5tubes___pyx_scope_struct_2_ordered)))) {
    __pyx_freelist_5tubes___pyx_scope_struct_2_ordered[__pyx_freecount_5tubes___pyx_scope_struct_2_ordered++] = ((struct __pyx_obj_5tubes___pyx_scope_struct_2_ordered *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_5tubes___pyx_scope_struct_2_ordered(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_5tubes___pyx_scope_struct_2_ordered *p = (struct __pyx_obj_5tubes___pyx_scope_struct_2_ordered *)o;
  if (p->__pyx_v_chain_order) {
    e = (*v)(p->__pyx_v_chain_order, a); if (e) return e;
  }
  if (p->__pyx_v_key) {
    e = (*v)(p->__pyx_v_key, a); if (e) return e;
  }
  if (p->__pyx_v_ordered_chains) {
    e = (*v)(p->__pyx_v_ordered_chains, a); if (e) return e;
  }
  if (p->__pyx_v_ordered_tubes) {
    e = (*v)(p->__pyx_v_ordered_tubes, a); if (e) return e;
  }
  if (p->__pyx_v_self) {
    e = (*v)(((PyObject *)p->__pyx_v_self), a); if (e) return e;
  }
  if (p->__pyx_v_tubes) {
    e = (*v)(p->__pyx_v_tubes, a); if (e) return e;
  }
  if (p->__pyx_t_0) {
    e = (*v)(p->__pyx_t_0, a); if (e) return e;
  }
  return 0;
}

static PyTypeObject __pyx_type_5tubes___pyx_scope_struct_2_ordered = {
  PyVarObject_HEAD_INIT(0, 0)
  "tubes.__pyx_scope_struct_2_ordered", /*tp_name*/
  sizeof(struct __pyx_obj_5tubes___pyx_scope_struct_2_ordered), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5tubes___pyx_scope_struct_2_ordered, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_5tubes___pyx_scope_struct_2_ordered, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5tubes___pyx_scope_struct_2_ordered, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_5tubes___pyx_scope_struct_3___pyx_lambda_funcdef_lambda1 *__pyx_freelist_5tubes___pyx_scope_struct_3___pyx_lambda_funcdef_lambda1[8];
static int __pyx_freecount_5tubes___pyx_scope_struct_3___pyx_lambda_funcdef_lambda1 = 0;

static PyObject *__pyx_tp_new_5tubes___pyx_scope_struct_3___pyx_lambda_funcdef_lambda1(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_5tubes___pyx_scope_struct_3___pyx_lambda_funcdef_lambda1 > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_5tubes___pyx_scope_struct_3___pyx_lambda_funcdef_lambda1)))) {
    o = (PyObject*)__pyx_freelist_5tubes___pyx_scope_struct_3___pyx_lambda_funcdef_lambda1[--__pyx_freecount_5tubes___pyx_scope_struct_3___pyx_lambda_funcdef_lambda1];
    memset(o, 0, sizeof(struct __pyx_obj_5tubes___pyx_scope_struct_3___pyx_lambda_funcdef_lambda1));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_5tubes___pyx_scope_struct_3___pyx_lambda_funcdef_lambda1(PyObject *o) {
  struct __pyx_obj_5tubes___pyx_scope_struct_3___pyx_lambda_funcdef_lambda1 *p = (struct __pyx_obj_5tubes___pyx_scope_struct_3___pyx_lambda_funcdef_lambda1 *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_outer_scope);
  Py_CLEAR(p->__pyx_v_i);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_5tubes___pyx_scope_struct_3___pyx_lambda_funcdef_lambda1 < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_5tubes___pyx_scope_struct_3___pyx_lambda_funcdef_lambda1)))) {
    __pyx_freelist_5tubes___pyx_scope_struct_3___pyx_lambda_funcdef_lambda1[__pyx_freecount_5tubes___pyx_scope_struct_3___pyx_lambda_funcdef_lambda1++] = ((struct __pyx_obj_5tubes___pyx_scope_struct_3___pyx_lambda_funcdef_lambda1 *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_5tubes___pyx_scope_struct_3___pyx_lambda_funcdef_lambda1(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_5tubes___pyx_scope_struct_3___pyx_lambda_funcdef_lambda1 *p = (struct __pyx_obj_5tubes___pyx_scope_struct_3___pyx_lambda_funcdef_lambda1 *)o;
  if (p->__pyx_outer_scope) {
    e = (*v)(((PyObject *)p->__pyx_outer_scope), a); if (e) return e;
  }
  if (p->__pyx_v_i) {
    e = (*v)(p->__pyx_v_i, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_5tubes___pyx_scope_struct_3___pyx_lambda_funcdef_lambda1(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_5tubes___pyx_scope_struct_3___pyx_lambda_funcdef_lambda1 *p = (struct __pyx_obj_5tubes___pyx_scope_struct_3___pyx_lambda_funcdef_lambda1 *)o;
  tmp = ((PyObject*)p->__pyx_outer_scope);
  p->__pyx_outer_scope = ((struct __pyx_obj_5tubes___pyx_scope_struct_2_ordered *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_i);
  p->__pyx_v_i = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_5tubes___pyx_scope_struct_3___pyx_lambda_funcdef_lambda1 = {
  PyVarObject_HEAD_INIT(0, 0)
  "tubes.__pyx_scope_struct_3___pyx_lambda_funcdef_lambda1", /*tp_name*/
  sizeof(struct __pyx_obj_5tubes___pyx_scope_struct_3___pyx_lambda_funcdef_lambda1), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5tubes___pyx_scope_struct_3___pyx_lambda_funcdef_lambda1, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_5tubes___pyx_scope_struct_3___pyx_lambda_funcdef_lambda1, /*tp_traverse*/
  __pyx_tp_clear_5tubes___pyx_scope_struct_3___pyx_lambda_funcdef_lambda1, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5tubes___pyx_scope_struct_3___pyx_lambda_funcdef_lambda1, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_5tubes___pyx_scope_struct_4_genexpr *__pyx_freelist_5tubes___pyx_scope_struct_4_genexpr[8];
static int __pyx_freecount_5tubes___pyx_scope_struct_4_genexpr = 0;

static PyObject *__pyx_tp_new_5tubes___pyx_scope_struct_4_genexpr(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_5tubes___pyx_scope_struct_4_genexpr > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_5tubes___pyx_scope_struct_4_genexpr)))) {
    o = (PyObject*)__pyx_freelist_5tubes___pyx_scope_struct_4_genexpr[--__pyx_freecount_5tubes___pyx_scope_struct_4_genexpr];
    memset(o, 0, sizeof(struct __pyx_obj_5tubes___pyx_scope_struct_4_genexpr));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_5tubes___pyx_scope_struct_4_genexpr(PyObject *o) {
  struct __pyx_obj_5tubes___pyx_scope_struct_4_genexpr *p = (struct __pyx_obj_5tubes___pyx_scope_struct_4_genexpr *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_outer_scope);
  Py_CLEAR(p->__pyx_v_t);
  Py_CLEAR(p->__pyx_t_0);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_5tubes___pyx_scope_struct_4_genexpr < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_5tubes___pyx_scope_struct_4_genexpr)))) {
    __pyx_freelist_5tubes___pyx_scope_struct_4_genexpr[__pyx_freecount_5tubes___pyx_scope_struct_4_genexpr++] = ((struct __pyx_obj_5tubes___pyx_scope_struct_4_genexpr *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_5tubes___pyx_scope_struct_4_genexpr(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_5tubes___pyx_scope_struct_4_genexpr *p = (struct __pyx_obj_5tubes___pyx_scope_struct_4_genexpr *)o;
  if (p->__pyx_outer_scope) {
    e = (*v)(((PyObject *)p->__pyx_outer_scope), a); if (e) return e;
  }
  if (p->__pyx_v_t) {
    e = (*v)(p->__pyx_v_t, a); if (e) return e;
  }
  if (p->__pyx_t_0) {
    e = (*v)(p->__pyx_t_0, a); if (e) return e;
  }
  return 0;
}

static PyTypeObject __pyx_type_5tubes___pyx_scope_struct_4_genexpr = {
  PyVarObject_HEAD_INIT(0, 0)
  "tubes.__pyx_scope_struct_4_genexpr", /*tp_name*/
  sizeof(struct __pyx_obj_5tubes___pyx_scope_struct_4_genexpr), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5tubes___pyx_scope_struct_4_genexpr, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_5tubes___pyx_scope_struct_4_genexpr, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5tubes___pyx_scope_struct_4_genexpr, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_5tubes___pyx_scope_struct_5___get__ *__pyx_freelist_5tubes___pyx_scope_struct_5___get__[8];
static int __pyx_freecount_5tubes___pyx_scope_struct_5___get__ = 0;

static PyObject *__pyx_tp_new_5tubes___pyx_scope_struct_5___get__(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_5tubes___pyx_scope_struct_5___get__ > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_5tubes___pyx_scope_struct_5___get__)))) {
    o = (PyObject*)__pyx_freelist_5tubes___pyx_scope_struct_5___get__[--__pyx_freecount_5tubes___pyx_scope_struct_5___get__];
    memset(o, 0, sizeof(struct __pyx_obj_5tubes___pyx_scope_struct_5___get__));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_5tubes___pyx_scope_struct_5___get__(PyObject *o) {
  struct __pyx_obj_5tubes___pyx_scope_struct_5___get__ *p = (struct __pyx_obj_5tubes___pyx_scope_struct_5___get__ *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_self);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_5tubes___pyx_scope_struct_5___get__ < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_5tubes___pyx_scope_struct_5___get__)))) {
    __pyx_freelist_5tubes___pyx_scope_struct_5___get__[__pyx_freecount_5tubes___pyx_scope_struct_5___get__++] = ((struct __pyx_obj_5tubes___pyx_scope_struct_5___get__ *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_5tubes___pyx_scope_struct_5___get__(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_5tubes___pyx_scope_struct_5___get__ *p = (struct __pyx_obj_5tubes___pyx_scope_struct_5___get__ *)o;
  if (p->__pyx_v_self) {
    e = (*v)(((PyObject *)p->__pyx_v_self), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_5tubes___pyx_scope_struct_5___get__(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_5tubes___pyx_scope_struct_5___get__ *p = (struct __pyx_obj_5tubes___pyx_scope_struct_5___get__ *)o;
  tmp = ((PyObject*)p->__pyx_v_self);
  p->__pyx_v_self = ((struct __pyx_obj_5tubes_Zip *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_5tubes___pyx_scope_struct_5___get__ = {
  PyVarObject_HEAD_INIT(0, 0)
  "tubes.__pyx_scope_struct_5___get__", /*tp_name*/
  sizeof(struct __pyx_obj_5tubes___pyx_scope_struct_5___get__), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5tubes___pyx_scope_struct_5___get__, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_5tubes___pyx_scope_struct_5___get__, /*tp_traverse*/
  __pyx_tp_clear_5tubes___pyx_scope_struct_5___get__, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5tubes___pyx_scope_struct_5___get__, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_5tubes___pyx_scope_struct_6_genexpr *__pyx_freelist_5tubes___pyx_scope_struct_6_genexpr[8];
static int __pyx_freecount_5tubes___pyx_scope_struct_6_genexpr = 0;

static PyObject *__pyx_tp_new_5tubes___pyx_scope_struct_6_genexpr(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_5tubes___pyx_scope_struct_6_genexpr > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_5tubes___pyx_scope_struct_6_genexpr)))) {
    o = (PyObject*)__pyx_freelist_5tubes___pyx_scope_struct_6_genexpr[--__pyx_freecount_5tubes___pyx_scope_struct_6_genexpr];
    memset(o, 0, sizeof(struct __pyx_obj_5tubes___pyx_scope_struct_6_genexpr));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_5tubes___pyx_scope_struct_6_genexpr(PyObject *o) {
  struct __pyx_obj_5tubes___pyx_scope_struct_6_genexpr *p = (struct __pyx_obj_5tubes___pyx_scope_struct_6_genexpr *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_outer_scope);
  Py_CLEAR(p->__pyx_v_dty);
  Py_CLEAR(p->__pyx_v_t);
  Py_CLEAR(p->__pyx_t_0);
  Py_CLEAR(p->__pyx_t_2);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_5tubes___pyx_scope_struct_6_genexpr < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_5tubes___pyx_scope_struct_6_genexpr)))) {
    __pyx_freelist_5tubes___pyx_scope_struct_6_genexpr[__pyx_freecount_5tubes___pyx_scope_struct_6_genexpr++] = ((struct __pyx_obj_5tubes___pyx_scope_struct_6_genexpr *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_5tubes___pyx_scope_struct_6_genexpr(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_5tubes___pyx_scope_struct_6_genexpr *p = (struct __pyx_obj_5tubes___pyx_scope_struct_6_genexpr *)o;
  if (p->__pyx_outer_scope) {
    e = (*v)(((PyObject *)p->__pyx_outer_scope), a); if (e) return e;
  }
  if (p->__pyx_v_dty) {
    e = (*v)(p->__pyx_v_dty, a); if (e) return e;
  }
  if (p->__pyx_v_t) {
    e = (*v)(p->__pyx_v_t, a); if (e) return e;
  }
  if (p->__pyx_t_0) {
    e = (*v)(p->__pyx_t_0, a); if (e) return e;
  }
  if (p->__pyx_t_2) {
    e = (*v)(p->__pyx_t_2, a); if (e) return e;
  }
  return 0;
}

static PyTypeObject __pyx_type_5tubes___pyx_scope_struct_6_genexpr = {
  PyVarObject_HEAD_INIT(0, 0)
  "tubes.__pyx_scope_struct_6_genexpr", /*tp_name*/
  sizeof(struct __pyx_obj_5tubes___pyx_scope_struct_6_genexpr), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5tubes___pyx_scope_struct_6_genexpr, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_5tubes___pyx_scope_struct_6_genexpr, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5tubes___pyx_scope_struct_6_genexpr, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_5tubes___pyx_scope_struct_7___get__ *__pyx_freelist_5tubes___pyx_scope_struct_7___get__[8];
static int __pyx_freecount_5tubes___pyx_scope_struct_7___get__ = 0;

static PyObject *__pyx_tp_new_5tubes___pyx_scope_struct_7___get__(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_5tubes___pyx_scope_struct_7___get__ > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_5tubes___pyx_scope_struct_7___get__)))) {
    o = (PyObject*)__pyx_freelist_5tubes___pyx_scope_struct_7___get__[--__pyx_freecount_5tubes___pyx_scope_struct_7___get__];
    memset(o, 0, sizeof(struct __pyx_obj_5tubes___pyx_scope_struct_7___get__));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_5tubes___pyx_scope_struct_7___get__(PyObject *o) {
  struct __pyx_obj_5tubes___pyx_scope_struct_7___get__ *p = (struct __pyx_obj_5tubes___pyx_scope_struct_7___get__ *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_self);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_5tubes___pyx_scope_struct_7___get__ < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_5tubes___pyx_scope_struct_7___get__)))) {
    __pyx_freelist_5tubes___pyx_scope_struct_7___get__[__pyx_freecount_5tubes___pyx_scope_struct_7___get__++] = ((struct __pyx_obj_5tubes___pyx_scope_struct_7___get__ *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_5tubes___pyx_scope_struct_7___get__(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_5tubes___pyx_scope_struct_7___get__ *p = (struct __pyx_obj_5tubes___pyx_scope_struct_7___get__ *)o;
  if (p->__pyx_v_self) {
    e = (*v)(((PyObject *)p->__pyx_v_self), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_5tubes___pyx_scope_struct_7___get__(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_5tubes___pyx_scope_struct_7___get__ *p = (struct __pyx_obj_5tubes___pyx_scope_struct_7___get__ *)o;
  tmp = ((PyObject*)p->__pyx_v_self);
  p->__pyx_v_self = ((struct __pyx_obj_5tubes_Multi *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_5tubes___pyx_scope_struct_7___get__ = {
  PyVarObject_HEAD_INIT(0, 0)
  "tubes.__pyx_scope_struct_7___get__", /*tp_name*/
  sizeof(struct __pyx_obj_5tubes___pyx_scope_struct_7___get__), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5tubes___pyx_scope_struct_7___get__, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_5tubes___pyx_scope_struct_7___get__, /*tp_traverse*/
  __pyx_tp_clear_5tubes___pyx_scope_struct_7___get__, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5tubes___pyx_scope_struct_7___get__, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_5tubes___pyx_scope_struct_8_genexpr *__pyx_freelist_5tubes___pyx_scope_struct_8_genexpr[8];
static int __pyx_freecount_5tubes___pyx_scope_struct_8_genexpr = 0;

static PyObject *__pyx_tp_new_5tubes___pyx_scope_struct_8_genexpr(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_5tubes___pyx_scope_struct_8_genexpr > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_5tubes___pyx_scope_struct_8_genexpr)))) {
    o = (PyObject*)__pyx_freelist_5tubes___pyx_scope_struct_8_genexpr[--__pyx_freecount_5tubes___pyx_scope_struct_8_genexpr];
    memset(o, 0, sizeof(struct __pyx_obj_5tubes___pyx_scope_struct_8_genexpr));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_5tubes___pyx_scope_struct_8_genexpr(PyObject *o) {
  struct __pyx_obj_5tubes___pyx_scope_struct_8_genexpr *p = (struct __pyx_obj_5tubes___pyx_scope_struct_8_genexpr *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_outer_scope);
  Py_CLEAR(p->__pyx_v_d);
  Py_CLEAR(p->__pyx_v_t);
  Py_CLEAR(p->__pyx_t_0);
  Py_CLEAR(p->__pyx_t_3);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_5tubes___pyx_scope_struct_8_genexpr < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_5tubes___pyx_scope_struct_8_genexpr)))) {
    __pyx_freelist_5tubes___pyx_scope_struct_8_genexpr[__pyx_freecount_5tubes___pyx_scope_struct_8_genexpr++] = ((struct __pyx_obj_5tubes___pyx_scope_struct_8_genexpr *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_5tubes___pyx_scope_struct_8_genexpr(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_5tubes___pyx_scope_struct_8_genexpr *p = (struct __pyx_obj_5tubes___pyx_scope_struct_8_genexpr *)o;
  if (p->__pyx_outer_scope) {
    e = (*v)(((PyObject *)p->__pyx_outer_scope), a); if (e) return e;
  }
  if (p->__pyx_v_d) {
    e = (*v)(p->__pyx_v_d, a); if (e) return e;
  }
  if (p->__pyx_v_t) {
    e = (*v)(p->__pyx_v_t, a); if (e) return e;
  }
  if (p->__pyx_t_0) {
    e = (*v)(p->__pyx_t_0, a); if (e) return e;
  }
  if (p->__pyx_t_3) {
    e = (*v)(p->__pyx_t_3, a); if (e) return e;
  }
  return 0;
}

static PyTypeObject __pyx_type_5tubes___pyx_scope_struct_8_genexpr = {
  PyVarObject_HEAD_INIT(0, 0)
  "tubes.__pyx_scope_struct_8_genexpr", /*tp_name*/
  sizeof(struct __pyx_obj_5tubes___pyx_scope_struct_8_genexpr), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5tubes___pyx_scope_struct_8_genexpr, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_5tubes___pyx_scope_struct_8_genexpr, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5tubes___pyx_scope_struct_8_genexpr, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_5tubes___pyx_scope_struct_9___get__ *__pyx_freelist_5tubes___pyx_scope_struct_9___get__[8];
static int __pyx_freecount_5tubes___pyx_scope_struct_9___get__ = 0;

static PyObject *__pyx_tp_new_5tubes___pyx_scope_struct_9___get__(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_5tubes___pyx_scope_struct_9___get__ > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_5tubes___pyx_scope_struct_9___get__)))) {
    o = (PyObject*)__pyx_freelist_5tubes___pyx_scope_struct_9___get__[--__pyx_freecount_5tubes___pyx_scope_struct_9___get__];
    memset(o, 0, sizeof(struct __pyx_obj_5tubes___pyx_scope_struct_9___get__));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_5tubes___pyx_scope_struct_9___get__(PyObject *o) {
  struct __pyx_obj_5tubes___pyx_scope_struct_9___get__ *p = (struct __pyx_obj_5tubes___pyx_scope_struct_9___get__ *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_self);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_5tubes___pyx_scope_struct_9___get__ < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_5tubes___pyx_scope_struct_9___get__)))) {
    __pyx_freelist_5tubes___pyx_scope_struct_9___get__[__pyx_freecount_5tubes___pyx_scope_struct_9___get__++] = ((struct __pyx_obj_5tubes___pyx_scope_struct_9___get__ *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_5tubes___pyx_scope_struct_9___get__(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_5tubes___pyx_scope_struct_9___get__ *p = (struct __pyx_obj_5tubes___pyx_scope_struct_9___get__ *)o;
  if (p->__pyx_v_self) {
    e = (*v)(((PyObject *)p->__pyx_v_self), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_5tubes___pyx_scope_struct_9___get__(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_5tubes___pyx_scope_struct_9___get__ *p = (struct __pyx_obj_5tubes___pyx_scope_struct_9___get__ *)o;
  tmp = ((PyObject*)p->__pyx_v_self);
  p->__pyx_v_self = ((struct __pyx_obj_5tubes_ChainTubes *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_5tubes___pyx_scope_struct_9___get__ = {
  PyVarObject_HEAD_INIT(0, 0)
  "tubes.__pyx_scope_struct_9___get__", /*tp_name*/
  sizeof(struct __pyx_obj_5tubes___pyx_scope_struct_9___get__), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5tubes___pyx_scope_struct_9___get__, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_5tubes___pyx_scope_struct_9___get__, /*tp_traverse*/
  __pyx_tp_clear_5tubes___pyx_scope_struct_9___get__, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5tubes___pyx_scope_struct_9___get__, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_5tubes___pyx_scope_struct_10_genexpr *__pyx_freelist_5tubes___pyx_scope_struct_10_genexpr[8];
static int __pyx_freecount_5tubes___pyx_scope_struct_10_genexpr = 0;

static PyObject *__pyx_tp_new_5tubes___pyx_scope_struct_10_genexpr(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_5tubes___pyx_scope_struct_10_genexpr > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_5tubes___pyx_scope_struct_10_genexpr)))) {
    o = (PyObject*)__pyx_freelist_5tubes___pyx_scope_struct_10_genexpr[--__pyx_freecount_5tubes___pyx_scope_struct_10_genexpr];
    memset(o, 0, sizeof(struct __pyx_obj_5tubes___pyx_scope_struct_10_genexpr));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_5tubes___pyx_scope_struct_10_genexpr(PyObject *o) {
  struct __pyx_obj_5tubes___pyx_scope_struct_10_genexpr *p = (struct __pyx_obj_5tubes___pyx_scope_struct_10_genexpr *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_outer_scope);
  Py_CLEAR(p->__pyx_v_p);
  Py_CLEAR(p->__pyx_t_0);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_5tubes___pyx_scope_struct_10_genexpr < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_5tubes___pyx_scope_struct_10_genexpr)))) {
    __pyx_freelist_5tubes___pyx_scope_struct_10_genexpr[__pyx_freecount_5tubes___pyx_scope_struct_10_genexpr++] = ((struct __pyx_obj_5tubes___pyx_scope_struct_10_genexpr *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_5tubes___pyx_scope_struct_10_genexpr(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_5tubes___pyx_scope_struct_10_genexpr *p = (struct __pyx_obj_5tubes___pyx_scope_struct_10_genexpr *)o;
  if (p->__pyx_outer_scope) {
    e = (*v)(((PyObject *)p->__pyx_outer_scope), a); if (e) return e;
  }
  if (p->__pyx_v_p) {
    e = (*v)(p->__pyx_v_p, a); if (e) return e;
  }
  if (p->__pyx_t_0) {
    e = (*v)(p->__pyx_t_0, a); if (e) return e;
  }
  return 0;
}

static PyTypeObject __pyx_type_5tubes___pyx_scope_struct_10_genexpr = {
  PyVarObject_HEAD_INIT(0, 0)
  "tubes.__pyx_scope_struct_10_genexpr", /*tp_name*/
  sizeof(struct __pyx_obj_5tubes___pyx_scope_struct_10_genexpr), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5tubes___pyx_scope_struct_10_genexpr, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_5tubes___pyx_scope_struct_10_genexpr, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5tubes___pyx_scope_struct_10_genexpr, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};

#if PY_MAJOR_VERSION >= 3
#if CYTHON_PEP489_MULTI_PHASE_INIT
static PyObject* __pyx_pymod_create(PyObject *spec, PyModuleDef *def); /*proto*/
static int __pyx_pymod_exec_tubes(PyObject* module); /*proto*/
static PyModuleDef_Slot __pyx_moduledef_slots[] = {
  {Py_mod_create, (void*)__pyx_pymod_create},
  {Py_mod_exec, (void*)__pyx_pymod_exec_tubes},
  {0, NULL}
};
#endif

static struct PyModuleDef __pyx_moduledef = {
    PyModuleDef_HEAD_INIT,
    "tubes",
    0, /* m_doc */
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    0, /* m_size */
  #else
    -1, /* m_size */
  #endif
    __pyx_methods /* m_methods */,
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    __pyx_moduledef_slots, /* m_slots */
  #else
    NULL, /* m_reload */
  #endif
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_n_s_Bool, __pyx_k_Bool, sizeof(__pyx_k_Bool), 0, 0, 1, 1},
  {&__pyx_n_u_Bool, __pyx_k_Bool, sizeof(__pyx_k_Bool), 0, 1, 0, 1},
  {&__pyx_n_s_ByteSlice, __pyx_k_ByteSlice, sizeof(__pyx_k_ByteSlice), 0, 0, 1, 1},
  {&__pyx_kp_u_Cannot_chunk_tubes_without_a_sin, __pyx_k_Cannot_chunk_tubes_without_a_sin, sizeof(__pyx_k_Cannot_chunk_tubes_without_a_sin), 0, 1, 0, 0},
  {&__pyx_kp_u_Cannot_get_slot, __pyx_k_Cannot_get_slot, sizeof(__pyx_k_Cannot_get_slot), 0, 1, 0, 0},
  {&__pyx_kp_u_Cannot_make_a_FileMap_Tube_with, __pyx_k_Cannot_make_a_FileMap_Tube_with, sizeof(__pyx_k_Cannot_make_a_FileMap_Tube_with), 0, 1, 0, 0},
  {&__pyx_kp_u_Cannot_make_a_JsonParse_Tube_wit, __pyx_k_Cannot_make_a_JsonParse_Tube_wit, sizeof(__pyx_k_Cannot_make_a_JsonParse_Tube_wit), 0, 1, 0, 0},
  {&__pyx_kp_u_Cannot_make_a_ReadFile_Tube_with, __pyx_k_Cannot_make_a_ReadFile_Tube_with, sizeof(__pyx_k_Cannot_make_a_ReadFile_Tube_with), 0, 1, 0, 0},
  {&__pyx_kp_u_Cannot_make_a_SkipUnless_Tube_wi, __pyx_k_Cannot_make_a_SkipUnless_Tube_wi, sizeof(__pyx_k_Cannot_make_a_SkipUnless_Tube_wi), 0, 1, 0, 0},
  {&__pyx_kp_u_Cannot_make_a_Split_Tube_with_pa, __pyx_k_Cannot_make_a_Split_Tube_with_pa, sizeof(__pyx_k_Cannot_make_a_Split_Tube_with_pa), 0, 1, 0, 0},
  {&__pyx_kp_u_ChainTubes, __pyx_k_ChainTubes, sizeof(__pyx_k_ChainTubes), 0, 1, 0, 0},
  {&__pyx_n_s_ChainTubes___get___locals_genexp, __pyx_k_ChainTubes___get___locals_genexp, sizeof(__pyx_k_ChainTubes___get___locals_genexp), 0, 0, 1, 1},
  {&__pyx_kp_u_Chain_requires_all_inputs_to_hav, __pyx_k_Chain_requires_all_inputs_to_hav, sizeof(__pyx_k_Chain_requires_all_inputs_to_hav), 0, 1, 0, 0},
  {&__pyx_n_s_Chains_ordered, __pyx_k_Chains_ordered, sizeof(__pyx_k_Chains_ordered), 0, 0, 1, 1},
  {&__pyx_kp_u_Chunk, __pyx_k_Chunk, sizeof(__pyx_k_Chunk), 0, 1, 0, 0},
  {&__pyx_kp_u_Combine_two_inputs_into_one_by, __pyx_k_Combine_two_inputs_into_one_by, sizeof(__pyx_k_Combine_two_inputs_into_one_by), 0, 1, 0, 0},
  {&__pyx_kp_u_Compare, __pyx_k_Compare, sizeof(__pyx_k_Compare), 0, 1, 0, 0},
  {&__pyx_kp_u_Compatibility_list_tube_equals, __pyx_k_Compatibility_list_tube_equals, sizeof(__pyx_k_Compatibility_list_tube_equals), 0, 1, 0, 0},
  {&__pyx_kp_u_Compatibility_list_tube_gt_valu, __pyx_k_Compatibility_list_tube_gt_valu, sizeof(__pyx_k_Compatibility_list_tube_gt_valu), 0, 1, 0, 0},
  {&__pyx_kp_u_Compatibility_list_tube_lt_valu, __pyx_k_Compatibility_list_tube_lt_valu, sizeof(__pyx_k_Compatibility_list_tube_lt_valu), 0, 1, 0, 0},
  {&__pyx_kp_u_Compatibility_tube_chunk_2_Recu, __pyx_k_Compatibility_tube_chunk_2_Recu, sizeof(__pyx_k_Compatibility_tube_chunk_2_Recu), 0, 1, 0, 0},
  {&__pyx_kp_u_Compatibility_tube_enumerate_Si, __pyx_k_Compatibility_tube_enumerate_Si, sizeof(__pyx_k_Compatibility_tube_enumerate_Si), 0, 1, 0, 0},
  {&__pyx_kp_u_Compatibility_tube_first_5_Crea, __pyx_k_Compatibility_tube_first_5_Crea, sizeof(__pyx_k_Compatibility_tube_first_5_Crea), 0, 1, 0, 0},
  {&__pyx_kp_u_Compatibility_tube_get_field_Ef, __pyx_k_Compatibility_tube_get_field_Ef, sizeof(__pyx_k_Compatibility_tube_get_field_Ef), 0, 1, 0, 0},
  {&__pyx_kp_u_Compatibility_tube_gunzip_zlib, __pyx_k_Compatibility_tube_gunzip_zlib, sizeof(__pyx_k_Compatibility_tube_gunzip_zlib), 0, 1, 0, 0},
  {&__pyx_kp_u_Compatibility_tube_json_Interpr, __pyx_k_Compatibility_tube_json_Interpr, sizeof(__pyx_k_Compatibility_tube_json_Interpr), 0, 1, 0, 0},
  {&__pyx_kp_u_Compatibility_tube_multi_lambda, __pyx_k_Compatibility_tube_multi_lambda, sizeof(__pyx_k_Compatibility_tube_multi_lambda), 0, 1, 0, 0},
  {&__pyx_kp_u_Compatibility_tube_skip_5_Creat, __pyx_k_Compatibility_tube_skip_5_Creat, sizeof(__pyx_k_Compatibility_tube_skip_5_Creat), 0, 1, 0, 0},
  {&__pyx_kp_u_Compatibility_tube_skip_unless, __pyx_k_Compatibility_tube_skip_unless, sizeof(__pyx_k_Compatibility_tube_skip_unless), 0, 1, 0, 0},
  {&__pyx_kp_u_Compatibility_tube_split_Split, __pyx_k_Compatibility_tube_split_Split, sizeof(__pyx_k_Compatibility_tube_split_Split), 0, 1, 0, 0},
  {&__pyx_kp_u_Compatible_Dtypes_bytes_Utf8_Fo, __pyx_k_Compatible_Dtypes_bytes_Utf8_Fo, sizeof(__pyx_k_Compatible_Dtypes_bytes_Utf8_Fo), 0, 1, 0, 0},
  {&__pyx_kp_u_Convert, __pyx_k_Convert, sizeof(__pyx_k_Convert), 0, 1, 0, 0},
  {&__pyx_kp_u_Convert_iter_cannot_have_more_el, __pyx_k_Convert_iter_cannot_have_more_el, sizeof(__pyx_k_Convert_iter_cannot_have_more_el), 0, 1, 0, 0},
  {&__pyx_kp_u_Count, __pyx_k_Count, sizeof(__pyx_k_Count), 0, 1, 0, 0},
  {&__pyx_n_s_DTYPE_MAP, __pyx_k_DTYPE_MAP, sizeof(__pyx_k_DTYPE_MAP), 0, 0, 1, 1},
  {&__pyx_kp_u_DType, __pyx_k_DType, sizeof(__pyx_k_DType), 0, 1, 0, 0},
  {&__pyx_kp_u_Each, __pyx_k_Each, sizeof(__pyx_k_Each), 0, 1, 0, 0},
  {&__pyx_kp_u_Expected, __pyx_k_Expected, sizeof(__pyx_k_Expected), 0, 1, 0, 0},
  {&__pyx_kp_u_FileMap, __pyx_k_FileMap, sizeof(__pyx_k_FileMap), 0, 1, 0, 0},
  {&__pyx_kp_u_First, __pyx_k_First, sizeof(__pyx_k_First), 0, 1, 0, 0},
  {&__pyx_n_s_Float, __pyx_k_Float, sizeof(__pyx_k_Float), 0, 0, 1, 1},
  {&__pyx_kp_u_Found_an_Each_input_but_cannot_g, __pyx_k_Found_an_Each_input_but_cannot_g, sizeof(__pyx_k_Found_an_Each_input_but_cannot_g), 0, 1, 0, 0},
  {&__pyx_kp_u_Gunzip, __pyx_k_Gunzip, sizeof(__pyx_k_Gunzip), 0, 1, 0, 0},
  {&__pyx_kp_s_Incompatible_checksums_s_vs_0xdf, __pyx_k_Incompatible_checksums_s_vs_0xdf, sizeof(__pyx_k_Incompatible_checksums_s_vs_0xdf), 0, 0, 1, 0},
  {&__pyx_n_s_IndexError, __pyx_k_IndexError, sizeof(__pyx_k_IndexError), 0, 0, 1, 1},
  {&__pyx_n_s_Int64, __pyx_k_Int64, sizeof(__pyx_k_Int64), 0, 0, 1, 1},
  {&__pyx_n_u_Int64, __pyx_k_Int64, sizeof(__pyx_k_Int64), 0, 1, 0, 1},
  {&__pyx_n_u_Json, __pyx_k_Json, sizeof(__pyx_k_Json), 0, 1, 0, 1},
  {&__pyx_kp_u_JsonParse, __pyx_k_JsonParse, sizeof(__pyx_k_JsonParse), 0, 1, 0, 0},
  {&__pyx_n_s_JsonUtf8, __pyx_k_JsonUtf8, sizeof(__pyx_k_JsonUtf8), 0, 0, 1, 1},
  {&__pyx_kp_u_Multi, __pyx_k_Multi, sizeof(__pyx_k_Multi), 0, 1, 0, 0},
  {&__pyx_n_s_Multi___get___locals_genexpr, __pyx_k_Multi___get___locals_genexpr, sizeof(__pyx_k_Multi___get___locals_genexpr), 0, 0, 1, 1},
  {&__pyx_kp_u_NameLookup, __pyx_k_NameLookup, sizeof(__pyx_k_NameLookup), 0, 1, 0, 0},
  {&__pyx_n_s_NotImplementedError, __pyx_k_NotImplementedError, sizeof(__pyx_k_NotImplementedError), 0, 0, 1, 1},
  {&__pyx_n_s_Null, __pyx_k_Null, sizeof(__pyx_k_Null), 0, 0, 1, 1},
  {&__pyx_n_u_Null, __pyx_k_Null, sizeof(__pyx_k_Null), 0, 1, 0, 1},
  {&__pyx_n_s_Object, __pyx_k_Object, sizeof(__pyx_k_Object), 0, 0, 1, 1},
  {&__pyx_n_s_PickleError, __pyx_k_PickleError, sizeof(__pyx_k_PickleError), 0, 0, 1, 1},
  {&__pyx_kp_u_ReadFile, __pyx_k_ReadFile, sizeof(__pyx_k_ReadFile), 0, 1, 0, 0},
  {&__pyx_kp_u_Skip, __pyx_k_Skip, sizeof(__pyx_k_Skip), 0, 1, 0, 0},
  {&__pyx_kp_u_SkipUnless, __pyx_k_SkipUnless, sizeof(__pyx_k_SkipUnless), 0, 1, 0, 0},
  {&__pyx_kp_u_SlotGet, __pyx_k_SlotGet, sizeof(__pyx_k_SlotGet), 0, 1, 0, 0},
  {&__pyx_kp_u_Split, __pyx_k_Split, sizeof(__pyx_k_Split), 0, 1, 0, 0},
  {&__pyx_kp_u_ToPy, __pyx_k_ToPy, sizeof(__pyx_k_ToPy), 0, 1, 0, 0},
  {&__pyx_kp_u_Tube_chunk_line_404, __pyx_k_Tube_chunk_line_404, sizeof(__pyx_k_Tube_chunk_line_404), 0, 1, 0, 0},
  {&__pyx_kp_u_Tube_enumerate_line_338, __pyx_k_Tube_enumerate_line_338, sizeof(__pyx_k_Tube_enumerate_line_338), 0, 1, 0, 0},
  {&__pyx_kp_u_Tube_equals_line_368, __pyx_k_Tube_equals_line_368, sizeof(__pyx_k_Tube_equals_line_368), 0, 1, 0, 0},
  {&__pyx_kp_u_Tube_first_line_120, __pyx_k_Tube_first_line_120, sizeof(__pyx_k_Tube_first_line_120), 0, 1, 0, 0},
  {&__pyx_kp_u_Tube_get_line_272, __pyx_k_Tube_get_line_272, sizeof(__pyx_k_Tube_get_line_272), 0, 1, 0, 0},
  {&__pyx_kp_u_Tube_gt_line_382, __pyx_k_Tube_gt_line_382, sizeof(__pyx_k_Tube_gt_line_382), 0, 1, 0, 0},
  {&__pyx_kp_u_Tube_gunzip_line_188, __pyx_k_Tube_gunzip_line_188, sizeof(__pyx_k_Tube_gunzip_line_188), 0, 1, 0, 0},
  {&__pyx_kp_u_Tube_in_multiple_chains, __pyx_k_Tube_in_multiple_chains, sizeof(__pyx_k_Tube_in_multiple_chains), 0, 1, 0, 0},
  {&__pyx_kp_u_Tube_json_line_221, __pyx_k_Tube_json_line_221, sizeof(__pyx_k_Tube_json_line_221), 0, 1, 0, 0},
  {&__pyx_kp_u_Tube_lt_line_393, __pyx_k_Tube_lt_line_393, sizeof(__pyx_k_Tube_lt_line_393), 0, 1, 0, 0},
  {&__pyx_kp_u_Tube_multi_line_250, __pyx_k_Tube_multi_line_250, sizeof(__pyx_k_Tube_multi_line_250), 0, 1, 0, 0},
  {&__pyx_kp_u_Tube_read_files_line_165, __pyx_k_Tube_read_files_line_165, sizeof(__pyx_k_Tube_read_files_line_165), 0, 1, 0, 0},
  {&__pyx_kp_u_Tube_skip_line_132, __pyx_k_Tube_skip_line_132, sizeof(__pyx_k_Tube_skip_line_132), 0, 1, 0, 0},
  {&__pyx_kp_u_Tube_skip_unless_line_309, __pyx_k_Tube_skip_unless_line_309, sizeof(__pyx_k_Tube_skip_unless_line_309), 0, 1, 0, 0},
  {&__pyx_kp_u_Tube_split_line_205, __pyx_k_Tube_split_line_205, sizeof(__pyx_k_Tube_split_line_205), 0, 1, 0, 0},
  {&__pyx_kp_u_Tube_zip_line_351, __pyx_k_Tube_zip_line_351, sizeof(__pyx_k_Tube_zip_line_351), 0, 1, 0, 0},
  {&__pyx_kp_u_Tubes_Tubes_is_a_library_for_ef, __pyx_k_Tubes_Tubes_is_a_library_for_ef, sizeof(__pyx_k_Tubes_Tubes_is_a_library_for_ef), 0, 1, 0, 0},
  {&__pyx_n_s_TypeError, __pyx_k_TypeError, sizeof(__pyx_k_TypeError), 0, 0, 1, 1},
  {&__pyx_n_s_Utf8, __pyx_k_Utf8, sizeof(__pyx_k_Utf8), 0, 0, 1, 1},
  {&__pyx_n_s_ValueError, __pyx_k_ValueError, sizeof(__pyx_k_ValueError), 0, 0, 1, 1},
  {&__pyx_kp_u_Zip, __pyx_k_Zip, sizeof(__pyx_k_Zip), 0, 1, 0, 0},
  {&__pyx_n_s_Zip___get___locals_genexpr, __pyx_k_Zip___get___locals_genexpr, sizeof(__pyx_k_Zip___get___locals_genexpr), 0, 0, 1, 1},
  {&__pyx_kp_u__19, __pyx_k__19, sizeof(__pyx_k__19), 0, 1, 0, 0},
  {&__pyx_kp_u__20, __pyx_k__20, sizeof(__pyx_k__20), 0, 1, 0, 0},
  {&__pyx_kp_u__25, __pyx_k__25, sizeof(__pyx_k__25), 0, 1, 0, 0},
  {&__pyx_kp_u__27, __pyx_k__27, sizeof(__pyx_k__27), 0, 1, 0, 0},
  {&__pyx_kp_u__3, __pyx_k__3, sizeof(__pyx_k__3), 0, 1, 0, 0},
  {&__pyx_kp_u__32, __pyx_k__32, sizeof(__pyx_k__32), 0, 1, 0, 0},
  {&__pyx_kp_b__36, __pyx_k__36, sizeof(__pyx_k__36), 0, 0, 0, 0},
  {&__pyx_n_s_add, __pyx_k_add, sizeof(__pyx_k_add), 0, 0, 1, 1},
  {&__pyx_n_s_args, __pyx_k_args, sizeof(__pyx_k_args), 0, 0, 1, 1},
  {&__pyx_n_u_ascii, __pyx_k_ascii, sizeof(__pyx_k_ascii), 0, 1, 0, 1},
  {&__pyx_n_u_bytes, __pyx_k_bytes, sizeof(__pyx_k_bytes), 0, 1, 0, 1},
  {&__pyx_n_s_chains, __pyx_k_chains, sizeof(__pyx_k_chains), 0, 0, 1, 1},
  {&__pyx_n_s_chunk, __pyx_k_chunk, sizeof(__pyx_k_chunk), 0, 0, 1, 1},
  {&__pyx_kp_s_chunk_pxi, __pyx_k_chunk_pxi, sizeof(__pyx_k_chunk_pxi), 0, 0, 1, 0},
  {&__pyx_n_s_chunk_size, __pyx_k_chunk_size, sizeof(__pyx_k_chunk_size), 0, 0, 1, 1},
  {&__pyx_n_s_cline_in_traceback, __pyx_k_cline_in_traceback, sizeof(__pyx_k_cline_in_traceback), 0, 0, 1, 1},
  {&__pyx_n_s_close, __pyx_k_close, sizeof(__pyx_k_close), 0, 0, 1, 1},
  {&__pyx_n_s_codec, __pyx_k_codec, sizeof(__pyx_k_codec), 0, 0, 1, 1},
  {&__pyx_n_s_conditional, __pyx_k_conditional, sizeof(__pyx_k_conditional), 0, 0, 1, 1},
  {&__pyx_n_s_default, __pyx_k_default, sizeof(__pyx_k_default), 0, 0, 1, 1},
  {&__pyx_n_s_default_val, __pyx_k_default_val, sizeof(__pyx_k_default_val), 0, 0, 1, 1},
  {&__pyx_n_s_describe_self, __pyx_k_describe_self, sizeof(__pyx_k_describe_self), 0, 0, 1, 1},
  {&__pyx_n_u_describe_self, __pyx_k_describe_self, sizeof(__pyx_k_describe_self), 0, 1, 0, 1},
  {&__pyx_n_s_dict, __pyx_k_dict, sizeof(__pyx_k_dict), 0, 0, 1, 1},
  {&__pyx_n_s_doc, __pyx_k_doc, sizeof(__pyx_k_doc), 0, 0, 1, 1},
  {&__pyx_n_s_dtype, __pyx_k_dtype, sizeof(__pyx_k_dtype), 0, 0, 1, 1},
  {&__pyx_n_u_dtype, __pyx_k_dtype, sizeof(__pyx_k_dtype), 0, 1, 0, 1},
  {&__pyx_n_s_each, __pyx_k_each, sizeof(__pyx_k_each), 0, 0, 1, 1},
  {&__pyx_n_s_encode, __pyx_k_encode, sizeof(__pyx_k_encode), 0, 0, 1, 1},
  {&__pyx_n_u_float, __pyx_k_float, sizeof(__pyx_k_float), 0, 1, 0, 1},
  {&__pyx_kp_u_from_parent_with, __pyx_k_from_parent_with, sizeof(__pyx_k_from_parent_with), 0, 1, 0, 0},
  {&__pyx_n_u_fs, __pyx_k_fs, sizeof(__pyx_k_fs), 0, 1, 0, 1},
  {&__pyx_n_s_functools, __pyx_k_functools, sizeof(__pyx_k_functools), 0, 0, 1, 1},
  {&__pyx_n_s_genexpr, __pyx_k_genexpr, sizeof(__pyx_k_genexpr), 0, 0, 1, 1},
  {&__pyx_n_s_get, __pyx_k_get, sizeof(__pyx_k_get), 0, 0, 1, 1},
  {&__pyx_n_s_getstate, __pyx_k_getstate, sizeof(__pyx_k_getstate), 0, 0, 1, 1},
  {&__pyx_n_s_import, __pyx_k_import, sizeof(__pyx_k_import), 0, 0, 1, 1},
  {&__pyx_n_s_index, __pyx_k_index, sizeof(__pyx_k_index), 0, 0, 1, 1},
  {&__pyx_n_s_inputs, __pyx_k_inputs, sizeof(__pyx_k_inputs), 0, 0, 1, 1},
  {&__pyx_n_u_inputs, __pyx_k_inputs, sizeof(__pyx_k_inputs), 0, 1, 0, 1},
  {&__pyx_n_s_inputs_2, __pyx_k_inputs_2, sizeof(__pyx_k_inputs_2), 0, 0, 1, 1},
  {&__pyx_kp_u_inputs_to__make_iter_got, __pyx_k_inputs_to__make_iter_got, sizeof(__pyx_k_inputs_to__make_iter_got), 0, 1, 0, 0},
  {&__pyx_n_s_it, __pyx_k_it, sizeof(__pyx_k_it), 0, 0, 1, 1},
  {&__pyx_n_s_items, __pyx_k_items, sizeof(__pyx_k_items), 0, 0, 1, 1},
  {&__pyx_n_s_iter, __pyx_k_iter, sizeof(__pyx_k_iter), 0, 0, 1, 1},
  {&__pyx_n_s_iters, __pyx_k_iters, sizeof(__pyx_k_iters), 0, 0, 1, 1},
  {&__pyx_n_s_key, __pyx_k_key, sizeof(__pyx_k_key), 0, 0, 1, 1},
  {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
  {&__pyx_n_u_make_iter, __pyx_k_make_iter, sizeof(__pyx_k_make_iter), 0, 1, 0, 1},
  {&__pyx_n_s_max, __pyx_k_max, sizeof(__pyx_k_max), 0, 0, 1, 1},
  {&__pyx_n_s_name, __pyx_k_name, sizeof(__pyx_k_name), 0, 0, 1, 1},
  {&__pyx_n_s_name_lookups, __pyx_k_name_lookups, sizeof(__pyx_k_name_lookups), 0, 0, 1, 1},
  {&__pyx_n_s_new, __pyx_k_new, sizeof(__pyx_k_new), 0, 0, 1, 1},
  {&__pyx_n_u_next, __pyx_k_next, sizeof(__pyx_k_next), 0, 1, 0, 1},
  {&__pyx_n_s_next___locals_genexpr, __pyx_k_next___locals_genexpr, sizeof(__pyx_k_next___locals_genexpr), 0, 0, 1, 1},
  {&__pyx_kp_s_no_default___reduce___due_to_non, __pyx_k_no_default___reduce___due_to_non, sizeof(__pyx_k_no_default___reduce___due_to_non), 0, 0, 1, 0},
  {&__pyx_n_s_num, __pyx_k_num, sizeof(__pyx_k_num), 0, 0, 1, 1},
  {&__pyx_n_s_object, __pyx_k_object, sizeof(__pyx_k_object), 0, 0, 1, 1},
  {&__pyx_n_u_object, __pyx_k_object, sizeof(__pyx_k_object), 0, 1, 0, 1},
  {&__pyx_n_s_op, __pyx_k_op, sizeof(__pyx_k_op), 0, 0, 1, 1},
  {&__pyx_n_s_ordered, __pyx_k_ordered, sizeof(__pyx_k_ordered), 0, 0, 1, 1},
  {&__pyx_n_s_ordered_locals_lambda, __pyx_k_ordered_locals_lambda, sizeof(__pyx_k_ordered_locals_lambda), 0, 0, 1, 1},
  {&__pyx_n_s_ordered_locals_lambda_locals_gen, __pyx_k_ordered_locals_lambda_locals_gen, sizeof(__pyx_k_ordered_locals_lambda_locals_gen), 0, 0, 1, 1},
  {&__pyx_n_s_output, __pyx_k_output, sizeof(__pyx_k_output), 0, 0, 1, 1},
  {&__pyx_n_s_parent, __pyx_k_parent, sizeof(__pyx_k_parent), 0, 0, 1, 1},
  {&__pyx_n_s_parents, __pyx_k_parents, sizeof(__pyx_k_parents), 0, 0, 1, 1},
  {&__pyx_n_s_partial, __pyx_k_partial, sizeof(__pyx_k_partial), 0, 0, 1, 1},
  {&__pyx_n_s_pickle, __pyx_k_pickle, sizeof(__pyx_k_pickle), 0, 0, 1, 1},
  {&__pyx_n_s_py_iter, __pyx_k_py_iter, sizeof(__pyx_k_py_iter), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_PickleError, __pyx_k_pyx_PickleError, sizeof(__pyx_k_pyx_PickleError), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_checksum, __pyx_k_pyx_checksum, sizeof(__pyx_k_pyx_checksum), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_result, __pyx_k_pyx_result, sizeof(__pyx_k_pyx_result), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_state, __pyx_k_pyx_state, sizeof(__pyx_k_pyx_state), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_type, __pyx_k_pyx_type, sizeof(__pyx_k_pyx_type), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_unpickle_Tube, __pyx_k_pyx_unpickle_Tube, sizeof(__pyx_k_pyx_unpickle_Tube), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_vtable, __pyx_k_pyx_vtable, sizeof(__pyx_k_pyx_vtable), 0, 0, 1, 1},
  {&__pyx_n_s_range, __pyx_k_range, sizeof(__pyx_k_range), 0, 0, 1, 1},
  {&__pyx_n_s_rank, __pyx_k_rank, sizeof(__pyx_k_rank), 0, 0, 1, 1},
  {&__pyx_n_s_reduce, __pyx_k_reduce, sizeof(__pyx_k_reduce), 0, 0, 1, 1},
  {&__pyx_n_s_reduce_cython, __pyx_k_reduce_cython, sizeof(__pyx_k_reduce_cython), 0, 0, 1, 1},
  {&__pyx_n_s_reduce_ex, __pyx_k_reduce_ex, sizeof(__pyx_k_reduce_ex), 0, 0, 1, 1},
  {&__pyx_n_s_reverse, __pyx_k_reverse, sizeof(__pyx_k_reverse), 0, 0, 1, 1},
  {&__pyx_n_s_root_chain, __pyx_k_root_chain, sizeof(__pyx_k_root_chain), 0, 0, 1, 1},
  {&__pyx_kp_s_self_iter_cannot_be_converted_to, __pyx_k_self_iter_cannot_be_converted_to, sizeof(__pyx_k_self_iter_cannot_be_converted_to), 0, 0, 1, 0},
  {&__pyx_kp_s_self_type_cannot_be_converted_to, __pyx_k_self_type_cannot_be_converted_to, sizeof(__pyx_k_self_type_cannot_be_converted_to), 0, 0, 1, 0},
  {&__pyx_n_s_send, __pyx_k_send, sizeof(__pyx_k_send), 0, 0, 1, 1},
  {&__pyx_n_s_sep, __pyx_k_sep, sizeof(__pyx_k_sep), 0, 0, 1, 1},
  {&__pyx_n_s_setdefault, __pyx_k_setdefault, sizeof(__pyx_k_setdefault), 0, 0, 1, 1},
  {&__pyx_n_s_setstate, __pyx_k_setstate, sizeof(__pyx_k_setstate), 0, 0, 1, 1},
  {&__pyx_n_s_setstate_cython, __pyx_k_setstate_cython, sizeof(__pyx_k_setstate_cython), 0, 0, 1, 1},
  {&__pyx_kp_u_slots, __pyx_k_slots, sizeof(__pyx_k_slots), 0, 1, 0, 0},
  {&__pyx_n_s_sorted, __pyx_k_sorted, sizeof(__pyx_k_sorted), 0, 0, 1, 1},
  {&__pyx_n_s_start, __pyx_k_start, sizeof(__pyx_k_start), 0, 0, 1, 1},
  {&__pyx_n_s_start_2, __pyx_k_start_2, sizeof(__pyx_k_start_2), 0, 0, 1, 1},
  {&__pyx_n_u_str, __pyx_k_str, sizeof(__pyx_k_str), 0, 1, 0, 1},
  {&__pyx_n_s_stream, __pyx_k_stream, sizeof(__pyx_k_stream), 0, 0, 1, 1},
  {&__pyx_kp_s_stringsource, __pyx_k_stringsource, sizeof(__pyx_k_stringsource), 0, 0, 1, 0},
  {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
  {&__pyx_n_s_throw, __pyx_k_throw, sizeof(__pyx_k_throw), 0, 0, 1, 1},
  {&__pyx_n_s_to, __pyx_k_to, sizeof(__pyx_k_to), 0, 0, 1, 1},
  {&__pyx_n_s_to_py, __pyx_k_to_py, sizeof(__pyx_k_to_py), 0, 0, 1, 1},
  {&__pyx_n_s_to_types, __pyx_k_to_types, sizeof(__pyx_k_to_types), 0, 0, 1, 1},
  {&__pyx_n_s_tube, __pyx_k_tube, sizeof(__pyx_k_tube), 0, 0, 1, 1},
  {&__pyx_n_s_tubes, __pyx_k_tubes, sizeof(__pyx_k_tubes), 0, 0, 1, 1},
  {&__pyx_n_s_update, __pyx_k_update, sizeof(__pyx_k_update), 0, 0, 1, 1},
  {&__pyx_n_s_update_each_iter, __pyx_k_update_each_iter, sizeof(__pyx_k_update_each_iter), 0, 0, 1, 1},
  {&__pyx_kp_b_utf_8, __pyx_k_utf_8, sizeof(__pyx_k_utf_8), 0, 0, 0, 0},
  {&__pyx_kp_u_utf_8, __pyx_k_utf_8, sizeof(__pyx_k_utf_8), 0, 1, 0, 0},
  {&__pyx_n_s_value, __pyx_k_value, sizeof(__pyx_k_value), 0, 0, 1, 1},
  {&__pyx_n_s_values, __pyx_k_values, sizeof(__pyx_k_values), 0, 0, 1, 1},
  {&__pyx_n_s_verify, __pyx_k_verify, sizeof(__pyx_k_verify), 0, 0, 1, 1},
  {&__pyx_n_s_wrapped, __pyx_k_wrapped, sizeof(__pyx_k_wrapped), 0, 0, 1, 1},
  {&__pyx_n_s_zip, __pyx_k_zip, sizeof(__pyx_k_zip), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_object = __Pyx_GetBuiltinName(__pyx_n_s_object); if (!__pyx_builtin_object) __PYX_ERR(0, 47, __pyx_L1_error)
  __pyx_builtin_TypeError = __Pyx_GetBuiltinName(__pyx_n_s_TypeError); if (!__pyx_builtin_TypeError) __PYX_ERR(1, 2, __pyx_L1_error)
  __pyx_builtin_range = __Pyx_GetBuiltinName(__pyx_n_s_range); if (!__pyx_builtin_range) __PYX_ERR(2, 42, __pyx_L1_error)
  __pyx_builtin_sorted = __Pyx_GetBuiltinName(__pyx_n_s_sorted); if (!__pyx_builtin_sorted) __PYX_ERR(2, 78, __pyx_L1_error)
  __pyx_builtin_max = __Pyx_GetBuiltinName(__pyx_n_s_max); if (!__pyx_builtin_max) __PYX_ERR(2, 77, __pyx_L1_error)
  __pyx_builtin_ValueError = __Pyx_GetBuiltinName(__pyx_n_s_ValueError); if (!__pyx_builtin_ValueError) __PYX_ERR(2, 87, __pyx_L1_error)
  __pyx_builtin_NotImplementedError = __Pyx_GetBuiltinName(__pyx_n_s_NotImplementedError); if (!__pyx_builtin_NotImplementedError) __PYX_ERR(0, 74, __pyx_L1_error)
  __pyx_builtin_IndexError = __Pyx_GetBuiltinName(__pyx_n_s_IndexError); if (!__pyx_builtin_IndexError) __PYX_ERR(3, 284, __pyx_L1_error)
  __pyx_builtin_zip = __Pyx_GetBuiltinName(__pyx_n_s_zip); if (!__pyx_builtin_zip) __PYX_ERR(3, 1060, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.iter cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.iter cannot be converted to a Python object for pickling")
 */
  __pyx_tuple_ = PyTuple_Pack(1, __pyx_kp_s_self_iter_cannot_be_converted_to); if (unlikely(!__pyx_tuple_)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple_);
  __Pyx_GIVEREF(__pyx_tuple_);

  /* "(tree fragment)":4
 *     raise TypeError("self.iter cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.iter cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__2 = PyTuple_Pack(1, __pyx_kp_s_self_iter_cannot_be_converted_to); if (unlikely(!__pyx_tuple__2)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__2);
  __Pyx_GIVEREF(__pyx_tuple__2);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.type cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.type cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__4 = PyTuple_Pack(1, __pyx_kp_s_self_type_cannot_be_converted_to); if (unlikely(!__pyx_tuple__4)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__4);
  __Pyx_GIVEREF(__pyx_tuple__4);

  /* "(tree fragment)":4
 *     raise TypeError("self.type cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.type cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__5 = PyTuple_Pack(1, __pyx_kp_s_self_type_cannot_be_converted_to); if (unlikely(!__pyx_tuple__5)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__5);
  __Pyx_GIVEREF(__pyx_tuple__5);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__6 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__6)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__6);
  __Pyx_GIVEREF(__pyx_tuple__6);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__7 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__7)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__7);
  __Pyx_GIVEREF(__pyx_tuple__7);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__8 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__8)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__8);
  __Pyx_GIVEREF(__pyx_tuple__8);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__9 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__9)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__9);
  __Pyx_GIVEREF(__pyx_tuple__9);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__10 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__10)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__10);
  __Pyx_GIVEREF(__pyx_tuple__10);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__11 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__11)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__11);
  __Pyx_GIVEREF(__pyx_tuple__11);

  /* "pyiter.pxi":87
 *         for chain in self.chains.values():
 *             if seen & chain:
 *                 raise ValueError("Tube in multiple chains")             # <<<<<<<<<<<<<<
 *             seen.update(chain)
 * 
 */
  __pyx_tuple__12 = PyTuple_Pack(1, __pyx_kp_u_Tube_in_multiple_chains); if (unlikely(!__pyx_tuple__12)) __PYX_ERR(2, 87, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__12);
  __Pyx_GIVEREF(__pyx_tuple__12);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__13 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__13)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__13);
  __Pyx_GIVEREF(__pyx_tuple__13);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__14 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__14)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__14);
  __Pyx_GIVEREF(__pyx_tuple__14);

  /* "tubes.pyx":74
 * 
 *     cdef IterWrapper _make_iter(self, args):
 *         raise NotImplementedError("_make_iter")             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __pyx_tuple__15 = PyTuple_Pack(1, __pyx_n_u_make_iter); if (unlikely(!__pyx_tuple__15)) __PYX_ERR(0, 74, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__15);
  __Pyx_GIVEREF(__pyx_tuple__15);

  /* "tubes.pyx":78
 *     @property
 *     def dtype(self):
 *         raise NotImplementedError("dtype")             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __pyx_tuple__16 = PyTuple_Pack(1, __pyx_n_u_dtype); if (unlikely(!__pyx_tuple__16)) __PYX_ERR(0, 78, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__16);
  __Pyx_GIVEREF(__pyx_tuple__16);

  /* "tubes.pyx":82
 *     @property
 *     def _inputs(self):
 *         raise NotImplementedError("_inputs")             # <<<<<<<<<<<<<<
 * 
 *     cpdef _describe_self(self):
 */
  __pyx_tuple__17 = PyTuple_Pack(1, __pyx_n_u_inputs); if (unlikely(!__pyx_tuple__17)) __PYX_ERR(0, 82, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__17);
  __Pyx_GIVEREF(__pyx_tuple__17);

  /* "tubes.pyx":85
 * 
 *     cpdef _describe_self(self):
 *         raise NotImplementedError("_describe_self")             # <<<<<<<<<<<<<<
 * 
 *     def __iter__(self):
 */
  __pyx_tuple__18 = PyTuple_Pack(1, __pyx_n_u_describe_self); if (unlikely(!__pyx_tuple__18)) __PYX_ERR(0, 85, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__18);
  __Pyx_GIVEREF(__pyx_tuple__18);

  /* "tubes.pyx":248
 *                 slot_type = DTYPE_MAP[slot_type]
 *             resolved.append(slot_type)
 *         return Convert(self, resolved, codec=codec.encode('ascii'))             # <<<<<<<<<<<<<<
 * 
 *     def multi(self, *makers):
 */
  __pyx_tuple__21 = PyTuple_Pack(1, __pyx_n_u_ascii); if (unlikely(!__pyx_tuple__21)) __PYX_ERR(0, 248, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__21);
  __Pyx_GIVEREF(__pyx_tuple__21);

  /* "iter_defs.pxi":215
 *         iter_desc = repr(self._iter)
 *         if len(iter_desc) > 20:
 *             iter_desc = iter_desc[:9] + "..." + iter_desc[-9:]             # <<<<<<<<<<<<<<
 *         return f"Each({iter_desc})"
 * 
 */
  __pyx_slice__24 = PySlice_New(Py_None, __pyx_int_9, Py_None); if (unlikely(!__pyx_slice__24)) __PYX_ERR(3, 215, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__24);
  __Pyx_GIVEREF(__pyx_slice__24);
  __pyx_slice__26 = PySlice_New(__pyx_int_neg_9, Py_None, Py_None); if (unlikely(!__pyx_slice__26)) __PYX_ERR(3, 215, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__26);
  __Pyx_GIVEREF(__pyx_slice__26);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__28 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__28)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__28);
  __Pyx_GIVEREF(__pyx_tuple__28);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__29 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__29)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__29);
  __Pyx_GIVEREF(__pyx_tuple__29);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__30 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__30)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__30);
  __Pyx_GIVEREF(__pyx_tuple__30);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__31 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__31)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__31);
  __Pyx_GIVEREF(__pyx_tuple__31);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__33 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__33)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__33);
  __Pyx_GIVEREF(__pyx_tuple__33);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__34 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__34)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__34);
  __Pyx_GIVEREF(__pyx_tuple__34);

  /* "iter_defs.pxi":347
 *         cdef IterWrapper parent = iters[0]
 * 
 *         cdef vector[string] fields = [f.encode('utf-8') for f in self.items]             # <<<<<<<<<<<<<<
 *         cdef Iter *iter = name_lookup_from_dtype(parent.iter, fields)
 * 
 */
  __pyx_tuple__35 = PyTuple_Pack(1, __pyx_kp_u_utf_8); if (unlikely(!__pyx_tuple__35)) __PYX_ERR(3, 347, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__35);
  __Pyx_GIVEREF(__pyx_tuple__35);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__37 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__37)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__37);
  __Pyx_GIVEREF(__pyx_tuple__37);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__38 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__38)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__38);
  __Pyx_GIVEREF(__pyx_tuple__38);

  /* "iter_defs.pxi":419
 *     @property
 *     def dtype(self):
 *         return tuple(d for t in self._inputs[1:] for d in t.dtype)             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __pyx_slice__39 = PySlice_New(__pyx_int_1, Py_None, Py_None); if (unlikely(!__pyx_slice__39)) __PYX_ERR(3, 419, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__39);
  __Pyx_GIVEREF(__pyx_slice__39);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__40 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__40)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__40);
  __Pyx_GIVEREF(__pyx_tuple__40);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__41 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__41)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__41);
  __Pyx_GIVEREF(__pyx_tuple__41);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__42 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__42)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__42);
  __Pyx_GIVEREF(__pyx_tuple__42);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__43 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__43)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__43);
  __Pyx_GIVEREF(__pyx_tuple__43);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__44 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__44)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__44);
  __Pyx_GIVEREF(__pyx_tuple__44);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__45 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__45)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__45);
  __Pyx_GIVEREF(__pyx_tuple__45);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__46 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__46)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__46);
  __Pyx_GIVEREF(__pyx_tuple__46);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__47 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__47)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__47);
  __Pyx_GIVEREF(__pyx_tuple__47);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__48 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__48)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__48);
  __Pyx_GIVEREF(__pyx_tuple__48);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__49 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__49)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__49);
  __Pyx_GIVEREF(__pyx_tuple__49);

  /* "iter_defs.pxi":661
 *         #     raise ValueError("Chain requires all inputs to have the same dtype")
 *         if len(unique_inputs) > 1:
 *             raise ValueError("Chain requires all inputs to have the same dtype")             # <<<<<<<<<<<<<<
 *         cdef ChainIter *iter = new ChainIter(self._make_chains(chains), self._make_iters(iters))
 * 
 */
  __pyx_tuple__50 = PyTuple_Pack(1, __pyx_kp_u_Chain_requires_all_inputs_to_hav); if (unlikely(!__pyx_tuple__50)) __PYX_ERR(3, 661, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__50);
  __Pyx_GIVEREF(__pyx_tuple__50);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__51 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__51)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__51);
  __Pyx_GIVEREF(__pyx_tuple__51);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__52 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__52)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__52);
  __Pyx_GIVEREF(__pyx_tuple__52);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__53 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__53)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__53);
  __Pyx_GIVEREF(__pyx_tuple__53);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__54 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__54)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__54);
  __Pyx_GIVEREF(__pyx_tuple__54);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__55 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__55)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__55);
  __Pyx_GIVEREF(__pyx_tuple__55);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__56 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__56)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__56);
  __Pyx_GIVEREF(__pyx_tuple__56);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__57 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__57)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__57);
  __Pyx_GIVEREF(__pyx_tuple__57);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__58 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__58)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__58);
  __Pyx_GIVEREF(__pyx_tuple__58);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__59 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__59)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__59);
  __Pyx_GIVEREF(__pyx_tuple__59);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__60 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__60)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__60);
  __Pyx_GIVEREF(__pyx_tuple__60);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__61 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__61)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__61);
  __Pyx_GIVEREF(__pyx_tuple__61);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__62 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__62)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__62);
  __Pyx_GIVEREF(__pyx_tuple__62);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__63 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__63)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__63);
  __Pyx_GIVEREF(__pyx_tuple__63);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__64 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__64)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__64);
  __Pyx_GIVEREF(__pyx_tuple__64);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__65 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__65)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__65);
  __Pyx_GIVEREF(__pyx_tuple__65);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__66 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__66)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__66);
  __Pyx_GIVEREF(__pyx_tuple__66);

  /* "iter_defs.pxi":1057
 * 
 *         if len(parent.dtype) < len(self.dtype):
 *             raise ValueError("Convert iter cannot have more elements than parent")             # <<<<<<<<<<<<<<
 *         cdef DType from_dtype
 *         cdef DType to_dtype
 */
  __pyx_tuple__67 = PyTuple_Pack(1, __pyx_kp_u_Convert_iter_cannot_have_more_el); if (unlikely(!__pyx_tuple__67)) __PYX_ERR(3, 1057, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__67);
  __Pyx_GIVEREF(__pyx_tuple__67);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__68 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__68)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__68);
  __Pyx_GIVEREF(__pyx_tuple__68);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__69 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__69)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__69);
  __Pyx_GIVEREF(__pyx_tuple__69);

  /* "chunk.pxi":25
 *         each_inputs = {i for i in chains.inputs if isinstance(i, Each)}
 *         if len(each_inputs) != 1:
 *             raise ValueError("Cannot chunk tubes without a single fixed-sized Each input")             # <<<<<<<<<<<<<<
 *         cdef Each each_input = each_inputs.pop()
 *         try:
 */
  __pyx_tuple__70 = PyTuple_Pack(1, __pyx_kp_u_Cannot_chunk_tubes_without_a_sin); if (unlikely(!__pyx_tuple__70)) __PYX_ERR(5, 25, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__70);
  __Pyx_GIVEREF(__pyx_tuple__70);

  /* "chunk.pxi":30
 *             total_num = len(each_input._iter)
 *         except TypeError:
 *             raise ValueError("Found an Each input, but cannot get len() of it")             # <<<<<<<<<<<<<<
 *         iters = []
 *         cdef vector[Chain] c_chains
 */
  __pyx_tuple__71 = PyTuple_Pack(1, __pyx_kp_u_Found_an_Each_input_but_cannot_g); if (unlikely(!__pyx_tuple__71)) __PYX_ERR(5, 30, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__71);
  __Pyx_GIVEREF(__pyx_tuple__71);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__72 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__72)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__72);
  __Pyx_GIVEREF(__pyx_tuple__72);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__73 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__73)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__73);
  __Pyx_GIVEREF(__pyx_tuple__73);

  /* "chunk.pxi":4
 * from functools import partial
 * 
 * def update_each_iter(object chunk, IterWrapper wrapped):             # <<<<<<<<<<<<<<
 *     cdef Iter *it = wrapped.iter.get()
 *     cdef EachIter *each = <EachIter*>it
 */
  __pyx_tuple__74 = PyTuple_Pack(5, __pyx_n_s_chunk, __pyx_n_s_wrapped, __pyx_n_s_it, __pyx_n_s_each, __pyx_n_s_py_iter); if (unlikely(!__pyx_tuple__74)) __PYX_ERR(5, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__74);
  __Pyx_GIVEREF(__pyx_tuple__74);
  __pyx_codeobj__75 = (PyObject*)__Pyx_PyCode_New(2, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__74, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_chunk_pxi, __pyx_n_s_update_each_iter, 4, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__75)) __PYX_ERR(5, 4, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __pyx_unpickle_Tube(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     if __pyx_checksum != 0xdf446ce:
 *         from pickle import PickleError as __pyx_PickleError
 */
  __pyx_tuple__76 = PyTuple_Pack(5, __pyx_n_s_pyx_type, __pyx_n_s_pyx_checksum, __pyx_n_s_pyx_state, __pyx_n_s_pyx_PickleError, __pyx_n_s_pyx_result); if (unlikely(!__pyx_tuple__76)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__76);
  __Pyx_GIVEREF(__pyx_tuple__76);
  __pyx_codeobj__77 = (PyObject*)__Pyx_PyCode_New(3, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__76, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_pyx_unpickle_Tube, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__77)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_InitGlobals(void) {
  __pyx_umethod_PyDict_Type_items.type = (PyObject*)&PyDict_Type;
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) __PYX_ERR(0, 2, __pyx_L1_error);
  __pyx_int_0 = PyInt_FromLong(0); if (unlikely(!__pyx_int_0)) __PYX_ERR(0, 2, __pyx_L1_error)
  __pyx_int_1 = PyInt_FromLong(1); if (unlikely(!__pyx_int_1)) __PYX_ERR(0, 2, __pyx_L1_error)
  __pyx_int_9 = PyInt_FromLong(9); if (unlikely(!__pyx_int_9)) __PYX_ERR(0, 2, __pyx_L1_error)
  __pyx_int_234112718 = PyInt_FromLong(234112718L); if (unlikely(!__pyx_int_234112718)) __PYX_ERR(0, 2, __pyx_L1_error)
  __pyx_int_neg_1 = PyInt_FromLong(-1); if (unlikely(!__pyx_int_neg_1)) __PYX_ERR(0, 2, __pyx_L1_error)
  __pyx_int_neg_9 = PyInt_FromLong(-9); if (unlikely(!__pyx_int_neg_9)) __PYX_ERR(0, 2, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

#if PY_MAJOR_VERSION < 3
PyMODINIT_FUNC inittubes(void); /*proto*/
PyMODINIT_FUNC inittubes(void)
#else
PyMODINIT_FUNC PyInit_tubes(void); /*proto*/
PyMODINIT_FUNC PyInit_tubes(void)
#if CYTHON_PEP489_MULTI_PHASE_INIT
{
  return PyModuleDef_Init(&__pyx_moduledef);
}
static int __Pyx_copy_spec_to_module(PyObject *spec, PyObject *moddict, const char* from_name, const char* to_name) {
    PyObject *value = PyObject_GetAttrString(spec, from_name);
    int result = 0;
    if (likely(value)) {
        result = PyDict_SetItemString(moddict, to_name, value);
        Py_DECREF(value);
    } else if (PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Clear();
    } else {
        result = -1;
    }
    return result;
}
static PyObject* __pyx_pymod_create(PyObject *spec, CYTHON_UNUSED PyModuleDef *def) {
    PyObject *module = NULL, *moddict, *modname;
    if (__pyx_m)
        return __Pyx_NewRef(__pyx_m);
    modname = PyObject_GetAttrString(spec, "name");
    if (unlikely(!modname)) goto bad;
    module = PyModule_NewObject(modname);
    Py_DECREF(modname);
    if (unlikely(!module)) goto bad;
    moddict = PyModule_GetDict(module);
    if (unlikely(!moddict)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "loader", "__loader__") < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "origin", "__file__") < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "parent", "__package__") < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "submodule_search_locations", "__path__") < 0)) goto bad;
    return module;
bad:
    Py_XDECREF(module);
    return NULL;
}


static int __pyx_pymod_exec_tubes(PyObject *__pyx_pyinit_module)
#endif
#endif
{
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannyDeclarations
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  if (__pyx_m && __pyx_m == __pyx_pyinit_module) return 0;
  #endif
  #if CYTHON_REFNANNY
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
  if (!__Pyx_RefNanny) {
      PyErr_Clear();
      __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
      if (!__Pyx_RefNanny)
          Py_FatalError("failed to import 'refnanny' module");
  }
  #endif
  __Pyx_RefNannySetupContext("PyMODINIT_FUNC PyInit_tubes(void)", 0);
  if (__Pyx_check_binary_version() < 0) __PYX_ERR(0, 2, __pyx_L1_error)
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) __PYX_ERR(0, 2, __pyx_L1_error)
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) __PYX_ERR(0, 2, __pyx_L1_error)
  __pyx_empty_unicode = PyUnicode_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_unicode)) __PYX_ERR(0, 2, __pyx_L1_error)
  #ifdef __Pyx_CyFunction_USED
  if (__pyx_CyFunction_init() < 0) __PYX_ERR(0, 2, __pyx_L1_error)
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) __PYX_ERR(0, 2, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Coroutine_USED
  if (__pyx_Coroutine_init() < 0) __PYX_ERR(0, 2, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) __PYX_ERR(0, 2, __pyx_L1_error)
  #endif
  #ifdef __Pyx_AsyncGen_USED
  if (__pyx_AsyncGen_init() < 0) __PYX_ERR(0, 2, __pyx_L1_error)
  #endif
  #ifdef __Pyx_StopAsyncIteration_USED
  if (__pyx_StopAsyncIteration_init() < 0) __PYX_ERR(0, 2, __pyx_L1_error)
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  #ifdef WITH_THREAD /* Python build with threading support? */
  PyEval_InitThreads();
  #endif
  #endif
  /*--- Module creation code ---*/
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  __pyx_m = __pyx_pyinit_module;
  Py_INCREF(__pyx_m);
  #else
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("tubes", __pyx_methods, 0, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (unlikely(!__pyx_m)) __PYX_ERR(0, 2, __pyx_L1_error)
  #endif
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) __PYX_ERR(0, 2, __pyx_L1_error)
  Py_INCREF(__pyx_d);
  __pyx_b = PyImport_AddModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) __PYX_ERR(0, 2, __pyx_L1_error)
  __pyx_cython_runtime = PyImport_AddModule((char *) "cython_runtime"); if (unlikely(!__pyx_cython_runtime)) __PYX_ERR(0, 2, __pyx_L1_error)
  #if CYTHON_COMPILING_IN_PYPY
  Py_INCREF(__pyx_b);
  #endif
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) __PYX_ERR(0, 2, __pyx_L1_error);
  /*--- Initialize various global constants etc. ---*/
  if (__Pyx_InitGlobals() < 0) __PYX_ERR(0, 2, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) __PYX_ERR(0, 2, __pyx_L1_error)
  #endif
  if (__pyx_module_is_main_tubes) {
    if (PyObject_SetAttrString(__pyx_m, "__name__", __pyx_n_s_main) < 0) __PYX_ERR(0, 2, __pyx_L1_error)
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) __PYX_ERR(0, 2, __pyx_L1_error)
    if (!PyDict_GetItemString(modules, "tubes")) {
      if (unlikely(PyDict_SetItemString(modules, "tubes", __pyx_m) < 0)) __PYX_ERR(0, 2, __pyx_L1_error)
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (__Pyx_InitCachedBuiltins() < 0) __PYX_ERR(0, 2, __pyx_L1_error)
  /*--- Constants init code ---*/
  if (__Pyx_InitCachedConstants() < 0) __PYX_ERR(0, 2, __pyx_L1_error)
  /*--- Global init code ---*/
  __pyx_v_5tubes_UNDEFINED = Py_None; Py_INCREF(Py_None);
  /*--- Variable export code ---*/
  /*--- Function export code ---*/
  /*--- Type init code ---*/
  if (PyType_Ready(&__pyx_type_5tubes_IterWrapper) < 0) __PYX_ERR(4, 39, __pyx_L1_error)
  __pyx_type_5tubes_IterWrapper.tp_print = 0;
  if (PyObject_SetAttrString(__pyx_m, "IterWrapper", (PyObject *)&__pyx_type_5tubes_IterWrapper) < 0) __PYX_ERR(4, 39, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_5tubes_IterWrapper) < 0) __PYX_ERR(4, 39, __pyx_L1_error)
  __pyx_ptype_5tubes_IterWrapper = &__pyx_type_5tubes_IterWrapper;
  if (PyType_Ready(&__pyx_type_5tubes_DType) < 0) __PYX_ERR(0, 23, __pyx_L1_error)
  __pyx_type_5tubes_DType.tp_print = 0;
  if (PyObject_SetAttrString(__pyx_m, "DType", (PyObject *)&__pyx_type_5tubes_DType) < 0) __PYX_ERR(0, 23, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_5tubes_DType) < 0) __PYX_ERR(0, 23, __pyx_L1_error)
  __pyx_ptype_5tubes_DType = &__pyx_type_5tubes_DType;
  if (PyType_Ready(&__pyx_type_5tubes_TubeIter) < 0) __PYX_ERR(2, 13, __pyx_L1_error)
  __pyx_type_5tubes_TubeIter.tp_print = 0;
  if (PyObject_SetAttrString(__pyx_m, "TubeIter", (PyObject *)&__pyx_type_5tubes_TubeIter) < 0) __PYX_ERR(2, 13, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_5tubes_TubeIter) < 0) __PYX_ERR(2, 13, __pyx_L1_error)
  __pyx_ptype_5tubes_TubeIter = &__pyx_type_5tubes_TubeIter;
  __pyx_type_5tubes_TubeSingleIter.tp_base = __pyx_ptype_5tubes_TubeIter;
  if (PyType_Ready(&__pyx_type_5tubes_TubeSingleIter) < 0) __PYX_ERR(2, 24, __pyx_L1_error)
  __pyx_type_5tubes_TubeSingleIter.tp_print = 0;
  if (PyObject_SetAttrString(__pyx_m, "TubeSingleIter", (PyObject *)&__pyx_type_5tubes_TubeSingleIter) < 0) __PYX_ERR(2, 24, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_5tubes_TubeSingleIter) < 0) __PYX_ERR(2, 24, __pyx_L1_error)
  __pyx_ptype_5tubes_TubeSingleIter = &__pyx_type_5tubes_TubeSingleIter;
  __pyx_type_5tubes_TubeMultiIter.tp_base = __pyx_ptype_5tubes_TubeIter;
  if (PyType_Ready(&__pyx_type_5tubes_TubeMultiIter) < 0) __PYX_ERR(2, 33, __pyx_L1_error)
  __pyx_type_5tubes_TubeMultiIter.tp_print = 0;
  if (PyObject_SetAttrString(__pyx_m, "TubeMultiIter", (PyObject *)&__pyx_type_5tubes_TubeMultiIter) < 0) __PYX_ERR(2, 33, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_5tubes_TubeMultiIter) < 0) __PYX_ERR(2, 33, __pyx_L1_error)
  __pyx_ptype_5tubes_TubeMultiIter = &__pyx_type_5tubes_TubeMultiIter;
  __pyx_vtabptr_5tubes_Chains = &__pyx_vtable_5tubes_Chains;
  __pyx_vtable_5tubes_Chains.make_chains_iters = (PyObject *(*)(struct __pyx_obj_5tubes_Chains *, struct __pyx_opt_args_5tubes_6Chains_make_chains_iters *__pyx_optional_args))__pyx_f_5tubes_6Chains_make_chains_iters;
  if (PyType_Ready(&__pyx_type_5tubes_Chains) < 0) __PYX_ERR(2, 45, __pyx_L1_error)
  __pyx_type_5tubes_Chains.tp_print = 0;
  if (__Pyx_SetVtable(__pyx_type_5tubes_Chains.tp_dict, __pyx_vtabptr_5tubes_Chains) < 0) __PYX_ERR(2, 45, __pyx_L1_error)
  if (PyObject_SetAttrString(__pyx_m, "Chains", (PyObject *)&__pyx_type_5tubes_Chains) < 0) __PYX_ERR(2, 45, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_5tubes_Chains) < 0) __PYX_ERR(2, 45, __pyx_L1_error)
  __pyx_ptype_5tubes_Chains = &__pyx_type_5tubes_Chains;
  __pyx_vtabptr_5tubes_Tube = &__pyx_vtable_5tubes_Tube;
  __pyx_vtable_5tubes_Tube._make_iter = (struct __pyx_obj_5tubes_IterWrapper *(*)(struct __pyx_obj_5tubes_Tube *, PyObject *))__pyx_f_5tubes_4Tube__make_iter;
  __pyx_vtable_5tubes_Tube._describe_self = (PyObject *(*)(struct __pyx_obj_5tubes_Tube *, int __pyx_skip_dispatch))__pyx_f_5tubes_4Tube__describe_self;
  __pyx_vtable_5tubes_Tube._repr = (PyObject *(*)(struct __pyx_obj_5tubes_Tube *, struct __pyx_opt_args_5tubes_4Tube__repr *__pyx_optional_args))__pyx_f_5tubes_4Tube__repr;
  __pyx_vtable_5tubes_Tube._set_name_lookup = (PyObject *(*)(struct __pyx_obj_5tubes_Tube *, struct __pyx_obj_5tubes_NameLookup *))__pyx_f_5tubes_4Tube__set_name_lookup;
  __pyx_vtable_5tubes_Tube.name_lookup = (struct __pyx_obj_5tubes_NameLookup *(*)(struct __pyx_obj_5tubes_Tube *))__pyx_f_5tubes_4Tube_name_lookup;
  if (PyType_Ready(&__pyx_type_5tubes_Tube) < 0) __PYX_ERR(0, 63, __pyx_L1_error)
  __pyx_type_5tubes_Tube.tp_print = 0;
  if (__Pyx_SetVtable(__pyx_type_5tubes_Tube.tp_dict, __pyx_vtabptr_5tubes_Tube) < 0) __PYX_ERR(0, 63, __pyx_L1_error)
  if (PyObject_SetAttrString(__pyx_m, "Tube", (PyObject *)&__pyx_type_5tubes_Tube) < 0) __PYX_ERR(0, 63, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_5tubes_Tube) < 0) __PYX_ERR(0, 63, __pyx_L1_error)
  __pyx_ptype_5tubes_Tube = &__pyx_type_5tubes_Tube;
  __pyx_vtabptr_5tubes_Each = &__pyx_vtable_5tubes_Each;
  __pyx_vtable_5tubes_Each.__pyx_base = *__pyx_vtabptr_5tubes_Tube;
  __pyx_vtable_5tubes_Each.__pyx_base._make_iter = (struct __pyx_obj_5tubes_IterWrapper *(*)(struct __pyx_obj_5tubes_Tube *, PyObject *))__pyx_f_5tubes_4Each__make_iter;
  __pyx_vtable_5tubes_Each.__pyx_base._describe_self = (PyObject *(*)(struct __pyx_obj_5tubes_Tube *, int __pyx_skip_dispatch))__pyx_f_5tubes_4Each__describe_self;
  __pyx_vtable_5tubes_Each._ob_to_iter = (ss::PyObj (*)(struct __pyx_obj_5tubes_Each *))__pyx_f_5tubes_4Each__ob_to_iter;
  __pyx_type_5tubes_Each.tp_base = __pyx_ptype_5tubes_Tube;
  if (PyType_Ready(&__pyx_type_5tubes_Each) < 0) __PYX_ERR(3, 155, __pyx_L1_error)
  __pyx_type_5tubes_Each.tp_print = 0;
  if (__Pyx_SetVtable(__pyx_type_5tubes_Each.tp_dict, __pyx_vtabptr_5tubes_Each) < 0) __PYX_ERR(3, 155, __pyx_L1_error)
  if (PyObject_SetAttrString(__pyx_m, "Each", (PyObject *)&__pyx_type_5tubes_Each) < 0) __PYX_ERR(3, 155, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_5tubes_Each) < 0) __PYX_ERR(3, 155, __pyx_L1_error)
  __pyx_ptype_5tubes_Each = &__pyx_type_5tubes_Each;
  __pyx_vtabptr_5tubes_Zip = &__pyx_vtable_5tubes_Zip;
  __pyx_vtable_5tubes_Zip.__pyx_base = *__pyx_vtabptr_5tubes_Tube;
  __pyx_vtable_5tubes_Zip.__pyx_base._make_iter = (struct __pyx_obj_5tubes_IterWrapper *(*)(struct __pyx_obj_5tubes_Tube *, PyObject *))__pyx_f_5tubes_3Zip__make_iter;
  __pyx_vtable_5tubes_Zip.__pyx_base._describe_self = (PyObject *(*)(struct __pyx_obj_5tubes_Tube *, int __pyx_skip_dispatch))__pyx_f_5tubes_3Zip__describe_self;
  __pyx_vtable_5tubes_Zip._make_iters = (std::vector<ss::iter::AnyIter>  (*)(struct __pyx_obj_5tubes_Zip *, PyObject *))__pyx_f_5tubes_3Zip__make_iters;
  __pyx_type_5tubes_Zip.tp_base = __pyx_ptype_5tubes_Tube;
  if (PyType_Ready(&__pyx_type_5tubes_Zip) < 0) __PYX_ERR(3, 220, __pyx_L1_error)
  __pyx_type_5tubes_Zip.tp_print = 0;
  if (__Pyx_SetVtable(__pyx_type_5tubes_Zip.tp_dict, __pyx_vtabptr_5tubes_Zip) < 0) __PYX_ERR(3, 220, __pyx_L1_error)
  if (PyObject_SetAttrString(__pyx_m, "Zip", (PyObject *)&__pyx_type_5tubes_Zip) < 0) __PYX_ERR(3, 220, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_5tubes_Zip) < 0) __PYX_ERR(3, 220, __pyx_L1_error)
  __pyx_ptype_5tubes_Zip = &__pyx_type_5tubes_Zip;
  __pyx_vtabptr_5tubes_SlotGet = &__pyx_vtable_5tubes_SlotGet;
  __pyx_vtable_5tubes_SlotGet.__pyx_base = *__pyx_vtabptr_5tubes_Tube;
  __pyx_vtable_5tubes_SlotGet.__pyx_base._make_iter = (struct __pyx_obj_5tubes_IterWrapper *(*)(struct __pyx_obj_5tubes_Tube *, PyObject *))__pyx_f_5tubes_7SlotGet__make_iter;
  __pyx_vtable_5tubes_SlotGet.__pyx_base._describe_self = (PyObject *(*)(struct __pyx_obj_5tubes_Tube *, int __pyx_skip_dispatch))__pyx_f_5tubes_7SlotGet__describe_self;
  __pyx_type_5tubes_SlotGet.tp_base = __pyx_ptype_5tubes_Tube;
  if (PyType_Ready(&__pyx_type_5tubes_SlotGet) < 0) __PYX_ERR(3, 272, __pyx_L1_error)
  __pyx_type_5tubes_SlotGet.tp_print = 0;
  if (__Pyx_SetVtable(__pyx_type_5tubes_SlotGet.tp_dict, __pyx_vtabptr_5tubes_SlotGet) < 0) __PYX_ERR(3, 272, __pyx_L1_error)
  if (PyObject_SetAttrString(__pyx_m, "SlotGet", (PyObject *)&__pyx_type_5tubes_SlotGet) < 0) __PYX_ERR(3, 272, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_5tubes_SlotGet) < 0) __PYX_ERR(3, 272, __pyx_L1_error)
  __pyx_ptype_5tubes_SlotGet = &__pyx_type_5tubes_SlotGet;
  __pyx_vtabptr_5tubes_NameLookup = &__pyx_vtable_5tubes_NameLookup;
  __pyx_vtable_5tubes_NameLookup.__pyx_base = *__pyx_vtabptr_5tubes_Tube;
  __pyx_vtable_5tubes_NameLookup.__pyx_base._make_iter = (struct __pyx_obj_5tubes_IterWrapper *(*)(struct __pyx_obj_5tubes_Tube *, PyObject *))__pyx_f_5tubes_10NameLookup__make_iter;
  __pyx_vtable_5tubes_NameLookup.__pyx_base._describe_self = (PyObject *(*)(struct __pyx_obj_5tubes_Tube *, int __pyx_skip_dispatch))__pyx_f_5tubes_10NameLookup__describe_self;
  __pyx_vtable_5tubes_NameLookup.lookup_name = (PyObject *(*)(struct __pyx_obj_5tubes_NameLookup *, PyObject *, PyObject *))__pyx_f_5tubes_10NameLookup_lookup_name;
  __pyx_vtable_5tubes_NameLookup.get_slot_shared = (PyObject *(*)(struct __pyx_obj_5tubes_NameLookup *, size_t, PyObject *))__pyx_f_5tubes_10NameLookup_get_slot_shared;
  __pyx_type_5tubes_NameLookup.tp_base = __pyx_ptype_5tubes_Tube;
  if (PyType_Ready(&__pyx_type_5tubes_NameLookup) < 0) __PYX_ERR(3, 324, __pyx_L1_error)
  __pyx_type_5tubes_NameLookup.tp_print = 0;
  if (__Pyx_SetVtable(__pyx_type_5tubes_NameLookup.tp_dict, __pyx_vtabptr_5tubes_NameLookup) < 0) __PYX_ERR(3, 324, __pyx_L1_error)
  if (PyObject_SetAttrString(__pyx_m, "NameLookup", (PyObject *)&__pyx_type_5tubes_NameLookup) < 0) __PYX_ERR(3, 324, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_5tubes_NameLookup) < 0) __PYX_ERR(3, 324, __pyx_L1_error)
  __pyx_ptype_5tubes_NameLookup = &__pyx_type_5tubes_NameLookup;
  __pyx_vtabptr_5tubes_Multi = &__pyx_vtable_5tubes_Multi;
  __pyx_vtable_5tubes_Multi.__pyx_base = *__pyx_vtabptr_5tubes_Tube;
  __pyx_vtable_5tubes_Multi.__pyx_base._make_iter = (struct __pyx_obj_5tubes_IterWrapper *(*)(struct __pyx_obj_5tubes_Tube *, PyObject *))__pyx_f_5tubes_5Multi__make_iter;
  __pyx_vtable_5tubes_Multi.__pyx_base._describe_self = (PyObject *(*)(struct __pyx_obj_5tubes_Tube *, int __pyx_skip_dispatch))__pyx_f_5tubes_5Multi__describe_self;
  __pyx_vtable_5tubes_Multi._make_iters = (std::vector<ss::iter::AnyIter>  (*)(struct __pyx_obj_5tubes_Multi *, PyObject *))__pyx_f_5tubes_5Multi__make_iters;
  __pyx_type_5tubes_Multi.tp_base = __pyx_ptype_5tubes_Tube;
  if (PyType_Ready(&__pyx_type_5tubes_Multi) < 0) __PYX_ERR(3, 392, __pyx_L1_error)
  __pyx_type_5tubes_Multi.tp_print = 0;
  if (__Pyx_SetVtable(__pyx_type_5tubes_Multi.tp_dict, __pyx_vtabptr_5tubes_Multi) < 0) __PYX_ERR(3, 392, __pyx_L1_error)
  if (PyObject_SetAttrString(__pyx_m, "Multi", (PyObject *)&__pyx_type_5tubes_Multi) < 0) __PYX_ERR(3, 392, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_5tubes_Multi) < 0) __PYX_ERR(3, 392, __pyx_L1_error)
  __pyx_ptype_5tubes_Multi = &__pyx_type_5tubes_Multi;
  __pyx_vtabptr_5tubes_JsonParse = &__pyx_vtable_5tubes_JsonParse;
  __pyx_vtable_5tubes_JsonParse.__pyx_base = *__pyx_vtabptr_5tubes_Tube;
  __pyx_vtable_5tubes_JsonParse.__pyx_base._make_iter = (struct __pyx_obj_5tubes_IterWrapper *(*)(struct __pyx_obj_5tubes_Tube *, PyObject *))__pyx_f_5tubes_9JsonParse__make_iter;
  __pyx_vtable_5tubes_JsonParse.__pyx_base._describe_self = (PyObject *(*)(struct __pyx_obj_5tubes_Tube *, int __pyx_skip_dispatch))__pyx_f_5tubes_9JsonParse__describe_self;
  __pyx_type_5tubes_JsonParse.tp_base = __pyx_ptype_5tubes_Tube;
  if (PyType_Ready(&__pyx_type_5tubes_JsonParse) < 0) __PYX_ERR(3, 449, __pyx_L1_error)
  __pyx_type_5tubes_JsonParse.tp_print = 0;
  if (__Pyx_SetVtable(__pyx_type_5tubes_JsonParse.tp_dict, __pyx_vtabptr_5tubes_JsonParse) < 0) __PYX_ERR(3, 449, __pyx_L1_error)
  if (PyObject_SetAttrString(__pyx_m, "JsonParse", (PyObject *)&__pyx_type_5tubes_JsonParse) < 0) __PYX_ERR(3, 449, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_5tubes_JsonParse) < 0) __PYX_ERR(3, 449, __pyx_L1_error)
  __pyx_ptype_5tubes_JsonParse = &__pyx_type_5tubes_JsonParse;
  __pyx_vtabptr_5tubes_ToPy = &__pyx_vtable_5tubes_ToPy;
  __pyx_vtable_5tubes_ToPy.__pyx_base = *__pyx_vtabptr_5tubes_Tube;
  __pyx_vtable_5tubes_ToPy.__pyx_base._make_iter = (struct __pyx_obj_5tubes_IterWrapper *(*)(struct __pyx_obj_5tubes_Tube *, PyObject *))__pyx_f_5tubes_4ToPy__make_iter;
  __pyx_vtable_5tubes_ToPy.__pyx_base._describe_self = (PyObject *(*)(struct __pyx_obj_5tubes_Tube *, int __pyx_skip_dispatch))__pyx_f_5tubes_4ToPy__describe_self;
  __pyx_type_5tubes_ToPy.tp_base = __pyx_ptype_5tubes_Tube;
  if (PyType_Ready(&__pyx_type_5tubes_ToPy) < 0) __PYX_ERR(3, 496, __pyx_L1_error)
  __pyx_type_5tubes_ToPy.tp_print = 0;
  if (__Pyx_SetVtable(__pyx_type_5tubes_ToPy.tp_dict, __pyx_vtabptr_5tubes_ToPy) < 0) __PYX_ERR(3, 496, __pyx_L1_error)
  if (PyObject_SetAttrString(__pyx_m, "ToPy", (PyObject *)&__pyx_type_5tubes_ToPy) < 0) __PYX_ERR(3, 496, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_5tubes_ToPy) < 0) __PYX_ERR(3, 496, __pyx_L1_error)
  __pyx_ptype_5tubes_ToPy = &__pyx_type_5tubes_ToPy;
  __pyx_vtabptr_5tubes_SkipUnless = &__pyx_vtable_5tubes_SkipUnless;
  __pyx_vtable_5tubes_SkipUnless.__pyx_base = *__pyx_vtabptr_5tubes_Tube;
  __pyx_vtable_5tubes_SkipUnless.__pyx_base._make_iter = (struct __pyx_obj_5tubes_IterWrapper *(*)(struct __pyx_obj_5tubes_Tube *, PyObject *))__pyx_f_5tubes_10SkipUnless__make_iter;
  __pyx_vtable_5tubes_SkipUnless.__pyx_base._describe_self = (PyObject *(*)(struct __pyx_obj_5tubes_Tube *, int __pyx_skip_dispatch))__pyx_f_5tubes_10SkipUnless__describe_self;
  __pyx_type_5tubes_SkipUnless.tp_base = __pyx_ptype_5tubes_Tube;
  if (PyType_Ready(&__pyx_type_5tubes_SkipUnless) < 0) __PYX_ERR(3, 540, __pyx_L1_error)
  __pyx_type_5tubes_SkipUnless.tp_print = 0;
  if (__Pyx_SetVtable(__pyx_type_5tubes_SkipUnless.tp_dict, __pyx_vtabptr_5tubes_SkipUnless) < 0) __PYX_ERR(3, 540, __pyx_L1_error)
  if (PyObject_SetAttrString(__pyx_m, "SkipUnless", (PyObject *)&__pyx_type_5tubes_SkipUnless) < 0) __PYX_ERR(3, 540, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_5tubes_SkipUnless) < 0) __PYX_ERR(3, 540, __pyx_L1_error)
  __pyx_ptype_5tubes_SkipUnless = &__pyx_type_5tubes_SkipUnless;
  __pyx_vtabptr_5tubes_ReadFile = &__pyx_vtable_5tubes_ReadFile;
  __pyx_vtable_5tubes_ReadFile.__pyx_base = *__pyx_vtabptr_5tubes_Tube;
  __pyx_vtable_5tubes_ReadFile.__pyx_base._make_iter = (struct __pyx_obj_5tubes_IterWrapper *(*)(struct __pyx_obj_5tubes_Tube *, PyObject *))__pyx_f_5tubes_8ReadFile__make_iter;
  __pyx_vtable_5tubes_ReadFile.__pyx_base._describe_self = (PyObject *(*)(struct __pyx_obj_5tubes_Tube *, int __pyx_skip_dispatch))__pyx_f_5tubes_8ReadFile__describe_self;
  __pyx_type_5tubes_ReadFile.tp_base = __pyx_ptype_5tubes_Tube;
  if (PyType_Ready(&__pyx_type_5tubes_ReadFile) < 0) __PYX_ERR(3, 589, __pyx_L1_error)
  __pyx_type_5tubes_ReadFile.tp_print = 0;
  if (__Pyx_SetVtable(__pyx_type_5tubes_ReadFile.tp_dict, __pyx_vtabptr_5tubes_ReadFile) < 0) __PYX_ERR(3, 589, __pyx_L1_error)
  if (PyObject_SetAttrString(__pyx_m, "ReadFile", (PyObject *)&__pyx_type_5tubes_ReadFile) < 0) __PYX_ERR(3, 589, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_5tubes_ReadFile) < 0) __PYX_ERR(3, 589, __pyx_L1_error)
  __pyx_ptype_5tubes_ReadFile = &__pyx_type_5tubes_ReadFile;
  __pyx_vtabptr_5tubes_ChainTubes = &__pyx_vtable_5tubes_ChainTubes;
  __pyx_vtable_5tubes_ChainTubes.__pyx_base = *__pyx_vtabptr_5tubes_Tube;
  __pyx_vtable_5tubes_ChainTubes.__pyx_base._make_iter = (struct __pyx_obj_5tubes_IterWrapper *(*)(struct __pyx_obj_5tubes_Tube *, PyObject *))__pyx_f_5tubes_10ChainTubes__make_iter;
  __pyx_vtable_5tubes_ChainTubes.__pyx_base._describe_self = (PyObject *(*)(struct __pyx_obj_5tubes_Tube *, int __pyx_skip_dispatch))__pyx_f_5tubes_10ChainTubes__describe_self;
  __pyx_vtable_5tubes_ChainTubes._make_iters = (std::vector<ss::iter::AnyIter>  (*)(struct __pyx_obj_5tubes_ChainTubes *, PyObject *))__pyx_f_5tubes_10ChainTubes__make_iters;
  __pyx_vtable_5tubes_ChainTubes._make_chains = (std::vector<struct ss::iter::Chain>  (*)(struct __pyx_obj_5tubes_ChainTubes *, PyObject *))__pyx_f_5tubes_10ChainTubes__make_chains;
  __pyx_type_5tubes_ChainTubes.tp_base = __pyx_ptype_5tubes_Tube;
  if (PyType_Ready(&__pyx_type_5tubes_ChainTubes) < 0) __PYX_ERR(3, 636, __pyx_L1_error)
  __pyx_type_5tubes_ChainTubes.tp_print = 0;
  if (__Pyx_SetVtable(__pyx_type_5tubes_ChainTubes.tp_dict, __pyx_vtabptr_5tubes_ChainTubes) < 0) __PYX_ERR(3, 636, __pyx_L1_error)
  if (PyObject_SetAttrString(__pyx_m, "ChainTubes", (PyObject *)&__pyx_type_5tubes_ChainTubes) < 0) __PYX_ERR(3, 636, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_5tubes_ChainTubes) < 0) __PYX_ERR(3, 636, __pyx_L1_error)
  __pyx_ptype_5tubes_ChainTubes = &__pyx_type_5tubes_ChainTubes;
  __pyx_vtabptr_5tubes_Skip = &__pyx_vtable_5tubes_Skip;
  __pyx_vtable_5tubes_Skip.__pyx_base = *__pyx_vtabptr_5tubes_Tube;
  __pyx_vtable_5tubes_Skip.__pyx_base._make_iter = (struct __pyx_obj_5tubes_IterWrapper *(*)(struct __pyx_obj_5tubes_Tube *, PyObject *))__pyx_f_5tubes_4Skip__make_iter;
  __pyx_vtable_5tubes_Skip.__pyx_base._describe_self = (PyObject *(*)(struct __pyx_obj_5tubes_Tube *, int __pyx_skip_dispatch))__pyx_f_5tubes_4Skip__describe_self;
  __pyx_type_5tubes_Skip.tp_base = __pyx_ptype_5tubes_Tube;
  if (PyType_Ready(&__pyx_type_5tubes_Skip) < 0) __PYX_ERR(3, 703, __pyx_L1_error)
  __pyx_type_5tubes_Skip.tp_print = 0;
  if (__Pyx_SetVtable(__pyx_type_5tubes_Skip.tp_dict, __pyx_vtabptr_5tubes_Skip) < 0) __PYX_ERR(3, 703, __pyx_L1_error)
  if (PyObject_SetAttrString(__pyx_m, "Skip", (PyObject *)&__pyx_type_5tubes_Skip) < 0) __PYX_ERR(3, 703, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_5tubes_Skip) < 0) __PYX_ERR(3, 703, __pyx_L1_error)
  __pyx_ptype_5tubes_Skip = &__pyx_type_5tubes_Skip;
  __pyx_vtabptr_5tubes_FileMap = &__pyx_vtable_5tubes_FileMap;
  __pyx_vtable_5tubes_FileMap.__pyx_base = *__pyx_vtabptr_5tubes_Tube;
  __pyx_vtable_5tubes_FileMap.__pyx_base._make_iter = (struct __pyx_obj_5tubes_IterWrapper *(*)(struct __pyx_obj_5tubes_Tube *, PyObject *))__pyx_f_5tubes_7FileMap__make_iter;
  __pyx_vtable_5tubes_FileMap.__pyx_base._describe_self = (PyObject *(*)(struct __pyx_obj_5tubes_Tube *, int __pyx_skip_dispatch))__pyx_f_5tubes_7FileMap__describe_self;
  __pyx_type_5tubes_FileMap.tp_base = __pyx_ptype_5tubes_Tube;
  if (PyType_Ready(&__pyx_type_5tubes_FileMap) < 0) __PYX_ERR(3, 749, __pyx_L1_error)
  __pyx_type_5tubes_FileMap.tp_print = 0;
  if (__Pyx_SetVtable(__pyx_type_5tubes_FileMap.tp_dict, __pyx_vtabptr_5tubes_FileMap) < 0) __PYX_ERR(3, 749, __pyx_L1_error)
  if (PyObject_SetAttrString(__pyx_m, "FileMap", (PyObject *)&__pyx_type_5tubes_FileMap) < 0) __PYX_ERR(3, 749, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_5tubes_FileMap) < 0) __PYX_ERR(3, 749, __pyx_L1_error)
  __pyx_ptype_5tubes_FileMap = &__pyx_type_5tubes_FileMap;
  __pyx_vtabptr_5tubes_Gunzip = &__pyx_vtable_5tubes_Gunzip;
  __pyx_vtable_5tubes_Gunzip.__pyx_base = *__pyx_vtabptr_5tubes_Tube;
  __pyx_vtable_5tubes_Gunzip.__pyx_base._make_iter = (struct __pyx_obj_5tubes_IterWrapper *(*)(struct __pyx_obj_5tubes_Tube *, PyObject *))__pyx_f_5tubes_6Gunzip__make_iter;
  __pyx_vtable_5tubes_Gunzip.__pyx_base._describe_self = (PyObject *(*)(struct __pyx_obj_5tubes_Tube *, int __pyx_skip_dispatch))__pyx_f_5tubes_6Gunzip__describe_self;
  __pyx_type_5tubes_Gunzip.tp_base = __pyx_ptype_5tubes_Tube;
  if (PyType_Ready(&__pyx_type_5tubes_Gunzip) < 0) __PYX_ERR(3, 796, __pyx_L1_error)
  __pyx_type_5tubes_Gunzip.tp_print = 0;
  if (__Pyx_SetVtable(__pyx_type_5tubes_Gunzip.tp_dict, __pyx_vtabptr_5tubes_Gunzip) < 0) __PYX_ERR(3, 796, __pyx_L1_error)
  if (PyObject_SetAttrString(__pyx_m, "Gunzip", (PyObject *)&__pyx_type_5tubes_Gunzip) < 0) __PYX_ERR(3, 796, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_5tubes_Gunzip) < 0) __PYX_ERR(3, 796, __pyx_L1_error)
  __pyx_ptype_5tubes_Gunzip = &__pyx_type_5tubes_Gunzip;
  __pyx_vtabptr_5tubes_Count = &__pyx_vtable_5tubes_Count;
  __pyx_vtable_5tubes_Count.__pyx_base = *__pyx_vtabptr_5tubes_Tube;
  __pyx_vtable_5tubes_Count.__pyx_base._make_iter = (struct __pyx_obj_5tubes_IterWrapper *(*)(struct __pyx_obj_5tubes_Tube *, PyObject *))__pyx_f_5tubes_5Count__make_iter;
  __pyx_vtable_5tubes_Count.__pyx_base._describe_self = (PyObject *(*)(struct __pyx_obj_5tubes_Tube *, int __pyx_skip_dispatch))__pyx_f_5tubes_5Count__describe_self;
  __pyx_type_5tubes_Count.tp_base = __pyx_ptype_5tubes_Tube;
  if (PyType_Ready(&__pyx_type_5tubes_Count) < 0) __PYX_ERR(3, 842, __pyx_L1_error)
  __pyx_type_5tubes_Count.tp_print = 0;
  if (__Pyx_SetVtable(__pyx_type_5tubes_Count.tp_dict, __pyx_vtabptr_5tubes_Count) < 0) __PYX_ERR(3, 842, __pyx_L1_error)
  if (PyObject_SetAttrString(__pyx_m, "Count", (PyObject *)&__pyx_type_5tubes_Count) < 0) __PYX_ERR(3, 842, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_5tubes_Count) < 0) __PYX_ERR(3, 842, __pyx_L1_error)
  __pyx_ptype_5tubes_Count = &__pyx_type_5tubes_Count;
  __pyx_vtabptr_5tubes_Compare = &__pyx_vtable_5tubes_Compare;
  __pyx_vtable_5tubes_Compare.__pyx_base = *__pyx_vtabptr_5tubes_Tube;
  __pyx_vtable_5tubes_Compare.__pyx_base._make_iter = (struct __pyx_obj_5tubes_IterWrapper *(*)(struct __pyx_obj_5tubes_Tube *, PyObject *))__pyx_f_5tubes_7Compare__make_iter;
  __pyx_vtable_5tubes_Compare.__pyx_base._describe_self = (PyObject *(*)(struct __pyx_obj_5tubes_Tube *, int __pyx_skip_dispatch))__pyx_f_5tubes_7Compare__describe_self;
  __pyx_type_5tubes_Compare.tp_base = __pyx_ptype_5tubes_Tube;
  if (PyType_Ready(&__pyx_type_5tubes_Compare) < 0) __PYX_ERR(3, 898, __pyx_L1_error)
  __pyx_type_5tubes_Compare.tp_print = 0;
  if (__Pyx_SetVtable(__pyx_type_5tubes_Compare.tp_dict, __pyx_vtabptr_5tubes_Compare) < 0) __PYX_ERR(3, 898, __pyx_L1_error)
  if (PyObject_SetAttrString(__pyx_m, "Compare", (PyObject *)&__pyx_type_5tubes_Compare) < 0) __PYX_ERR(3, 898, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_5tubes_Compare) < 0) __PYX_ERR(3, 898, __pyx_L1_error)
  __pyx_ptype_5tubes_Compare = &__pyx_type_5tubes_Compare;
  __pyx_vtabptr_5tubes_First = &__pyx_vtable_5tubes_First;
  __pyx_vtable_5tubes_First.__pyx_base = *__pyx_vtabptr_5tubes_Tube;
  __pyx_vtable_5tubes_First.__pyx_base._make_iter = (struct __pyx_obj_5tubes_IterWrapper *(*)(struct __pyx_obj_5tubes_Tube *, PyObject *))__pyx_f_5tubes_5First__make_iter;
  __pyx_vtable_5tubes_First.__pyx_base._describe_self = (PyObject *(*)(struct __pyx_obj_5tubes_Tube *, int __pyx_skip_dispatch))__pyx_f_5tubes_5First__describe_self;
  __pyx_type_5tubes_First.tp_base = __pyx_ptype_5tubes_Tube;
  if (PyType_Ready(&__pyx_type_5tubes_First) < 0) __PYX_ERR(3, 948, __pyx_L1_error)
  __pyx_type_5tubes_First.tp_print = 0;
  if (__Pyx_SetVtable(__pyx_type_5tubes_First.tp_dict, __pyx_vtabptr_5tubes_First) < 0) __PYX_ERR(3, 948, __pyx_L1_error)
  if (PyObject_SetAttrString(__pyx_m, "First", (PyObject *)&__pyx_type_5tubes_First) < 0) __PYX_ERR(3, 948, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_5tubes_First) < 0) __PYX_ERR(3, 948, __pyx_L1_error)
  __pyx_ptype_5tubes_First = &__pyx_type_5tubes_First;
  __pyx_vtabptr_5tubes_Split = &__pyx_vtable_5tubes_Split;
  __pyx_vtable_5tubes_Split.__pyx_base = *__pyx_vtabptr_5tubes_Tube;
  __pyx_vtable_5tubes_Split.__pyx_base._make_iter = (struct __pyx_obj_5tubes_IterWrapper *(*)(struct __pyx_obj_5tubes_Tube *, PyObject *))__pyx_f_5tubes_5Split__make_iter;
  __pyx_vtable_5tubes_Split.__pyx_base._describe_self = (PyObject *(*)(struct __pyx_obj_5tubes_Tube *, int __pyx_skip_dispatch))__pyx_f_5tubes_5Split__describe_self;
  __pyx_type_5tubes_Split.tp_base = __pyx_ptype_5tubes_Tube;
  if (PyType_Ready(&__pyx_type_5tubes_Split) < 0) __PYX_ERR(3, 994, __pyx_L1_error)
  __pyx_type_5tubes_Split.tp_print = 0;
  if (__Pyx_SetVtable(__pyx_type_5tubes_Split.tp_dict, __pyx_vtabptr_5tubes_Split) < 0) __PYX_ERR(3, 994, __pyx_L1_error)
  if (PyObject_SetAttrString(__pyx_m, "Split", (PyObject *)&__pyx_type_5tubes_Split) < 0) __PYX_ERR(3, 994, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_5tubes_Split) < 0) __PYX_ERR(3, 994, __pyx_L1_error)
  __pyx_ptype_5tubes_Split = &__pyx_type_5tubes_Split;
  __pyx_vtabptr_5tubes_Convert = &__pyx_vtable_5tubes_Convert;
  __pyx_vtable_5tubes_Convert.__pyx_base = *__pyx_vtabptr_5tubes_Tube;
  __pyx_vtable_5tubes_Convert.__pyx_base._make_iter = (struct __pyx_obj_5tubes_IterWrapper *(*)(struct __pyx_obj_5tubes_Tube *, PyObject *))__pyx_f_5tubes_7Convert__make_iter;
  __pyx_vtable_5tubes_Convert.__pyx_base._describe_self = (PyObject *(*)(struct __pyx_obj_5tubes_Tube *, int __pyx_skip_dispatch))__pyx_f_5tubes_7Convert__describe_self;
  __pyx_vtable_5tubes_Convert.dtype_vec = (std::vector<ss::iter::ScalarType>  (*)(struct __pyx_obj_5tubes_Convert *))__pyx_f_5tubes_7Convert_dtype_vec;
  __pyx_type_5tubes_Convert.tp_base = __pyx_ptype_5tubes_Tube;
  if (PyType_Ready(&__pyx_type_5tubes_Convert) < 0) __PYX_ERR(3, 1045, __pyx_L1_error)
  __pyx_type_5tubes_Convert.tp_print = 0;
  if (__Pyx_SetVtable(__pyx_type_5tubes_Convert.tp_dict, __pyx_vtabptr_5tubes_Convert) < 0) __PYX_ERR(3, 1045, __pyx_L1_error)
  if (PyObject_SetAttrString(__pyx_m, "Convert", (PyObject *)&__pyx_type_5tubes_Convert) < 0) __PYX_ERR(3, 1045, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_5tubes_Convert) < 0) __PYX_ERR(3, 1045, __pyx_L1_error)
  __pyx_ptype_5tubes_Convert = &__pyx_type_5tubes_Convert;
  __pyx_vtabptr_5tubes_Chunk = &__pyx_vtable_5tubes_Chunk;
  __pyx_vtable_5tubes_Chunk.__pyx_base = *__pyx_vtabptr_5tubes_Tube;
  __pyx_vtable_5tubes_Chunk.__pyx_base._make_iter = (struct __pyx_obj_5tubes_IterWrapper *(*)(struct __pyx_obj_5tubes_Tube *, PyObject *))__pyx_f_5tubes_5Chunk__make_iter;
  __pyx_vtable_5tubes_Chunk.__pyx_base._describe_self = (PyObject *(*)(struct __pyx_obj_5tubes_Tube *, int __pyx_skip_dispatch))__pyx_f_5tubes_5Chunk__describe_self;
  __pyx_vtable_5tubes_Chunk._make_iters = (std::vector<ss::iter::AnyIter>  (*)(struct __pyx_obj_5tubes_Chunk *, PyObject *))__pyx_f_5tubes_5Chunk__make_iters;
  __pyx_type_5tubes_Chunk.tp_base = __pyx_ptype_5tubes_Tube;
  if (PyType_Ready(&__pyx_type_5tubes_Chunk) < 0) __PYX_ERR(5, 12, __pyx_L1_error)
  __pyx_type_5tubes_Chunk.tp_print = 0;
  if (__Pyx_SetVtable(__pyx_type_5tubes_Chunk.tp_dict, __pyx_vtabptr_5tubes_Chunk) < 0) __PYX_ERR(5, 12, __pyx_L1_error)
  if (PyObject_SetAttrString(__pyx_m, "Chunk", (PyObject *)&__pyx_type_5tubes_Chunk) < 0) __PYX_ERR(5, 12, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_5tubes_Chunk) < 0) __PYX_ERR(5, 12, __pyx_L1_error)
  __pyx_ptype_5tubes_Chunk = &__pyx_type_5tubes_Chunk;
  if (PyType_Ready(&__pyx_type_5tubes___pyx_scope_struct____next__) < 0) __PYX_ERR(2, 39, __pyx_L1_error)
  __pyx_type_5tubes___pyx_scope_struct____next__.tp_print = 0;
  __pyx_ptype_5tubes___pyx_scope_struct____next__ = &__pyx_type_5tubes___pyx_scope_struct____next__;
  if (PyType_Ready(&__pyx_type_5tubes___pyx_scope_struct_1_genexpr) < 0) __PYX_ERR(2, 42, __pyx_L1_error)
  __pyx_type_5tubes___pyx_scope_struct_1_genexpr.tp_print = 0;
  __pyx_ptype_5tubes___pyx_scope_struct_1_genexpr = &__pyx_type_5tubes___pyx_scope_struct_1_genexpr;
  if (PyType_Ready(&__pyx_type_5tubes___pyx_scope_struct_2_ordered) < 0) __PYX_ERR(2, 76, __pyx_L1_error)
  __pyx_type_5tubes___pyx_scope_struct_2_ordered.tp_print = 0;
  __pyx_ptype_5tubes___pyx_scope_struct_2_ordered = &__pyx_type_5tubes___pyx_scope_struct_2_ordered;
  if (PyType_Ready(&__pyx_type_5tubes___pyx_scope_struct_3___pyx_lambda_funcdef_lambda1) < 0) __PYX_ERR(2, 77, __pyx_L1_error)
  __pyx_type_5tubes___pyx_scope_struct_3___pyx_lambda_funcdef_lambda1.tp_print = 0;
  __pyx_ptype_5tubes___pyx_scope_struct_3___pyx_lambda_funcdef_lambda1 = &__pyx_type_5tubes___pyx_scope_struct_3___pyx_lambda_funcdef_lambda1;
  if (PyType_Ready(&__pyx_type_5tubes___pyx_scope_struct_4_genexpr) < 0) __PYX_ERR(2, 77, __pyx_L1_error)
  __pyx_type_5tubes___pyx_scope_struct_4_genexpr.tp_print = 0;
  __pyx_ptype_5tubes___pyx_scope_struct_4_genexpr = &__pyx_type_5tubes___pyx_scope_struct_4_genexpr;
  if (PyType_Ready(&__pyx_type_5tubes___pyx_scope_struct_5___get__) < 0) __PYX_ERR(3, 243, __pyx_L1_error)
  __pyx_type_5tubes___pyx_scope_struct_5___get__.tp_print = 0;
  __pyx_ptype_5tubes___pyx_scope_struct_5___get__ = &__pyx_type_5tubes___pyx_scope_struct_5___get__;
  if (PyType_Ready(&__pyx_type_5tubes___pyx_scope_struct_6_genexpr) < 0) __PYX_ERR(3, 244, __pyx_L1_error)
  __pyx_type_5tubes___pyx_scope_struct_6_genexpr.tp_print = 0;
  __pyx_ptype_5tubes___pyx_scope_struct_6_genexpr = &__pyx_type_5tubes___pyx_scope_struct_6_genexpr;
  if (PyType_Ready(&__pyx_type_5tubes___pyx_scope_struct_7___get__) < 0) __PYX_ERR(3, 418, __pyx_L1_error)
  __pyx_type_5tubes___pyx_scope_struct_7___get__.tp_print = 0;
  __pyx_ptype_5tubes___pyx_scope_struct_7___get__ = &__pyx_type_5tubes___pyx_scope_struct_7___get__;
  if (PyType_Ready(&__pyx_type_5tubes___pyx_scope_struct_8_genexpr) < 0) __PYX_ERR(3, 419, __pyx_L1_error)
  __pyx_type_5tubes___pyx_scope_struct_8_genexpr.tp_print = 0;
  __pyx_ptype_5tubes___pyx_scope_struct_8_genexpr = &__pyx_type_5tubes___pyx_scope_struct_8_genexpr;
  if (PyType_Ready(&__pyx_type_5tubes___pyx_scope_struct_9___get__) < 0) __PYX_ERR(3, 671, __pyx_L1_error)
  __pyx_type_5tubes___pyx_scope_struct_9___get__.tp_print = 0;
  __pyx_ptype_5tubes___pyx_scope_struct_9___get__ = &__pyx_type_5tubes___pyx_scope_struct_9___get__;
  if (PyType_Ready(&__pyx_type_5tubes___pyx_scope_struct_10_genexpr) < 0) __PYX_ERR(3, 672, __pyx_L1_error)
  __pyx_type_5tubes___pyx_scope_struct_10_genexpr.tp_print = 0;
  __pyx_ptype_5tubes___pyx_scope_struct_10_genexpr = &__pyx_type_5tubes___pyx_scope_struct_10_genexpr;
  /*--- Type import code ---*/
  __pyx_ptype_7cpython_4type_type = __Pyx_ImportType(__Pyx_BUILTIN_MODULE_NAME, "type", 
  #if CYTHON_COMPILING_IN_PYPY
  sizeof(PyTypeObject),
  #else
  sizeof(PyHeapTypeObject),
  #endif
  0); if (unlikely(!__pyx_ptype_7cpython_4type_type)) __PYX_ERR(6, 9, __pyx_L1_error)
  /*--- Variable import code ---*/
  /*--- Function import code ---*/
  /*--- Execution code ---*/
  #if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
  if (__Pyx_patch_abc() < 0) __PYX_ERR(0, 2, __pyx_L1_error)
  #endif

  /* "tubes.pyx":9
 * from cpython.object cimport Py_LT, Py_LE, Py_EQ, Py_NE, Py_GT, Py_GE
 * 
 * __doc__ = """             # <<<<<<<<<<<<<<
 * Tubes
 * -------
 */
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_doc, __pyx_kp_u_Tubes_Tubes_is_a_library_for_ef) < 0) __PYX_ERR(0, 9, __pyx_L1_error)

  /* "tubes.pyx":38
 * 
 * 
 * Null = _make_dtype(scalar_type.Null, "Null")             # <<<<<<<<<<<<<<
 * Bool = _make_dtype(scalar_type.Bool, "Bool")
 * Int64 = _make_dtype(scalar_type.Int64, "Int64")
 */
  __pyx_t_1 = __pyx_f_5tubes__make_dtype(ss::iter::ScalarType::Null, __pyx_n_u_Null); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 38, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_Null, __pyx_t_1) < 0) __PYX_ERR(0, 38, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "tubes.pyx":39
 * 
 * Null = _make_dtype(scalar_type.Null, "Null")
 * Bool = _make_dtype(scalar_type.Bool, "Bool")             # <<<<<<<<<<<<<<
 * Int64 = _make_dtype(scalar_type.Int64, "Int64")
 * Float = _make_dtype(scalar_type.Float, "float")
 */
  __pyx_t_1 = __pyx_f_5tubes__make_dtype(ss::iter::ScalarType::Bool, __pyx_n_u_Bool); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 39, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_Bool, __pyx_t_1) < 0) __PYX_ERR(0, 39, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "tubes.pyx":40
 * Null = _make_dtype(scalar_type.Null, "Null")
 * Bool = _make_dtype(scalar_type.Bool, "Bool")
 * Int64 = _make_dtype(scalar_type.Int64, "Int64")             # <<<<<<<<<<<<<<
 * Float = _make_dtype(scalar_type.Float, "float")
 * ByteSlice = _make_dtype(scalar_type.ByteSlice, "bytes")
 */
  __pyx_t_1 = __pyx_f_5tubes__make_dtype(ss::iter::ScalarType::Int64, __pyx_n_u_Int64); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 40, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_Int64, __pyx_t_1) < 0) __PYX_ERR(0, 40, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "tubes.pyx":41
 * Bool = _make_dtype(scalar_type.Bool, "Bool")
 * Int64 = _make_dtype(scalar_type.Int64, "Int64")
 * Float = _make_dtype(scalar_type.Float, "float")             # <<<<<<<<<<<<<<
 * ByteSlice = _make_dtype(scalar_type.ByteSlice, "bytes")
 * Utf8 = _make_dtype(scalar_type.Utf8, "str")
 */
  __pyx_t_1 = __pyx_f_5tubes__make_dtype(ss::iter::ScalarType::Float, __pyx_n_u_float); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 41, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_Float, __pyx_t_1) < 0) __PYX_ERR(0, 41, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "tubes.pyx":42
 * Int64 = _make_dtype(scalar_type.Int64, "Int64")
 * Float = _make_dtype(scalar_type.Float, "float")
 * ByteSlice = _make_dtype(scalar_type.ByteSlice, "bytes")             # <<<<<<<<<<<<<<
 * Utf8 = _make_dtype(scalar_type.Utf8, "str")
 * Object = _make_dtype(scalar_type.Object, "object")
 */
  __pyx_t_1 = __pyx_f_5tubes__make_dtype(ss::iter::ScalarType::ByteSlice, __pyx_n_u_bytes); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 42, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_ByteSlice, __pyx_t_1) < 0) __PYX_ERR(0, 42, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "tubes.pyx":43
 * Float = _make_dtype(scalar_type.Float, "float")
 * ByteSlice = _make_dtype(scalar_type.ByteSlice, "bytes")
 * Utf8 = _make_dtype(scalar_type.Utf8, "str")             # <<<<<<<<<<<<<<
 * Object = _make_dtype(scalar_type.Object, "object")
 * JsonUtf8 = _make_dtype(scalar_type.JsonUtf8, "Json")
 */
  __pyx_t_1 = __pyx_f_5tubes__make_dtype(ss::iter::ScalarType::Utf8, __pyx_n_u_str); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 43, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_Utf8, __pyx_t_1) < 0) __PYX_ERR(0, 43, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "tubes.pyx":44
 * ByteSlice = _make_dtype(scalar_type.ByteSlice, "bytes")
 * Utf8 = _make_dtype(scalar_type.Utf8, "str")
 * Object = _make_dtype(scalar_type.Object, "object")             # <<<<<<<<<<<<<<
 * JsonUtf8 = _make_dtype(scalar_type.JsonUtf8, "Json")
 * 
 */
  __pyx_t_1 = __pyx_f_5tubes__make_dtype(ss::iter::ScalarType::Object, __pyx_n_u_object); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 44, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_Object, __pyx_t_1) < 0) __PYX_ERR(0, 44, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "tubes.pyx":45
 * Utf8 = _make_dtype(scalar_type.Utf8, "str")
 * Object = _make_dtype(scalar_type.Object, "object")
 * JsonUtf8 = _make_dtype(scalar_type.JsonUtf8, "Json")             # <<<<<<<<<<<<<<
 * 
 * cdef object UNDEFINED = object()
 */
  __pyx_t_1 = __pyx_f_5tubes__make_dtype(ss::iter::ScalarType::JsonUtf8, __pyx_n_u_Json); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 45, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_JsonUtf8, __pyx_t_1) < 0) __PYX_ERR(0, 45, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "tubes.pyx":47
 * JsonUtf8 = _make_dtype(scalar_type.JsonUtf8, "Json")
 * 
 * cdef object UNDEFINED = object()             # <<<<<<<<<<<<<<
 * cdef public PyObject *UNDEFINED_OBJ = <PyObject*>UNDEFINED
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_builtin_object); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 47, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_XGOTREF(__pyx_v_5tubes_UNDEFINED);
  __Pyx_DECREF_SET(__pyx_v_5tubes_UNDEFINED, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;

  /* "tubes.pyx":48
 * 
 * cdef object UNDEFINED = object()
 * cdef public PyObject *UNDEFINED_OBJ = <PyObject*>UNDEFINED             # <<<<<<<<<<<<<<
 * 
 * 
 */
  UNDEFINED_OBJ = ((PyObject *)__pyx_v_5tubes_UNDEFINED);

  /* "tubes.pyx":52
 * 
 * DTYPE_MAP = {
 *     None: Null,             # <<<<<<<<<<<<<<
 *     bool: Bool,
 *     int: Int64,
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(7); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 52, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_Null); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 52, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, Py_None, __pyx_t_2) < 0) __PYX_ERR(0, 52, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "tubes.pyx":53
 * DTYPE_MAP = {
 *     None: Null,
 *     bool: Bool,             # <<<<<<<<<<<<<<
 *     int: Int64,
 *     float: Float,
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_Bool); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 53, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, ((PyObject*)&PyBool_Type), __pyx_t_2) < 0) __PYX_ERR(0, 52, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "tubes.pyx":54
 *     None: Null,
 *     bool: Bool,
 *     int: Int64,             # <<<<<<<<<<<<<<
 *     float: Float,
 *     bytes: ByteSlice,
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_Int64); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 54, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, ((PyObject *)(&PyInt_Type)), __pyx_t_2) < 0) __PYX_ERR(0, 52, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "tubes.pyx":55
 *     bool: Bool,
 *     int: Int64,
 *     float: Float,             # <<<<<<<<<<<<<<
 *     bytes: ByteSlice,
 *     str: Utf8, # Not ideal, but..
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_Float); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 55, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, ((PyObject *)(&PyFloat_Type)), __pyx_t_2) < 0) __PYX_ERR(0, 52, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "tubes.pyx":56
 *     int: Int64,
 *     float: Float,
 *     bytes: ByteSlice,             # <<<<<<<<<<<<<<
 *     str: Utf8, # Not ideal, but..
 *     object: Object
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_ByteSlice); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 56, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, ((PyObject *)(&PyBytes_Type)), __pyx_t_2) < 0) __PYX_ERR(0, 52, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "tubes.pyx":57
 *     float: Float,
 *     bytes: ByteSlice,
 *     str: Utf8, # Not ideal, but..             # <<<<<<<<<<<<<<
 *     object: Object
 * }
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_Utf8); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 57, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, ((PyObject *)(&PyUnicode_Type)), __pyx_t_2) < 0) __PYX_ERR(0, 52, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "tubes.pyx":58
 *     bytes: ByteSlice,
 *     str: Utf8, # Not ideal, but..
 *     object: Object             # <<<<<<<<<<<<<<
 * }
 * 
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_Object); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 58, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_builtin_object, __pyx_t_2) < 0) __PYX_ERR(0, 52, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_DTYPE_MAP, __pyx_t_1) < 0) __PYX_ERR(0, 51, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "tubes.pyx":272
 *         return Multi(self, tubes)
 * 
 *     def get(self, str key, default=UNDEFINED):             # <<<<<<<<<<<<<<
 *         """
 *         Compatibility: tube.get("field")
 */
  __Pyx_INCREF(__pyx_v_5tubes_UNDEFINED);
  __pyx_k__22 = __pyx_v_5tubes_UNDEFINED;
  __Pyx_GIVEREF(__pyx_v_5tubes_UNDEFINED);

  /* "tubes.pyx":297
 *         return self.name_lookup().lookup_name(key, default)
 * 
 *     def slot(self, size_t num, default=UNDEFINED):             # <<<<<<<<<<<<<<
 *         """
 *         Compatibility: tube.slot(0)
 */
  __Pyx_INCREF(__pyx_v_5tubes_UNDEFINED);
  __pyx_k__23 = __pyx_v_5tubes_UNDEFINED;
  __Pyx_GIVEREF(__pyx_v_5tubes_UNDEFINED);

  /* "chunk.pxi":2
 * 
 * from functools import partial             # <<<<<<<<<<<<<<
 * 
 * def update_each_iter(object chunk, IterWrapper wrapped):
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_partial);
  __Pyx_GIVEREF(__pyx_n_s_partial);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_partial);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_functools, __pyx_t_1, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(5, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_partial); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_partial, __pyx_t_1) < 0) __PYX_ERR(5, 2, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "chunk.pxi":4
 * from functools import partial
 * 
 * def update_each_iter(object chunk, IterWrapper wrapped):             # <<<<<<<<<<<<<<
 *     cdef Iter *it = wrapped.iter.get()
 *     cdef EachIter *each = <EachIter*>it
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_5tubes_1update_each_iter, NULL, __pyx_n_s_tubes); if (unlikely(!__pyx_t_2)) __PYX_ERR(5, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_update_each_iter, __pyx_t_2) < 0) __PYX_ERR(5, 4, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "(tree fragment)":1
 * def __pyx_unpickle_Tube(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     if __pyx_checksum != 0xdf446ce:
 *         from pickle import PickleError as __pyx_PickleError
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_5tubes_3__pyx_unpickle_Tube, NULL, __pyx_n_s_tubes); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_pyx_unpickle_Tube, __pyx_t_2) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "tubes.pyx":2
 * 
 * cimport cython             # <<<<<<<<<<<<<<
 * 
 * cimport scalar_type
 */
  __pyx_t_2 = __Pyx_PyDict_NewPresized(15); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_2, __pyx_kp_u_Tube_first_line_120, __pyx_kp_u_Compatibility_tube_first_5_Crea) < 0) __PYX_ERR(0, 2, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_kp_u_Tube_skip_line_132, __pyx_kp_u_Compatibility_tube_skip_5_Creat) < 0) __PYX_ERR(0, 2, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_kp_u_Tube_read_files_line_165, __pyx_kp_u_Compatible_Dtypes_bytes_Utf8_Fo) < 0) __PYX_ERR(0, 2, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_kp_u_Tube_gunzip_line_188, __pyx_kp_u_Compatibility_tube_gunzip_zlib) < 0) __PYX_ERR(0, 2, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_kp_u_Tube_split_line_205, __pyx_kp_u_Compatibility_tube_split_Split) < 0) __PYX_ERR(0, 2, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_kp_u_Tube_json_line_221, __pyx_kp_u_Compatibility_tube_json_Interpr) < 0) __PYX_ERR(0, 2, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_kp_u_Tube_multi_line_250, __pyx_kp_u_Compatibility_tube_multi_lambda) < 0) __PYX_ERR(0, 2, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_kp_u_Tube_get_line_272, __pyx_kp_u_Compatibility_tube_get_field_Ef) < 0) __PYX_ERR(0, 2, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_kp_u_Tube_skip_unless_line_309, __pyx_kp_u_Compatibility_tube_skip_unless) < 0) __PYX_ERR(0, 2, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_kp_u_Tube_enumerate_line_338, __pyx_kp_u_Compatibility_tube_enumerate_Si) < 0) __PYX_ERR(0, 2, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_kp_u_Tube_zip_line_351, __pyx_kp_u_Combine_two_inputs_into_one_by) < 0) __PYX_ERR(0, 2, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_kp_u_Tube_equals_line_368, __pyx_kp_u_Compatibility_list_tube_equals) < 0) __PYX_ERR(0, 2, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_kp_u_Tube_gt_line_382, __pyx_kp_u_Compatibility_list_tube_gt_valu) < 0) __PYX_ERR(0, 2, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_kp_u_Tube_lt_line_393, __pyx_kp_u_Compatibility_list_tube_lt_valu) < 0) __PYX_ERR(0, 2, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_kp_u_Tube_chunk_line_404, __pyx_kp_u_Compatibility_tube_chunk_2_Recu) < 0) __PYX_ERR(0, 2, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_2) < 0) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vector.from_py":45
 * 
 * @cname("__pyx_convert_vector_from_py_std_3a__3a_string")
 * cdef vector[X] __pyx_convert_vector_from_py_std_3a__3a_string(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef vector[X] v
 *     for item in o:
 */

  /*--- Wrapped vars code ---*/

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  if (__pyx_m) {
    if (__pyx_d) {
      __Pyx_AddTraceback("init tubes", 0, __pyx_lineno, __pyx_filename);
    }
    Py_DECREF(__pyx_m); __pyx_m = 0;
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init tubes");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  return (__pyx_m != NULL) ? 0 : -1;
  #elif PY_MAJOR_VERSION >= 3
  return __pyx_m;
  #else
  return;
  #endif
}

/* --- Runtime support code --- */
/* Refnanny */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule((char *)modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, (char *)"RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

/* GetBuiltinName */
static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStr(__pyx_b, name);
    if (unlikely(!result)) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

/* PyObjectCall */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = func->ob_type->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = (*call)(func, arg, kw);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyErrFetchRestore */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
}
#endif

/* RaiseException */
#if PY_MAJOR_VERSION < 3
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb,
                        CYTHON_UNUSED PyObject *cause) {
    __Pyx_PyThreadState_declare
    Py_XINCREF(type);
    if (!value || value == Py_None)
        value = NULL;
    else
        Py_INCREF(value);
    if (!tb || tb == Py_None)
        tb = NULL;
    else {
        Py_INCREF(tb);
        if (!PyTraceBack_Check(tb)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: arg 3 must be a traceback or None");
            goto raise_error;
        }
    }
    if (PyType_Check(type)) {
#if CYTHON_COMPILING_IN_PYPY
        if (!value) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#endif
        PyErr_NormalizeException(&type, &value, &tb);
    } else {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        value = type;
        type = (PyObject*) Py_TYPE(type);
        Py_INCREF(type);
        if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: exception class must be a subclass of BaseException");
            goto raise_error;
        }
    }
    __Pyx_PyThreadState_assign
    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}
#else
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    PyObject* owned_instance = NULL;
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;
    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (PyExceptionClass_Check(type)) {
        PyObject *instance_class = NULL;
        if (value && PyExceptionInstance_Check(value)) {
            instance_class = (PyObject*) Py_TYPE(value);
            if (instance_class != type) {
                int is_subclass = PyObject_IsSubclass(instance_class, type);
                if (!is_subclass) {
                    instance_class = NULL;
                } else if (unlikely(is_subclass == -1)) {
                    goto bad;
                } else {
                    type = instance_class;
                }
            }
        }
        if (!instance_class) {
            PyObject *args;
            if (!value)
                args = PyTuple_New(0);
            else if (PyTuple_Check(value)) {
                Py_INCREF(value);
                args = value;
            } else
                args = PyTuple_Pack(1, value);
            if (!args)
                goto bad;
            owned_instance = PyObject_Call(type, args, NULL);
            Py_DECREF(args);
            if (!owned_instance)
                goto bad;
            value = owned_instance;
            if (!PyExceptionInstance_Check(value)) {
                PyErr_Format(PyExc_TypeError,
                             "calling %R should have returned an instance of "
                             "BaseException, not %R",
                             type, Py_TYPE(value));
                goto bad;
            }
        }
    } else {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }
    if (cause) {
        PyObject *fixed_cause;
        if (cause == Py_None) {
            fixed_cause = NULL;
        } else if (PyExceptionClass_Check(cause)) {
            fixed_cause = PyObject_CallObject(cause, NULL);
            if (fixed_cause == NULL)
                goto bad;
        } else if (PyExceptionInstance_Check(cause)) {
            fixed_cause = cause;
            Py_INCREF(fixed_cause);
        } else {
            PyErr_SetString(PyExc_TypeError,
                            "exception causes must derive from "
                            "BaseException");
            goto bad;
        }
        PyException_SetCause(value, fixed_cause);
    }
    PyErr_SetObject(type, value);
    if (tb) {
#if CYTHON_COMPILING_IN_PYPY
        PyObject *tmp_type, *tmp_value, *tmp_tb;
        PyErr_Fetch(&tmp_type, &tmp_value, &tmp_tb);
        Py_INCREF(tb);
        PyErr_Restore(tmp_type, tmp_value, tb);
        Py_XDECREF(tmp_tb);
#else
        PyThreadState *tstate = __Pyx_PyThreadState_Current;
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
#endif
    }
bad:
    Py_XDECREF(owned_instance);
    return;
}
#endif

/* JoinPyUnicode */
static PyObject* __Pyx_PyUnicode_Join(PyObject* value_tuple, Py_ssize_t value_count, Py_ssize_t result_ulength,
                                      CYTHON_UNUSED Py_UCS4 max_char) {
#if CYTHON_USE_UNICODE_INTERNALS && CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    PyObject *result_uval;
    int result_ukind;
    Py_ssize_t i, char_pos;
    void *result_udata;
#if CYTHON_PEP393_ENABLED
    result_uval = PyUnicode_New(result_ulength, max_char);
    if (unlikely(!result_uval)) return NULL;
    result_ukind = (max_char <= 255) ? PyUnicode_1BYTE_KIND : (max_char <= 65535) ? PyUnicode_2BYTE_KIND : PyUnicode_4BYTE_KIND;
    result_udata = PyUnicode_DATA(result_uval);
#else
    result_uval = PyUnicode_FromUnicode(NULL, result_ulength);
    if (unlikely(!result_uval)) return NULL;
    result_ukind = sizeof(Py_UNICODE);
    result_udata = PyUnicode_AS_UNICODE(result_uval);
#endif
    char_pos = 0;
    for (i=0; i < value_count; i++) {
        int ukind;
        Py_ssize_t ulength;
        void *udata;
        PyObject *uval = PyTuple_GET_ITEM(value_tuple, i);
        if (unlikely(__Pyx_PyUnicode_READY(uval)))
            goto bad;
        ulength = __Pyx_PyUnicode_GET_LENGTH(uval);
        if (unlikely(!ulength))
            continue;
        if (unlikely(char_pos + ulength < 0))
            goto overflow;
        ukind = __Pyx_PyUnicode_KIND(uval);
        udata = __Pyx_PyUnicode_DATA(uval);
        if (!CYTHON_PEP393_ENABLED || ukind == result_ukind) {
            memcpy((char *)result_udata + char_pos * result_ukind, udata, ulength * result_ukind);
        } else {
            #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030300F0 || defined(_PyUnicode_FastCopyCharacters)
            _PyUnicode_FastCopyCharacters(result_uval, char_pos, uval, 0, ulength);
            #else
            Py_ssize_t j;
            for (j=0; j < ulength; j++) {
                Py_UCS4 uchar = __Pyx_PyUnicode_READ(ukind, udata, j);
                __Pyx_PyUnicode_WRITE(result_ukind, result_udata, char_pos+j, uchar);
            }
            #endif
        }
        char_pos += ulength;
    }
    return result_uval;
overflow:
    PyErr_SetString(PyExc_OverflowError, "join() result is too long for a Python string");
bad:
    Py_DECREF(result_uval);
    return NULL;
#else
    result_ulength++;
    value_count++;
    return PyUnicode_Join(__pyx_empty_unicode, value_tuple);
#endif
}

/* ExtTypeTest */
static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type) {
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (likely(__Pyx_TypeCheck(obj, type)))
        return 1;
    PyErr_Format(PyExc_TypeError, "Cannot convert %.200s to %.200s",
                 Py_TYPE(obj)->tp_name, type->tp_name);
    return 0;
}

/* WriteUnraisableException */
static void __Pyx_WriteUnraisable(const char *name, CYTHON_UNUSED int clineno,
                                  CYTHON_UNUSED int lineno, CYTHON_UNUSED const char *filename,
                                  int full_traceback, CYTHON_UNUSED int nogil) {
    PyObject *old_exc, *old_val, *old_tb;
    PyObject *ctx;
    __Pyx_PyThreadState_declare
#ifdef WITH_THREAD
    PyGILState_STATE state;
    if (nogil)
        state = PyGILState_Ensure();
#ifdef _MSC_VER
    else state = (PyGILState_STATE)-1;
#endif
#endif
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&old_exc, &old_val, &old_tb);
    if (full_traceback) {
        Py_XINCREF(old_exc);
        Py_XINCREF(old_val);
        Py_XINCREF(old_tb);
        __Pyx_ErrRestore(old_exc, old_val, old_tb);
        PyErr_PrintEx(1);
    }
    #if PY_MAJOR_VERSION < 3
    ctx = PyString_FromString(name);
    #else
    ctx = PyUnicode_FromString(name);
    #endif
    __Pyx_ErrRestore(old_exc, old_val, old_tb);
    if (!ctx) {
        PyErr_WriteUnraisable(Py_None);
    } else {
        PyErr_WriteUnraisable(ctx);
        Py_DECREF(ctx);
    }
#ifdef WITH_THREAD
    if (nogil)
        PyGILState_Release(state);
#endif
}

/* RaiseArgTupleInvalid */
static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

/* RaiseDoubleKeywords */
static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

/* ParseKeywords */
static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    while (PyDict_Next(kwds, &pos, &key, &value)) {
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
            continue;
        }
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_CheckExact(key)) || likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (**name == key) ? 0 :
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (PyUnicode_GET_SIZE(**name) != PyUnicode_GET_SIZE(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key);
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (PyUnicode_GET_SIZE(**argname) != PyUnicode_GET_SIZE(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

/* ArgTypeTest */
static int __Pyx__ArgTypeTest(PyObject *obj, PyTypeObject *type, const char *name, int exact)
{
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    else if (exact) {
        #if PY_MAJOR_VERSION == 2
        if ((type == &PyBaseString_Type) && likely(__Pyx_PyBaseString_CheckExact(obj))) return 1;
        #endif
    }
    else {
        if (likely(__Pyx_TypeCheck(obj, type))) return 1;
    }
    PyErr_Format(PyExc_TypeError,
        "Argument '%.200s' has incorrect type (expected %.200s, got %.200s)",
        name, type->tp_name, Py_TYPE(obj)->tp_name);
    return 0;
}

/* RaiseTooManyValuesToUnpack */
static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected) {
    PyErr_Format(PyExc_ValueError,
                 "too many values to unpack (expected %" CYTHON_FORMAT_SSIZE_T "d)", expected);
}

/* RaiseNeedMoreValuesToUnpack */
static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index) {
    PyErr_Format(PyExc_ValueError,
                 "need more than %" CYTHON_FORMAT_SSIZE_T "d value%.1s to unpack",
                 index, (index == 1) ? "" : "s");
}

/* None */
static CYTHON_INLINE void __Pyx_RaiseClosureNameError(const char *varname) {
    PyErr_Format(PyExc_NameError, "free variable '%s' referenced before assignment in enclosing scope", varname);
}

/* PyFunctionFastCall */
#if CYTHON_FAST_PYCALL
#include "frameobject.h"
static PyObject* __Pyx_PyFunction_FastCallNoKw(PyCodeObject *co, PyObject **args, Py_ssize_t na,
                                               PyObject *globals) {
    PyFrameObject *f;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject **fastlocals;
    Py_ssize_t i;
    PyObject *result;
    assert(globals != NULL);
    /* XXX Perhaps we should create a specialized
       PyFrame_New() that doesn't take locals, but does
       take builtins without sanity checking them.
       */
    assert(tstate != NULL);
    f = PyFrame_New(tstate, co, globals, NULL);
    if (f == NULL) {
        return NULL;
    }
    fastlocals = f->f_localsplus;
    for (i = 0; i < na; i++) {
        Py_INCREF(*args);
        fastlocals[i] = *args++;
    }
    result = PyEval_EvalFrameEx(f,0);
    ++tstate->recursion_depth;
    Py_DECREF(f);
    --tstate->recursion_depth;
    return result;
}
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, int nargs, PyObject *kwargs) {
    PyCodeObject *co = (PyCodeObject *)PyFunction_GET_CODE(func);
    PyObject *globals = PyFunction_GET_GLOBALS(func);
    PyObject *argdefs = PyFunction_GET_DEFAULTS(func);
    PyObject *closure;
#if PY_MAJOR_VERSION >= 3
    PyObject *kwdefs;
#endif
    PyObject *kwtuple, **k;
    PyObject **d;
    Py_ssize_t nd;
    Py_ssize_t nk;
    PyObject *result;
    assert(kwargs == NULL || PyDict_Check(kwargs));
    nk = kwargs ? PyDict_Size(kwargs) : 0;
    if (Py_EnterRecursiveCall((char*)" while calling a Python object")) {
        return NULL;
    }
    if (
#if PY_MAJOR_VERSION >= 3
            co->co_kwonlyargcount == 0 &&
#endif
            likely(kwargs == NULL || nk == 0) &&
            co->co_flags == (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)) {
        if (argdefs == NULL && co->co_argcount == nargs) {
            result = __Pyx_PyFunction_FastCallNoKw(co, args, nargs, globals);
            goto done;
        }
        else if (nargs == 0 && argdefs != NULL
                 && co->co_argcount == Py_SIZE(argdefs)) {
            /* function called with no arguments, but all parameters have
               a default value: use default values as arguments .*/
            args = &PyTuple_GET_ITEM(argdefs, 0);
            result =__Pyx_PyFunction_FastCallNoKw(co, args, Py_SIZE(argdefs), globals);
            goto done;
        }
    }
    if (kwargs != NULL) {
        Py_ssize_t pos, i;
        kwtuple = PyTuple_New(2 * nk);
        if (kwtuple == NULL) {
            result = NULL;
            goto done;
        }
        k = &PyTuple_GET_ITEM(kwtuple, 0);
        pos = i = 0;
        while (PyDict_Next(kwargs, &pos, &k[i], &k[i+1])) {
            Py_INCREF(k[i]);
            Py_INCREF(k[i+1]);
            i += 2;
        }
        nk = i / 2;
    }
    else {
        kwtuple = NULL;
        k = NULL;
    }
    closure = PyFunction_GET_CLOSURE(func);
#if PY_MAJOR_VERSION >= 3
    kwdefs = PyFunction_GET_KW_DEFAULTS(func);
#endif
    if (argdefs != NULL) {
        d = &PyTuple_GET_ITEM(argdefs, 0);
        nd = Py_SIZE(argdefs);
    }
    else {
        d = NULL;
        nd = 0;
    }
#if PY_MAJOR_VERSION >= 3
    result = PyEval_EvalCodeEx((PyObject*)co, globals, (PyObject *)NULL,
                               args, nargs,
                               k, (int)nk,
                               d, (int)nd, kwdefs, closure);
#else
    result = PyEval_EvalCodeEx(co, globals, (PyObject *)NULL,
                               args, nargs,
                               k, (int)nk,
                               d, (int)nd, closure);
#endif
    Py_XDECREF(kwtuple);
done:
    Py_LeaveRecursiveCall();
    return result;
}
#endif
#endif

/* PyCFunctionFastCall */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject * __Pyx_PyCFunction_FastCall(PyObject *func_obj, PyObject **args, Py_ssize_t nargs) {
    PyCFunctionObject *func = (PyCFunctionObject*)func_obj;
    PyCFunction meth = PyCFunction_GET_FUNCTION(func);
    PyObject *self = PyCFunction_GET_SELF(func);
    int flags = PyCFunction_GET_FLAGS(func);
    assert(PyCFunction_Check(func));
    assert(METH_FASTCALL == (flags & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS)));
    assert(nargs >= 0);
    assert(nargs == 0 || args != NULL);
    /* _PyCFunction_FastCallDict() must not be called with an exception set,
       because it may clear it (directly or indirectly) and so the
       caller loses its exception */
    assert(!PyErr_Occurred());
    if ((PY_VERSION_HEX < 0x030700A0) || unlikely(flags & METH_KEYWORDS)) {
        return (*((__Pyx_PyCFunctionFastWithKeywords)meth)) (self, args, nargs, NULL);
    } else {
        return (*((__Pyx_PyCFunctionFast)meth)) (self, args, nargs);
    }
}
#endif

/* PyObjectCallMethod2 */
static PyObject* __Pyx_PyObject_CallMethod2(PyObject* obj, PyObject* method_name, PyObject* arg1, PyObject* arg2) {
    PyObject *args, *method, *result = NULL;
    method = __Pyx_PyObject_GetAttrStr(obj, method_name);
    if (unlikely(!method)) return NULL;
#if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(method)) && likely(PyMethod_GET_SELF(method))) {
        PyObject *self, *function;
        self = PyMethod_GET_SELF(method);
        function = PyMethod_GET_FUNCTION(method);
        #if CYTHON_FAST_PYCALL
        if (PyFunction_Check(function)) {
            PyObject *args[3] = {self, arg1, arg2};
            result = __Pyx_PyFunction_FastCall(function, args, 3);
            goto done;
        }
        #endif
        #if CYTHON_FAST_PYCCALL
        if (__Pyx_PyFastCFunction_Check(function)) {
            PyObject *args[3] = {self, arg1, arg2};
            result = __Pyx_PyFunction_FastCall(function, args, 3);
            goto done;
        }
        #endif
        args = PyTuple_New(3);
        if (unlikely(!args)) goto done;
        Py_INCREF(self);
        PyTuple_SET_ITEM(args, 0, self);
        Py_INCREF(arg1);
        PyTuple_SET_ITEM(args, 1, arg1);
        Py_INCREF(arg2);
        PyTuple_SET_ITEM(args, 2, arg2);
        Py_INCREF(function);
        Py_DECREF(method);
        method = function;
    } else
#endif
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(method)) {
        PyObject *args[2] = {arg1, arg2};
        result = __Pyx_PyFunction_FastCall(method, args, 2);
        goto done;
    } else
#endif
#if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(method)) {
        PyObject *args[2] = {arg1, arg2};
        result = __Pyx_PyCFunction_FastCall(method, args, 2);
        goto done;
    } else
#endif
    {
        args = PyTuple_New(2);
        if (unlikely(!args)) goto done;
        Py_INCREF(arg1);
        PyTuple_SET_ITEM(args, 0, arg1);
        Py_INCREF(arg2);
        PyTuple_SET_ITEM(args, 1, arg2);
    }
    result = __Pyx_PyObject_Call(method, args, NULL);
    Py_DECREF(args);
done:
    Py_DECREF(method);
    return result;
}

/* dict_setdefault */
static CYTHON_INLINE PyObject *__Pyx_PyDict_SetDefault(PyObject *d, PyObject *key, PyObject *default_value,
                                                       CYTHON_UNUSED int is_safe_type) {
    PyObject* value;
#if PY_VERSION_HEX >= 0x030400A0
    if ((1)) {
        value = PyDict_SetDefault(d, key, default_value);
        if (unlikely(!value)) return NULL;
        Py_INCREF(value);
#else
    if (is_safe_type == 1 || (is_safe_type == -1 &&
#if PY_MAJOR_VERSION >= 3 && !CYTHON_COMPILING_IN_PYPY
            (PyUnicode_CheckExact(key) || PyString_CheckExact(key) || PyLong_CheckExact(key)))) {
        value = PyDict_GetItemWithError(d, key);
        if (unlikely(!value)) {
            if (unlikely(PyErr_Occurred()))
                return NULL;
            if (unlikely(PyDict_SetItem(d, key, default_value) == -1))
                return NULL;
            value = default_value;
        }
        Py_INCREF(value);
#else
            (PyString_CheckExact(key) || PyUnicode_CheckExact(key) || PyInt_CheckExact(key) || PyLong_CheckExact(key)))) {
        value = PyDict_GetItem(d, key);
        if (unlikely(!value)) {
            if (unlikely(PyDict_SetItem(d, key, default_value) == -1))
                return NULL;
            value = default_value;
        }
        Py_INCREF(value);
#endif
#endif
    } else {
        value = __Pyx_PyObject_CallMethod2(d, __pyx_n_s_setdefault, key, default_value);
    }
    return value;
}

/* PyObjectCallMethO */
    #if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg) {
    PyObject *self, *result;
    PyCFunction cfunc;
    cfunc = PyCFunction_GET_FUNCTION(func);
    self = PyCFunction_GET_SELF(func);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = cfunc(self, arg);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCallOneArg */
    #if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx__PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_New(1);
    if (unlikely(!args)) return NULL;
    Py_INCREF(arg);
    PyTuple_SET_ITEM(args, 0, arg);
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, &arg, 1);
    }
#endif
    if (likely(PyCFunction_Check(func))) {
        if (likely(PyCFunction_GET_FLAGS(func) & METH_O)) {
            return __Pyx_PyObject_CallMethO(func, arg);
#if CYTHON_FAST_PYCCALL
        } else if (PyCFunction_GET_FLAGS(func) & METH_FASTCALL) {
            return __Pyx_PyCFunction_FastCall(func, &arg, 1);
#endif
        }
    }
    return __Pyx__PyObject_CallOneArg(func, arg);
}
#else
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_Pack(1, arg);
    if (unlikely(!args)) return NULL;
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
#endif

/* dict_getitem_default */
    static PyObject* __Pyx_PyDict_GetItemDefault(PyObject* d, PyObject* key, PyObject* default_value) {
    PyObject* value;
#if PY_MAJOR_VERSION >= 3 && !CYTHON_COMPILING_IN_PYPY
    value = PyDict_GetItemWithError(d, key);
    if (unlikely(!value)) {
        if (unlikely(PyErr_Occurred()))
            return NULL;
        value = default_value;
    }
    Py_INCREF(value);
#else
    if (PyString_CheckExact(key) || PyUnicode_CheckExact(key) || PyInt_CheckExact(key)) {
        value = PyDict_GetItem(d, key);
        if (unlikely(!value)) {
            value = default_value;
        }
        Py_INCREF(value);
    } else {
        if (default_value == Py_None)
            default_value = NULL;
        value = PyObject_CallMethodObjArgs(
            d, __pyx_n_s_get, key, default_value, NULL);
    }
#endif
    return value;
}

/* PyIntBinop */
    #if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_AddObjC(PyObject *op1, PyObject *op2, CYTHON_UNUSED long intval, CYTHON_UNUSED int inplace) {
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long x;
        long a = PyInt_AS_LONG(op1);
            x = (long)((unsigned long)a + b);
            if (likely((x^a) >= 0 || (x^b) >= 0))
                return PyInt_FromLong(x);
            return PyLong_Type.tp_as_number->nb_add(op1, op2);
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op1))) {
        const long b = intval;
        long a, x;
#ifdef HAVE_LONG_LONG
        const PY_LONG_LONG llb = intval;
        PY_LONG_LONG lla, llx;
#endif
        const digit* digits = ((PyLongObject*)op1)->ob_digit;
        const Py_ssize_t size = Py_SIZE(op1);
        if (likely(__Pyx_sst_abs(size) <= 1)) {
            a = likely(size) ? digits[0] : 0;
            if (size == -1) a = -a;
        } else {
            switch (size) {
                case -2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                case 2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = (long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                case -3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                case 3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = (long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                case -4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                case 4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = (long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                default: return PyLong_Type.tp_as_number->nb_add(op1, op2);
            }
        }
                x = a + b;
            return PyLong_FromLong(x);
#ifdef HAVE_LONG_LONG
        long_long:
                llx = lla + llb;
            return PyLong_FromLongLong(llx);
#endif
        
        
    }
    #endif
    if (PyFloat_CheckExact(op1)) {
        const long b = intval;
        double a = PyFloat_AS_DOUBLE(op1);
            double result;
            PyFPE_START_PROTECT("add", return NULL)
            result = ((double)a) + (double)b;
            PyFPE_END_PROTECT(result)
            return PyFloat_FromDouble(result);
    }
    return (inplace ? PyNumber_InPlaceAdd : PyNumber_Add)(op1, op2);
}
#endif

/* GetItemInt */
    static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j) {
    PyObject *r;
    if (!j) return NULL;
    r = PyObject_GetItem(o, j);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyList_GET_SIZE(o);
    }
    if ((!boundscheck) || likely((0 <= wrapped_i) & (wrapped_i < PyList_GET_SIZE(o)))) {
        PyObject *r = PyList_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyTuple_GET_SIZE(o);
    }
    if ((!boundscheck) || likely((0 <= wrapped_i) & (wrapped_i < PyTuple_GET_SIZE(o)))) {
        PyObject *r = PyTuple_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i, int is_list,
                                                     CYTHON_NCP_UNUSED int wraparound,
                                                     CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS && CYTHON_USE_TYPE_SLOTS
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyList_GET_SIZE(o);
        if ((!boundscheck) || (likely((n >= 0) & (n < PyList_GET_SIZE(o))))) {
            PyObject *r = PyList_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    }
    else if (PyTuple_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyTuple_GET_SIZE(o);
        if ((!boundscheck) || likely((n >= 0) & (n < PyTuple_GET_SIZE(o)))) {
            PyObject *r = PyTuple_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    } else {
        PySequenceMethods *m = Py_TYPE(o)->tp_as_sequence;
        if (likely(m && m->sq_item)) {
            if (wraparound && unlikely(i < 0) && likely(m->sq_length)) {
                Py_ssize_t l = m->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                        return NULL;
                    PyErr_Clear();
                }
            }
            return m->sq_item(o, i);
        }
    }
#else
    if (is_list || PySequence_Check(o)) {
        return PySequence_GetItem(o, i);
    }
#endif
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
}

/* FetchCommonType */
    static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type) {
    PyObject* fake_module;
    PyTypeObject* cached_type = NULL;
    fake_module = PyImport_AddModule((char*) "_cython_" CYTHON_ABI);
    if (!fake_module) return NULL;
    Py_INCREF(fake_module);
    cached_type = (PyTypeObject*) PyObject_GetAttrString(fake_module, type->tp_name);
    if (cached_type) {
        if (!PyType_Check((PyObject*)cached_type)) {
            PyErr_Format(PyExc_TypeError,
                "Shared Cython type %.200s is not a type object",
                type->tp_name);
            goto bad;
        }
        if (cached_type->tp_basicsize != type->tp_basicsize) {
            PyErr_Format(PyExc_TypeError,
                "Shared Cython type %.200s has the wrong size, try recompiling",
                type->tp_name);
            goto bad;
        }
    } else {
        if (!PyErr_ExceptionMatches(PyExc_AttributeError)) goto bad;
        PyErr_Clear();
        if (PyType_Ready(type) < 0) goto bad;
        if (PyObject_SetAttrString(fake_module, type->tp_name, (PyObject*) type) < 0)
            goto bad;
        Py_INCREF(type);
        cached_type = type;
    }
done:
    Py_DECREF(fake_module);
    return cached_type;
bad:
    Py_XDECREF(cached_type);
    cached_type = NULL;
    goto done;
}

/* CythonFunction */
    static PyObject *
__Pyx_CyFunction_get_doc(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *closure)
{
    if (unlikely(op->func_doc == NULL)) {
        if (op->func.m_ml->ml_doc) {
#if PY_MAJOR_VERSION >= 3
            op->func_doc = PyUnicode_FromString(op->func.m_ml->ml_doc);
#else
            op->func_doc = PyString_FromString(op->func.m_ml->ml_doc);
#endif
            if (unlikely(op->func_doc == NULL))
                return NULL;
        } else {
            Py_INCREF(Py_None);
            return Py_None;
        }
    }
    Py_INCREF(op->func_doc);
    return op->func_doc;
}
static int
__Pyx_CyFunction_set_doc(__pyx_CyFunctionObject *op, PyObject *value)
{
    PyObject *tmp = op->func_doc;
    if (value == NULL) {
        value = Py_None;
    }
    Py_INCREF(value);
    op->func_doc = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_name(__pyx_CyFunctionObject *op)
{
    if (unlikely(op->func_name == NULL)) {
#if PY_MAJOR_VERSION >= 3
        op->func_name = PyUnicode_InternFromString(op->func.m_ml->ml_name);
#else
        op->func_name = PyString_InternFromString(op->func.m_ml->ml_name);
#endif
        if (unlikely(op->func_name == NULL))
            return NULL;
    }
    Py_INCREF(op->func_name);
    return op->func_name;
}
static int
__Pyx_CyFunction_set_name(__pyx_CyFunctionObject *op, PyObject *value)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value))) {
#else
    if (unlikely(value == NULL || !PyString_Check(value))) {
#endif
        PyErr_SetString(PyExc_TypeError,
                        "__name__ must be set to a string object");
        return -1;
    }
    tmp = op->func_name;
    Py_INCREF(value);
    op->func_name = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_qualname(__pyx_CyFunctionObject *op)
{
    Py_INCREF(op->func_qualname);
    return op->func_qualname;
}
static int
__Pyx_CyFunction_set_qualname(__pyx_CyFunctionObject *op, PyObject *value)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value))) {
#else
    if (unlikely(value == NULL || !PyString_Check(value))) {
#endif
        PyErr_SetString(PyExc_TypeError,
                        "__qualname__ must be set to a string object");
        return -1;
    }
    tmp = op->func_qualname;
    Py_INCREF(value);
    op->func_qualname = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_self(__pyx_CyFunctionObject *m, CYTHON_UNUSED void *closure)
{
    PyObject *self;
    self = m->func_closure;
    if (self == NULL)
        self = Py_None;
    Py_INCREF(self);
    return self;
}
static PyObject *
__Pyx_CyFunction_get_dict(__pyx_CyFunctionObject *op)
{
    if (unlikely(op->func_dict == NULL)) {
        op->func_dict = PyDict_New();
        if (unlikely(op->func_dict == NULL))
            return NULL;
    }
    Py_INCREF(op->func_dict);
    return op->func_dict;
}
static int
__Pyx_CyFunction_set_dict(__pyx_CyFunctionObject *op, PyObject *value)
{
    PyObject *tmp;
    if (unlikely(value == NULL)) {
        PyErr_SetString(PyExc_TypeError,
               "function's dictionary may not be deleted");
        return -1;
    }
    if (unlikely(!PyDict_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
               "setting function's dictionary to a non-dict");
        return -1;
    }
    tmp = op->func_dict;
    Py_INCREF(value);
    op->func_dict = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_globals(__pyx_CyFunctionObject *op)
{
    Py_INCREF(op->func_globals);
    return op->func_globals;
}
static PyObject *
__Pyx_CyFunction_get_closure(CYTHON_UNUSED __pyx_CyFunctionObject *op)
{
    Py_INCREF(Py_None);
    return Py_None;
}
static PyObject *
__Pyx_CyFunction_get_code(__pyx_CyFunctionObject *op)
{
    PyObject* result = (op->func_code) ? op->func_code : Py_None;
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_init_defaults(__pyx_CyFunctionObject *op) {
    int result = 0;
    PyObject *res = op->defaults_getter((PyObject *) op);
    if (unlikely(!res))
        return -1;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    op->defaults_tuple = PyTuple_GET_ITEM(res, 0);
    Py_INCREF(op->defaults_tuple);
    op->defaults_kwdict = PyTuple_GET_ITEM(res, 1);
    Py_INCREF(op->defaults_kwdict);
    #else
    op->defaults_tuple = PySequence_ITEM(res, 0);
    if (unlikely(!op->defaults_tuple)) result = -1;
    else {
        op->defaults_kwdict = PySequence_ITEM(res, 1);
        if (unlikely(!op->defaults_kwdict)) result = -1;
    }
    #endif
    Py_DECREF(res);
    return result;
}
static int
__Pyx_CyFunction_set_defaults(__pyx_CyFunctionObject *op, PyObject* value) {
    PyObject* tmp;
    if (!value) {
        value = Py_None;
    } else if (value != Py_None && !PyTuple_Check(value)) {
        PyErr_SetString(PyExc_TypeError,
                        "__defaults__ must be set to a tuple object");
        return -1;
    }
    Py_INCREF(value);
    tmp = op->defaults_tuple;
    op->defaults_tuple = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_defaults(__pyx_CyFunctionObject *op) {
    PyObject* result = op->defaults_tuple;
    if (unlikely(!result)) {
        if (op->defaults_getter) {
            if (__Pyx_CyFunction_init_defaults(op) < 0) return NULL;
            result = op->defaults_tuple;
        } else {
            result = Py_None;
        }
    }
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_set_kwdefaults(__pyx_CyFunctionObject *op, PyObject* value) {
    PyObject* tmp;
    if (!value) {
        value = Py_None;
    } else if (value != Py_None && !PyDict_Check(value)) {
        PyErr_SetString(PyExc_TypeError,
                        "__kwdefaults__ must be set to a dict object");
        return -1;
    }
    Py_INCREF(value);
    tmp = op->defaults_kwdict;
    op->defaults_kwdict = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_kwdefaults(__pyx_CyFunctionObject *op) {
    PyObject* result = op->defaults_kwdict;
    if (unlikely(!result)) {
        if (op->defaults_getter) {
            if (__Pyx_CyFunction_init_defaults(op) < 0) return NULL;
            result = op->defaults_kwdict;
        } else {
            result = Py_None;
        }
    }
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_set_annotations(__pyx_CyFunctionObject *op, PyObject* value) {
    PyObject* tmp;
    if (!value || value == Py_None) {
        value = NULL;
    } else if (!PyDict_Check(value)) {
        PyErr_SetString(PyExc_TypeError,
                        "__annotations__ must be set to a dict object");
        return -1;
    }
    Py_XINCREF(value);
    tmp = op->func_annotations;
    op->func_annotations = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_annotations(__pyx_CyFunctionObject *op) {
    PyObject* result = op->func_annotations;
    if (unlikely(!result)) {
        result = PyDict_New();
        if (unlikely(!result)) return NULL;
        op->func_annotations = result;
    }
    Py_INCREF(result);
    return result;
}
static PyGetSetDef __pyx_CyFunction_getsets[] = {
    {(char *) "func_doc", (getter)__Pyx_CyFunction_get_doc, (setter)__Pyx_CyFunction_set_doc, 0, 0},
    {(char *) "__doc__",  (getter)__Pyx_CyFunction_get_doc, (setter)__Pyx_CyFunction_set_doc, 0, 0},
    {(char *) "func_name", (getter)__Pyx_CyFunction_get_name, (setter)__Pyx_CyFunction_set_name, 0, 0},
    {(char *) "__name__", (getter)__Pyx_CyFunction_get_name, (setter)__Pyx_CyFunction_set_name, 0, 0},
    {(char *) "__qualname__", (getter)__Pyx_CyFunction_get_qualname, (setter)__Pyx_CyFunction_set_qualname, 0, 0},
    {(char *) "__self__", (getter)__Pyx_CyFunction_get_self, 0, 0, 0},
    {(char *) "func_dict", (getter)__Pyx_CyFunction_get_dict, (setter)__Pyx_CyFunction_set_dict, 0, 0},
    {(char *) "__dict__", (getter)__Pyx_CyFunction_get_dict, (setter)__Pyx_CyFunction_set_dict, 0, 0},
    {(char *) "func_globals", (getter)__Pyx_CyFunction_get_globals, 0, 0, 0},
    {(char *) "__globals__", (getter)__Pyx_CyFunction_get_globals, 0, 0, 0},
    {(char *) "func_closure", (getter)__Pyx_CyFunction_get_closure, 0, 0, 0},
    {(char *) "__closure__", (getter)__Pyx_CyFunction_get_closure, 0, 0, 0},
    {(char *) "func_code", (getter)__Pyx_CyFunction_get_code, 0, 0, 0},
    {(char *) "__code__", (getter)__Pyx_CyFunction_get_code, 0, 0, 0},
    {(char *) "func_defaults", (getter)__Pyx_CyFunction_get_defaults, (setter)__Pyx_CyFunction_set_defaults, 0, 0},
    {(char *) "__defaults__", (getter)__Pyx_CyFunction_get_defaults, (setter)__Pyx_CyFunction_set_defaults, 0, 0},
    {(char *) "__kwdefaults__", (getter)__Pyx_CyFunction_get_kwdefaults, (setter)__Pyx_CyFunction_set_kwdefaults, 0, 0},
    {(char *) "__annotations__", (getter)__Pyx_CyFunction_get_annotations, (setter)__Pyx_CyFunction_set_annotations, 0, 0},
    {0, 0, 0, 0, 0}
};
static PyMemberDef __pyx_CyFunction_members[] = {
    {(char *) "__module__", T_OBJECT, offsetof(PyCFunctionObject, m_module), PY_WRITE_RESTRICTED, 0},
    {0, 0, 0,  0, 0}
};
static PyObject *
__Pyx_CyFunction_reduce(__pyx_CyFunctionObject *m, CYTHON_UNUSED PyObject *args)
{
#if PY_MAJOR_VERSION >= 3
    return PyUnicode_FromString(m->func.m_ml->ml_name);
#else
    return PyString_FromString(m->func.m_ml->ml_name);
#endif
}
static PyMethodDef __pyx_CyFunction_methods[] = {
    {"__reduce__", (PyCFunction)__Pyx_CyFunction_reduce, METH_VARARGS, 0},
    {0, 0, 0, 0}
};
#if PY_VERSION_HEX < 0x030500A0
#define __Pyx_CyFunction_weakreflist(cyfunc) ((cyfunc)->func_weakreflist)
#else
#define __Pyx_CyFunction_weakreflist(cyfunc) ((cyfunc)->func.m_weakreflist)
#endif
static PyObject *__Pyx_CyFunction_New(PyTypeObject *type, PyMethodDef *ml, int flags, PyObject* qualname,
                                      PyObject *closure, PyObject *module, PyObject* globals, PyObject* code) {
    __pyx_CyFunctionObject *op = PyObject_GC_New(__pyx_CyFunctionObject, type);
    if (op == NULL)
        return NULL;
    op->flags = flags;
    __Pyx_CyFunction_weakreflist(op) = NULL;
    op->func.m_ml = ml;
    op->func.m_self = (PyObject *) op;
    Py_XINCREF(closure);
    op->func_closure = closure;
    Py_XINCREF(module);
    op->func.m_module = module;
    op->func_dict = NULL;
    op->func_name = NULL;
    Py_INCREF(qualname);
    op->func_qualname = qualname;
    op->func_doc = NULL;
    op->func_classobj = NULL;
    op->func_globals = globals;
    Py_INCREF(op->func_globals);
    Py_XINCREF(code);
    op->func_code = code;
    op->defaults_pyobjects = 0;
    op->defaults = NULL;
    op->defaults_tuple = NULL;
    op->defaults_kwdict = NULL;
    op->defaults_getter = NULL;
    op->func_annotations = NULL;
    PyObject_GC_Track(op);
    return (PyObject *) op;
}
static int
__Pyx_CyFunction_clear(__pyx_CyFunctionObject *m)
{
    Py_CLEAR(m->func_closure);
    Py_CLEAR(m->func.m_module);
    Py_CLEAR(m->func_dict);
    Py_CLEAR(m->func_name);
    Py_CLEAR(m->func_qualname);
    Py_CLEAR(m->func_doc);
    Py_CLEAR(m->func_globals);
    Py_CLEAR(m->func_code);
    Py_CLEAR(m->func_classobj);
    Py_CLEAR(m->defaults_tuple);
    Py_CLEAR(m->defaults_kwdict);
    Py_CLEAR(m->func_annotations);
    if (m->defaults) {
        PyObject **pydefaults = __Pyx_CyFunction_Defaults(PyObject *, m);
        int i;
        for (i = 0; i < m->defaults_pyobjects; i++)
            Py_XDECREF(pydefaults[i]);
        PyObject_Free(m->defaults);
        m->defaults = NULL;
    }
    return 0;
}
static void __Pyx__CyFunction_dealloc(__pyx_CyFunctionObject *m)
{
    if (__Pyx_CyFunction_weakreflist(m) != NULL)
        PyObject_ClearWeakRefs((PyObject *) m);
    __Pyx_CyFunction_clear(m);
    PyObject_GC_Del(m);
}
static void __Pyx_CyFunction_dealloc(__pyx_CyFunctionObject *m)
{
    PyObject_GC_UnTrack(m);
    __Pyx__CyFunction_dealloc(m);
}
static int __Pyx_CyFunction_traverse(__pyx_CyFunctionObject *m, visitproc visit, void *arg)
{
    Py_VISIT(m->func_closure);
    Py_VISIT(m->func.m_module);
    Py_VISIT(m->func_dict);
    Py_VISIT(m->func_name);
    Py_VISIT(m->func_qualname);
    Py_VISIT(m->func_doc);
    Py_VISIT(m->func_globals);
    Py_VISIT(m->func_code);
    Py_VISIT(m->func_classobj);
    Py_VISIT(m->defaults_tuple);
    Py_VISIT(m->defaults_kwdict);
    if (m->defaults) {
        PyObject **pydefaults = __Pyx_CyFunction_Defaults(PyObject *, m);
        int i;
        for (i = 0; i < m->defaults_pyobjects; i++)
            Py_VISIT(pydefaults[i]);
    }
    return 0;
}
static PyObject *__Pyx_CyFunction_descr_get(PyObject *func, PyObject *obj, PyObject *type)
{
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    if (m->flags & __Pyx_CYFUNCTION_STATICMETHOD) {
        Py_INCREF(func);
        return func;
    }
    if (m->flags & __Pyx_CYFUNCTION_CLASSMETHOD) {
        if (type == NULL)
            type = (PyObject *)(Py_TYPE(obj));
        return __Pyx_PyMethod_New(func, type, (PyObject *)(Py_TYPE(type)));
    }
    if (obj == Py_None)
        obj = NULL;
    return __Pyx_PyMethod_New(func, obj, type);
}
static PyObject*
__Pyx_CyFunction_repr(__pyx_CyFunctionObject *op)
{
#if PY_MAJOR_VERSION >= 3
    return PyUnicode_FromFormat("<cyfunction %U at %p>",
                                op->func_qualname, (void *)op);
#else
    return PyString_FromFormat("<cyfunction %s at %p>",
                               PyString_AsString(op->func_qualname), (void *)op);
#endif
}
static PyObject * __Pyx_CyFunction_CallMethod(PyObject *func, PyObject *self, PyObject *arg, PyObject *kw) {
    PyCFunctionObject* f = (PyCFunctionObject*)func;
    PyCFunction meth = f->m_ml->ml_meth;
    Py_ssize_t size;
    switch (f->m_ml->ml_flags & (METH_VARARGS | METH_KEYWORDS | METH_NOARGS | METH_O)) {
    case METH_VARARGS:
        if (likely(kw == NULL || PyDict_Size(kw) == 0))
            return (*meth)(self, arg);
        break;
    case METH_VARARGS | METH_KEYWORDS:
        return (*(PyCFunctionWithKeywords)meth)(self, arg, kw);
    case METH_NOARGS:
        if (likely(kw == NULL || PyDict_Size(kw) == 0)) {
            size = PyTuple_GET_SIZE(arg);
            if (likely(size == 0))
                return (*meth)(self, NULL);
            PyErr_Format(PyExc_TypeError,
                "%.200s() takes no arguments (%" CYTHON_FORMAT_SSIZE_T "d given)",
                f->m_ml->ml_name, size);
            return NULL;
        }
        break;
    case METH_O:
        if (likely(kw == NULL || PyDict_Size(kw) == 0)) {
            size = PyTuple_GET_SIZE(arg);
            if (likely(size == 1)) {
                PyObject *result, *arg0;
                #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                arg0 = PyTuple_GET_ITEM(arg, 0);
                #else
                arg0 = PySequence_ITEM(arg, 0); if (unlikely(!arg0)) return NULL;
                #endif
                result = (*meth)(self, arg0);
                #if !(CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS)
                Py_DECREF(arg0);
                #endif
                return result;
            }
            PyErr_Format(PyExc_TypeError,
                "%.200s() takes exactly one argument (%" CYTHON_FORMAT_SSIZE_T "d given)",
                f->m_ml->ml_name, size);
            return NULL;
        }
        break;
    default:
        PyErr_SetString(PyExc_SystemError, "Bad call flags in "
                        "__Pyx_CyFunction_Call. METH_OLDARGS is no "
                        "longer supported!");
        return NULL;
    }
    PyErr_Format(PyExc_TypeError, "%.200s() takes no keyword arguments",
                 f->m_ml->ml_name);
    return NULL;
}
static CYTHON_INLINE PyObject *__Pyx_CyFunction_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    return __Pyx_CyFunction_CallMethod(func, ((PyCFunctionObject*)func)->m_self, arg, kw);
}
static PyObject *__Pyx_CyFunction_CallAsMethod(PyObject *func, PyObject *args, PyObject *kw) {
    PyObject *result;
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *) func;
    if ((cyfunc->flags & __Pyx_CYFUNCTION_CCLASS) && !(cyfunc->flags & __Pyx_CYFUNCTION_STATICMETHOD)) {
        Py_ssize_t argc;
        PyObject *new_args;
        PyObject *self;
        argc = PyTuple_GET_SIZE(args);
        new_args = PyTuple_GetSlice(args, 1, argc);
        if (unlikely(!new_args))
            return NULL;
        self = PyTuple_GetItem(args, 0);
        if (unlikely(!self)) {
            Py_DECREF(new_args);
            return NULL;
        }
        result = __Pyx_CyFunction_CallMethod(func, self, new_args, kw);
        Py_DECREF(new_args);
    } else {
        result = __Pyx_CyFunction_Call(func, args, kw);
    }
    return result;
}
static PyTypeObject __pyx_CyFunctionType_type = {
    PyVarObject_HEAD_INIT(0, 0)
    "cython_function_or_method",
    sizeof(__pyx_CyFunctionObject),
    0,
    (destructor) __Pyx_CyFunction_dealloc,
    0,
    0,
    0,
#if PY_MAJOR_VERSION < 3
    0,
#else
    0,
#endif
    (reprfunc) __Pyx_CyFunction_repr,
    0,
    0,
    0,
    0,
    __Pyx_CyFunction_CallAsMethod,
    0,
    0,
    0,
    0,
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC,
    0,
    (traverseproc) __Pyx_CyFunction_traverse,
    (inquiry) __Pyx_CyFunction_clear,
    0,
#if PY_VERSION_HEX < 0x030500A0
    offsetof(__pyx_CyFunctionObject, func_weakreflist),
#else
    offsetof(PyCFunctionObject, m_weakreflist),
#endif
    0,
    0,
    __pyx_CyFunction_methods,
    __pyx_CyFunction_members,
    __pyx_CyFunction_getsets,
    0,
    0,
    __Pyx_CyFunction_descr_get,
    0,
    offsetof(__pyx_CyFunctionObject, func_dict),
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
#if PY_VERSION_HEX >= 0x030400a1
    0,
#endif
};
static int __pyx_CyFunction_init(void) {
    __pyx_CyFunctionType = __Pyx_FetchCommonType(&__pyx_CyFunctionType_type);
    if (unlikely(__pyx_CyFunctionType == NULL)) {
        return -1;
    }
    return 0;
}
static CYTHON_INLINE void *__Pyx_CyFunction_InitDefaults(PyObject *func, size_t size, int pyobjects) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults = PyObject_Malloc(size);
    if (unlikely(!m->defaults))
        return PyErr_NoMemory();
    memset(m->defaults, 0, size);
    m->defaults_pyobjects = pyobjects;
    return m->defaults;
}
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsTuple(PyObject *func, PyObject *tuple) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults_tuple = tuple;
    Py_INCREF(tuple);
}
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsKwDict(PyObject *func, PyObject *dict) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults_kwdict = dict;
    Py_INCREF(dict);
}
static CYTHON_INLINE void __Pyx_CyFunction_SetAnnotationsDict(PyObject *func, PyObject *dict) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->func_annotations = dict;
    Py_INCREF(dict);
}

/* UnpackUnboundCMethod */
        static int __Pyx_TryUnpackUnboundCMethod(__Pyx_CachedCFunction* target) {
    PyObject *method;
    method = __Pyx_PyObject_GetAttrStr(target->type, *target->method_name);
    if (unlikely(!method))
        return -1;
    target->method = method;
#if CYTHON_COMPILING_IN_CPYTHON
    #if PY_MAJOR_VERSION >= 3
    if (likely(__Pyx_TypeCheck(method, &PyMethodDescr_Type)))
    #endif
    {
        PyMethodDescrObject *descr = (PyMethodDescrObject*) method;
        target->func = descr->d_method->ml_meth;
        target->flag = descr->d_method->ml_flags & ~(METH_CLASS | METH_STATIC | METH_COEXIST);
    }
#endif
    return 0;
}

/* CallUnboundCMethod0 */
        static PyObject* __Pyx__CallUnboundCMethod0(__Pyx_CachedCFunction* cfunc, PyObject* self) {
    PyObject *args, *result = NULL;
    if (unlikely(!cfunc->method) && unlikely(__Pyx_TryUnpackUnboundCMethod(cfunc) < 0)) return NULL;
#if CYTHON_ASSUME_SAFE_MACROS
    args = PyTuple_New(1);
    if (unlikely(!args)) goto bad;
    Py_INCREF(self);
    PyTuple_SET_ITEM(args, 0, self);
#else
    args = PyTuple_Pack(1, self);
    if (unlikely(!args)) goto bad;
#endif
    result = __Pyx_PyObject_Call(cfunc->method, args, NULL);
    Py_DECREF(args);
bad:
    return result;
}

/* py_dict_items */
        static CYTHON_INLINE PyObject* __Pyx_PyDict_Items(PyObject* d) {
    if (PY_MAJOR_VERSION >= 3)
        return __Pyx_CallUnboundCMethod0(&__pyx_umethod_PyDict_Type_items, d);
    else
        return PyDict_Items(d);
}

/* IterFinish */
        static CYTHON_INLINE int __Pyx_IterFinish(void) {
#if CYTHON_FAST_THREAD_STATE
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject* exc_type = tstate->curexc_type;
    if (unlikely(exc_type)) {
        if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) {
            PyObject *exc_value, *exc_tb;
            exc_value = tstate->curexc_value;
            exc_tb = tstate->curexc_traceback;
            tstate->curexc_type = 0;
            tstate->curexc_value = 0;
            tstate->curexc_traceback = 0;
            Py_DECREF(exc_type);
            Py_XDECREF(exc_value);
            Py_XDECREF(exc_tb);
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#else
    if (unlikely(PyErr_Occurred())) {
        if (likely(PyErr_ExceptionMatches(PyExc_StopIteration))) {
            PyErr_Clear();
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#endif
}

/* UnpackItemEndCheck */
        static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected) {
    if (unlikely(retval)) {
        Py_DECREF(retval);
        __Pyx_RaiseTooManyValuesError(expected);
        return -1;
    } else {
        return __Pyx_IterFinish();
    }
    return 0;
}

/* PyObjectCallNoArg */
        #if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, NULL, 0);
    }
#endif
#ifdef __Pyx_CyFunction_USED
    if (likely(PyCFunction_Check(func) || __Pyx_TypeCheck(func, __pyx_CyFunctionType))) {
#else
    if (likely(PyCFunction_Check(func))) {
#endif
        if (likely(PyCFunction_GET_FLAGS(func) & METH_NOARGS)) {
            return __Pyx_PyObject_CallMethO(func, NULL);
        }
    }
    return __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL);
}
#endif

/* PyObjectCallMethod0 */
          static PyObject* __Pyx_PyObject_CallMethod0(PyObject* obj, PyObject* method_name) {
    PyObject *method, *result = NULL;
    method = __Pyx_PyObject_GetAttrStr(obj, method_name);
    if (unlikely(!method)) goto bad;
#if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(method))) {
        PyObject *self = PyMethod_GET_SELF(method);
        if (likely(self)) {
            PyObject *function = PyMethod_GET_FUNCTION(method);
            result = __Pyx_PyObject_CallOneArg(function, self);
            Py_DECREF(method);
            return result;
        }
    }
#endif
    result = __Pyx_PyObject_CallNoArg(method);
    Py_DECREF(method);
bad:
    return result;
}

/* RaiseNoneIterError */
          static CYTHON_INLINE void __Pyx_RaiseNoneNotIterableError(void) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
}

/* UnpackTupleError */
          static void __Pyx_UnpackTupleError(PyObject *t, Py_ssize_t index) {
    if (t == Py_None) {
      __Pyx_RaiseNoneNotIterableError();
    } else if (PyTuple_GET_SIZE(t) < index) {
      __Pyx_RaiseNeedMoreValuesError(PyTuple_GET_SIZE(t));
    } else {
      __Pyx_RaiseTooManyValuesError(index);
    }
}

/* UnpackTuple2 */
          static CYTHON_INLINE int __Pyx_unpack_tuple2_exact(
        PyObject* tuple, PyObject** pvalue1, PyObject** pvalue2, int decref_tuple) {
    PyObject *value1 = NULL, *value2 = NULL;
#if CYTHON_COMPILING_IN_PYPY
    value1 = PySequence_ITEM(tuple, 0);  if (unlikely(!value1)) goto bad;
    value2 = PySequence_ITEM(tuple, 1);  if (unlikely(!value2)) goto bad;
#else
    value1 = PyTuple_GET_ITEM(tuple, 0);  Py_INCREF(value1);
    value2 = PyTuple_GET_ITEM(tuple, 1);  Py_INCREF(value2);
#endif
    if (decref_tuple) {
        Py_DECREF(tuple);
    }
    *pvalue1 = value1;
    *pvalue2 = value2;
    return 0;
#if CYTHON_COMPILING_IN_PYPY
bad:
    Py_XDECREF(value1);
    Py_XDECREF(value2);
    if (decref_tuple) { Py_XDECREF(tuple); }
    return -1;
#endif
}
static int __Pyx_unpack_tuple2_generic(PyObject* tuple, PyObject** pvalue1, PyObject** pvalue2,
                                       int has_known_size, int decref_tuple) {
    Py_ssize_t index;
    PyObject *value1 = NULL, *value2 = NULL, *iter = NULL;
    iternextfunc iternext;
    iter = PyObject_GetIter(tuple);
    if (unlikely(!iter)) goto bad;
    if (decref_tuple) { Py_DECREF(tuple); tuple = NULL; }
    iternext = Py_TYPE(iter)->tp_iternext;
    value1 = iternext(iter); if (unlikely(!value1)) { index = 0; goto unpacking_failed; }
    value2 = iternext(iter); if (unlikely(!value2)) { index = 1; goto unpacking_failed; }
    if (!has_known_size && unlikely(__Pyx_IternextUnpackEndCheck(iternext(iter), 2))) goto bad;
    Py_DECREF(iter);
    *pvalue1 = value1;
    *pvalue2 = value2;
    return 0;
unpacking_failed:
    if (!has_known_size && __Pyx_IterFinish() == 0)
        __Pyx_RaiseNeedMoreValuesError(index);
bad:
    Py_XDECREF(iter);
    Py_XDECREF(value1);
    Py_XDECREF(value2);
    if (decref_tuple) { Py_XDECREF(tuple); }
    return -1;
}

/* dict_iter */
          static CYTHON_INLINE PyObject* __Pyx_dict_iterator(PyObject* iterable, int is_dict, PyObject* method_name,
                                                   Py_ssize_t* p_orig_length, int* p_source_is_dict) {
    is_dict = is_dict || likely(PyDict_CheckExact(iterable));
    *p_source_is_dict = is_dict;
    if (is_dict) {
#if !CYTHON_COMPILING_IN_PYPY
        *p_orig_length = PyDict_Size(iterable);
        Py_INCREF(iterable);
        return iterable;
#elif PY_MAJOR_VERSION >= 3
        static PyObject *py_items = NULL, *py_keys = NULL, *py_values = NULL;
        PyObject **pp = NULL;
        if (method_name) {
            const char *name = PyUnicode_AsUTF8(method_name);
            if (strcmp(name, "iteritems") == 0) pp = &py_items;
            else if (strcmp(name, "iterkeys") == 0) pp = &py_keys;
            else if (strcmp(name, "itervalues") == 0) pp = &py_values;
            if (pp) {
                if (!*pp) {
                    *pp = PyUnicode_FromString(name + 4);
                    if (!*pp)
                        return NULL;
                }
                method_name = *pp;
            }
        }
#endif
    }
    *p_orig_length = 0;
    if (method_name) {
        PyObject* iter;
        iterable = __Pyx_PyObject_CallMethod0(iterable, method_name);
        if (!iterable)
            return NULL;
#if !CYTHON_COMPILING_IN_PYPY
        if (PyTuple_CheckExact(iterable) || PyList_CheckExact(iterable))
            return iterable;
#endif
        iter = PyObject_GetIter(iterable);
        Py_DECREF(iterable);
        return iter;
    }
    return PyObject_GetIter(iterable);
}
static CYTHON_INLINE int __Pyx_dict_iter_next(
        PyObject* iter_obj, CYTHON_NCP_UNUSED Py_ssize_t orig_length, CYTHON_NCP_UNUSED Py_ssize_t* ppos,
        PyObject** pkey, PyObject** pvalue, PyObject** pitem, int source_is_dict) {
    PyObject* next_item;
#if !CYTHON_COMPILING_IN_PYPY
    if (source_is_dict) {
        PyObject *key, *value;
        if (unlikely(orig_length != PyDict_Size(iter_obj))) {
            PyErr_SetString(PyExc_RuntimeError, "dictionary changed size during iteration");
            return -1;
        }
        if (unlikely(!PyDict_Next(iter_obj, ppos, &key, &value))) {
            return 0;
        }
        if (pitem) {
            PyObject* tuple = PyTuple_New(2);
            if (unlikely(!tuple)) {
                return -1;
            }
            Py_INCREF(key);
            Py_INCREF(value);
            PyTuple_SET_ITEM(tuple, 0, key);
            PyTuple_SET_ITEM(tuple, 1, value);
            *pitem = tuple;
        } else {
            if (pkey) {
                Py_INCREF(key);
                *pkey = key;
            }
            if (pvalue) {
                Py_INCREF(value);
                *pvalue = value;
            }
        }
        return 1;
    } else if (PyTuple_CheckExact(iter_obj)) {
        Py_ssize_t pos = *ppos;
        if (unlikely(pos >= PyTuple_GET_SIZE(iter_obj))) return 0;
        *ppos = pos + 1;
        next_item = PyTuple_GET_ITEM(iter_obj, pos);
        Py_INCREF(next_item);
    } else if (PyList_CheckExact(iter_obj)) {
        Py_ssize_t pos = *ppos;
        if (unlikely(pos >= PyList_GET_SIZE(iter_obj))) return 0;
        *ppos = pos + 1;
        next_item = PyList_GET_ITEM(iter_obj, pos);
        Py_INCREF(next_item);
    } else
#endif
    {
        next_item = PyIter_Next(iter_obj);
        if (unlikely(!next_item)) {
            return __Pyx_IterFinish();
        }
    }
    if (pitem) {
        *pitem = next_item;
    } else if (pkey && pvalue) {
        if (__Pyx_unpack_tuple2(next_item, pkey, pvalue, source_is_dict, source_is_dict, 1))
            return -1;
    } else if (pkey) {
        *pkey = next_item;
    } else {
        *pvalue = next_item;
    }
    return 1;
}

/* GetModuleGlobalName */
          static CYTHON_INLINE PyObject *__Pyx_GetModuleGlobalName(PyObject *name) {
    PyObject *result;
#if !CYTHON_AVOID_BORROWED_REFS
    result = PyDict_GetItem(__pyx_d, name);
    if (likely(result)) {
        Py_INCREF(result);
    } else {
#else
    result = PyObject_GetItem(__pyx_d, name);
    if (!result) {
        PyErr_Clear();
#endif
        result = __Pyx_GetBuiltinName(name);
    }
    return result;
}

/* KeywordStringCheck */
            static int __Pyx_CheckKeywordStrings(
    PyObject *kwdict,
    const char* function_name,
    int kw_allowed)
{
    PyObject* key = 0;
    Py_ssize_t pos = 0;
#if CYTHON_COMPILING_IN_PYPY
    if (!kw_allowed && PyDict_Next(kwdict, &pos, &key, 0))
        goto invalid_keyword;
    return 1;
#else
    while (PyDict_Next(kwdict, &pos, &key, 0)) {
        #if PY_MAJOR_VERSION < 3
        if (unlikely(!PyString_Check(key)))
        #endif
            if (unlikely(!PyUnicode_Check(key)))
                goto invalid_keyword_type;
    }
    if ((!kw_allowed) && unlikely(key))
        goto invalid_keyword;
    return 1;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    return 0;
#endif
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
    return 0;
}

/* PyErrExceptionMatches */
            #if CYTHON_FAST_THREAD_STATE
static int __Pyx_PyErr_ExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        if (__Pyx_PyErr_GivenExceptionMatches(exc_type, PyTuple_GET_ITEM(tuple, i))) return 1;
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err) {
    PyObject *exc_type = tstate->curexc_type;
    if (exc_type == err) return 1;
    if (unlikely(!exc_type)) return 0;
    if (unlikely(PyTuple_Check(err)))
        return __Pyx_PyErr_ExceptionMatchesTuple(exc_type, err);
    return __Pyx_PyErr_GivenExceptionMatches(exc_type, err);
}
#endif

/* GetAttr */
            static CYTHON_INLINE PyObject *__Pyx_GetAttr(PyObject *o, PyObject *n) {
#if CYTHON_USE_TYPE_SLOTS
#if PY_MAJOR_VERSION >= 3
    if (likely(PyUnicode_Check(n)))
#else
    if (likely(PyString_Check(n)))
#endif
        return __Pyx_PyObject_GetAttrStr(o, n);
#endif
    return PyObject_GetAttr(o, n);
}

/* GetAttr3 */
            static PyObject *__Pyx_GetAttr3Default(PyObject *d) {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    if (unlikely(!__Pyx_PyErr_ExceptionMatches(PyExc_AttributeError)))
        return NULL;
    __Pyx_PyErr_Clear();
    Py_INCREF(d);
    return d;
}
static CYTHON_INLINE PyObject *__Pyx_GetAttr3(PyObject *o, PyObject *n, PyObject *d) {
    PyObject *r = __Pyx_GetAttr(o, n);
    return (likely(r)) ? r : __Pyx_GetAttr3Default(d);
}

/* CIntToDigits */
            static const char DIGIT_PAIRS_10[2*10*10+1] = {
    "00010203040506070809"
    "10111213141516171819"
    "20212223242526272829"
    "30313233343536373839"
    "40414243444546474849"
    "50515253545556575859"
    "60616263646566676869"
    "70717273747576777879"
    "80818283848586878889"
    "90919293949596979899"
};
static const char DIGIT_PAIRS_8[2*8*8+1] = {
    "0001020304050607"
    "1011121314151617"
    "2021222324252627"
    "3031323334353637"
    "4041424344454647"
    "5051525354555657"
    "6061626364656667"
    "7071727374757677"
};
static const char DIGITS_HEX[2*16+1] = {
    "0123456789abcdef0123456789ABCDEF"
};

/* BuildPyUnicode */
            static PyObject* __Pyx_PyUnicode_BuildFromAscii(Py_ssize_t ulength, char* chars, int clength,
                                                int prepend_sign, char padding_char) {
    PyObject *uval;
    Py_ssize_t uoffset = ulength - clength;
#if CYTHON_USE_UNICODE_INTERNALS
    Py_ssize_t i;
#if CYTHON_PEP393_ENABLED
    void *udata;
    uval = PyUnicode_New(ulength, 127);
    if (unlikely(!uval)) return NULL;
    udata = PyUnicode_DATA(uval);
#else
    Py_UNICODE *udata;
    uval = PyUnicode_FromUnicode(NULL, ulength);
    if (unlikely(!uval)) return NULL;
    udata = PyUnicode_AS_UNICODE(uval);
#endif
    if (uoffset > 0) {
        i = 0;
        if (prepend_sign) {
            __Pyx_PyUnicode_WRITE(PyUnicode_1BYTE_KIND, udata, 0, '-');
            i++;
        }
        for (; i < uoffset; i++) {
            __Pyx_PyUnicode_WRITE(PyUnicode_1BYTE_KIND, udata, i, padding_char);
        }
    }
    for (i=0; i < clength; i++) {
        __Pyx_PyUnicode_WRITE(PyUnicode_1BYTE_KIND, udata, uoffset+i, chars[i]);
    }
#else
    {
        uval = NULL;
        PyObject *sign = NULL, *padding = NULL;
        if (uoffset > 0) {
            prepend_sign = !!prepend_sign;
            if (uoffset > prepend_sign) {
                padding = PyUnicode_FromOrdinal(padding_char);
                if (likely(padding) && uoffset > prepend_sign + 1) {
                    PyObject *tmp;
                    PyObject *repeat = PyInt_FromSize_t(uoffset - prepend_sign);
                    if (unlikely(!repeat)) goto done_or_error;
                    tmp = PyNumber_Multiply(padding, repeat);
                    Py_DECREF(repeat);
                    Py_DECREF(padding);
                    padding = tmp;
                }
                if (unlikely(!padding)) goto done_or_error;
            }
            if (prepend_sign) {
                sign = PyUnicode_FromOrdinal('-');
                if (unlikely(!sign)) goto done_or_error;
            }
        }
        uval = PyUnicode_DecodeASCII(chars, clength, NULL);
        if (likely(uval) && padding) {
            PyObject *tmp = PyNumber_Add(padding, uval);
            Py_DECREF(uval);
            uval = tmp;
        }
        if (likely(uval) && sign) {
            PyObject *tmp = PyNumber_Add(sign, uval);
            Py_DECREF(uval);
            uval = tmp;
        }
done_or_error:
        Py_XDECREF(padding);
        Py_XDECREF(sign);
    }
#endif
    return uval;
}

/* CIntToPyUnicode */
            #ifdef _MSC_VER
    #ifndef _MSC_STDINT_H_
        #if _MSC_VER < 1300
           typedef unsigned short    uint16_t;
        #else
           typedef unsigned __int16  uint16_t;
        #endif
    #endif
#else
   #include <stdint.h>
#endif
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_From_Py_ssize_t(Py_ssize_t value, Py_ssize_t width, char padding_char, char format_char) {
    char digits[sizeof(Py_ssize_t)*3+2];
    char *dpos, *end = digits + sizeof(Py_ssize_t)*3+2;
    const char *hex_digits = DIGITS_HEX;
    Py_ssize_t ulength;
    int length, prepend_sign, last_one_off;
    Py_ssize_t remaining;
    const Py_ssize_t neg_one = (Py_ssize_t) -1, const_zero = (Py_ssize_t) 0;
    const int is_unsigned = neg_one > const_zero;
    if (format_char == 'X') {
        hex_digits += 16;
        format_char = 'x';
    };
    remaining = value;
    last_one_off = 0;
    dpos = end;
    while (remaining != 0) {
        int digit_pos;
        switch (format_char) {
        case 'o':
            digit_pos = abs((int)(remaining % (8*8)));
            remaining = remaining / (8*8);
            dpos -= 2;
            *(uint16_t*)dpos = ((uint16_t*)DIGIT_PAIRS_8)[digit_pos];
            last_one_off = (digit_pos < 8);
            break;
        case 'd':
            digit_pos = abs((int)(remaining % (10*10)));
            remaining = remaining / (10*10);
            dpos -= 2;
            *(uint16_t*)dpos = ((uint16_t*)DIGIT_PAIRS_10)[digit_pos];
            last_one_off = (digit_pos < 10);
            break;
        case 'x':
            *(--dpos) = hex_digits[abs((int)(remaining % 16))];
            remaining = remaining / 16;
            break;
        default:
            assert(0);
            break;
        }
    }
    if (last_one_off) {
        assert(*dpos == '0');
        dpos++;
    } else if (unlikely(dpos == end)) {
        *(--dpos) = '0';
    }
    length = end - dpos;
    ulength = length;
    prepend_sign = 0;
    if (!is_unsigned && value <= neg_one) {
        if (padding_char == ' ' || width <= length + 1) {
            *(--dpos) = '-';
            ++length;
        } else {
            prepend_sign = 1;
        }
        ++ulength;
    }
    if (width > ulength) {
        ulength = width;
    }
    if (ulength == 1) {
        return PyUnicode_FromOrdinal(*dpos);
    }
    return __Pyx_PyUnicode_BuildFromAscii(ulength, dpos, length, prepend_sign, padding_char);
}

/* SliceObject */
            static CYTHON_INLINE PyObject* __Pyx_PyObject_GetSlice(PyObject* obj,
        Py_ssize_t cstart, Py_ssize_t cstop,
        PyObject** _py_start, PyObject** _py_stop, PyObject** _py_slice,
        int has_cstart, int has_cstop, CYTHON_UNUSED int wraparound) {
#if CYTHON_USE_TYPE_SLOTS
    PyMappingMethods* mp;
#if PY_MAJOR_VERSION < 3
    PySequenceMethods* ms = Py_TYPE(obj)->tp_as_sequence;
    if (likely(ms && ms->sq_slice)) {
        if (!has_cstart) {
            if (_py_start && (*_py_start != Py_None)) {
                cstart = __Pyx_PyIndex_AsSsize_t(*_py_start);
                if ((cstart == (Py_ssize_t)-1) && PyErr_Occurred()) goto bad;
            } else
                cstart = 0;
        }
        if (!has_cstop) {
            if (_py_stop && (*_py_stop != Py_None)) {
                cstop = __Pyx_PyIndex_AsSsize_t(*_py_stop);
                if ((cstop == (Py_ssize_t)-1) && PyErr_Occurred()) goto bad;
            } else
                cstop = PY_SSIZE_T_MAX;
        }
        if (wraparound && unlikely((cstart < 0) | (cstop < 0)) && likely(ms->sq_length)) {
            Py_ssize_t l = ms->sq_length(obj);
            if (likely(l >= 0)) {
                if (cstop < 0) {
                    cstop += l;
                    if (cstop < 0) cstop = 0;
                }
                if (cstart < 0) {
                    cstart += l;
                    if (cstart < 0) cstart = 0;
                }
            } else {
                if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                    goto bad;
                PyErr_Clear();
            }
        }
        return ms->sq_slice(obj, cstart, cstop);
    }
#endif
    mp = Py_TYPE(obj)->tp_as_mapping;
    if (likely(mp && mp->mp_subscript))
#endif
    {
        PyObject* result;
        PyObject *py_slice, *py_start, *py_stop;
        if (_py_slice) {
            py_slice = *_py_slice;
        } else {
            PyObject* owned_start = NULL;
            PyObject* owned_stop = NULL;
            if (_py_start) {
                py_start = *_py_start;
            } else {
                if (has_cstart) {
                    owned_start = py_start = PyInt_FromSsize_t(cstart);
                    if (unlikely(!py_start)) goto bad;
                } else
                    py_start = Py_None;
            }
            if (_py_stop) {
                py_stop = *_py_stop;
            } else {
                if (has_cstop) {
                    owned_stop = py_stop = PyInt_FromSsize_t(cstop);
                    if (unlikely(!py_stop)) {
                        Py_XDECREF(owned_start);
                        goto bad;
                    }
                } else
                    py_stop = Py_None;
            }
            py_slice = PySlice_New(py_start, py_stop, Py_None);
            Py_XDECREF(owned_start);
            Py_XDECREF(owned_stop);
            if (unlikely(!py_slice)) goto bad;
        }
#if CYTHON_USE_TYPE_SLOTS
        result = mp->mp_subscript(obj, py_slice);
#else
        result = PyObject_GetItem(obj, py_slice);
#endif
        if (!_py_slice) {
            Py_DECREF(py_slice);
        }
        return result;
    }
    PyErr_Format(PyExc_TypeError,
        "'%.200s' object is unsliceable", Py_TYPE(obj)->tp_name);
bad:
    return NULL;
}

/* HasAttr */
            static CYTHON_INLINE int __Pyx_HasAttr(PyObject *o, PyObject *n) {
    PyObject *r;
    if (unlikely(!__Pyx_PyBaseString_Check(n))) {
        PyErr_SetString(PyExc_TypeError,
                        "hasattr(): attribute name must be string");
        return -1;
    }
    r = __Pyx_GetAttr(o, n);
    if (unlikely(!r)) {
        PyErr_Clear();
        return 0;
    } else {
        Py_DECREF(r);
        return 1;
    }
}

/* CIntToPyUnicode */
            #ifdef _MSC_VER
    #ifndef _MSC_STDINT_H_
        #if _MSC_VER < 1300
           typedef unsigned short    uint16_t;
        #else
           typedef unsigned __int16  uint16_t;
        #endif
    #endif
#else
   #include <stdint.h>
#endif
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_From_size_t(size_t value, Py_ssize_t width, char padding_char, char format_char) {
    char digits[sizeof(size_t)*3+2];
    char *dpos, *end = digits + sizeof(size_t)*3+2;
    const char *hex_digits = DIGITS_HEX;
    Py_ssize_t ulength;
    int length, prepend_sign, last_one_off;
    size_t remaining;
    const size_t neg_one = (size_t) -1, const_zero = (size_t) 0;
    const int is_unsigned = neg_one > const_zero;
    if (format_char == 'X') {
        hex_digits += 16;
        format_char = 'x';
    };
    remaining = value;
    last_one_off = 0;
    dpos = end;
    while (remaining != 0) {
        int digit_pos;
        switch (format_char) {
        case 'o':
            digit_pos = abs((int)(remaining % (8*8)));
            remaining = remaining / (8*8);
            dpos -= 2;
            *(uint16_t*)dpos = ((uint16_t*)DIGIT_PAIRS_8)[digit_pos];
            last_one_off = (digit_pos < 8);
            break;
        case 'd':
            digit_pos = abs((int)(remaining % (10*10)));
            remaining = remaining / (10*10);
            dpos -= 2;
            *(uint16_t*)dpos = ((uint16_t*)DIGIT_PAIRS_10)[digit_pos];
            last_one_off = (digit_pos < 10);
            break;
        case 'x':
            *(--dpos) = hex_digits[abs((int)(remaining % 16))];
            remaining = remaining / 16;
            break;
        default:
            assert(0);
            break;
        }
    }
    if (last_one_off) {
        assert(*dpos == '0');
        dpos++;
    } else if (unlikely(dpos == end)) {
        *(--dpos) = '0';
    }
    length = end - dpos;
    ulength = length;
    prepend_sign = 0;
    if (!is_unsigned && value <= neg_one) {
        if (padding_char == ' ' || width <= length + 1) {
            *(--dpos) = '-';
            ++length;
        } else {
            prepend_sign = 1;
        }
        ++ulength;
    }
    if (width > ulength) {
        ulength = width;
    }
    if (ulength == 1) {
        return PyUnicode_FromOrdinal(*dpos);
    }
    return __Pyx_PyUnicode_BuildFromAscii(ulength, dpos, length, prepend_sign, padding_char);
}

/* SaveResetException */
            #if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    #if PY_VERSION_HEX >= 0x030700A2
    *type = tstate->exc_state.exc_type;
    *value = tstate->exc_state.exc_value;
    *tb = tstate->exc_state.exc_traceback;
    #else
    *type = tstate->exc_type;
    *value = tstate->exc_value;
    *tb = tstate->exc_traceback;
    #endif
    Py_XINCREF(*type);
    Py_XINCREF(*value);
    Py_XINCREF(*tb);
}
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    #if PY_VERSION_HEX >= 0x030700A2
    tmp_type = tstate->exc_state.exc_type;
    tmp_value = tstate->exc_state.exc_value;
    tmp_tb = tstate->exc_state.exc_traceback;
    tstate->exc_state.exc_type = type;
    tstate->exc_state.exc_value = value;
    tstate->exc_state.exc_traceback = tb;
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = type;
    tstate->exc_value = value;
    tstate->exc_traceback = tb;
    #endif
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
#endif

/* GetException */
            #if CYTHON_FAST_THREAD_STATE
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb) {
#endif
    PyObject *local_type, *local_value, *local_tb;
#if CYTHON_FAST_THREAD_STATE
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    local_type = tstate->curexc_type;
    local_value = tstate->curexc_value;
    local_tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
#else
    PyErr_Fetch(&local_type, &local_value, &local_tb);
#endif
    PyErr_NormalizeException(&local_type, &local_value, &local_tb);
#if CYTHON_FAST_THREAD_STATE
    if (unlikely(tstate->curexc_type))
#else
    if (unlikely(PyErr_Occurred()))
#endif
        goto bad;
    #if PY_MAJOR_VERSION >= 3
    if (local_tb) {
        if (unlikely(PyException_SetTraceback(local_value, local_tb) < 0))
            goto bad;
    }
    #endif
    Py_XINCREF(local_tb);
    Py_XINCREF(local_type);
    Py_XINCREF(local_value);
    *type = local_type;
    *value = local_value;
    *tb = local_tb;
#if CYTHON_FAST_THREAD_STATE
    #if PY_VERSION_HEX >= 0x030700A2
    tmp_type = tstate->exc_state.exc_type;
    tmp_value = tstate->exc_state.exc_value;
    tmp_tb = tstate->exc_state.exc_traceback;
    tstate->exc_state.exc_type = local_type;
    tstate->exc_state.exc_value = local_value;
    tstate->exc_state.exc_traceback = local_tb;
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = local_type;
    tstate->exc_value = local_value;
    tstate->exc_traceback = local_tb;
    #endif
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#else
    PyErr_SetExcInfo(local_type, local_value, local_tb);
#endif
    return 0;
bad:
    *type = 0;
    *value = 0;
    *tb = 0;
    Py_XDECREF(local_type);
    Py_XDECREF(local_value);
    Py_XDECREF(local_tb);
    return -1;
}

/* SliceTupleAndList */
              #if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE void __Pyx_crop_slice(Py_ssize_t* _start, Py_ssize_t* _stop, Py_ssize_t* _length) {
    Py_ssize_t start = *_start, stop = *_stop, length = *_length;
    if (start < 0) {
        start += length;
        if (start < 0)
            start = 0;
    }
    if (stop < 0)
        stop += length;
    else if (stop > length)
        stop = length;
    *_length = stop - start;
    *_start = start;
    *_stop = stop;
}
static CYTHON_INLINE void __Pyx_copy_object_array(PyObject** CYTHON_RESTRICT src, PyObject** CYTHON_RESTRICT dest, Py_ssize_t length) {
    PyObject *v;
    Py_ssize_t i;
    for (i = 0; i < length; i++) {
        v = dest[i] = src[i];
        Py_INCREF(v);
    }
}
static CYTHON_INLINE PyObject* __Pyx_PyList_GetSlice(
            PyObject* src, Py_ssize_t start, Py_ssize_t stop) {
    PyObject* dest;
    Py_ssize_t length = PyList_GET_SIZE(src);
    __Pyx_crop_slice(&start, &stop, &length);
    if (unlikely(length <= 0))
        return PyList_New(0);
    dest = PyList_New(length);
    if (unlikely(!dest))
        return NULL;
    __Pyx_copy_object_array(
        ((PyListObject*)src)->ob_item + start,
        ((PyListObject*)dest)->ob_item,
        length);
    return dest;
}
static CYTHON_INLINE PyObject* __Pyx_PyTuple_GetSlice(
            PyObject* src, Py_ssize_t start, Py_ssize_t stop) {
    PyObject* dest;
    Py_ssize_t length = PyTuple_GET_SIZE(src);
    __Pyx_crop_slice(&start, &stop, &length);
    if (unlikely(length <= 0))
        return PyTuple_New(0);
    dest = PyTuple_New(length);
    if (unlikely(!dest))
        return NULL;
    __Pyx_copy_object_array(
        ((PyTupleObject*)src)->ob_item + start,
        ((PyTupleObject*)dest)->ob_item,
        length);
    return dest;
}
#endif

/* Import */
              static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level) {
    PyObject *empty_list = 0;
    PyObject *module = 0;
    PyObject *global_dict = 0;
    PyObject *empty_dict = 0;
    PyObject *list;
    #if PY_MAJOR_VERSION < 3
    PyObject *py_import;
    py_import = __Pyx_PyObject_GetAttrStr(__pyx_b, __pyx_n_s_import);
    if (!py_import)
        goto bad;
    #endif
    if (from_list)
        list = from_list;
    else {
        empty_list = PyList_New(0);
        if (!empty_list)
            goto bad;
        list = empty_list;
    }
    global_dict = PyModule_GetDict(__pyx_m);
    if (!global_dict)
        goto bad;
    empty_dict = PyDict_New();
    if (!empty_dict)
        goto bad;
    {
        #if PY_MAJOR_VERSION >= 3
        if (level == -1) {
            if (strchr(__Pyx_MODULE_NAME, '.')) {
                module = PyImport_ImportModuleLevelObject(
                    name, global_dict, empty_dict, list, 1);
                if (!module) {
                    if (!PyErr_ExceptionMatches(PyExc_ImportError))
                        goto bad;
                    PyErr_Clear();
                }
            }
            level = 0;
        }
        #endif
        if (!module) {
            #if PY_MAJOR_VERSION < 3
            PyObject *py_level = PyInt_FromLong(level);
            if (!py_level)
                goto bad;
            module = PyObject_CallFunctionObjArgs(py_import,
                name, global_dict, empty_dict, list, py_level, NULL);
            Py_DECREF(py_level);
            #else
            module = PyImport_ImportModuleLevelObject(
                name, global_dict, empty_dict, list, level);
            #endif
        }
    }
bad:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(py_import);
    #endif
    Py_XDECREF(empty_list);
    Py_XDECREF(empty_dict);
    return module;
}

/* ImportFrom */
              static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name) {
    PyObject* value = __Pyx_PyObject_GetAttrStr(module, name);
    if (unlikely(!value) && PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Format(PyExc_ImportError,
        #if PY_MAJOR_VERSION < 3
            "cannot import name %.230s", PyString_AS_STRING(name));
        #else
            "cannot import name %S", name);
        #endif
    }
    return value;
}

/* SetupReduce */
              static int __Pyx_setup_reduce_is_named(PyObject* meth, PyObject* name) {
  int ret;
  PyObject *name_attr;
  name_attr = __Pyx_PyObject_GetAttrStr(meth, __pyx_n_s_name);
  if (likely(name_attr)) {
      ret = PyObject_RichCompareBool(name_attr, name, Py_EQ);
  } else {
      ret = -1;
  }
  if (unlikely(ret < 0)) {
      PyErr_Clear();
      ret = 0;
  }
  Py_XDECREF(name_attr);
  return ret;
}
static int __Pyx_setup_reduce(PyObject* type_obj) {
    int ret = 0;
    PyObject *object_reduce = NULL;
    PyObject *object_reduce_ex = NULL;
    PyObject *reduce = NULL;
    PyObject *reduce_ex = NULL;
    PyObject *reduce_cython = NULL;
    PyObject *setstate = NULL;
    PyObject *setstate_cython = NULL;
#if CYTHON_USE_PYTYPE_LOOKUP
    if (_PyType_Lookup((PyTypeObject*)type_obj, __pyx_n_s_getstate)) goto GOOD;
#else
    if (PyObject_HasAttr(type_obj, __pyx_n_s_getstate)) goto GOOD;
#endif
#if CYTHON_USE_PYTYPE_LOOKUP
    object_reduce_ex = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto BAD;
#else
    object_reduce_ex = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto BAD;
#endif
    reduce_ex = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce_ex); if (unlikely(!reduce_ex)) goto BAD;
    if (reduce_ex == object_reduce_ex) {
#if CYTHON_USE_PYTYPE_LOOKUP
        object_reduce = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto BAD;
#else
        object_reduce = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto BAD;
#endif
        reduce = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce); if (unlikely(!reduce)) goto BAD;
        if (reduce == object_reduce || __Pyx_setup_reduce_is_named(reduce, __pyx_n_s_reduce_cython)) {
            reduce_cython = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce_cython); if (unlikely(!reduce_cython)) goto BAD;
            ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce, reduce_cython); if (unlikely(ret < 0)) goto BAD;
            ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce_cython); if (unlikely(ret < 0)) goto BAD;
            setstate = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_setstate);
            if (!setstate) PyErr_Clear();
            if (!setstate || __Pyx_setup_reduce_is_named(setstate, __pyx_n_s_setstate_cython)) {
                setstate_cython = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_setstate_cython); if (unlikely(!setstate_cython)) goto BAD;
                ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate, setstate_cython); if (unlikely(ret < 0)) goto BAD;
                ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate_cython); if (unlikely(ret < 0)) goto BAD;
            }
            PyType_Modified((PyTypeObject*)type_obj);
        }
    }
    goto GOOD;
BAD:
    if (!PyErr_Occurred())
        PyErr_Format(PyExc_RuntimeError, "Unable to initialize pickling for %s", ((PyTypeObject*)type_obj)->tp_name);
    ret = -1;
GOOD:
#if !CYTHON_USE_PYTYPE_LOOKUP
    Py_XDECREF(object_reduce);
    Py_XDECREF(object_reduce_ex);
#endif
    Py_XDECREF(reduce);
    Py_XDECREF(reduce_ex);
    Py_XDECREF(reduce_cython);
    Py_XDECREF(setstate);
    Py_XDECREF(setstate_cython);
    return ret;
}

/* SetVTable */
              static int __Pyx_SetVtable(PyObject *dict, void *vtable) {
#if PY_VERSION_HEX >= 0x02070000
    PyObject *ob = PyCapsule_New(vtable, 0, 0);
#else
    PyObject *ob = PyCObject_FromVoidPtr(vtable, 0);
#endif
    if (!ob)
        goto bad;
    if (PyDict_SetItem(dict, __pyx_n_s_pyx_vtable, ob) < 0)
        goto bad;
    Py_DECREF(ob);
    return 0;
bad:
    Py_XDECREF(ob);
    return -1;
}

/* CLineInTraceback */
              #ifndef CYTHON_CLINE_IN_TRACEBACK
static int __Pyx_CLineForTraceback(CYTHON_UNUSED PyThreadState *tstate, int c_line) {
    PyObject *use_cline;
    PyObject *ptype, *pvalue, *ptraceback;
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject **cython_runtime_dict;
#endif
    __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);
#if CYTHON_COMPILING_IN_CPYTHON
    cython_runtime_dict = _PyObject_GetDictPtr(__pyx_cython_runtime);
    if (likely(cython_runtime_dict)) {
      use_cline = PyDict_GetItem(*cython_runtime_dict, __pyx_n_s_cline_in_traceback);
    } else
#endif
    {
      PyObject *use_cline_obj = __Pyx_PyObject_GetAttrStr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback);
      if (use_cline_obj) {
        use_cline = PyObject_Not(use_cline_obj) ? Py_False : Py_True;
        Py_DECREF(use_cline_obj);
      } else {
        PyErr_Clear();
        use_cline = NULL;
      }
    }
    if (!use_cline) {
        c_line = 0;
        PyObject_SetAttr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback, Py_False);
    }
    else if (PyObject_Not(use_cline) != 0) {
        c_line = 0;
    }
    __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);
    return c_line;
}
#endif

/* CodeObjectCache */
              static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = start + (end - start) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, (size_t)new_max*sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}

/* AddTraceback */
              #include "compile.h"
#include "frameobject.h"
#include "traceback.h"
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    #if PY_MAJOR_VERSION < 3
    py_srcfile = PyString_FromString(filename);
    #else
    py_srcfile = PyUnicode_FromString(filename);
    #endif
    if (!py_srcfile) goto bad;
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        #else
        py_funcname = PyUnicode_FromString(funcname);
        #endif
    }
    if (!py_funcname) goto bad;
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    Py_DECREF(py_funcname);
    return py_code;
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    if (c_line) {
        c_line = __Pyx_CLineForTraceback(tstate, c_line);
    }
    py_code = __pyx_find_code_object(c_line ? -c_line : py_line);
    if (!py_code) {
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) goto bad;
        __pyx_insert_code_object(c_line ? -c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        tstate,            /*PyThreadState *tstate,*/
        py_code,           /*PyCodeObject *code,*/
        __pyx_d,    /*PyObject *globals,*/
        0                  /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    __Pyx_PyFrame_SetLineNumber(py_frame, py_line);
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

/* CIntToPy */
              static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value) {
    const int neg_one = (int) -1, const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(int) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(int) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(int),
                                     little, !is_unsigned);
    }
}

/* CIntFromPyVerify */
              #define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)
#define __PYX_VERIFY_RETURN_INT_EXC(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 1)
#define __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, exc)\
    {\
        func_type value = func_value;\
        if (sizeof(target_type) < sizeof(func_type)) {\
            if (unlikely(value != (func_type) (target_type) value)) {\
                func_type zero = 0;\
                if (exc && unlikely(value == (func_type)-1 && PyErr_Occurred()))\
                    return (target_type) -1;\
                if (is_unsigned && unlikely(value < zero))\
                    goto raise_neg_overflow;\
                else\
                    goto raise_overflow;\
            }\
        }\
        return (target_type) value;\
    }

/* CIntToPy */
              static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
    const long neg_one = (long) -1, const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
    }
}

/* CIntFromPy */
              static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
    const int neg_one = (int) -1, const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case  1: __PYX_VERIFY_RETURN_INT(int, digit, digits[0])
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 2 * PyLong_SHIFT) {
                            return (int) (((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 3 * PyLong_SHIFT) {
                            return (int) (((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 4 * PyLong_SHIFT) {
                            return (int) (((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case -1: __PYX_VERIFY_RETURN_INT(int, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(int,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(int) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) ((((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) ((((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) ((((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            int val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

/* CIntFromPy */
              static CYTHON_INLINE size_t __Pyx_PyInt_As_size_t(PyObject *x) {
    const size_t neg_one = (size_t) -1, const_zero = (size_t) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(size_t) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(size_t, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (size_t) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (size_t) 0;
                case  1: __PYX_VERIFY_RETURN_INT(size_t, digit, digits[0])
                case 2:
                    if (8 * sizeof(size_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) >= 2 * PyLong_SHIFT) {
                            return (size_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(size_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) >= 3 * PyLong_SHIFT) {
                            return (size_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(size_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) >= 4 * PyLong_SHIFT) {
                            return (size_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (size_t) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(size_t) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(size_t) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (size_t) 0;
                case -1: __PYX_VERIFY_RETURN_INT(size_t, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(size_t,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(size_t) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                            return (size_t) (((size_t)-1)*(((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(size_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                            return (size_t) ((((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                            return (size_t) (((size_t)-1)*(((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(size_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                            return (size_t) ((((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 4 * PyLong_SHIFT) {
                            return (size_t) (((size_t)-1)*(((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(size_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 4 * PyLong_SHIFT) {
                            return (size_t) ((((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(size_t) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(size_t) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            size_t val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (size_t) -1;
        }
    } else {
        size_t val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (size_t) -1;
        val = __Pyx_PyInt_As_size_t(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to size_t");
    return (size_t) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to size_t");
    return (size_t) -1;
}

/* CIntFromPy */
              static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
    const long neg_one = (long) -1, const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(long) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case  1: __PYX_VERIFY_RETURN_INT(long, digit, digits[0])
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 2 * PyLong_SHIFT) {
                            return (long) (((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 3 * PyLong_SHIFT) {
                            return (long) (((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 4 * PyLong_SHIFT) {
                            return (long) (((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (long) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(long) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case -1: __PYX_VERIFY_RETURN_INT(long, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(long,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(long) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) ((((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) ((((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) ((((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(long) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            long val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

/* FastTypeChecks */
              #if CYTHON_COMPILING_IN_CPYTHON
static int __Pyx_InBases(PyTypeObject *a, PyTypeObject *b) {
    while (a) {
        a = a->tp_base;
        if (a == b)
            return 1;
    }
    return b == &PyBaseObject_Type;
}
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b) {
    PyObject *mro;
    if (a == b) return 1;
    mro = a->tp_mro;
    if (likely(mro)) {
        Py_ssize_t i, n;
        n = PyTuple_GET_SIZE(mro);
        for (i = 0; i < n; i++) {
            if (PyTuple_GET_ITEM(mro, i) == (PyObject *)b)
                return 1;
        }
        return 0;
    }
    return __Pyx_InBases(a, b);
}
#if PY_MAJOR_VERSION == 2
static int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject* exc_type2) {
    PyObject *exception, *value, *tb;
    int res;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&exception, &value, &tb);
    res = exc_type1 ? PyObject_IsSubclass(err, exc_type1) : 0;
    if (unlikely(res == -1)) {
        PyErr_WriteUnraisable(err);
        res = 0;
    }
    if (!res) {
        res = PyObject_IsSubclass(err, exc_type2);
        if (unlikely(res == -1)) {
            PyErr_WriteUnraisable(err);
            res = 0;
        }
    }
    __Pyx_ErrRestore(exception, value, tb);
    return res;
}
#else
static CYTHON_INLINE int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject *exc_type2) {
    int res = exc_type1 ? __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type1) : 0;
    if (!res) {
        res = __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type2);
    }
    return res;
}
#endif
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject* exc_type) {
    if (likely(err == exc_type)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        return __Pyx_inner_PyErr_GivenExceptionMatches2(err, NULL, exc_type);
    }
    return PyErr_GivenExceptionMatches(err, exc_type);
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *exc_type1, PyObject *exc_type2) {
    if (likely(err == exc_type1 || err == exc_type2)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        return __Pyx_inner_PyErr_GivenExceptionMatches2(err, exc_type1, exc_type2);
    }
    return (PyErr_GivenExceptionMatches(err, exc_type1) || PyErr_GivenExceptionMatches(err, exc_type2));
}
#endif

/* SwapException */
              #if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx__ExceptionSwap(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    #if PY_VERSION_HEX >= 0x030700A2
    tmp_type = tstate->exc_state.exc_type;
    tmp_value = tstate->exc_state.exc_value;
    tmp_tb = tstate->exc_state.exc_traceback;
    tstate->exc_state.exc_type = *type;
    tstate->exc_state.exc_value = *value;
    tstate->exc_state.exc_traceback = *tb;
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = *type;
    tstate->exc_value = *value;
    tstate->exc_traceback = *tb;
    #endif
    *type = tmp_type;
    *value = tmp_value;
    *tb = tmp_tb;
}
#else
static CYTHON_INLINE void __Pyx_ExceptionSwap(PyObject **type, PyObject **value, PyObject **tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    PyErr_GetExcInfo(&tmp_type, &tmp_value, &tmp_tb);
    PyErr_SetExcInfo(*type, *value, *tb);
    *type = tmp_type;
    *value = tmp_value;
    *tb = tmp_tb;
}
#endif

/* PyObjectCallMethod1 */
              static PyObject* __Pyx__PyObject_CallMethod1(PyObject* method, PyObject* arg) {
    PyObject *result = NULL;
#if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(method))) {
        PyObject *self = PyMethod_GET_SELF(method);
        if (likely(self)) {
            PyObject *args;
            PyObject *function = PyMethod_GET_FUNCTION(method);
            #if CYTHON_FAST_PYCALL
            if (PyFunction_Check(function)) {
                PyObject *args[2] = {self, arg};
                result = __Pyx_PyFunction_FastCall(function, args, 2);
                goto done;
            }
            #endif
            #if CYTHON_FAST_PYCCALL
            if (__Pyx_PyFastCFunction_Check(function)) {
                PyObject *args[2] = {self, arg};
                result = __Pyx_PyCFunction_FastCall(function, args, 2);
                goto done;
            }
            #endif
            args = PyTuple_New(2);
            if (unlikely(!args)) goto done;
            Py_INCREF(self);
            PyTuple_SET_ITEM(args, 0, self);
            Py_INCREF(arg);
            PyTuple_SET_ITEM(args, 1, arg);
            Py_INCREF(function);
            result = __Pyx_PyObject_Call(function, args, NULL);
            Py_DECREF(args);
            Py_DECREF(function);
            return result;
        }
    }
#endif
    result = __Pyx_PyObject_CallOneArg(method, arg);
    goto done;
done:
    return result;
}
static PyObject* __Pyx_PyObject_CallMethod1(PyObject* obj, PyObject* method_name, PyObject* arg) {
    PyObject *method, *result = NULL;
    method = __Pyx_PyObject_GetAttrStr(obj, method_name);
    if (unlikely(!method)) goto done;
    result = __Pyx__PyObject_CallMethod1(method, arg);
done:
    Py_XDECREF(method);
    return result;
}

/* CoroutineBase */
              #include <structmember.h>
#include <frameobject.h>
#define __Pyx_Coroutine_Undelegate(gen) Py_CLEAR((gen)->yieldfrom)
static int __Pyx_PyGen__FetchStopIterationValue(CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject **pvalue) {
    PyObject *et, *ev, *tb;
    PyObject *value = NULL;
    __Pyx_ErrFetch(&et, &ev, &tb);
    if (!et) {
        Py_XDECREF(tb);
        Py_XDECREF(ev);
        Py_INCREF(Py_None);
        *pvalue = Py_None;
        return 0;
    }
    if (likely(et == PyExc_StopIteration)) {
        if (!ev) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#if PY_VERSION_HEX >= 0x030300A0
        else if (Py_TYPE(ev) == (PyTypeObject*)PyExc_StopIteration) {
            value = ((PyStopIterationObject *)ev)->value;
            Py_INCREF(value);
            Py_DECREF(ev);
        }
#endif
        else if (unlikely(PyTuple_Check(ev))) {
            if (PyTuple_GET_SIZE(ev) >= 1) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                value = PyTuple_GET_ITEM(ev, 0);
                Py_INCREF(value);
#else
                value = PySequence_ITEM(ev, 0);
#endif
            } else {
                Py_INCREF(Py_None);
                value = Py_None;
            }
            Py_DECREF(ev);
        }
        else if (!__Pyx_TypeCheck(ev, (PyTypeObject*)PyExc_StopIteration)) {
            value = ev;
        }
        if (likely(value)) {
            Py_XDECREF(tb);
            Py_DECREF(et);
            *pvalue = value;
            return 0;
        }
    } else if (!__Pyx_PyErr_GivenExceptionMatches(et, PyExc_StopIteration)) {
        __Pyx_ErrRestore(et, ev, tb);
        return -1;
    }
    PyErr_NormalizeException(&et, &ev, &tb);
    if (unlikely(!PyObject_TypeCheck(ev, (PyTypeObject*)PyExc_StopIteration))) {
        __Pyx_ErrRestore(et, ev, tb);
        return -1;
    }
    Py_XDECREF(tb);
    Py_DECREF(et);
#if PY_VERSION_HEX >= 0x030300A0
    value = ((PyStopIterationObject *)ev)->value;
    Py_INCREF(value);
    Py_DECREF(ev);
#else
    {
        PyObject* args = __Pyx_PyObject_GetAttrStr(ev, __pyx_n_s_args);
        Py_DECREF(ev);
        if (likely(args)) {
            value = PySequence_GetItem(args, 0);
            Py_DECREF(args);
        }
        if (unlikely(!value)) {
            __Pyx_ErrRestore(NULL, NULL, NULL);
            Py_INCREF(Py_None);
            value = Py_None;
        }
    }
#endif
    *pvalue = value;
    return 0;
}
static CYTHON_INLINE
void __Pyx_Coroutine_ExceptionClear(__pyx_CoroutineObject *self) {
    PyObject *exc_type = self->exc_type;
    PyObject *exc_value = self->exc_value;
    PyObject *exc_traceback = self->exc_traceback;
    self->exc_type = NULL;
    self->exc_value = NULL;
    self->exc_traceback = NULL;
    Py_XDECREF(exc_type);
    Py_XDECREF(exc_value);
    Py_XDECREF(exc_traceback);
}
#define __Pyx_Coroutine_AlreadyRunningError(gen)  (__Pyx__Coroutine_AlreadyRunningError(gen), (PyObject*)NULL)
static void __Pyx__Coroutine_AlreadyRunningError(CYTHON_UNUSED __pyx_CoroutineObject *gen) {
    const char *msg;
    if (0) {
    #ifdef __Pyx_Coroutine_USED
    } else if (__Pyx_Coroutine_CheckExact((PyObject*)gen)) {
        msg = "coroutine already executing";
    #endif
    #ifdef __Pyx_AsyncGen_USED
    } else if (__Pyx_AsyncGen_CheckExact((PyObject*)gen)) {
        msg = "async generator already executing";
    #endif
    } else {
        msg = "generator already executing";
    }
    PyErr_SetString(PyExc_ValueError, msg);
}
#define __Pyx_Coroutine_NotStartedError(gen)  (__Pyx__Coroutine_NotStartedError(gen), (PyObject*)NULL)
static void __Pyx__Coroutine_NotStartedError(CYTHON_UNUSED PyObject *gen) {
    const char *msg;
    if (0) {
    #ifdef __Pyx_Coroutine_USED
    } else if (__Pyx_Coroutine_CheckExact(gen)) {
        msg = "can't send non-None value to a just-started coroutine";
    #endif
    #ifdef __Pyx_AsyncGen_USED
    } else if (__Pyx_AsyncGen_CheckExact(gen)) {
        msg = "can't send non-None value to a just-started async generator";
    #endif
    } else {
        msg = "can't send non-None value to a just-started generator";
    }
    PyErr_SetString(PyExc_TypeError, msg);
}
#define __Pyx_Coroutine_AlreadyTerminatedError(gen, value, closing)  (__Pyx__Coroutine_AlreadyTerminatedError(gen, value, closing), (PyObject*)NULL)
static void __Pyx__Coroutine_AlreadyTerminatedError(CYTHON_UNUSED PyObject *gen, PyObject *value, CYTHON_UNUSED int closing) {
    #ifdef __Pyx_Coroutine_USED
    if (!closing && __Pyx_Coroutine_CheckExact(gen)) {
        PyErr_SetString(PyExc_RuntimeError, "cannot reuse already awaited coroutine");
    } else
    #endif
    if (value) {
        #ifdef __Pyx_AsyncGen_USED
        if (__Pyx_AsyncGen_CheckExact(gen))
            PyErr_SetNone(__Pyx_PyExc_StopAsyncIteration);
        else
        #endif
        PyErr_SetNone(PyExc_StopIteration);
    }
}
static
PyObject *__Pyx_Coroutine_SendEx(__pyx_CoroutineObject *self, PyObject *value, int closing) {
    __Pyx_PyThreadState_declare
    PyThreadState *tstate;
    PyObject *retval;
    assert(!self->is_running);
    if (unlikely(self->resume_label == 0)) {
        if (unlikely(value && value != Py_None)) {
            return __Pyx_Coroutine_NotStartedError((PyObject*)self);
        }
    }
    if (unlikely(self->resume_label == -1)) {
        return __Pyx_Coroutine_AlreadyTerminatedError((PyObject*)self, value, closing);
    }
#if CYTHON_FAST_THREAD_STATE
    __Pyx_PyThreadState_assign
    tstate = __pyx_tstate;
#else
    tstate = __Pyx_PyThreadState_Current;
#endif
    if (self->exc_type) {
#if CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_PYSTON
#else
        if (self->exc_traceback) {
            PyTracebackObject *tb = (PyTracebackObject *) self->exc_traceback;
            PyFrameObject *f = tb->tb_frame;
            Py_XINCREF(tstate->frame);
            assert(f->f_back == NULL);
            f->f_back = tstate->frame;
        }
#endif
        __Pyx_ExceptionSwap(&self->exc_type, &self->exc_value,
                            &self->exc_traceback);
    } else {
        __Pyx_Coroutine_ExceptionClear(self);
        __Pyx_ExceptionSave(&self->exc_type, &self->exc_value, &self->exc_traceback);
    }
    self->is_running = 1;
    retval = self->body((PyObject *) self, tstate, value);
    self->is_running = 0;
    return retval;
}
static CYTHON_INLINE void __Pyx_Coroutine_ResetFrameBackpointer(__pyx_CoroutineObject *self) {
    if (likely(self->exc_traceback)) {
#if CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_PYSTON
#else
        PyTracebackObject *tb = (PyTracebackObject *) self->exc_traceback;
        PyFrameObject *f = tb->tb_frame;
        Py_CLEAR(f->f_back);
#endif
    }
}
static CYTHON_INLINE
PyObject *__Pyx_Coroutine_MethodReturn(CYTHON_UNUSED PyObject* gen, PyObject *retval) {
    if (unlikely(!retval)) {
        __Pyx_PyThreadState_declare
        __Pyx_PyThreadState_assign
        if (!__Pyx_PyErr_Occurred()) {
            PyObject *exc = PyExc_StopIteration;
            #ifdef __Pyx_AsyncGen_USED
            if (__Pyx_AsyncGen_CheckExact(gen))
                exc = __Pyx_PyExc_StopAsyncIteration;
            #endif
            __Pyx_PyErr_SetNone(exc);
        }
    }
    return retval;
}
static CYTHON_INLINE
PyObject *__Pyx_Coroutine_FinishDelegation(__pyx_CoroutineObject *gen) {
    PyObject *ret;
    PyObject *val = NULL;
    __Pyx_Coroutine_Undelegate(gen);
    __Pyx_PyGen__FetchStopIterationValue(__Pyx_PyThreadState_Current, &val);
    ret = __Pyx_Coroutine_SendEx(gen, val, 0);
    Py_XDECREF(val);
    return ret;
}
static PyObject *__Pyx_Coroutine_Send(PyObject *self, PyObject *value) {
    PyObject *retval;
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject*) self;
    PyObject *yf = gen->yieldfrom;
    if (unlikely(gen->is_running))
        return __Pyx_Coroutine_AlreadyRunningError(gen);
    if (yf) {
        PyObject *ret;
        gen->is_running = 1;
        #ifdef __Pyx_Generator_USED
        if (__Pyx_Generator_CheckExact(yf)) {
            ret = __Pyx_Coroutine_Send(yf, value);
        } else
        #endif
        #ifdef __Pyx_Coroutine_USED
        if (__Pyx_Coroutine_CheckExact(yf)) {
            ret = __Pyx_Coroutine_Send(yf, value);
        } else
        #endif
        #ifdef __Pyx_AsyncGen_USED
        if (__pyx_PyAsyncGenASend_CheckExact(yf)) {
            ret = __Pyx_async_gen_asend_send(yf, value);
        } else
        #endif
        #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03030000 && (defined(__linux__) || PY_VERSION_HEX >= 0x030600B3)
        if (PyGen_CheckExact(yf)) {
            ret = _PyGen_Send((PyGenObject*)yf, value == Py_None ? NULL : value);
        } else
        #endif
        #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03050000 && defined(PyCoro_CheckExact) && (defined(__linux__) || PY_VERSION_HEX >= 0x030600B3)
        if (PyCoro_CheckExact(yf)) {
            ret = _PyGen_Send((PyGenObject*)yf, value == Py_None ? NULL : value);
        } else
        #endif
        {
            if (value == Py_None)
                ret = Py_TYPE(yf)->tp_iternext(yf);
            else
                ret = __Pyx_PyObject_CallMethod1(yf, __pyx_n_s_send, value);
        }
        gen->is_running = 0;
        if (likely(ret)) {
            return ret;
        }
        retval = __Pyx_Coroutine_FinishDelegation(gen);
    } else {
        retval = __Pyx_Coroutine_SendEx(gen, value, 0);
    }
    return __Pyx_Coroutine_MethodReturn(self, retval);
}
static int __Pyx_Coroutine_CloseIter(__pyx_CoroutineObject *gen, PyObject *yf) {
    PyObject *retval = NULL;
    int err = 0;
    #ifdef __Pyx_Generator_USED
    if (__Pyx_Generator_CheckExact(yf)) {
        retval = __Pyx_Coroutine_Close(yf);
        if (!retval)
            return -1;
    } else
    #endif
    #ifdef __Pyx_Coroutine_USED
    if (__Pyx_Coroutine_CheckExact(yf)) {
        retval = __Pyx_Coroutine_Close(yf);
        if (!retval)
            return -1;
    } else
    if (__Pyx_CoroutineAwait_CheckExact(yf)) {
        retval = __Pyx_CoroutineAwait_Close((__pyx_CoroutineAwaitObject*)yf);
        if (!retval)
            return -1;
    } else
    #endif
    #ifdef __Pyx_AsyncGen_USED
    if (__pyx_PyAsyncGenASend_CheckExact(yf)) {
        retval = __Pyx_async_gen_asend_close(yf, NULL);
    } else
    if (__pyx_PyAsyncGenAThrow_CheckExact(yf)) {
        retval = __Pyx_async_gen_athrow_close(yf, NULL);
    } else
    #endif
    {
        PyObject *meth;
        gen->is_running = 1;
        meth = __Pyx_PyObject_GetAttrStr(yf, __pyx_n_s_close);
        if (unlikely(!meth)) {
            if (!PyErr_ExceptionMatches(PyExc_AttributeError)) {
                PyErr_WriteUnraisable(yf);
            }
            PyErr_Clear();
        } else {
            retval = PyObject_CallFunction(meth, NULL);
            Py_DECREF(meth);
            if (!retval)
                err = -1;
        }
        gen->is_running = 0;
    }
    Py_XDECREF(retval);
    return err;
}
static PyObject *__Pyx_Generator_Next(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject*) self;
    PyObject *yf = gen->yieldfrom;
    if (unlikely(gen->is_running))
        return __Pyx_Coroutine_AlreadyRunningError(gen);
    if (yf) {
        PyObject *ret;
        gen->is_running = 1;
        #ifdef __Pyx_Generator_USED
        if (__Pyx_Generator_CheckExact(yf)) {
            ret = __Pyx_Generator_Next(yf);
        } else
        #endif
        #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03030000 && (defined(__linux__) || PY_VERSION_HEX >= 0x030600B3)
        if (PyGen_CheckExact(yf)) {
            ret = _PyGen_Send((PyGenObject*)yf, NULL);
        } else
        #endif
            ret = Py_TYPE(yf)->tp_iternext(yf);
        gen->is_running = 0;
        if (likely(ret)) {
            return ret;
        }
        return __Pyx_Coroutine_FinishDelegation(gen);
    }
    return __Pyx_Coroutine_SendEx(gen, Py_None, 0);
}
static PyObject *__Pyx_Coroutine_Close(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    PyObject *retval, *raised_exception;
    PyObject *yf = gen->yieldfrom;
    int err = 0;
    if (unlikely(gen->is_running))
        return __Pyx_Coroutine_AlreadyRunningError(gen);
    if (yf) {
        Py_INCREF(yf);
        err = __Pyx_Coroutine_CloseIter(gen, yf);
        __Pyx_Coroutine_Undelegate(gen);
        Py_DECREF(yf);
    }
    if (err == 0)
        PyErr_SetNone(PyExc_GeneratorExit);
    retval = __Pyx_Coroutine_SendEx(gen, NULL, 1);
    if (unlikely(retval)) {
        const char *msg;
        Py_DECREF(retval);
        if ((0)) {
        #ifdef __Pyx_Coroutine_USED
        } else if (__Pyx_Coroutine_CheckExact(self)) {
            msg = "coroutine ignored GeneratorExit";
        #endif
        #ifdef __Pyx_AsyncGen_USED
        } else if (__Pyx_AsyncGen_CheckExact(self)) {
#if PY_VERSION_HEX < 0x03060000
            msg = "async generator ignored GeneratorExit - might require Python 3.6+ finalisation (PEP 525)";
#else
            msg = "async generator ignored GeneratorExit";
#endif
        #endif
        } else {
            msg = "generator ignored GeneratorExit";
        }
        PyErr_SetString(PyExc_RuntimeError, msg);
        return NULL;
    }
    raised_exception = PyErr_Occurred();
    if (likely(!raised_exception || __Pyx_PyErr_GivenExceptionMatches2(raised_exception, PyExc_GeneratorExit, PyExc_StopIteration))) {
        if (raised_exception) PyErr_Clear();
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
}
static PyObject *__Pyx__Coroutine_Throw(PyObject *self, PyObject *typ, PyObject *val, PyObject *tb,
                                        PyObject *args, int close_on_genexit) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    PyObject *yf = gen->yieldfrom;
    if (unlikely(gen->is_running))
        return __Pyx_Coroutine_AlreadyRunningError(gen);
    if (yf) {
        PyObject *ret;
        Py_INCREF(yf);
        if (__Pyx_PyErr_GivenExceptionMatches(typ, PyExc_GeneratorExit) && close_on_genexit) {
            int err = __Pyx_Coroutine_CloseIter(gen, yf);
            Py_DECREF(yf);
            __Pyx_Coroutine_Undelegate(gen);
            if (err < 0)
                return __Pyx_Coroutine_MethodReturn(self, __Pyx_Coroutine_SendEx(gen, NULL, 0));
            goto throw_here;
        }
        gen->is_running = 1;
        if (0
        #ifdef __Pyx_Generator_USED
            || __Pyx_Generator_CheckExact(yf)
        #endif
        #ifdef __Pyx_Coroutine_USED
            || __Pyx_Coroutine_CheckExact(yf)
        #endif
            ) {
            ret = __Pyx__Coroutine_Throw(yf, typ, val, tb, args, close_on_genexit);
        #ifdef __Pyx_Coroutine_USED
        } else if (__Pyx_CoroutineAwait_CheckExact(yf)) {
            ret = __Pyx__Coroutine_Throw(((__pyx_CoroutineAwaitObject*)yf)->coroutine, typ, val, tb, args, close_on_genexit);
        #endif
        } else {
            PyObject *meth = __Pyx_PyObject_GetAttrStr(yf, __pyx_n_s_throw);
            if (unlikely(!meth)) {
                Py_DECREF(yf);
                if (!PyErr_ExceptionMatches(PyExc_AttributeError)) {
                    gen->is_running = 0;
                    return NULL;
                }
                PyErr_Clear();
                __Pyx_Coroutine_Undelegate(gen);
                gen->is_running = 0;
                goto throw_here;
            }
            if (likely(args)) {
                ret = PyObject_CallObject(meth, args);
            } else {
                ret = PyObject_CallFunctionObjArgs(meth, typ, val, tb, NULL);
            }
            Py_DECREF(meth);
        }
        gen->is_running = 0;
        Py_DECREF(yf);
        if (!ret) {
            ret = __Pyx_Coroutine_FinishDelegation(gen);
        }
        return __Pyx_Coroutine_MethodReturn(self, ret);
    }
throw_here:
    __Pyx_Raise(typ, val, tb, NULL);
    return __Pyx_Coroutine_MethodReturn(self, __Pyx_Coroutine_SendEx(gen, NULL, 0));
}
static PyObject *__Pyx_Coroutine_Throw(PyObject *self, PyObject *args) {
    PyObject *typ;
    PyObject *val = NULL;
    PyObject *tb = NULL;
    if (!PyArg_UnpackTuple(args, (char *)"throw", 1, 3, &typ, &val, &tb))
        return NULL;
    return __Pyx__Coroutine_Throw(self, typ, val, tb, args, 1);
}
static int __Pyx_Coroutine_traverse(__pyx_CoroutineObject *gen, visitproc visit, void *arg) {
    Py_VISIT(gen->closure);
    Py_VISIT(gen->classobj);
    Py_VISIT(gen->yieldfrom);
    Py_VISIT(gen->exc_type);
    Py_VISIT(gen->exc_value);
    Py_VISIT(gen->exc_traceback);
    return 0;
}
static int __Pyx_Coroutine_clear(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    Py_CLEAR(gen->closure);
    Py_CLEAR(gen->classobj);
    Py_CLEAR(gen->yieldfrom);
    Py_CLEAR(gen->exc_type);
    Py_CLEAR(gen->exc_value);
    Py_CLEAR(gen->exc_traceback);
#ifdef __Pyx_AsyncGen_USED
    if (__Pyx_AsyncGen_CheckExact(self)) {
        Py_CLEAR(((__pyx_PyAsyncGenObject*)gen)->ag_finalizer);
    }
#endif
    Py_CLEAR(gen->gi_name);
    Py_CLEAR(gen->gi_qualname);
    Py_CLEAR(gen->gi_modulename);
    return 0;
}
static void __Pyx_Coroutine_dealloc(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    PyObject_GC_UnTrack(gen);
    if (gen->gi_weakreflist != NULL)
        PyObject_ClearWeakRefs(self);
    if (gen->resume_label >= 0) {
        PyObject_GC_Track(self);
#if PY_VERSION_HEX >= 0x030400a1 && CYTHON_USE_TP_FINALIZE
        if (PyObject_CallFinalizerFromDealloc(self))
#else
        Py_TYPE(gen)->tp_del(self);
        if (self->ob_refcnt > 0)
#endif
        {
            return;
        }
        PyObject_GC_UnTrack(self);
    }
#ifdef __Pyx_AsyncGen_USED
    if (__Pyx_AsyncGen_CheckExact(self)) {
        /* We have to handle this case for asynchronous generators
           right here, because this code has to be between UNTRACK
           and GC_Del. */
        Py_CLEAR(((__pyx_PyAsyncGenObject*)self)->ag_finalizer);
    }
#endif
    __Pyx_Coroutine_clear(self);
    PyObject_GC_Del(gen);
}
static void __Pyx_Coroutine_del(PyObject *self) {
    PyObject *error_type, *error_value, *error_traceback;
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    __Pyx_PyThreadState_declare
    if (gen->resume_label < 0) {
        return;
    }
#if !CYTHON_USE_TP_FINALIZE
    assert(self->ob_refcnt == 0);
    self->ob_refcnt = 1;
#endif
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&error_type, &error_value, &error_traceback);
#ifdef __Pyx_AsyncGen_USED
    if (__Pyx_AsyncGen_CheckExact(self)) {
        __pyx_PyAsyncGenObject *agen = (__pyx_PyAsyncGenObject*)self;
        PyObject *finalizer = agen->ag_finalizer;
        if (finalizer && !agen->ag_closed) {
            PyObject *res = __Pyx_PyObject_CallOneArg(finalizer, self);
            if (unlikely(!res)) {
                PyErr_WriteUnraisable(self);
            } else {
                Py_DECREF(res);
            }
            __Pyx_ErrRestore(error_type, error_value, error_traceback);
            return;
        }
    }
#endif
    if (unlikely(gen->resume_label == 0 && !error_value)) {
#ifdef __Pyx_Coroutine_USED
#ifdef __Pyx_Generator_USED
    if (!__Pyx_Generator_CheckExact(self))
#endif
        {
        PyObject_GC_UnTrack(self);
#if PY_MAJOR_VERSION >= 3  || defined(PyErr_WarnFormat)
        if (unlikely(PyErr_WarnFormat(PyExc_RuntimeWarning, 1, "coroutine '%.50S' was never awaited", gen->gi_qualname) < 0))
            PyErr_WriteUnraisable(self);
#else
        {PyObject *msg;
        char *cmsg;
        #if CYTHON_COMPILING_IN_PYPY
        msg = NULL;
        cmsg = (char*) "coroutine was never awaited";
        #else
        char *cname;
        PyObject *qualname;
        qualname = gen->gi_qualname;
        cname = PyString_AS_STRING(qualname);
        msg = PyString_FromFormat("coroutine '%.50s' was never awaited", cname);
        if (unlikely(!msg)) {
            PyErr_Clear();
            cmsg = (char*) "coroutine was never awaited";
        } else {
            cmsg = PyString_AS_STRING(msg);
        }
        #endif
        if (unlikely(PyErr_WarnEx(PyExc_RuntimeWarning, cmsg, 1) < 0))
            PyErr_WriteUnraisable(self);
        Py_XDECREF(msg);}
#endif
        PyObject_GC_Track(self);
        }
#endif
    } else {
        PyObject *res = __Pyx_Coroutine_Close(self);
        if (unlikely(!res)) {
            if (PyErr_Occurred())
                PyErr_WriteUnraisable(self);
        } else {
            Py_DECREF(res);
        }
    }
    __Pyx_ErrRestore(error_type, error_value, error_traceback);
#if !CYTHON_USE_TP_FINALIZE
    assert(self->ob_refcnt > 0);
    if (--self->ob_refcnt == 0) {
        return;
    }
    {
        Py_ssize_t refcnt = self->ob_refcnt;
        _Py_NewReference(self);
        self->ob_refcnt = refcnt;
    }
#if CYTHON_COMPILING_IN_CPYTHON
    assert(PyType_IS_GC(self->ob_type) &&
           _Py_AS_GC(self)->gc.gc_refs != _PyGC_REFS_UNTRACKED);
    _Py_DEC_REFTOTAL;
#endif
#ifdef COUNT_ALLOCS
    --Py_TYPE(self)->tp_frees;
    --Py_TYPE(self)->tp_allocs;
#endif
#endif
}
static PyObject *
__Pyx_Coroutine_get_name(__pyx_CoroutineObject *self)
{
    PyObject *name = self->gi_name;
    if (unlikely(!name)) name = Py_None;
    Py_INCREF(name);
    return name;
}
static int
__Pyx_Coroutine_set_name(__pyx_CoroutineObject *self, PyObject *value)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value))) {
#else
    if (unlikely(value == NULL || !PyString_Check(value))) {
#endif
        PyErr_SetString(PyExc_TypeError,
                        "__name__ must be set to a string object");
        return -1;
    }
    tmp = self->gi_name;
    Py_INCREF(value);
    self->gi_name = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_Coroutine_get_qualname(__pyx_CoroutineObject *self)
{
    PyObject *name = self->gi_qualname;
    if (unlikely(!name)) name = Py_None;
    Py_INCREF(name);
    return name;
}
static int
__Pyx_Coroutine_set_qualname(__pyx_CoroutineObject *self, PyObject *value)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value))) {
#else
    if (unlikely(value == NULL || !PyString_Check(value))) {
#endif
        PyErr_SetString(PyExc_TypeError,
                        "__qualname__ must be set to a string object");
        return -1;
    }
    tmp = self->gi_qualname;
    Py_INCREF(value);
    self->gi_qualname = value;
    Py_XDECREF(tmp);
    return 0;
}
static __pyx_CoroutineObject *__Pyx__Coroutine_New(
            PyTypeObject* type, __pyx_coroutine_body_t body, PyObject *closure,
            PyObject *name, PyObject *qualname, PyObject *module_name) {
    __pyx_CoroutineObject *gen = PyObject_GC_New(__pyx_CoroutineObject, type);
    if (unlikely(!gen))
        return NULL;
    return __Pyx__Coroutine_NewInit(gen, body, closure, name, qualname, module_name);
}
static __pyx_CoroutineObject *__Pyx__Coroutine_NewInit(
            __pyx_CoroutineObject *gen, __pyx_coroutine_body_t body, PyObject *closure,
            PyObject *name, PyObject *qualname, PyObject *module_name) {
    gen->body = body;
    gen->closure = closure;
    Py_XINCREF(closure);
    gen->is_running = 0;
    gen->resume_label = 0;
    gen->classobj = NULL;
    gen->yieldfrom = NULL;
    gen->exc_type = NULL;
    gen->exc_value = NULL;
    gen->exc_traceback = NULL;
    gen->gi_weakreflist = NULL;
    Py_XINCREF(qualname);
    gen->gi_qualname = qualname;
    Py_XINCREF(name);
    gen->gi_name = name;
    Py_XINCREF(module_name);
    gen->gi_modulename = module_name;
    PyObject_GC_Track(gen);
    return gen;
}

/* PatchModuleWithCoroutine */
                  static PyObject* __Pyx_Coroutine_patch_module(PyObject* module, const char* py_code) {
#if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
    int result;
    PyObject *globals, *result_obj;
    globals = PyDict_New();  if (unlikely(!globals)) goto ignore;
    result = PyDict_SetItemString(globals, "_cython_coroutine_type",
    #ifdef __Pyx_Coroutine_USED
        (PyObject*)__pyx_CoroutineType);
    #else
        Py_None);
    #endif
    if (unlikely(result < 0)) goto ignore;
    result = PyDict_SetItemString(globals, "_cython_generator_type",
    #ifdef __Pyx_Generator_USED
        (PyObject*)__pyx_GeneratorType);
    #else
        Py_None);
    #endif
    if (unlikely(result < 0)) goto ignore;
    if (unlikely(PyDict_SetItemString(globals, "_module", module) < 0)) goto ignore;
    if (unlikely(PyDict_SetItemString(globals, "__builtins__", __pyx_b) < 0)) goto ignore;
    result_obj = PyRun_String(py_code, Py_file_input, globals, globals);
    if (unlikely(!result_obj)) goto ignore;
    Py_DECREF(result_obj);
    Py_DECREF(globals);
    return module;
ignore:
    Py_XDECREF(globals);
    PyErr_WriteUnraisable(module);
    if (unlikely(PyErr_WarnEx(PyExc_RuntimeWarning, "Cython module failed to patch module with custom type", 1) < 0)) {
        Py_DECREF(module);
        module = NULL;
    }
#else
    py_code++;
#endif
    return module;
}

/* PatchGeneratorABC */
                  #ifndef CYTHON_REGISTER_ABCS
#define CYTHON_REGISTER_ABCS 1
#endif
#if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
static PyObject* __Pyx_patch_abc_module(PyObject *module);
static PyObject* __Pyx_patch_abc_module(PyObject *module) {
    module = __Pyx_Coroutine_patch_module(
        module, ""
"if _cython_generator_type is not None:\n"
"    try: Generator = _module.Generator\n"
"    except AttributeError: pass\n"
"    else: Generator.register(_cython_generator_type)\n"
"if _cython_coroutine_type is not None:\n"
"    try: Coroutine = _module.Coroutine\n"
"    except AttributeError: pass\n"
"    else: Coroutine.register(_cython_coroutine_type)\n"
    );
    return module;
}
#endif
static int __Pyx_patch_abc(void) {
#if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
    static int abc_patched = 0;
    if (CYTHON_REGISTER_ABCS && !abc_patched) {
        PyObject *module;
        module = PyImport_ImportModule((PY_MAJOR_VERSION >= 3) ? "collections.abc" : "collections");
        if (!module) {
            PyErr_WriteUnraisable(NULL);
            if (unlikely(PyErr_WarnEx(PyExc_RuntimeWarning,
                    ((PY_MAJOR_VERSION >= 3) ?
                        "Cython module failed to register with collections.abc module" :
                        "Cython module failed to register with collections module"), 1) < 0)) {
                return -1;
            }
        } else {
            module = __Pyx_patch_abc_module(module);
            abc_patched = 1;
            if (unlikely(!module))
                return -1;
            Py_DECREF(module);
        }
        module = PyImport_ImportModule("backports_abc");
        if (module) {
            module = __Pyx_patch_abc_module(module);
            Py_XDECREF(module);
        }
        if (!module) {
            PyErr_Clear();
        }
    }
#else
    if ((0)) __Pyx_Coroutine_patch_module(NULL, NULL);
#endif
    return 0;
}

/* Generator */
                  static PyMethodDef __pyx_Generator_methods[] = {
    {"send", (PyCFunction) __Pyx_Coroutine_Send, METH_O,
     (char*) PyDoc_STR("send(arg) -> send 'arg' into generator,\nreturn next yielded value or raise StopIteration.")},
    {"throw", (PyCFunction) __Pyx_Coroutine_Throw, METH_VARARGS,
     (char*) PyDoc_STR("throw(typ[,val[,tb]]) -> raise exception in generator,\nreturn next yielded value or raise StopIteration.")},
    {"close", (PyCFunction) __Pyx_Coroutine_Close, METH_NOARGS,
     (char*) PyDoc_STR("close() -> raise GeneratorExit inside generator.")},
    {0, 0, 0, 0}
};
static PyMemberDef __pyx_Generator_memberlist[] = {
    {(char *) "gi_running", T_BOOL, offsetof(__pyx_CoroutineObject, is_running), READONLY, NULL},
    {(char*) "gi_yieldfrom", T_OBJECT, offsetof(__pyx_CoroutineObject, yieldfrom), READONLY,
     (char*) PyDoc_STR("object being iterated by 'yield from', or None")},
    {0, 0, 0, 0, 0}
};
static PyGetSetDef __pyx_Generator_getsets[] = {
    {(char *) "__name__", (getter)__Pyx_Coroutine_get_name, (setter)__Pyx_Coroutine_set_name,
     (char*) PyDoc_STR("name of the generator"), 0},
    {(char *) "__qualname__", (getter)__Pyx_Coroutine_get_qualname, (setter)__Pyx_Coroutine_set_qualname,
     (char*) PyDoc_STR("qualified name of the generator"), 0},
    {0, 0, 0, 0, 0}
};
static PyTypeObject __pyx_GeneratorType_type = {
    PyVarObject_HEAD_INIT(0, 0)
    "generator",
    sizeof(__pyx_CoroutineObject),
    0,
    (destructor) __Pyx_Coroutine_dealloc,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC | Py_TPFLAGS_HAVE_FINALIZE,
    0,
    (traverseproc) __Pyx_Coroutine_traverse,
    0,
    0,
    offsetof(__pyx_CoroutineObject, gi_weakreflist),
    0,
    (iternextfunc) __Pyx_Generator_Next,
    __pyx_Generator_methods,
    __pyx_Generator_memberlist,
    __pyx_Generator_getsets,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
#if CYTHON_USE_TP_FINALIZE
    0,
#else
    __Pyx_Coroutine_del,
#endif
    0,
#if CYTHON_USE_TP_FINALIZE
    __Pyx_Coroutine_del,
#elif PY_VERSION_HEX >= 0x030400a1
    0,
#endif
};
static int __pyx_Generator_init(void) {
    __pyx_GeneratorType_type.tp_getattro = PyObject_GenericGetAttr;
    __pyx_GeneratorType_type.tp_iter = PyObject_SelfIter;
    __pyx_GeneratorType = __Pyx_FetchCommonType(&__pyx_GeneratorType_type);
    if (unlikely(!__pyx_GeneratorType)) {
        return -1;
    }
    return 0;
}

/* CheckBinaryVersion */
                  static int __Pyx_check_binary_version(void) {
    char ctversion[4], rtversion[4];
    PyOS_snprintf(ctversion, 4, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    PyOS_snprintf(rtversion, 4, "%s", Py_GetVersion());
    if (ctversion[0] != rtversion[0] || ctversion[2] != rtversion[2]) {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        return PyErr_WarnEx(NULL, message, 1);
    }
    return 0;
}

/* ModuleImport */
                  #ifndef __PYX_HAVE_RT_ImportModule
#define __PYX_HAVE_RT_ImportModule
static PyObject *__Pyx_ImportModule(const char *name) {
    PyObject *py_name = 0;
    PyObject *py_module = 0;
    py_name = __Pyx_PyIdentifier_FromString(name);
    if (!py_name)
        goto bad;
    py_module = PyImport_Import(py_name);
    Py_DECREF(py_name);
    return py_module;
bad:
    Py_XDECREF(py_name);
    return 0;
}
#endif

/* TypeImport */
                  #ifndef __PYX_HAVE_RT_ImportType
#define __PYX_HAVE_RT_ImportType
static PyTypeObject *__Pyx_ImportType(const char *module_name, const char *class_name,
    size_t size, int strict)
{
    PyObject *py_module = 0;
    PyObject *result = 0;
    PyObject *py_name = 0;
    char warning[200];
    Py_ssize_t basicsize;
#ifdef Py_LIMITED_API
    PyObject *py_basicsize;
#endif
    py_module = __Pyx_ImportModule(module_name);
    if (!py_module)
        goto bad;
    py_name = __Pyx_PyIdentifier_FromString(class_name);
    if (!py_name)
        goto bad;
    result = PyObject_GetAttr(py_module, py_name);
    Py_DECREF(py_name);
    py_name = 0;
    Py_DECREF(py_module);
    py_module = 0;
    if (!result)
        goto bad;
    if (!PyType_Check(result)) {
        PyErr_Format(PyExc_TypeError,
            "%.200s.%.200s is not a type object",
            module_name, class_name);
        goto bad;
    }
#ifndef Py_LIMITED_API
    basicsize = ((PyTypeObject *)result)->tp_basicsize;
#else
    py_basicsize = PyObject_GetAttrString(result, "__basicsize__");
    if (!py_basicsize)
        goto bad;
    basicsize = PyLong_AsSsize_t(py_basicsize);
    Py_DECREF(py_basicsize);
    py_basicsize = 0;
    if (basicsize == (Py_ssize_t)-1 && PyErr_Occurred())
        goto bad;
#endif
    if (!strict && (size_t)basicsize > size) {
        PyOS_snprintf(warning, sizeof(warning),
            "%s.%s size changed, may indicate binary incompatibility. Expected %zd, got %zd",
            module_name, class_name, basicsize, size);
        if (PyErr_WarnEx(NULL, warning, 0) < 0) goto bad;
    }
    else if ((size_t)basicsize != size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s has the wrong size, try recompiling. Expected %zd, got %zd",
            module_name, class_name, basicsize, size);
        goto bad;
    }
    return (PyTypeObject *)result;
bad:
    Py_XDECREF(py_module);
    Py_XDECREF(result);
    return NULL;
}
#endif

/* InitStrings */
                  static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        if (PyObject_Hash(*t->p) == -1)
            PyErr_Clear();
        ++t;
    }
    return 0;
}

static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    return __Pyx_PyUnicode_FromStringAndSize(c_str, (Py_ssize_t)strlen(c_str));
}
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
#if !CYTHON_PEP393_ENABLED
static const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    char* defenc_c;
    PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
    if (!defenc) return NULL;
    defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    {
        char* end = defenc_c + PyBytes_GET_SIZE(defenc);
        char* c;
        for (c = defenc_c; c < end; c++) {
            if ((unsigned char) (*c) >= 128) {
                PyUnicode_AsASCIIString(o);
                return NULL;
            }
        }
    }
#endif
    *length = PyBytes_GET_SIZE(defenc);
    return defenc_c;
}
#else
static CYTHON_INLINE const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    if (unlikely(__Pyx_PyUnicode_READY(o) == -1)) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    if (likely(PyUnicode_IS_ASCII(o))) {
        *length = PyUnicode_GET_LENGTH(o);
        return PyUnicode_AsUTF8(o);
    } else {
        PyUnicode_AsASCIIString(o);
        return NULL;
    }
#else
    return PyUnicode_AsUTF8AndSize(o, length);
#endif
}
#endif
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
        return __Pyx_PyUnicode_AsStringAndSize(o, length);
    } else
#endif
#if (!CYTHON_COMPILING_IN_PYPY) || (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE))
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static PyObject* __Pyx_PyNumber_IntOrLongWrongResultType(PyObject* result, const char* type_name) {
#if PY_MAJOR_VERSION >= 3
    if (PyLong_Check(result)) {
        if (PyErr_WarnFormat(PyExc_DeprecationWarning, 1,
                "__int__ returned non-int (type %.200s).  "
                "The ability to return an instance of a strict subclass of int "
                "is deprecated, and may be removed in a future version of Python.",
                Py_TYPE(result)->tp_name)) {
            Py_DECREF(result);
            return NULL;
        }
        return result;
    }
#endif
    PyErr_Format(PyExc_TypeError,
                 "__%.4s__ returned non-%.4s (type %.200s)",
                 type_name, type_name, Py_TYPE(result)->tp_name);
    Py_DECREF(result);
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x) {
#if CYTHON_USE_TYPE_SLOTS
  PyNumberMethods *m;
#endif
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_Check(x) || PyLong_Check(x)))
#else
  if (likely(PyLong_Check(x)))
#endif
    return __Pyx_NewRef(x);
#if CYTHON_USE_TYPE_SLOTS
  m = Py_TYPE(x)->tp_as_number;
  #if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = m->nb_int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = m->nb_long(x);
  }
  #else
  if (likely(m && m->nb_int)) {
    name = "int";
    res = m->nb_int(x);
  }
  #endif
#else
  if (!PyBytes_CheckExact(x) && !PyUnicode_CheckExact(x)) {
    res = PyNumber_Int(x);
  }
#endif
  if (likely(res)) {
#if PY_MAJOR_VERSION < 3
    if (unlikely(!PyInt_Check(res) && !PyLong_Check(res))) {
#else
    if (unlikely(!PyLong_CheckExact(res))) {
#endif
        return __Pyx_PyNumber_IntOrLongWrongResultType(res, name);
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b))) {
    if (sizeof(Py_ssize_t) >= sizeof(long))
        return PyInt_AS_LONG(b);
    else
        return PyInt_AsSsize_t(x);
  }
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_USE_PYLONG_INTERNALS
    const digit* digits = ((PyLongObject*)b)->ob_digit;
    const Py_ssize_t size = Py_SIZE(b);
    if (likely(__Pyx_sst_abs(size) <= 1)) {
        ival = likely(size) ? digits[0] : 0;
        if (size == -1) ival = -ival;
        return ival;
    } else {
      switch (size) {
         case 2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
      }
    }
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


#endif /* Py_PYTHON_H */
